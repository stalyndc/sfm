<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://lea.verou.me/">
  <title>Lea Verou’s blog</title>
  <subtitle>Web standards, Software Engineering, Product, Usability, and more</subtitle>
  <link href="https://lea.verou.me/feed.xml" rel="self"/>
  <link href="https://lea.verou.me/"/>
  <updated>2025-08-24T17:25:16Z</updated>
  <id>https://lea.verou.me/</id>
  <author>
    <name>Lea Verou</name>
    <email>lea@verou.me</email>
  </author><entry>
    <title>Check whether a CSS property is supported</title>
    <link href="https://lea.verou.me/2009/02/check-if-a-css-property-is-supported/"/>
    <updated>2009-02-10T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3</id>
    <content xml:lang="en" type="html">&lt;p&gt;Sometimes when using JavaScript, you need to determine whether a certain CSS property is supported by the current browser or not. For instance when setting opacity for an element, you need to find out whether the property that the browser supports is &lt;code&gt;opacity&lt;/code&gt;, &lt;code&gt;-moz-opacity&lt;/code&gt; (&lt;code&gt;MozOpacity&lt;/code&gt;), &lt;code&gt;-khtml-opacity&lt;/code&gt; (&lt;code&gt;KhtmlOpacity&lt;/code&gt;) or the IE proprietary &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Instead of performing a forwards &lt;strong&gt;in&lt;/strong&gt;compatible browser detect, you can easily check which property is supported with a simple conditional. The only thing you’ll need is a DOM element that exists for sure. A DOM element that exists in every page and is also easily accessible via JS (no need for &lt;code&gt;getElementsByTagName&lt;/code&gt;), is the &lt;code&gt;body&lt;/code&gt; element, but you could use the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; or even a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag (since there is a script running in the page, a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag surely exists). &lt;strong&gt;In this article we’ll use document.body, but it’s advised that you use the head or script elements, since document.body may not exist at the time your script is run.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, now that we have an element to test at, the test required is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if(&#39;opacity&#39; in document.body.style)
{
	// do stuff
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course you’d change &lt;code&gt;document.body&lt;/code&gt; with a reference to the element you’d like to test at (in case it’s not the body tag)  and &lt;code&gt;&#39;opacity&#39;&lt;/code&gt; with the name of the actual property you want to test. You can even wrap up a function to use when you want to check about the support of a certain property:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function isPropertySupported(property)
{
	return property in document.body.style;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only thing you should pay attention to, is using the JavaScript version of the CSS property (for example &lt;code&gt;backgroundColor&lt;/code&gt; instead of &lt;code&gt;background-color&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Wasn’t it easy?&lt;/p&gt;
</content>
  </entry><entry>
    <title>JS library detector</title>
    <link href="https://lea.verou.me/2009/02/js-library-detector/"/>
    <updated>2009-02-11T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=15</id>
    <content xml:lang="en" type="html">&lt;p&gt;Ever wondered which JavaScript library (if any) is hidden beneath the bells &amp;amp; whistles of each site you gazed at? Since I am a curious person, I find myself wondering every time, so after a bit of research, I wrapped up a little bookmarklet that instantly told me the answer every time.&lt;/p&gt;
&lt;p&gt;The logic behind it is that every JavaScript library creates at least one global variable with an easily recognizable name. For most JavaScript libraries, this is simply their name (Prototype, jQuery, DOMAssistant, MooTools, dojo). For some others, its something close enough to their name (YAHOO for YUI, Scriptaculous for &lt;a href=&quot;http://script.aculo.us/&quot;&gt;script.aculo.us&lt;/a&gt;, Ext for ExtJS). So if you check the precence of this global variable, you are effectively checking for the precence of the related framework. Most of them also contain a property with their version (which is usually named ‘version’ or ‘Version’ or ‘VERSION’ (in YUI)) - in fact the only library that did not contain such a property was DOMAssistant. So, after a sneak peek at their code, I could easily set up some conditionals that check whether a certain library exists in the page and if so, alert its name and version. If multiple libraries exist at the same page, multiple popups will appear.&lt;/p&gt;
&lt;p&gt;So, here is the bookmarklet:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;javascript:if(&#39;Prototype&#39;%20in%20window)%20{%20var%20ret%20=%20&#39;Prototype%20&#39;%20+%20Prototype.Version;%20if(&#39;Scriptaculous&#39;%20in%20window)%20ret%20+=%20&#39;%20with%20script.aculo.us%20&#39;%20+%20Scriptaculous.Version;%20alert(ret);%20}%20if(&#39;jQuery&#39;%20in%20window)%20alert(&#39;jQuery%20&#39;%20+%20jQuery.fn.jquery);%20if(&#39;MooTools&#39;%20in%20window)%20alert(&#39;MooTools%20&#39;%20+%20MooTools.version);%20if(&#39;YAHOO&#39;%20in%20window)%20alert(&#39;YUI%20&#39;%20+%20YAHOO.VERSION);%20if(&#39;dojo&#39;%20in%20window)%20alert(&#39;Dojo%20&#39;%20+%20dojo.version);%20if(&#39;Ext&#39;%20in%20window)%20alert(&#39;ExtJS%20&#39;%20+%20Ext.version);%20if(&#39;DOMAssistant&#39;%20in%20window)%20alert(&#39;DOMAssistant&#39;);&quot; class=&quot;cta&quot;&gt;JS library detector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just drag it to your bookmarks toolbar and it’s ready.&lt;/p&gt;
&lt;p&gt;And here is the human-readable code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if(&#39;Prototype&#39; in window)
{
	var ret = &#39;Prototype &#39; + Prototype.Version;
	if(&#39;Scriptaculous&#39; in window) ret += &#39; with script.aculo.us &#39; + Scriptaculous.Version;
	alert(ret);
}
if(&#39;jQuery&#39; in window) alert(&#39;jQuery &#39; + jQuery.fn.jquery);
if(&#39;MooTools&#39; in window) alert(&#39;MooTools &#39; + MooTools.version);
if(&#39;YAHOO&#39; in window) alert(&#39;YUI &#39; + YAHOO.VERSION);
if(&#39;dojo&#39; in window) alert(&#39;Dojo &#39; + dojo.version);
if(&#39;Ext&#39; in window) alert(&#39;ExtJS &#39; + Ext.version);
if(&#39;DOMAssistant&#39; in window) alert(&#39;DOMAssistant&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Am I nuts? Certainly. Has it been useful to me? Absolutely.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Extend Math.round, Math.ceil and Math.floor to allow for precision</title>
    <link href="https://lea.verou.me/2009/02/extend-mathround-mathceil-and-mathfloor-to-allow-precision/"/>
    <updated>2009-02-12T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=27</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;code&gt;Math.round&lt;/code&gt;, &lt;code&gt;Math.ceil&lt;/code&gt; and &lt;code&gt;Math.floor&lt;/code&gt; are very useful functions. However, when using them, I find myself many times needing to specify a precision level. You don’t always want to round to an integer, you often just want to strip away &lt;strong&gt;some&lt;/strong&gt; of the decimals.&lt;/p&gt;
&lt;p&gt;We probably all know that if we have a function to round to integers, we can round to X decimals by doing &lt;code&gt;Math.round(num*Math.pow(10,X)) /&lt;/code&gt; &lt;code&gt;Math.pow(10,X)&lt;/code&gt;. This kind of duck typing can get tedious, so usually, you roll your own function to do that. However, why not just add that extra functionality to the functions that already exist and you’re accustomed to?&lt;/p&gt;
&lt;p&gt;Let’s start with &lt;code&gt;Math.round&lt;/code&gt;. It’s the most needed one anyway.&lt;/p&gt;
&lt;p&gt;Firstly we’ll have to store the native function somewhere, since we’re going to replace it. So we do something along the lines of:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Math._round = Math.round;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s &lt;strong&gt;sigh&lt;/strong&gt; replace the native &lt;code&gt;Math.round&lt;/code&gt; with our own:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Math.round = function(number, precision)
{
	precision = Math.abs(parseInt(precision)) || 0;
	var coefficient = Math.pow(10, precision);
	return Math._round(number*coefficient)/coefficient;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And guess what? It still works the old way too, so your old scripts won’t break.&lt;/p&gt;
&lt;p&gt;So now, let’s go to &lt;code&gt;Math.ceil&lt;/code&gt; and &lt;code&gt;Math.floor&lt;/code&gt;. If you notice, the only thing that changes is the function name. Everything else is the same. So, even though we could copy-paste the code above and change the names, we would end up with triple the size of the code that we need and we would have also violated the &lt;a href=&quot;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot; title=&quot;Don&#39;t Repeat Yourself&quot;&gt;DRY&lt;/a&gt; principle. So we could put the names of the functions in an array, and loop over it instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;(function(){
	var MathFns = [&#39;round&#39;, &#39;floor&#39;, &#39;ceil&#39; ];
	for(var i = MathFns.length; i&amp;gt;-1; i--)
	{
		Math[&#39;_&#39; + MathFns[i]] = Math[MathFns[i]];
		Math[MathFns[i]] = function(number, precision)
		{
			precision = Math.abs(parseInt(precision)) || 0;
			var coefficient = Math.pow(10, precision);
			return Math[&#39;_&#39; + MathFns[i]](number*coefficient)/coefficient;
		}
   }
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why the closure? To allow us to be free in defining our variables without polluting the global namespace. In case &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; was cross-browser or if you have mutated the &lt;code&gt;Array&lt;/code&gt; prototype to add it for non-supporting ones, you could easily do that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;[&#39;round&#39;, &#39;floor&#39;, &#39;ceil&#39; ].forEach(function(funcName){
	Math[&#39;_&#39; + funcName] = Math[funcName];
	Math[funcName] = function(number, precision)
	{
		precision = Math.abs(parseInt(precision)) || 0;
		var coefficient = Math.pow(10, precision);
		return Math[&#39;_&#39; + funcName](number*coefficient)/coefficient;
	}
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No closures and much easier to read code.&lt;/p&gt;
&lt;p&gt;However, nothing comes without a cost. In this case, the cost is performance. In my tests, the new function takes about twice the time of the native one. Adding a conditional to check if the precision is falsy and use the native function directly if so, doesn’t improve the results much, and it would slow the function down for precision values &amp;gt; 0. Of course the speed would be just as much if the function was a normal one and not a replacement for Math[something], that doesn’t have anything to do with it.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Find the vendor prefix of the current browser</title>
    <link href="https://lea.verou.me/2009/02/find-the-vendor-prefix-of-the-current-browser/"/>
    <updated>2009-02-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=48</id>
    <content xml:lang="en" type="html">&lt;p&gt;As you probably know already, when browsers implement an experimental or proprietary CSS property, they prefix it with their “vendor prefix”, so that 1) it doesn’t collide with other properties and 2) you can choose whether to use it or not in that particular browser, since it’s support might be wrong or incomplete.&lt;/p&gt;
&lt;p&gt;When writing CSS you probably just include all properties and rest in peace, since browsers ignore properties they don’t know. However, when changing a style via javascript it’s quite a waste to do that.&lt;/p&gt;
&lt;p&gt;Instead of iterating over all possible vendor prefixes every time to test if a prefixed version of a specific property is supported, we can create a function that returns the current browser’s prefix and caches the result, so that no redundant iterations are performed afterwards. How can we create such a function though?&lt;/p&gt;
&lt;h3 id=&quot;things-to-consider&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/find-the-vendor-prefix-of-the-current-browser/#things-to-consider&quot;&gt;Things to consider&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The way CSS properties are converted their JS counterparts: Every character after a dash is capitalized, and all others are lowercase. The only exception is the new &lt;code&gt;-ms-&lt;/code&gt; prefixed properties: Microsoft did it again and made their JS counterparts start with a lowercase &lt;code&gt;m&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;Vendor prefixes always start with a dash and end with a dash&lt;/li&gt;
&lt;li&gt;Normal CSS properties never start with a dash&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;algorithm&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/find-the-vendor-prefix-of-the-current-browser/#algorithm&quot;&gt;Algorithm&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Iterate over all supported properties and find one that starts with a known prefix.&lt;/li&gt;
&lt;li&gt;Return the prefix.&lt;/li&gt;
&lt;li&gt;If no property that starts with a known prefix was found, return the empty string.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;javascript-code&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/find-the-vendor-prefix-of-the-current-browser/#javascript-code&quot;&gt;JavaScript code&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function getVendorPrefix()
{
	var regex = /^(Moz|Webkit|Khtml|O|ms|Icab)(?=[A-Z])/;

	var someScript = document.getElementsByTagName(&#39;script&#39;)[0];

	for(var prop in someScript.style)
	{
		if(regex.test(prop))
		{
			// test is faster than match, so it&#39;s better to perform
			// that on the lot and match only when necessary
			return prop.match(regex)[0];
		}

	}

	// Nothing found so far?
	return &#39;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt; Don’t try to use someScript.style.hasOwnProperty(prop). It’s missing on purpose, since if these properties aren’t set on the particular element, hasOwnProperty will return false and the property will not be checked.&lt;/p&gt;
&lt;h3 id=&quot;browser-bugs&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/find-the-vendor-prefix-of-the-current-browser/#browser-bugs&quot;&gt;Browser bugs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In a perfect world we would be done by now. However, if you try running it in Webkit based browsers, you will notice that the empty string is returned. This is because for some reason, Webkit does not enumerate over empty CSS properties. To solve this, we’d have to check for the support of a property that exists in all webkit-based browsers. This property should be one of the oldest -webkit-something properties that were implemented in the browser, so that our function returns correct results for as old browser versions as possible. &lt;code&gt;-webkit-opacity&lt;/code&gt; seems like a good candidate but I’d appreciate any better or more well-documented picks. We’d also have to test &lt;code&gt;-khtml-opacity&lt;/code&gt; as &lt;a href=&quot;http://webkit.org/blog/22/css3-goodies-borders-and-backgrounds/#comment-121&quot;&gt;it seems that Safari had the -khtml- prefix before the -webkit- prefix&lt;/a&gt;. So the updated code would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function getVendorPrefix()
{
	var regex = /^(Moz|Webkit|Khtml|O|ms|Icab)(?=[A-Z])/;

	var someScript = document.getElementsByTagName(&#39;script&#39;)[0];

	for(var prop in someScript.style)
	{
		if(regex.test(prop))
		{
			// test is faster than match, so it&#39;s better to perform
			// that on the lot and match only when necessary
			return prop.match(regex)[0];
		}

	}

	// Nothing found so far? Webkit does not enumerate over the CSS properties of the style object.
	// However (prop in style) returns the correct value, so we&#39;ll have to test for
	// the precence of a specific property
	if(&#39;WebkitOpacity&#39; in someScript.style) return &#39;Webkit&#39;;
	if(&#39;KhtmlOpacity&#39; in someScript.style) return &#39;Khtml&#39;;

	return &#39;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By the way, if Webkit ever fixes that bug, the result will be returned straight from the loop, since we have added the Webkit prefix in the regexp as well.&lt;/p&gt;
&lt;h3 id=&quot;performance-improvements&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/find-the-vendor-prefix-of-the-current-browser/#performance-improvements&quot;&gt;Performance improvements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is no need for all this code to run every time the function is called. The vendor prefix does not change, especially during the session :P Consequently, we can cache the result after the first time, and return the cached value afterwards:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function getVendorPrefix()
{
	if(&#39;result&#39; in arguments.callee) return arguments.callee.result;

	var regex = /^(Moz|Webkit|Khtml|O|ms|Icab)(?=[A-Z])/;

	var someScript = document.getElementsByTagName(&#39;script&#39;)[0];

	for(var prop in someScript.style)
	{
		if(regex.test(prop))
		{
			// test is faster than match, so it&#39;s better to perform
			// that on the lot and match only when necessary
			return arguments.callee.result = prop.match(regex)[0];
		}

	}

	// Nothing found so far? Webkit does not enumerate over the CSS properties of the style object.
	// However (prop in style) returns the correct value, so we&#39;ll have to test for
	// the precence of a specific property
	if(&#39;WebkitOpacity&#39; in someScript.style) return arguments.callee.result = &#39;Webkit&#39;;
	if(&#39;KhtmlOpacity&#39; in someScript.style) return arguments.callee.result = &#39;Khtml&#39;;

	return arguments.callee.result = &#39;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;afterthoughts&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/find-the-vendor-prefix-of-the-current-browser/#afterthoughts&quot;&gt;Afterthoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Please don’t use this as a browser detection function! Apart from the fact that browser detects are a bad way to code 99.9% of the time, it’s also unreliable for IE, since Microsoft added a vendor prefix in IE8 only. Before that it followed the classic attitude “We have a large market share so standards and conventions don’t apply to us”.&lt;/li&gt;
&lt;li&gt;There are some browsers that support multiple prefixes. If that is crucial for you, you may want to return an array with all prefixes instead of a string. It shouldn’t be difficult to alter the code above to do that. I’ll only inform you that from my tests, Opera also has &lt;code&gt;Apple&lt;/code&gt;, &lt;code&gt;Xn&lt;/code&gt; and &lt;code&gt;Wap&lt;/code&gt; prefixes and Safari and Chrome also have &lt;code&gt;Khtml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I wish there was a list somewhere with ALL vendor prefixes… If you know such a page, please leave a comment.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry><entry>
    <title>CSS3 border-radius, today</title>
    <link href="https://lea.verou.me/2009/02/css3-border-radius-today/"/>
    <updated>2009-02-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=40</id>
    <content xml:lang="en" type="html">&lt;p&gt;This is the first one from a series of articles I’m going to write about &lt;em&gt;using CSS3 properties or values &lt;strong&gt;today&lt;/strong&gt;&lt;/em&gt;. I’ll cover everything I have found out while using them, including various browser quirks and bugs I know of or have personally filed regarding them. In this part I’ll discuss ways to create rounded corners without images and if possible without JavaScript in the most cross-browser fashion.&lt;/p&gt;
&lt;p&gt;I will not cover irregular curves in this article, since I’ve yet to find any person who actually needed them, even once, including myself and browser support for them is far worse.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt; The contents of a container with border-radius set are NOT clipped according to the border radius in any implementation/workaround mentioned below, and no, setting overflow to hidden won’t help (and even if it did, you’d risk text missing). You should specify a proper border-radius and/or padding to them if you want them to  follow their container’s curves properly. This could allow for some nice effects but most of the time it’s just a pain in the a$$.&lt;/p&gt;
&lt;h3 id=&quot;mozilla-firefox&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/css3-border-radius-today/#mozilla-firefox&quot;&gt;Mozilla Firefox&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Firefox supports rounded corners since version 2. However incomplete support in version 2 made designers sceptical to use them. The problem was that the rounded corners created were aliased back then, and also did not crop the background image, so if you had one, no rounded corners for you. This was fixed in FF3, so now more and more designers are starting to use them. The syntax is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-moz-border-radius: [Number][unit];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is effectively a shorthand for:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-moz-border-radius-bottomleft: [Number][unit];
-moz-border-radius-bottomright: [Number][unit];
-moz-border-radius-topleft: [Number][unit];
-moz-border-radius-topright: [Number][unit];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You don’t need to specify all these properties though, even if you wan’t different measures per corner, as &lt;code&gt;-moz-border-radius&lt;/code&gt; functions as a regular CSS shorthand, allowing us to specify all 4 corners at once. It can be used in the following ways:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-moz-border-radius: [Top-left and Bottom-right] [Top-right and bottom-left];
-moz-border-radius: [Top-left] [Top-right and bottom-left] [Bottom-right];
-moz-border-radius: [Top-left] [Top-right] [Bottom-right] [Bottom-left];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A good mnemonic rule for the order of the values is that they are arranged clockwise, starting from Top left.&lt;/p&gt;
&lt;h3 id=&quot;apple-safari&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/css3-border-radius-today/#apple-safari&quot;&gt;Apple Safari&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Safari also implements CSS3 border-radius, but in a quite different way. If you want to set all four corners to the same border-radius, the process is almost identical. The only thing needed is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-webkit-border-radius: [Number][unit]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, things start to get tricky when you want to specify different radiuses per corner. Webkit does not support a shorthand syntax, since it chose to implement the spec closely, sacrifycing clarity but allowing for more flexibility. To cut a long story short, &lt;a href=&quot;http://www.css3.info/border-radius-apple-vs-mozilla/&quot; title=&quot;Read more about the difference between Mozilla&#39;s and Webkit&#39;s implementations&quot;&gt;Webkit supports irregular curves instead of just circle quarters on each corner&lt;/a&gt;, so if you try to add 2 values, the result will be  &lt;a href=&quot;http://www.css3.info/wp-content/uploads/2007/06/border-radius.png&quot;&gt;horrendous&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, you have to specify all four properties (or less if you want some of them to be square). To make matters even worse, the way the names of the properties are structured is different. There is one more dash, and the position of the corner styled by each property is not at the end but before &lt;em&gt;-radius&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-webkit-border-top-left-radius
-webkit-border-top-right-radius
-webkit-border-bottom-left-radius
-webkit-border-bottom-right-radius
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt; If the dimensions of your element are not enough to accomodate the rounded corners, they will be square in Webkit-based browsers. Specify a &lt;code&gt;min-width&lt;/code&gt;/&lt;code&gt;min-height&lt;/code&gt; or enough padding to avoid this.&lt;/p&gt;
&lt;h3 id=&quot;google-chrome&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/css3-border-radius-today/#google-chrome&quot;&gt;Google Chrome&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since Google Chrome is based on Webkit, its border-radius support is like Safari’s. However, it’s haunted by an ugly bug: It renders the rounded corners &lt;strong&gt;aliased&lt;/strong&gt;. :(&lt;/p&gt;
&lt;h3 id=&quot;opera&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/css3-border-radius-today/#opera&quot;&gt;Opera&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The bad news is that Opera does not implement the CSS3 border-radius yet (it will in the future, &lt;a href=&quot;http://twitter.com/dstorey/status/1177020119&quot;&gt;confirmed&lt;/a&gt;). The good news is that it allows for SVG backgrounds since version 9.5. The even better news is that it supports &lt;code&gt;data://&lt;/code&gt; URIs, so you can embed the SVG in your CSS, without resorting to external files as &lt;a href=&quot;http://ejohn.org/blog/talk-performance-improvements-in-browsers/#comment-345434&quot;&gt;someone recently pointed out to me&lt;/a&gt;. &lt;a href=&quot;http://a.deveria.com/&quot;&gt;Alexis Deveria&lt;/a&gt; was clever enough to even &lt;a href=&quot;http://a.deveria.com/roundgen/&quot;&gt;create a generator for them&lt;/a&gt;, so that you could easily specify the background, border width and border-color and get the data URI instantly. This is a quite useful tool, but lacks some features (for instance you might want the background to be semi-transparent, like the one used in this blog). It’s ok for most cases though.&lt;/p&gt;
&lt;p&gt;While Opera’s current lack of border-radius support is disappointing, you can utilize it pretty well with this method and if you know SVG well enough yourself you can create stunning effects.&lt;/p&gt;
&lt;h3 id=&quot;internet-explorer-(aka-%E2%80%9Cthe-web-designer%E2%80%99s-nemesis%E2%80%9D)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/css3-border-radius-today/#internet-explorer-(aka-%E2%80%9Cthe-web-designer%E2%80%99s-nemesis%E2%80%9D)&quot;&gt;Internet Explorer (aka “The Web designer’s nemesis”)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There’s no need to tell you that IE doesn’t support border-radius or SVG backgrounds, even in it’s latest version, right? You probably guessed already. There is some hope here though, a clever guy named &lt;a href=&quot;http://dillerdesign.wordpress.com/&quot;&gt;Drew Diller&lt;/a&gt; carefully researched the MS-proprietary &lt;a href=&quot;http://en.wikipedia.org/wiki/Vector_Markup_Language&quot;&gt;VML language&lt;/a&gt; and came up with &lt;a href=&quot;http://www.dillerdesign.com/experiment/DD_roundies/&quot;&gt;a script that utilizes it to create rounded corners in IE&lt;/a&gt;. The bad news is that MS when releasing IE8 fixed some things and messed up others, so the script barely works on it. It also has some other &lt;a href=&quot;http://www.dillerdesign.com/experiment/DD_roundies/#lacking&quot;&gt;shortcomings&lt;/a&gt;, but for most cases it can be a great tool (for IE7 and below, unless MS surprises us and fixes the VML regressions in IE8 before the stable). Also, if rounded corners are not crucial to your design and you don’t get too much traffic from IE users, you might consider ignoring IE altogether and having square corners in it. This way you’re also serving the greater good, since when IE users see your site in a supporting browser, they’ll conclude that “Oh, this browser shows the web nicer!” and the site will still be just as usable (in most cases rounded corners are not that crucial for usability, although &lt;a href=&quot;http://www.usabilitypost.com/2008/09/24/the-function-of-rounded-corners/&quot;&gt;they enchance it a bit&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&quot;afterword&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/css3-border-radius-today/#afterword&quot;&gt;Afterword&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I hope this article helped you learn something new. If you found any mistakes or inaccuracies, don’t hesitate to leave a comment, I don’t know everything and I’m not god. :)&lt;/p&gt;
&lt;p&gt;One thing I have in mind is creating a PHP script that takes care of all these incompatibilities for you and caches the result. I don’t know if I’ll ever find the time to write it though, especially before someone else does :P&lt;/p&gt;
</content>
  </entry><entry>
    <title>Bulletproof, cross-browser RGBA backgrounds, today</title>
    <link href="https://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/"/>
    <updated>2009-02-15T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=70</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; &lt;a href=&quot;http://lea.verou.me/rgba.php/&quot;&gt;&lt;strong&gt;New version&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First of all, happy Valentine’s day for yersterday. :) This is the second part of my “&lt;a href=&quot;http://lea.verou.me/2009/02/css3-border-radius-today/&quot;&gt;Using CSS3 today&lt;/a&gt;” series. This article discusses current RGBA browser support and ways to use RGBA backgrounds in non-supporting browsers. Bonus gift: A PHP script of mine that creates fallback 1-pixel images on the fly that allow you to easily utilize RGBA backgrounds in any browser that can support png transparency. In addition, the images created are forced to be cached by the client and they are saved on the server’s hard drive for higher performance.&lt;/p&gt;
&lt;h3 id=&quot;browsers-that-currently-support-rgba&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/#browsers-that-currently-support-rgba&quot;&gt;Browsers that currently support RGBA&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;These are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox 3+&lt;/li&gt;
&lt;li&gt;Safari 2+&lt;/li&gt;
&lt;li&gt;Opera 10 (still in beta)&lt;/li&gt;
&lt;li&gt;Google Chrome&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In these browsers you can write CSS declarations like:&lt;/p&gt;
&lt;p&gt;background: rgba(255,200,35,0.5) url(somebackground.png) repeat-x 0 50%;
border: 1px solid rgba(0,0,0,0.3);
color: rgba(255,255,255,0.8);&lt;/p&gt;
&lt;p&gt;And they will work flawlessly.&lt;/p&gt;
&lt;h3 id=&quot;internet-explorer&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/#internet-explorer&quot;&gt;Internet Explorer&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Surprisingly, it seems that &lt;a href=&quot;http://www.hedgerwow.com/360/dhtml/rgba/demo.php&quot;&gt;Internet Explorer supported RGBA backgrounds long before the others&lt;/a&gt;. Of course, with it’s &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms532997.aspx&quot;&gt;very own properietary syntax&lt;/a&gt;, as usual:&lt;/p&gt;
&lt;p&gt;filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#550000FF, endColorstr=#550000FF);&lt;/p&gt;
&lt;p&gt;And since nothing is ever simple with IE, IE8 &lt;a href=&quot;http://blogs.msdn.com/ie/archive/2008/09/08/microsoft-css-vendor-extensions.aspx&quot;&gt;requires a special syntax which has to be put before the first one&lt;/a&gt; to work properly in IE8 beta1:&lt;/p&gt;
&lt;p&gt;-ms-filter: “progid:DXImageTransform.Microsoft.gradient(startColorstr=#550000FF, endColorstr=#550000FF)”;&lt;/p&gt;
&lt;p&gt;The code above actually draws a gradient from &lt;code&gt;rgba(0,0,255,0.33)&lt;/code&gt; to &lt;code&gt;rgba(0,0,255,0.33)&lt;/code&gt; using a Microsoft-proprietary “extended” hex format that places the Alpha parameter first (instead of last) and in the range of 00-FF (instead of 0-1). The rest is a usual hex color, in that case #0000FF.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt; The “gradients” that are created via the gradient filter are placed &lt;strong&gt;on top&lt;/strong&gt; of any backgrounds currently in effect. So, if you want to have a background image as well, the result may not be what you expected. If you provide a solid color as a background, it will also not work as expected (no alpha transparency), since the gradients created are not exactly backgrounds, they are just layers &lt;strong&gt;on top&lt;/strong&gt; of backgrounds.&lt;/p&gt;
&lt;h3 id=&quot;problems-with-the-filter-method&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/#problems-with-the-filter-method&quot;&gt;Problems with the filter method&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Filters are bad for client-side performance.&lt;/li&gt;
&lt;li&gt;Filters cause the text rendering to be aliased and especially when it’s bold and there is no background-color set it becomes completely unreadable. (the worst disadvantage if you ask me)&lt;/li&gt;
&lt;li&gt;Filters only work with IE. What about Firefox 2- and Opera 9.6-?&lt;/li&gt;
&lt;li&gt;Filters are lengthy (especially now that you have to include 2 different syntaxes) so they significantly increase the size of your CSS when used frequently.&lt;/li&gt;
&lt;li&gt;You have to convert the red, green and blue values to hex to use that method.&lt;/li&gt;
&lt;li&gt;To use a filter, the element has to &lt;a href=&quot;http://haslayout.net/&quot;&gt;have Layout&lt;/a&gt;. This is usually done via zoom:1. More non-standard clutter in your CSS.&lt;/li&gt;
&lt;li&gt;Doesn’t play along well with other workarounds, since it doesn’t modify the background of the element.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, personally, I only use that approach sparingly, in particular, only when “no/minimum external files” is a big requirement.&lt;/p&gt;
&lt;h3 id=&quot;a-bulletproof-solution&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/#a-bulletproof-solution&quot;&gt;A bulletproof solution&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My favored approach is to use rgba() for all RGBA-capable browsers and fallback pngs for the ones that don’t support RGBA. However, creating the pngs in Photoshop, or a similar program and then uploading them is too much of a fuss for me to bare (I get bored easily :P ). So, I created a small PHP script that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creates a 1-pixel png image with the parameters passed for red, green, blue and alpha. No need to convert to hex.&lt;/li&gt;
&lt;li&gt;Supports named colors, to speed up typing even more for colors that you use commonly in a site (it includes white and black by default, but you may easily add as many as you like).&lt;/li&gt;
&lt;li&gt;Stores the generated images on the server, so that they don’t have to be created every time (generating images on the fly has quite an important performance impact).&lt;/li&gt;
&lt;li&gt;Forces the images to be cached on the browser so that they don’t have to be generated every time (even though their size is very small, about 73 bytes).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here it is: &lt;a href=&quot;https://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/uploads/rgba.zip&quot;&gt;rgba.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You use it like this:&lt;/p&gt;
&lt;p&gt;background: url(rgba.php?r=255&amp;amp;g=100&amp;amp;b=0&amp;amp;a=50) repeat;
background: rgba(255,100,0,0.5);&lt;/p&gt;
&lt;p&gt;or, for named colors:&lt;/p&gt;
&lt;p&gt;background: url(rgba.php?name=white&amp;amp;a=50) repeat;
background: rgba(255,255,255,0.5);&lt;/p&gt;
&lt;p&gt;Browsers that are RGBA-aware will follow the second background declaration and will not even try to fetch the png. Browsers that are RGBA-incapable will ignore the second declaration, since they don’t understand it, and stick with the first one. &lt;strong&gt;Don’t change the order of the declarations: The png one goes first, the rgba() one goes second.&lt;/strong&gt; If you put the png one second, it will always be applied, even if the browser &lt;strong&gt;does&lt;/strong&gt; support rgba.&lt;/p&gt;
&lt;p&gt;Before you use it, open it with an editor to specify the directory you want it to use to store the created pngs (the default is &lt;code&gt;&#39;colors/&#39;&lt;/code&gt;) and add any color names you want to be able to easily address (the defaults are white and black). If the directory you specify does not exist or isn’t writeable you’ll get an error.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt; You have to enter the alpha value in a scale of 0 to 100, and not from 0 to 1 as in the CSS. This is because you have to urlencode dots to transfer them via a URI and it would complicate things for anyone who used this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; It seems that IE8 sometimes doesn’t cache the image produced. I should investigate this further.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT: If your PHP version is below 5.1.2 perform &lt;a href=&quot;http://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/#comment-101&quot;&gt;this change&lt;/a&gt; in the PHP file or it won’t work.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;why-not-data%3A%2F%2F-uris%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/#why-not-data%3A%2F%2F-uris%3F&quot;&gt;Why not data:// URIs?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Of course, you could combine the IE gradient filter, rgba() and &lt;code&gt;data://&lt;/code&gt; URIs for &lt;a href=&quot;http://www.webdevelopedia.com/better_opacity.html&quot;&gt;a cross-browser solution that does not depend on external files&lt;/a&gt;. However, this approach has some disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All the &lt;a href=&quot;https://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/#filter-issues&quot;&gt;disadvantages of filters mentioned above&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can’t be spontaneous in your CSS and changes are difficult. Every time you want to use RGBA, you have to resort to some converter to create the png and it’s &lt;code&gt;data://&lt;/code&gt; URI. Unless you are some kind of a cyborg with an embedded base64 encoder/decoder in your head :P&lt;/li&gt;
&lt;li&gt;Larger filesize (you have to use 4-5 declarations (the rgba() one, the &lt;code&gt;data://&lt;/code&gt; one, 2 filters, one for IE7- and one for IE8 and a &lt;code&gt;zoom:1;&lt;/code&gt; to give the element “layout” so that filters can be applied) instead of 2, and the data:// URI has the same size as the png). Also, the &lt;code&gt;data://&lt;/code&gt; URI can not be cached so every time you use it, you increase the filesize even more.  Ok, you save an http request per use, but is it worth it?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and some advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You will not see the site without a background for even a single millisecond. Since the png is embedded in the CSS, it’s loaded as soon as the CSS itself is loaded. If your site background is too dark and you rely on the RGBA background to make the content legible, you might want to consider this solution.&lt;/li&gt;
&lt;li&gt;No external files, no extra http requests.&lt;/li&gt;
&lt;li&gt;The filter method works in IE6- without the script for transparent PNGs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Choose the method that fits your needs better. :)&lt;/p&gt;
&lt;h3 id=&quot;rgba-is-not-only-for-backgrounds!&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/#rgba-is-not-only-for-backgrounds!&quot;&gt;RGBA is not only for backgrounds!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It’s also for every CSS property that accepts color values. However, backgrounds in most cases are the easiest to workaround. As for borders, if you want solid ones, you can simulate them sometimes by wrapping a padded container with an RGBA background around your actual one and giving it as much padding as your desired border-width. For text color, sometimes you can fake that with opacity. However, these “solutions” are definitely incomplete, so you’d probably have to wait for full RGBA support and provide solid color fallbacks for those (unless someone comes up with an ingenious solution in &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;, it’s common these days :P ).&lt;/p&gt;
</content>
  </entry><entry>
    <title>Silent, automatic updates are the way to go</title>
    <link href="https://lea.verou.me/2009/02/silent-automatic-updates-are-the-way-to-go/"/>
    <updated>2009-02-18T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=100</id>
    <content xml:lang="en" type="html">&lt;p&gt;Recently, PPK stated that &lt;a href=&quot;http://www.quirksmode.org/blog/archives/2009/02/state_of_the_br.html#link4&quot;&gt;he hates Google Chrome’s automatic updates&lt;/a&gt;. I disagree. In fact, I think that all browser vendors should enforce automatic updates as violently as Google Chrome does. There should be no option to disable them. For anybody.&lt;/p&gt;
&lt;h3 id=&quot;but-what-about-the-user%E2%80%99s-freedom-of-choice%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/silent-automatic-updates-are-the-way-to-go/#but-what-about-the-user%E2%80%99s-freedom-of-choice%3F&quot;&gt;But what about the user’s freedom of choice?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This might sound a bit facist at start, but imagine a world where all browsers would get automatically updated, without the possiblity of an opt-out. If you went online, you would be bound to have the very latest version, regardless of how computer (i)literate you were (Many — if not most — home users that don’t upgrade are like that because they think it’s too difficult for their computer expertise level). Sure, if you were a developer you wouldn’t be able to test a website in older browser versions. But why would you need to do so? If everybody had the latest browser version, you would only develop for the latest version and perhaps for the next one (via nightlies and betas, that could still be separate in that ideal world).&lt;/p&gt;
&lt;p&gt;Imagine a world where your job wouldn’t have to involve tedious IE6 (and in a few weeks, no IE7 either), Firefox 2, Opera 9.5 and Safari 3.1- testing. A world where you would spend your work hours on more creative stuff, where you wouldn’t want to bang your head on the wall because you know you did nothing wrong but the ancient browser that you are currently testing in is just incompetent and YOU have to fix it’s sh*t. A world where the size of your Javascript code (and the JS libraries’ code) would be half its size and constantly decreasing as new browser versions come out. A world where you would only have 1 CSS file in most websites you develop. A world where you wouldn’t feel so bad because IE8 doesn’t support opacity, border-radius or SVG, because you would know that in 1-2 years everyone would have IE9 and it will probably support them. A world where designing a website would be as much fun as designing your personal blog.&lt;/p&gt;
&lt;p&gt;Doesn’t such a world sound like a dream? Would it harm anyone? Users would browse a much lighter and beautiful web, with a more feature-rich and secure browser. Developers would work half as much to produce better results and they would enjoy their work more.&lt;/p&gt;
&lt;h3 id=&quot;what-about-corporate-intranets-and-abandoned-sites-that-won%E2%80%99t-keep-up%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/silent-automatic-updates-are-the-way-to-go/#what-about-corporate-intranets-and-abandoned-sites-that-won%E2%80%99t-keep-up%3F&quot;&gt;What about corporate intranets and abandoned sites that won’t keep up?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Oh come on, that isn’t a good enough reason to not make that dream come true! Companies and individuals could be allowed to have an older version of the browser installed &lt;strong&gt;as well&lt;/strong&gt;. They still wouldn’t be able to opt out from the automatic upgrade, but they could apply somehow to have an older version of the browser in the same system as well. Similarly to what happens now with browser betas. People would use the older version to access corporate intranet applications and obsolete sites and the latest version to surf the web. I may be overly optimistic, but I think that if a user had both versions of a browser installed, (s)he would prefer the latest wherever (s)he can. Perhaps another step towards enforcing that would be if the OS prevented an older browser version from being set as the default browser, but I guess that would be too hard to do, especially if the browser in question is not the OS default one.&lt;/p&gt;
&lt;h3 id=&quot;other-people-who-agree-with-me&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/silent-automatic-updates-are-the-way-to-go/#other-people-who-agree-with-me&quot;&gt;Other people who agree with me&lt;a href=&quot;http://www.aaronboodman.com/2009/01/update-fail.html&quot;&gt;&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaronboodman.com/2009/01/update-fail.html&quot;&gt;Aaron Boodman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://directwebremoting.org/blog/joe/2009/02/04/undoable_silent_autoupdate.html&quot;&gt;Joe Walker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What’s &lt;strong&gt;your&lt;/strong&gt; opinion?&lt;/p&gt;
</content>
  </entry><entry>
    <title>20 things you should know when not using a JS library</title>
    <link href="https://lea.verou.me/2009/02/20things-you-should-know-when-not-using-a-js-library/"/>
    <updated>2009-02-22T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=119</id>
    <content xml:lang="en" type="html">&lt;p&gt;You might just dislike JavaScript libraries and the trend around them, or the project you’re currently working on might be too small for a JavaScript library. In both cases, I understand, and after all, who am I to judge you? I don’t use a library myself either (at least not one that you could’ve heard about  ;) ), even though I admire the ingenuity and code quality of some.&lt;/p&gt;
&lt;p&gt;However, when you take such a brave decision, it’s up to you to take care of those problems that JavaScript libraries carefully hide from your way. A JavaScript library’s purpose isn’t only to provide shortcuts to tedious tasks and allow you to easily add cool animations and Ajax functionality as many people (even library users) seem to think. Of course these are things that they are bound to offer if they want to succeed, but not the only ones. JavaScript libraries also have to workaround browser differences and bugs and this is the toughest part, since they have to constantly keep up with browser releases and their respective bugs and judge which ones are common enough to deserve workaround and which ones are so rare that would bloat the library without being worth it. Sometimes I think that nowadays, how good of a JavaScript developer you are doesn’t really depend on how well you know the language, but rather on how many browser bugs you’ve heard/read/know/found out. :P&lt;/p&gt;
&lt;p&gt;The purpose of this post is to let you know about the browser bugs and incompatibilities that you are most likely to face when deciding againist the use of a JavaScript library. Knowledge is power, and only if you know about them beforehand you can workaround them without spending countless debugging hours wondering “WHAT THE…”. And even if you do use a JavaScript library, you will learn to appreciate the hard work that has been put in it even more.&lt;/p&gt;
&lt;p&gt;Some of the things mentioned below might seem elementary to many of you. However, I wanted this article to be fairly complete and contain as many common problems as possible, without making assumptions about the knowledge of my readers (as someone said, “assumption is the mother of all fuck-ups” :P ). After all, it does no harm if you read something that you already know, but it does if you remain ignorant about something you ought to know. I hope that even the most experienced among you, will find at least one thing they didn’t know very well or had misunderstood (unless I’m honoured to have library authors reading this blog, which in that case, you probably know all the facts mentioned below :P ) . If you think that something is missing from the list, feel free to suggest it in the comments, but have in mind that I conciously omitted many things because I didn’t consider them common enough.&lt;/p&gt;
&lt;h3 id=&quot;dom&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/20things-you-should-know-when-not-using-a-js-library/#dom&quot;&gt;DOM&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;getElementById(&#39;foo&#39;)&lt;/code&gt; also returns elements with &lt;code&gt;name=&amp;quot;foo&amp;quot;&lt;/code&gt; in IE and older versions of Opera.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByTagName(&#39;*&#39;)&lt;/code&gt; returns &lt;strong&gt;no&lt;/strong&gt; elements in IE5.5 and also returns comment nodes in all versions of IE (In case you’re wondering: &lt;code&gt;DOCTYPE&lt;/code&gt; declaration will count, Conditional comments will not).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByClassName()&lt;/code&gt; in Opera (even Opera 10 Alpha) doesn’t match elements with 2 or more classes when the one you’re looking for is not the first but it’s also a substring of the first. Read the discussion between me and John Resig on the latter’s blog post mentioned below if this seems a bit unclear.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.quirksmode.org/dom/w3c_core.html#t71&quot;&gt;There is no &lt;code&gt;element.children&lt;/code&gt; collection in Firefox 3-&lt;/a&gt;. You have to create it yourself by filtering the &lt;code&gt;childNodes&lt;/code&gt; collection if it doesn’t exist.&lt;/li&gt;
&lt;li&gt;If your code involves preformatted elements (for instance if you are making a syntax highlighter), beware when setting the &lt;code&gt;innerHTML&lt;/code&gt; of those: &lt;a href=&quot;http://www.quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html&quot;&gt;IE won’t preserve line breaks (&lt;code&gt;&#92;r&#92;n&lt;/code&gt; s) and whitespace&lt;/a&gt;. You have to use &lt;code&gt;outerHTML&lt;/code&gt;, which will actually replace the element so you should find a way to obtain a reference to the newly created one in case you still need to perform stuff on it.&lt;/li&gt;
&lt;li&gt;To get the dimensions of the viewport, &lt;a href=&quot;http://www.quirksmode.org/dom/w3c_cssom.html#t00&quot;&gt;standard compliant browsers use &lt;code&gt;window.innerWidth&lt;/code&gt; (and &lt;code&gt;innerHeight&lt;/code&gt;)&lt;/a&gt; whereas IE uses &lt;code&gt;document.documentElement.clientWidth&lt;/code&gt; (and &lt;code&gt;clientHeight&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;To get the scroll offsets of the current page, &lt;a href=&quot;http://www.quirksmode.org/dom/w3c_cssom.html#t02&quot;&gt;standard compliant browsers use &lt;code&gt;window.pageXOffset&lt;/code&gt; (and &lt;code&gt;pageYOffset&lt;/code&gt;)&lt;/a&gt; whereas IE uses &lt;code&gt;document.documentElement.scrollTop&lt;/code&gt; (and &lt;code&gt;scrollLeft&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;To make matters worse, in both cases above, you need to use &lt;code&gt;document.body&lt;/code&gt; instead of &lt;code&gt;document.documentElement&lt;/code&gt; when in Quirks mode.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;John Resig (of the jQuery fame), recently &lt;a href=&quot;http://ejohn.org/blog/the-dom-is-a-mess/&quot;&gt;posted a great presentation&lt;/a&gt;, which summarized some browser bugs related to DOM functions. A few of the bugs/inconsistencies mentioned above are derived from that presentation.&lt;/p&gt;
&lt;h3 id=&quot;events&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/20things-you-should-know-when-not-using-a-js-library/#events&quot;&gt;Events&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;When using IE’s &lt;code&gt;attachEvent()&lt;/code&gt; the &lt;code&gt;this&lt;/code&gt; reference inside the callback refers to the useless &lt;code&gt;window&lt;/code&gt; object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventObject.target&lt;/code&gt; is &lt;code&gt;eventObject.srcElement&lt;/code&gt; in IE&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventObject.stopPropagation()&lt;/code&gt; is &lt;code&gt;eventObject.cancelBubble = true;&lt;/code&gt; in IE&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventObject.preventDefault()&lt;/code&gt; is &lt;code&gt;eventObject.returnValue = false;&lt;/code&gt; in IE&lt;/li&gt;
&lt;li&gt;There are many more event object incompatibilities for specific events (the ones above are for &lt;strong&gt;all&lt;/strong&gt; events). Take a trip to &lt;a href=&quot;http://www.quirksmode.org/dom/w3c_events.html&quot;&gt;QuirksMode&lt;/a&gt; for more information.&lt;/li&gt;
&lt;li&gt;IE leaks horribly (especially IE6) in &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb250448.aspx&quot;&gt;various cases&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you register the same event handler X times, IE fires it X times.&lt;/li&gt;
&lt;li&gt;Determining when the DOM is ready is &lt;strong&gt;a complete mess&lt;/strong&gt;. Firefox and Opera 9+ support the &lt;code&gt;DOMContentLoaded&lt;/code&gt; event, Safari doesn’t but &lt;a href=&quot;http://peter.michaux.ca/articles/the-window-onload-problem-still#webkitAndDocumentReadyState&quot;&gt;you can check it’s &lt;code&gt;document.readyState&lt;/code&gt; property&lt;/a&gt; and &lt;a href=&quot;http://peter.michaux.ca/articles/the-window-onload-problem-still#InternetExplorerAndDocumentReadyState&quot;&gt;in IE &lt;code&gt;document.readyState&lt;/code&gt; is unreliable&lt;/a&gt; and you should either &lt;a href=&quot;http://peter.michaux.ca/articles/the-window-onload-problem-still#InternetExplorerAndDefer&quot;&gt;inject a deferred script&lt;/a&gt;, either &lt;a href=&quot;http://javascript.nwbox.com/IEContentLoaded/&quot;&gt;poll the DOM untill there are no errors&lt;/a&gt; or &lt;a href=&quot;http://dean.edwards.name/weblog/2005/09/busted2/&quot;&gt;use an external behavior file&lt;/a&gt;. Of course you could always just put &lt;a href=&quot;http://peter.michaux.ca/articles/the-window-onload-problem-still#bottomScript&quot;&gt;a &lt;code&gt;script&lt;/code&gt; tag at the bottom of the page, just before the &lt;code&gt;body&lt;/code&gt; closing tag, which will fire all attached handlers&lt;/a&gt; which is actually the best approach in terms of which way fires earliest (but not too early) according to my tests, but that hardly qualifies as unobtrusive…&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(edit, thanks Sobral!)&lt;/strong&gt; The Event object is not passed as a parameter to the callback but resides in &lt;code&gt;window.event&lt;/code&gt; in older versions of IE&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;type-detection&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/20things-you-should-know-when-not-using-a-js-library/#type-detection&quot;&gt;Type detection&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;typeof&lt;/code&gt; operator is almost useless:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;typeof null == &#39;object&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeof new String(&#39;foo&#39;) == &#39;object&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeof [] == &#39;object&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://thinkweb2.com/projects/prototype/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/&quot;&gt;Use Object.prototype.toString instead&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;css&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/20things-you-should-know-when-not-using-a-js-library/#css&quot;&gt;CSS&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Although most CSS properties are converted to their JavaScript equivalents in a standard way (characters after dashes are Uppercase, others are lowercase, the dashes get removed), float is an exception: It’s converted to cssFloat in most browsers and styleFloat in IE. Check &lt;a href=&quot;http://lea.verou.me/2009/02/check-if-a-css-property-is-supported/&quot;&gt;which one exists&lt;/a&gt; and use that.&lt;/li&gt;
&lt;li&gt;Getting the current (computed) style of an element is another &lt;strong&gt;complete mess&lt;/strong&gt;. IE uses &lt;code&gt;element.currentStyle[propertyJS]&lt;/code&gt; whereas standard compliant browsers use &lt;code&gt;document.defaultView.getComputedStyle(element, null).getPropertyValue(propertyCSS)&lt;/code&gt;. And as if this wasn’t enough, there are various problems associated with specific properties or browsers, like:
&lt;ul&gt;
&lt;li&gt;IE returns the cascaded values and not the computed ones (for instance, it might return &lt;code&gt;em&lt;/code&gt;s for a property that was specified in &lt;code&gt;em&lt;/code&gt;s, and not pixels). &lt;a href=&quot;http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291&quot;&gt;Dean Edwards has thought a very clever hack to workaround this&lt;/a&gt; and didn’t even blog about it (it’s simply a comment in a blog post of Erik Arvidsson’s!).&lt;/li&gt;
&lt;li&gt;Any hidden (via &lt;code&gt;display:none;&lt;/code&gt;) element, yields a &lt;code&gt;width&lt;/code&gt;/&lt;code&gt;height&lt;/code&gt;/&lt;code&gt;top&lt;/code&gt;/&lt;code&gt;right&lt;/code&gt;/&lt;code&gt;bottom&lt;/code&gt;/&lt;code&gt;left&lt;/code&gt; value of zero.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt; or &lt;code&gt;normal&lt;/code&gt; might be returned for properties that are left at their defaults. For instance, IE does this with &lt;code&gt;width&lt;/code&gt;/&lt;code&gt;height&lt;/code&gt; for elements that don’t have dimensions explicitly set via CSS.&lt;/li&gt;
&lt;li&gt;In most browsers, shorthands (like &lt;code&gt;border&lt;/code&gt;) will yield a blank string. You’d have to use the most specific property (for instance, &lt;code&gt;border-left-width&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Colors will be returned in different formats across browsers. For instance, IE uses &lt;code&gt;#RRGGBB&lt;/code&gt; whereas Mozilla uses &lt;code&gt;rgb(red, green, blue)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;so%2C-what-now%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/20things-you-should-know-when-not-using-a-js-library/#so%2C-what-now%3F&quot;&gt;So, what now?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Never, EVER use a browser detect to solve the problems mentioned above. They can &lt;strong&gt;all&lt;/strong&gt; be solved with feature/object detection, simple one-time tests or defensive coding. I have done it myself (and so did most libraries nowadays I think) so I know it’s possible. I will not post all of these solutions to avoid bloating this post even more. You can ask me about particular ones in the comments, or read the uncompressed source code of any library that advertises itself as “not using browser detects”. JavaScript Libraries are a much more interesting read than literature anyway. :P&lt;/p&gt;
&lt;h3 id=&quot;are-the-facts-mentioned-above-actually-20%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/20things-you-should-know-when-not-using-a-js-library/#are-the-facts-mentioned-above-actually-20%3F&quot;&gt;Are the facts mentioned above actually 20?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m not really sure to be honest, it depends on how you count them. I thought that if I put a nice round number in the title, it would be more catchy :P&lt;/p&gt;
</content>
  </entry><entry>
    <title>Quick &amp; dirty way to run snippets of JavaScript anywhere</title>
    <link href="https://lea.verou.me/2009/02/quick-dirty-way-to-run-snippets-of-javascript-anywhere/"/>
    <updated>2009-02-23T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=172</id>
    <content xml:lang="en" type="html">&lt;p&gt;Ever wanted to run a snippet of JavaScript on a browser that doesn’t support a console in order to debug something? (for instance, IE6, Opera etc)&lt;/p&gt;
&lt;p&gt;You probably know about &lt;a href=&quot;http://getfirebug.com/lite.html&quot;&gt;Firebug Lite&lt;/a&gt;, but this either requires you to already have the bookmarklet, or include the script in the page. Although Firebug Lite is a great tool for more in depth debugging, it can be tedious for simple tasks (eg. &lt;em&gt;“What’s the value of that property?”&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Fortunately, there is a simpler way. Do you remember the 2000 era and the &lt;code&gt;javascript:&lt;/code&gt; URIs? Did you know that they also work from the address bar of &lt;strong&gt;any&lt;/strong&gt; javascript-capable browser?&lt;/p&gt;
&lt;p&gt;For instance, to find out the value of the global variable &lt;code&gt;foo&lt;/code&gt;, you just type in the address bar &lt;code&gt;javascript:alert(foo)&lt;/code&gt;. You can write any code you wish after the &lt;code&gt;javascript:&lt;/code&gt; part, as long as you write it properly to fit in one line.&lt;/p&gt;
&lt;p&gt;Of course these URIs are a no-no for websites, but they can be handy for simple debugging in browsers that don’t support a console. ;)&lt;/p&gt;
</content>
  </entry><entry>
    <title>&quot;Appearances can be deceiving Mr. Anderson&quot; - a.k.a. short code is not always fast code</title>
    <link href="https://lea.verou.me/2009/02/appearances-can-be-deceiving-mr-anderson-aka-short-code-is-not-always-fast-code/"/>
    <updated>2009-02-25T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=182</id>
    <content xml:lang="en" type="html">&lt;p&gt;I used to take pride in my short, bulletproof and elegant String and Number type checks:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Check whether obj is a Number
obj + 0 === obj

// Check whether obj is a String
obj + &#39;&#39; === obj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I always thought that apart from being short and elegant, they &lt;strong&gt;should&lt;/strong&gt; be faster.&lt;/p&gt;
&lt;p&gt;However, some quick tests gave me a cold slap in the face and proved my assertion to be entirely false. When comparing the following 4 methods for string and number type checking:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;“My” method (mentioned above)&lt;/li&gt;
&lt;li&gt;Object.prototype.toString method: &lt;code&gt;Object.prototype.toString.call(obj) === &#39;[object String]&#39;&lt;/code&gt; or &lt;code&gt;Object.prototype.toString.call(obj) === &#39;[object Number]&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Typeof method: &lt;code&gt;typeof obj === &#39;string&#39;&lt;/code&gt; or &lt;code&gt;typeof obj === &#39;number&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Contructor method: &lt;code&gt;obj.constructor === String&lt;/code&gt; or &lt;code&gt;obj.constructor === Number&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It turned out that the Object.prototype.toString method was &lt;strong&gt;50%&lt;/strong&gt; faster than my method, and both typeof and constructor methods were a whopping &lt;strong&gt;150%&lt;/strong&gt; faster than my method! No wonder &lt;a href=&quot;http://docs.jquery.com/JQuery_Core_Style_Guidelines&quot;&gt;jQuery uses the typeof method for their String/Number tests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that I think about it, it does actually make sense - my method converts &lt;code&gt;obj&lt;/code&gt; to a String or Number, then concatenates/adds it with another String/Number, then compares value and type. Too much stuff done there to be fast. But I guess I was too innocent and subconsciously thought that it wouldn’t be fair if elegant and short code wasn’t fast too.&lt;/p&gt;
&lt;p&gt;Of course the overall time needed for any of these tests was neglible, but it’s a good example of how much appearances can be deceiving - even in programming! ;)&lt;/p&gt;
&lt;p&gt;The moral: Never assume. Always test.&lt;/p&gt;
&lt;h3 id=&quot;so%2C-which-method-is-ideal-for-string%2Fnumber-checks%3F-(added-afterwards)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/02/appearances-can-be-deceiving-mr-anderson-aka-short-code-is-not-always-fast-code/#so%2C-which-method-is-ideal-for-string%2Fnumber-checks%3F-(added-afterwards)&quot;&gt;So, which method is ideal for String/Number checks? (added afterwards)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The typeof method and my method fail for non-primitive String/Number objects, as you can easily observe if you type in the console:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;typeof new String(&#39;foo&#39;) // &#39;object&#39;
typeof new Number(5) // &#39;object&#39;
new String(&#39;foo&#39;) + &#39;&#39; === new String(&#39;foo&#39;) // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can easily be solved if you also check the type via instanceof (the decrease in speed is negligible):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;foo = new String(&#39;foo&#39;);
typeof foo === &#39;string&#39; || foo instanceof String
foo + &#39;&#39; === foo || foo instanceof String
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don’t use instanceof alone, since it fails for String and Number primitives. The instanceof method also fails for Strings and Numbers created in another window, since their constructor there is different. Same happens with the Constructor method mentioned above.&lt;/p&gt;
&lt;p&gt;It seems that if you need a &lt;strong&gt;bulletproof&lt;/strong&gt; check the only method you can use is the Object.prototype.toString method and luckily, it’s one of the fastest (not the fastest one though), so I guess we can safely elect it as the ideal method for String and Number checks (and not only for arrays, as it was first made popular for).&lt;/p&gt;
&lt;p&gt;PS: For anyone wondering what the quote in the title reminds him/her, its from the &lt;em&gt;Matrix Revolutions&lt;/em&gt; movie.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Check whether the browser supports RGBA (and other CSS3 values)</title>
    <link href="https://lea.verou.me/2009/03/check-whether-the-browser-supports-rgba-and-other-css3-values/"/>
    <updated>2009-03-01T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=203</id>
    <content xml:lang="en" type="html">&lt;p&gt;When using CSS, we can just include both declarations, one using rgba, and one without it, as mentioned in my post on &lt;a href=&quot;http://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/&quot;&gt;cross-browser RGBA backgrounds&lt;/a&gt;. When writing JavaScript however, it’s a waste of resources to do that (and requires more verbose code), since we can easily check whether the browser is RGBA-capable, almost as easily as we can check &lt;a href=&quot;http://lea.verou.me/2009/02/check-if-a-css-property-is-supported/&quot;&gt;whether it suppports a given property&lt;/a&gt;. We can even follow the same technique to detect the support of other CSS3 values (for instance, &lt;a href=&quot;http://www.css3.info/preview/multiple-backgrounds/&quot;&gt;multiple backgrounds&lt;/a&gt; support, &lt;a href=&quot;http://www.css3.info/preview/hsla/&quot;&gt;HSLA&lt;/a&gt; support, etc).&lt;/p&gt;
&lt;p&gt;The technique I’m going to present is based on the fact that when we assign a non-supported CSS value on any supported CSS property, the browser either throws an error AND ignores it (IE-style), or simply ignores it (Firefox-style). Concequently, to check whether RGBA is supported, the algorithm would be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the &lt;code&gt;color&lt;/code&gt; (or &lt;code&gt;backgroundColor&lt;/code&gt;, or &lt;code&gt;borderColor&lt;/code&gt; or any property that is widely supported and accepts color values) value of the &lt;code&gt;style&lt;/code&gt; object of any element that exists in the page for sure (for instance, the first script tag) and store it in a variable.&lt;/li&gt;
&lt;li&gt;Assign an RGBA color to the &lt;code&gt;color&lt;/code&gt; property of that element and catch any errors produced.&lt;/li&gt;
&lt;li&gt;Assign to a variable whether the &lt;code&gt;color&lt;/code&gt; of that element did change (boolean &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Restore the previous color to the &lt;code&gt;color&lt;/code&gt; property, so that our script doesn’t interfere with the designer’s decisions.&lt;/li&gt;
&lt;li&gt;Return the stored result.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;and it would result in the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function supportsRGBA()
{
	var scriptElement = document.getElementsByTagName(&#39;script&#39;)[0];
	var prevColor = scriptElement.style.color;
	try {
		scriptElement.style.color = &#39;rgba(1,5,13,0.44)&#39;;
	} catch(e) {}
	var result = scriptElement.style.color != prevColor;
	scriptElement.style.color = prevColor;
	return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;performance-improvements&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/check-whether-the-browser-supports-rgba-and-other-css3-values/#performance-improvements&quot;&gt;Performance improvements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The code above works, but it wastes resources for no reason. Every time the function is called, it tests RGBA support again, even though the result will never change. So, we need a way to cache the result, and return the cached result after the first time the function is called.&lt;/p&gt;
&lt;p&gt;This can be achieved in many ways. My personal preference is to store the result as a property of the function called, named &lt;code&gt;&#39;result&#39;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function supportsRGBA()
{
	if(!(&#39;result&#39; in arguments.callee))
	{
		var scriptElement = document.getElementsByTagName(&#39;script&#39;)[0];
		var prevColor = scriptElement.style.color;
		try {
			scriptElement.style.color = &#39;rgba(0, 0, 0, 0.5)&#39;;
		} catch(e) {}
		arguments.callee.result = scriptElement.style.color != prevColor;
		scriptElement.style.color = prevColor;
	}
	return arguments.callee.result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;making-it-bulletproof&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/check-whether-the-browser-supports-rgba-and-other-css3-values/#making-it-bulletproof&quot;&gt;Making it bulletproof&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is a rare case where the script element might &lt;strong&gt;already&lt;/strong&gt; have &lt;code&gt;rgba(0,0,0,0.5)&lt;/code&gt; set as it’s color value (don’t ask me why would someone want to do that :P ), in which case our function will return &lt;code&gt;false&lt;/code&gt; even if the browser actually supports RGBA. To prevent this, you might want to check whether the &lt;code&gt;color&lt;/code&gt; property is already set to &lt;code&gt;rgba(0,0,0,0.5)&lt;/code&gt; and return &lt;code&gt;true&lt;/code&gt; if it is (because if the browser doesn’t support rgba, it will be blank):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function supportsRGBA()
{
	if(!(&#39;result&#39; in arguments.callee))
	{
		var scriptElement = document.getElementsByTagName(&#39;script&#39;)[0];
		var prevColor = scriptElement.style.color;
		var testColor = &#39;rgba(0, 0, 0, 0.5)&#39;;
		if(prevColor == testColor)
		{
			arguments.callee.result = true;
		}
		else
		{
			try {
				scriptElement.style.color = testColor;
			} catch(e) {}
			arguments.callee.result = scriptElement.style.color != prevColor;
			scriptElement.style.color = prevColor;
		}
	}
	return arguments.callee.result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Done!&lt;/p&gt;
</content>
  </entry><entry>
    <title>On native, single-input, multiple file uploads</title>
    <link href="https://lea.verou.me/2009/03/regarding-native-single-input-multiple-file-uploads/"/>
    <updated>2009-03-07T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=209</id>
    <content xml:lang="en" type="html">&lt;p&gt;If you are following the current news on web development, you probably heard that the new Safari 4 has a great feature: It natively allows the user to select multiple files via a single input control, if you specify a value for the attribute &lt;code&gt;multiple&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;file&amp;quot; multiple&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or, in XHTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;file&amp;quot; multiple=&amp;quot;multiple&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might not know that &lt;a href=&quot;http://ajaxian.com/archives/input-typefile-multiple-now-in-a-real-browser#comment-271852&quot;&gt;Opera supported multiple file uploads for a while now, based on the earlier Web Forms 2.0 standard&lt;/a&gt; in a slightly different (and more flexible) format:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;file&amp;quot; min=&amp;quot;1&amp;quot; max=&amp;quot;9999″ /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;can-we-use-those-currently%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/regarding-native-single-input-multiple-file-uploads/#can-we-use-those-currently%3F&quot;&gt;Can we use those currently?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sure we can, but we should provide fallbacks for the other browsers. Using these features will put pressure on the other browser vendors to implement them as well and generally, native is always better.&lt;/p&gt;
&lt;h3 id=&quot;how-can-we-find-out-whether-the-browser-supports-them%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/regarding-native-single-input-multiple-file-uploads/#how-can-we-find-out-whether-the-browser-supports-them%3F&quot;&gt;How can we find out whether the browser supports them?&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;opera&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/regarding-native-single-input-multiple-file-uploads/#opera&quot;&gt;Opera&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Opera supports accessing those &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; properties as properties of the element. So, it’s quite trivial to check whether Opera-style multiple inputs are supported:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var supportsMin = (function(){
	var fi = document.createElement(&#39;input&#39;);
	fi.type = &#39;file&#39;;
	return fi.min === &#39;&#39; &amp;amp;&amp;amp; fi.max === &#39;&#39;;
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;safari-4&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/regarding-native-single-input-multiple-file-uploads/#safari-4&quot;&gt;Safari 4&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In Safari 4 the check would be equally simple, if it supported accessing the &lt;code&gt;multiple&lt;/code&gt; attribute as a property. Then we could easily check whether it’s boolean and conclude that Safari-style multiple inputs are supported:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var supportsMultiple = (function(){
	var fi = document.createElement(&#39;input&#39;);
	fi.type = &#39;file&#39;;
	// The second check is probably redundant but what if in the future an implementor
	// decides to make the file inputs to handle multiple selections by default?
	// Yeah, it&#39;s not likely, but it&#39;s not entirely impossible.
	return fi.multiple === false || fi.multiple === true;
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, that’s currently not the case. The good news are that &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=24444&quot;&gt;I reported this as a bug today, and the Webkit team fixed it&lt;/a&gt;, so it will be possible in the next Webkit nightly!&lt;/p&gt;
&lt;h4 id=&quot;combining-the-two&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/regarding-native-single-input-multiple-file-uploads/#combining-the-two&quot;&gt;Combining the two&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You can easily combine these two together with the workaround you prefer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Create a file input that allows multiple file selection
var fi = document.createElement(&#39;input&#39;);
fi.type = &#39;file&#39;;

if(fi.multiple === false || fi.multiple === true) {
	fi.multiple = true;
}
else if(fi.min === &#39;&#39; &amp;amp;&amp;amp; fi.max === &#39;&#39;) {
	fi.min = 1;
	fi.max = 9999;
}
else {
	// Our preferred workaround here
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;what-about-mozilla%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/regarding-native-single-input-multiple-file-uploads/#what-about-mozilla%3F&quot;&gt;What about Mozilla?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ok, we all know that IE will probably take years to implement similar functionality. But usually, the Mozilla team implements new and exciting stuff quite fast.&lt;/p&gt;
&lt;p&gt;As it turns out, &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=63687&quot;&gt;there is a relevant ticket sitting in their Bugzilla&lt;/a&gt; for a while now. If you want them to implement it, vote for it so that it’s priority increases.&lt;/p&gt;
&lt;p&gt;If they do implement it in the way suggested, the code posted above will work for that too, without any changes - The advantages of feature detection baby! ;)&lt;/p&gt;
</content>
  </entry><entry>
    <title>CMYK colors in CSS: Useful or useless?</title>
    <link href="https://lea.verou.me/2009/03/cmyk-colors-in-css-useful-or-useless/"/>
    <updated>2009-03-09T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=214</id>
    <content xml:lang="en" type="html">&lt;p&gt;As someone who dealed a bit with print design in the past, I consider CMYK colors the easiest color system for humen to understand and manipulate. It’s very similar to what we used as children, when mixing watercolors for our drawings. It makes perfect sense, more than HSL and definately more than RGB. I understand that most of us are so accustomed to using RGB that can’t realise that, but try to think for a moment: Which color system would make more sense to you if you had no idea and no experience at all with any of them?&lt;/p&gt;
&lt;p&gt;Personally, even though I have lots more experience with RGB, given the fact that most of my work will be displayed on screen and not printed on paper, when I think of a color I want, I can instantly find out the percentages of Cyan, Magenta, Yellow and blacK needed to create it. I can’t do that with HSL or RGB, I’d have to play a little bit with the color picker’s sliders. I sometimes start by specifying a color in CMYK and then tweaking it via RGB or HSL to achieve the exact color I need (since the CMYK gamut is smaller than the RGB gamut) and I find that much faster than starting with RGB or HSL right away.&lt;/p&gt;
&lt;p&gt;Also, when you don’t have a color picker, it’s much easier to create beautiful colors with CMYK than it is with RGB. For example the CMYK magenta (0% Cyan, 100% Magenta, 0% Yellow, 0% blacK) is a much better color than the RGB Magenta (255 Red, 0 Green, 100% Blue).&lt;/p&gt;
&lt;p&gt;Given the above, I’ve always thought how much I wanted to be able to specify CMYK colors in my CSS. I agree that sometimes this would result in crippling myself, since as I said above the CMYK gamut is smaller, but it has other significant advantages that I think it would make it a useful option for some people. There are algorithms available for CMYK to RGB conversion, and the browser could use those to display the specified color on the screen. Then, if the user decided to print the page, The CMYK colors could be used as-is for the printer. Another advantage, as none of the current CSS color formats allow us to control that. People who don’t find the CMYK color system easier for them to understand, they could still use it for their print stylesheets.&lt;/p&gt;
&lt;p&gt;Also, graphic designers who decided to switch to web design would find it much easier to specify color values in a format they are already comfortable with.&lt;/p&gt;
&lt;p&gt;To sum it up, the advantages that I think this option would provide us are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A color system that’s easier for most people to understand and manipulate.&lt;/li&gt;
&lt;li&gt;The colors you get when combining “easy” CMYK values (0%, 50%, 100%) are more beatuful than the ones you get with “easy” RGB values (0, 128, 255). Bored people and people without a taste in color selection would create more beatuful websites this way and our eyes wouldn’t hurt.&lt;/li&gt;
&lt;li&gt;We would be able to specify how our colors will get printed, something that is not currently possible at all. Extremely useful for print stylesheets.&lt;/li&gt;
&lt;li&gt;It would be easier for graphic designers to switch to web design.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And the format is very easy to imagine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;background-color: cmyk(0, 100, 50, 0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;background-color: cmyk(0%, 100%, 50%, 0%);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;background-color: cmyk(0, 1, 0.5, 0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, what do you think? Useful or useless?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; As it turns out, I’m not crazy! &lt;a href=&quot;http://www.w3.org/TR/css3-gcpm/#cmyk-colors&quot;&gt;The W3 already considers this for CSS3&lt;/a&gt; with the 3rd format (from 0 to 1)! However, no browser supports it yet, not even Webkit nightlies… :(&lt;/p&gt;
&lt;h3 id=&quot;translations&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cmyk-colors-in-css-useful-or-useless/#translations&quot;&gt;Translations&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cssnolanche.com.br/cores-cmyk-em-css-uteis-ou-inuteis/&quot;&gt;Portuguese&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry><entry>
    <title>CSS3 colors, today (MediaCampAthens session)</title>
    <link href="https://lea.verou.me/2009/03/css3-colors-today-mediacampathens-session/"/>
    <updated>2009-03-15T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=227</id>
    <content xml:lang="en" type="html">&lt;p&gt;Yesterday, I had a session at &lt;a href=&quot;http://mediacamp.gr/&quot;&gt;MediaCampAthens&lt;/a&gt; (a BarCamp-style event), regarding CSS3 colors. If you’ve followed &lt;a href=&quot;http://lea.verou.me/tag/colors/&quot;&gt;my earlier posts tagged with “colors”&lt;/a&gt;, my presentation was mostly a sum-up of these.&lt;/p&gt;
&lt;p&gt;It was my first presentation ever, actually, the first time I talked to an audience for more than 1 minute :P . This caused some goofs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When introducing myself, I said completely different things than I intended to and ended up sounding like an arrogant moron :P&lt;/li&gt;
&lt;li&gt;I tried not to look at the audience too much, in order to avoid sounding nervous, and this caused me to completely ignore 2 questions (as I found out afterwards)! How embarrasing!&lt;/li&gt;
&lt;li&gt;At a certain point, I said “URL” instead of “domain” :P&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, I had prepared some screenshots (you’ll see them in the ppt) and the projector completely screwed them up, as it showed any dark color as black.&lt;/p&gt;
&lt;p&gt;Apart from those, I think it went very well, I received lots of positive feedback about it and the audience was paying attention, so I guess they found it interesting (something that I didn’t expect :P ).&lt;/p&gt;
&lt;p&gt;Here is the presentation:&lt;/p&gt;
&lt;p&gt;Please note that Slideshare messed up slide #8 and the background seems semi-transparent grey instead of semi-transparent white.&lt;/p&gt;
&lt;p&gt;By the way, I also thought afterwards that I had made a mistake: -ms-filter is not required if we combine the gradient filter with Data URIs, since IE8 supports Data URIs (for images at least). Oops, I hate making mistakes that I can’t correct.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.facebook.com/home.php#/album.php?aid=66598&amp;amp;id=796271191&quot;&gt;Here are some photos from my session&lt;/a&gt;. If I did it correctly, every facebook user can see them. If I messed things up, tell me :P&lt;/p&gt;
</content>
  </entry><entry>
    <title>Mockup viewer bookmarklet</title>
    <link href="https://lea.verou.me/2009/03/mockup-viewer-bookmarklet/"/>
    <updated>2009-03-18T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=241</id>
    <content xml:lang="en" type="html">&lt;p&gt;I usually view mockups in a browser, so that the impression I get is as close as possible to reality (I learned this the hard way: A mockup that seemed great in the neutral and minimalistic environment of a picture viewer, ended up looking way too fancy when viewed in a browser, something that I realized after having worked for 6 months on the site). If you do the same, I’m sure you’ll feel my pain: Every time I do that, I have to carefully scroll down just as much as to hide the margin that the browser adds, and left just as much as to center the image. Not to mention the click required to enlarge the image to full-size.&lt;/p&gt;
&lt;p&gt;Not any more! I was so fed up today, that I wrote a little bookmarklet that does this. It enlarges the image to full size, removes the margins and scrolls the page left so that the image is centered. It works on any recent browser I’ve tested, and I think it will probably work in most browsers that web designers use (hint: not old IEs) :P&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;javascript:(function(){%20document.body.style.margin%20=%200;%20var%20inner%20=%20window.innerWidth%20||%20document.body.clientWidth,%20img%20=%20document.getElementsByTagName(&#39;img&#39;)[0];%20img.removeAttribute(&#39;width&#39;);%20img.removeAttribute(&#39;height&#39;);%20document.body.scrollLeft%20=%20(img.offsetWidth%20-%20inner)/2;%20})();&quot; class=&quot;cta&quot;&gt;Mockup viewer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JS code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;(function(){
	document.body.style.margin = 0;
	var inner = window.innerWidth || document.body.clientWidth, img = document.getElementsByTagName(&#39;img&#39;)&#92;[0&#92;];
	img.removeAttribute(&#39;width&#39;);
	img.removeAttribute(&#39;height&#39;);
	document.body.scrollLeft = (img.offsetWidth - inner)/2;
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If only it could also write the XHTML &amp;amp; CSS for the site… :P&lt;/p&gt;
</content>
  </entry><entry>
    <title>Cross browser, imageless linear gradients</title>
    <link href="https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/"/>
    <updated>2009-03-20T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=249</id>
    <content xml:lang="en" type="html">&lt;p&gt;I have to write a color picker in the near future and I wanted it to have those little gradients on top of the sliders that show you the effect that a slider change will have on the selected color. Consequently, I needed to create imageless gradients, in order to easily change them. My very first thought was creating many div or span elements in order to show the gradient. I rejected it almost instantly, for ovbious reasons (*cough* performance *cough*). My second thought was SVG for the proper browsers, and gradient filters for IE. As it turned out, &lt;a href=&quot;http://wiki.svg.org/Inline_SVG&quot;&gt;inline SVG was too much of a hassle&lt;/a&gt; and I didn’t want to use Data URIs. My final thought was canvas for the proper browsers and gradient filters for IE.&lt;/p&gt;
&lt;p&gt;Since I consider such a script very entertaining, I didn’t google it at all, I started coding right away. Time to have fun! :D After finishing it though, I googled it just out of curiosity and didn’t like the other solutions much (either the solution itself, or the code), so I decided to post it in case it helps someone. I also made a little test page, so that you may test out how it works. :)&lt;/p&gt;
&lt;p&gt;The script is a class for the creation of linear 2-color gradients in any browser. It’s used like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var g = new Gradient(200, 100, &#39;#000000&#39;, &#39;#ff1166&#39;, true);
document.body.appendChild(g.canvas);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can create and manipulate the Gradient object at any point (during or after DOM parsing) but you have to insert the element somewhere in the DOM after the DOM has finished parsing (which is common sense).&lt;/p&gt;
&lt;p&gt;All the parameters in the constructor are optional and can be manipulated later. Their order is &lt;code&gt;width, height, startColor, endColor, vertical&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Its object oriented and doesn’t throw any strict warnings&lt;/li&gt;
&lt;li&gt;Tested in IE6, IE7, IE8, Firefox 3, Safari 4b and Opera 9.6. Probably works with older versions of Firefox, Opera and Safari as well (as long as they support &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;), I’m just not able to test in them currently.&lt;/li&gt;
&lt;li&gt;All it’s methods return the object, so they can be chained.&lt;/li&gt;
&lt;li&gt;You can modify it to support RGBA as well, but you’d have to use a different format for IE (extended hex) and a different one for the proper browsers. I didn’t need that and it would make the script unnecessarily complex, so I didn’t implement it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Limitations (&lt;strong&gt;all&lt;/strong&gt; these limitations are enforced by IE’s gradient filter):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only does linear gradients&lt;/li&gt;
&lt;li&gt;The gradient can be either vertical or horizontal. No other angles.&lt;/li&gt;
&lt;li&gt;The only color format supported is #RRGGBB.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;properties&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#properties&quot;&gt;Properties&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;canvas-(htmlelement)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#canvas-(htmlelement)&quot;&gt;canvas (HTMLElement)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The HTML Element that is being used to render the gradient. Either a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;. You have to use it at least once, in order to insert the element in the DOM. I preferred not to do this automatically, since it would be too restrictive.&lt;/p&gt;
&lt;h4 id=&quot;startcolor-(string)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#startcolor-(string)&quot;&gt;startColor (String)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The current start color of the gradient.&lt;/p&gt;
&lt;h4 id=&quot;endcolor-(string)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#endcolor-(string)&quot;&gt;endColor (String)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The current end color of the gradient.&lt;/p&gt;
&lt;h4 id=&quot;vertical-(boolean)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#vertical-(boolean)&quot;&gt;vertical (Boolean)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;True if the gradient is vertical, false if it’s horizontal.&lt;/p&gt;
&lt;h4 id=&quot;width-(number)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#width-(number)&quot;&gt;width (Number)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The width of the gradient in pixels&lt;/p&gt;
&lt;h4 id=&quot;height-(number)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#height-(number)&quot;&gt;height (Number)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The height of the gradient in pixels&lt;/p&gt;
&lt;h3 id=&quot;methods&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#methods&quot;&gt;Methods&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;paint(startcolor%2C-endcolor%2C-vertical)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#paint(startcolor%2C-endcolor%2C-vertical)&quot;&gt;paint(startColor, endColor, vertical)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Used to change the colors and/or the orientation of the gradient. All parameters are optional.&lt;/p&gt;
&lt;h4 id=&quot;resize(width%2C-height)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#resize(width%2C-height)&quot;&gt;resize(width, height)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Used to change the size of the gradient. Both parameters are optional.&lt;/p&gt;
&lt;h4 id=&quot;flip()&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#flip()&quot;&gt;flip()&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Reverses the gradient (swaps endColor with startColor)&lt;/p&gt;
&lt;h4 id=&quot;rotate()&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#rotate()&quot;&gt;rotate()&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Rotates the gradient by 90 degrees clockwise (should I add CCW too?)&lt;/p&gt;
&lt;h3 id=&quot;download&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/#download&quot;&gt;Download&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lea.verou.me/scripts/gradient/gradient.js&quot;&gt;gradient.js (2.7 KB)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lea.verou.me/scripts/gradient/gradient-min.js&quot;&gt;gradient-min.js (1.4 KB)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lea.verou.me/scripts/gradient/&quot;&gt;Test page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope you find it useful :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>100% Cyan in CMYK is NOT rgb(0,255,255)!!</title>
    <link href="https://lea.verou.me/2009/03/100-cyan-in-cmyk-is-not-rgb0255255/"/>
    <updated>2009-03-23T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=259</id>
    <content xml:lang="en" type="html">&lt;p&gt;As I mentioned in an earlier post of mine, I have to create a color picker, so I’ve already started to write the code for the Color class it’s going to use. I need it to natively support RGB, HSL, Lab and CMYK. And the latter part is causing unexpected trouble.&lt;/p&gt;
&lt;p&gt;It seems that there is the notion out there that conversion from &lt;a href=&quot;http://en.wikipedia.org/wiki/CMYK_color_model&quot;&gt;CMYK&lt;/a&gt; to &lt;a href=&quot;http://en.wikipedia.org/wiki/RGB&quot;&gt;RGB&lt;/a&gt; is easy. Newsflash: &lt;strong&gt;It’s not&lt;/strong&gt;. As every graphic designer knows, the CMYK &lt;a href=&quot;http://en.wikipedia.org/wiki/Color_gamut&quot;&gt;color gamut&lt;/a&gt; is smaller than the the RGB color gamut (even the sRGB color gamut). You can’t take a CMYK color and convert it to an out-of-CMYK-gamut RGB color! That’s nonsense! And it’s precisely what most conversion &lt;a href=&quot;http://www.easyrgb.com/index.php?X=MATH&amp;amp;H=14#text14&quot;&gt;algorithms&lt;/a&gt; and &lt;a href=&quot;http://www.colourlovers.com/copaso/ColorPaletteSoftware&quot;&gt;color pickers&lt;/a&gt; out there do! Even &lt;a href=&quot;http://kuler.adobe.com/&quot;&gt;Adobe Kuler&lt;/a&gt;!!! Since yesterday, I’ve studied dozens of algorithms and color pickers that claim to do CMYK -&amp;gt; RGB conversion, and every single one of them is &lt;strong&gt;wrong&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can test a color picker that claims to support CMYK, or a CMYK &amp;lt;–&amp;gt; RGB conversion algorithm in the following simple way: Test how it converts the color CMYK(100%, 0, 0, 0) to RGB. If the result is rgb(0,255,255) then the algorithm is crap. rgb(0, 255, 255) is neither the same color, nor is it even in the CMYK color gamut! So basically, these algorithms convert a CMYK color to an RGB color that is outside of the CMYK color gamut! &lt;strong&gt;A color that cannot be represented with CMYK is supposed to be the result of a CMYK-&amp;gt;RGB conversion?&lt;/strong&gt; This is madness!&lt;/p&gt;
&lt;p&gt;So far the only CMYK -&amp;gt; RGB converter that I’ve seen and does it right, is the one used by Adobe CS products (Photoshop, Illustrator, etc). And that makes me wonder why Kuler does it the wrong way, since they have already figured the algorithm! It’s crazy!&lt;/p&gt;
&lt;p&gt;What’s even more strange is that I can’t even find which sRGB colors are usually out of the CMYK color gamut, so that I can adjust the algorithm I use properly (even if it just clipped the color to the nearest in-gamut one, it would be an improvement). I’ve been searching since yesterady even for that with no luck. I hope I don’t end up using the wrong algorithm myself too…&lt;/p&gt;
</content>
  </entry><entry>
    <title>Extend Math.log to allow for bases != e</title>
    <link href="https://lea.verou.me/2009/03/extend-mathlog-to-allow-for-bases-e/"/>
    <updated>2009-03-26T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=265</id>
    <content xml:lang="en" type="html">&lt;p&gt;As Math.log currently stands, it’s a bit useless. It only calculates natural logarithms (base e).  We can easily modify it however, to calculate logarithms of any base:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Math.log = (function() {
	var log = Math.log;
	return function(n, a) {
		return log(n)/(a? log(a) : 1);
	}
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now specify the base as a second parameter, or still use the default one (Math.E) if we don’t specify one, so older scripts won’t break or if we want a shortcut to the natural logarithm. ;)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Advocacy of JavaScript</title>
    <link href="https://lea.verou.me/2009/03/advocacy-of-javascript/"/>
    <updated>2009-03-30T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=269</id>
    <content xml:lang="en" type="html">&lt;p&gt;I frequently meet these “hardcore” developers that deep (or not so deep) inside them, tend to underestimate JavaScript developers and boast about their own superiority. I’m sure that if you spent an important percentage of your career working with JavaScript and are even barely social, you definitely know what I’m talking about. It’s those desktop application programmers or these back-end developers that tend to consider JavaScript a toy, and try to convince you to engage in “more serious stuff” (if they appreciate you even a little; if they don’t they just mock you endlessly and/or look down on you).&lt;/p&gt;
&lt;p&gt;Funnily enough, when most of these people are required to write JavaScript for some reason, one of the following happens:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They write 2000-style code, which is usually the reason that most of them underestimate JavaScript so much: They think that &lt;strong&gt;everybody&lt;/strong&gt; codes in JavaScript like themselves.&lt;/li&gt;
&lt;li&gt;They desperately look for “a good library” because “it’s not worth wasting my time to learn that stuff”.&lt;/li&gt;
&lt;li&gt;They actually learn the darn language and the relevant browser quirks and change their attitude towards JavaScript developers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;http://javascript.crockford.com/javascript.html&quot;&gt;Douglas Crockford did it much better than me&lt;/a&gt;, but I would like to take my turn in arguing against their most frequent claims, if I may.&lt;/p&gt;
&lt;h3 id=&quot;%E2%80%9Cjavascripters-are-not-really-developers.%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/advocacy-of-javascript/#%E2%80%9Cjavascripters-are-not-really-developers.%E2%80%9D&quot;&gt;“Javascripters are not really developers.”&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Oh r’ly? Is it because JavaScript doesn’t follow what you’ve learned to expect from most languages? Well, newsflash: Assembly doesn’t either and every programming language is actually an abstraction to it. It’s in fact much harder to write the same thing in a language that lacks what we’ve learned to expect. Think about low level coding: Even the simplest tasks seem hard. At a smaller extent, it’s the same with JavaScript: Things that are easy to do in other languages, are a pain in JavaScript, even if we leave out the implementation differences across browsers. For instance, in Java there is a built-in class for most common tasks. JavaScript isn’t that rich, and it penalizes you for every external library you use, by forcing your users to download extra Kilobytes of code. JavaScript is probably the only modern language in which short code isn’t only elegance, but also a necessity.&lt;/p&gt;
&lt;p&gt;Also, in other languages, you only have to deal with &lt;strong&gt;one&lt;/strong&gt; implementation. Even when using Java to code for multiple operating systems, the differences are minor for most applications. With JavaScript, you are dealing with at least 5 implementations with many differences and bugs to circumvent. Writing a piece of code that works in one browser is not good enough, you have to make it work across &lt;strong&gt;all&lt;/strong&gt; major browsers, in &lt;strong&gt;all&lt;/strong&gt; their versions that still have significant market share. And yeah, this is most of the times just as dreadful as it sounds, if not more.&lt;/p&gt;
&lt;p&gt;Of course, I’m not implying that everyone who wrote a script in JavaScript is a developer, just like everyone that wrote a Hello World application in C++ is not a programmer. JavaScript is notorious for being used mostly by amateurs for the following reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Most people that ever wrote a webpage needed something that could only be done with JavaScript. Most of these people weren’t developers and didn’t have any interest in programming.&lt;/li&gt;
&lt;li&gt;Because of (1) there are many JavaScript tutorials and books around for accomplishing simple tasks, most of them being leftovers from the 2000 era and promote bad code practices. During that era, people didn’t care about nice code, usability, accessibility and cross-browser functionality. They just wanted to get the job done spending the least possible time and they only cared if it worked in Internet Explorer.&lt;/li&gt;
&lt;li&gt;Most people just copy and paste stuff from the tutorials mentioned in (2), leading to duplicate functionality, bad code, bad usability, complete absence of accessibility and buggy results in browsers other than the target one. This caused JavaScript to be related to these vices although these things were actually caused by abusing the language.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;%E2%80%9Cjavascript-is-a-toy%2C-not-a-real-programming-language%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/advocacy-of-javascript/#%E2%80%9Cjavascript-is-a-toy%2C-not-a-real-programming-language%E2%80%9D&quot;&gt;“Javascript is a toy, not a real programming language”&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It may have been a toy in the 2000 era where your mind is still stuck. Currently, browser vendors are constantly adding new features to it, in order to make it able to compete with a fully-fledged programming language and competent front-end developers have been pushing JavaScript to an extent that was unimaginable when it was first introduced. If you are not convinced, pay a visit to &lt;a href=&quot;http://www.chromeexperiments.com/&quot;&gt;Chrome Experiments&lt;/a&gt; (as the name suggests, you are advised to use Google Chrome when viewing them).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JavaScript is not a light version of Java, nor is it a light version of any programming language.&lt;/strong&gt; It has a soul of it’s own, so stop comparing it to other languages and pointing out the areas where it lacks. Open your eyes instead to see the areas where it’s superior to all other languages you probably know (&lt;a href=&quot;http://www.hunlock.com/blogs/Functional_Javascript&quot;&gt;lambda&lt;/a&gt; for instance).&lt;/p&gt;
&lt;h3 id=&quot;%E2%80%9Chow-can-i-respect-a-language-that-only-lives-inside-a-browser%3F%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/advocacy-of-javascript/#%E2%80%9Chow-can-i-respect-a-language-that-only-lives-inside-a-browser%3F%E2%80%9D&quot;&gt;“How can I respect a language that only lives inside a browser?”&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Newsflash: You are wrong, &lt;strong&gt;again&lt;/strong&gt;. You can code in JavaScript &lt;a href=&quot;http://en.wikipedia.org/wiki/Server-side_JavaScript&quot;&gt;for the server&lt;/a&gt;, &lt;a href=&quot;http://www.phpied.com/make-your-javascript-a-windows-exe/&quot;&gt;create Windows executable files (.exe)&lt;/a&gt;, create  plugins and extensions for a plethora of applications, and actually even Flash’s ActionScript is based on ECMAScript, a standard that was derived from and currently controls JavaScript implementations.&lt;/p&gt;
&lt;h3 id=&quot;disclaimers&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/03/advocacy-of-javascript/#disclaimers&quot;&gt;Disclaimers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ah, these are always necessary in rants :)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;I didn’t have any particular individual in mind when writing this post, so if you think it’s about you, get over it.&lt;/strong&gt; My memory is too bad to do so anyway. ;)&lt;/li&gt;
&lt;li&gt;I am not implying that JavaScript is the best programming language around. I actually don’t think there is such a language. My point was that JavaScript is not inferior to the others. That doesn’t mean I consider it superior either.&lt;/li&gt;
&lt;li&gt;I don’t claim to be a programming guru (anyone who does so is usually ignorant anyway), nor do I claim to be always right. Feel free to argue, if you have thought a valid counterargument. :)&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry><entry>
    <title>Help me: take the color survey</title>
    <link href="https://lea.verou.me/2009/04/help-me-take-the-color-survey/"/>
    <updated>2009-04-06T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=286</id>
    <content xml:lang="en" type="html">&lt;p&gt;If you are a creative professional, or just passionate about colors, please take my survey:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bit.ly/colorsurvey&quot;&gt;http://bit.ly/colorsurvey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It will greatly help me to make a future project of our company more usable (some of its features at least) and it only takes a few minutes (it contains 10-19 questions, depending on your responses).&lt;/p&gt;
&lt;p&gt;Any suggestions, corrections, questions etc are of course welcome.&lt;/p&gt;
&lt;p&gt;Thanks a lot in advance to everyone that takes the survey! :D&lt;/p&gt;
&lt;p&gt;Of course, when it ends and I find the time to analyze the results, I’ll post them here for anyone interested. (Hint: That means that if you are interested in the results, you can promote the survey yourself as well, since more responses = more accurate results)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Better usability in 5 minutes</title>
    <link href="https://lea.verou.me/2009/04/better-usability-in-5-minutes/"/>
    <updated>2009-04-10T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=296</id>
    <content xml:lang="en" type="html">&lt;p&gt;In this post I’m going to share some tips to increase a site’s usability that are very quick to implement. Not all of them are cross-browser, but they are the icing on the cake anyway, nobody would mind without them.&lt;/p&gt;
&lt;h3 id=&quot;1.-make-buttons-and-button-like-links-appear-pressed&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/04/better-usability-in-5-minutes/#1.-make-buttons-and-button-like-links-appear-pressed&quot;&gt;1. Make buttons and button-like links appear pressed&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a personal favorite. When you use CSS to style a button, or when you use an image (either as a background image or in the &lt;img /&gt; tag) to depict a fancy button, it will remain the same when being pressed in some or all browsers (depending on the case). You can use this easy trick to let the user know that he actually clicked something that is, indeed, clickable:&lt;/p&gt;
&lt;p&gt;.mybutton:active {
position:relative;
top: 1px;
left: 1px;
}&lt;/p&gt;
&lt;p&gt;which actually moves the button 1 pixel to the right and 1 pixel to the bottom when it’s being clicked. Try it, it’s actually quite convincing.&lt;/p&gt;
&lt;p&gt;Other, equally quick options are: making the border inset, giving to the text a text-indent of 1px, reversing a gradient background (if you already use the reversed version somewhere else in the site, it is quick since you don’t have to use an image editor just for that), or a combination of them.&lt;/p&gt;
&lt;h3 id=&quot;2.-smooth-transitions&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/04/better-usability-in-5-minutes/#2.-smooth-transitions&quot;&gt;2. Smooth transitions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a webkit-only tip, but as I said, it’s just the icing on the cake, so who cares? If a smooth transition is crucial to your design, by all means, write a script for that or use a library. If you were planning to go the CSS-only way anyway, this will significantly increase the user experience for webkit users.&lt;/p&gt;
&lt;p&gt;Let’s suppose that the links in your page are normally blue, and red on hover. To make the transition from blue to red smooth for webkit users, only 2 lines are needed in the CSS:&lt;/p&gt;
&lt;p&gt;a {
color:blue;
&lt;strong&gt;transition-property: color;
transition-duration: 1s;&lt;/strong&gt;
}&lt;/p&gt;
&lt;p&gt;a:hover {
color:red;
}&lt;/p&gt;
&lt;p&gt;The first one (&lt;code&gt;transition-property&lt;/code&gt;) tells the browser which CSS property to smoothly transition and the second one (&lt;code&gt;transition-duration&lt;/code&gt;) how long you want the whole effect to last. It’s important to place those in the normal CSS rule and not the one with the :hover pseudoclass, because otherwise there will be no transition when the user mouses out of the element. Please note that you currently need to also include browser prefixes for these properties or just use &lt;a href=&quot;http://leaverou.github.com/prefixfree&quot;&gt;-prefix-free&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;3.-add-dingbats-to-buttons-that-depict-their-functionality&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/04/better-usability-in-5-minutes/#3.-add-dingbats-to-buttons-that-depict-their-functionality&quot;&gt;3. Add dingbats to buttons that depict their functionality&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We all know that most browsers don’t like dingbat-only fonts. However, there are some dingbats that are available in most web-safe unicode fonts. For instance, review the following examples:&lt;/p&gt;
&lt;h4 id=&quot;without-dingbats%3A&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/04/better-usability-in-5-minutes/#without-dingbats%3A&quot;&gt;Without dingbats:&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Next Previous Done Favorite&lt;/p&gt;
&lt;h4 id=&quot;with-dingbats%3A&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/04/better-usability-in-5-minutes/#with-dingbats%3A&quot;&gt;With dingbats:&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Next → ← Previous ✔ Done ♥ Favorite&lt;/p&gt;
&lt;p&gt;There are named html entities for some of them, others have to be used by their hex unicode index like ꯍ  (you have to test the last ones a lot, since not all are web-safe enough).&lt;/p&gt;
&lt;p&gt;You can find many such dingbats with their unicode hex codes in &lt;a href=&quot;http://www.copypastecharacter.com/&quot; title=&quot;Linkification: http://www.copypastecharacter.com/&quot;&gt;http://www.copypastecharacter.com/&lt;/a&gt; and &lt;a href=&quot;http://www.alanwood.net/unicode/dingbats.html&quot;&gt;http://www.alanwood.net/unicode/dingbats.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, if you have the time, by all means, use normal icons. If you don’t however, I find symbols to be a handy alternative. Sometimes I also use them as icon placeholders in work in progress until I find the time to design real icons.&lt;/p&gt;
&lt;h3 id=&quot;4.-zebra-rows&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/04/better-usability-in-5-minutes/#4.-zebra-rows&quot;&gt;4. Zebra rows&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This won’t work on IE and Firefox 3. You can increase readability of tables and some types of lists by slightly alternating the background color of the rows. You’ve probably seen this effect numerous times and it’s usually done via JavaScript or the server side code that generates the table. You can quickly do it with plain CSS3 however, if you don’t mind it not working in IE and older browser versions or don’t have the time for a complete cross-browser solution:&lt;/p&gt;
&lt;p&gt;table.stats tr {
background:white;
}&lt;/p&gt;
&lt;p&gt;table.stats tr:nth-child(odd) {
background:#f4f4f4;
}&lt;/p&gt;
&lt;h3 id=&quot;5.-highlight-the-current-target&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/04/better-usability-in-5-minutes/#5.-highlight-the-current-target&quot;&gt;5. Highlight the current target&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This won’t work in IE and older browser versions. If a particular page has lots of content, navigable by anchors (for example a FAQ page), you can use the CSS3 :target pseudo-class to let the user know where they landed:&lt;/p&gt;
&lt;p&gt;h3:target {
background:#FFFBCC;
}&lt;/p&gt;
&lt;p&gt;The h3 will only get a #FFFBCC background when it’s actually the landing point for the user. For example, if it has the id “foo”, it will get an #FFFBCC background when the user navigates to #foo.&lt;/p&gt;
&lt;h3 id=&quot;that%E2%80%99s-all-folks&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/04/better-usability-in-5-minutes/#that%E2%80%99s-all-folks&quot;&gt;That’s all folks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Did it actually take more than 5 minutes? ;)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Java pretty dates</title>
    <link href="https://lea.verou.me/2009/04/java-pretty-dates/"/>
    <updated>2009-04-21T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=312</id>
    <content xml:lang="en" type="html">&lt;p&gt;First of all, sorry for not posting as frequently as before. I’m feverishly working on a new project with a really tight deadline and I don’t have as much time as I previously did.&lt;/p&gt;
&lt;p&gt;For reasons that are irrelevant to this post, I have to write lots of Java code. So, sorry if I disappoint my fellow readers, but this post isn’t about JavaScript or CSS, it’s about Java. I wanted to display “pretty dates” (a bit like Twitter’s, for example &lt;em&gt;“yesterday”&lt;/em&gt;, &lt;em&gt;“5 minutes ago”&lt;/em&gt;, &lt;em&gt;“last year”&lt;/em&gt; and so on) in a few places and I couldn’t find a Java implementation, so I decided to code my own.&lt;/p&gt;
&lt;p&gt;For anyone that might need it, here it is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clike&quot;&gt;import java.util.Date;

/**
 * Class for human-readable, pretty date formatting
 * @author Lea Verou
 */
public class PrettyDate
{
	private Date date;

	public PrettyDate() {
		this(new Date());
	}

	public PrettyDate(Date date) {
		this.date = date;
	}

	public String toString() {
		long	current = (new Date()).getTime(),
			timestamp = date.getTime(),
			diff = (current - timestamp)/1000;
		int	amount = 0;
		String	what = &amp;quot;&amp;quot;;

		/**
		 * Second counts
		 * 3600: hour
		 * 86400: day
		 * 604800: week
		 * 2592000: month
		 * 31536000: year
		 */

		if(diff &amp;gt; 31536000) {
			amount = (int)(diff/31536000);
			what = &amp;quot;year&amp;quot;;
		}
		else if(diff &amp;gt; 2592000) {
			amount = (int)(diff/2592000);
			what = &amp;quot;month&amp;quot;;
		}
		else if(diff &amp;gt; 604800) {
			amount = (int)(diff/604800);
			what = &amp;quot;week&amp;quot;;
		}
		else if(diff &amp;gt; 86400) {
			amount = (int)(diff/86400);
			what = &amp;quot;day&amp;quot;;
		}
		else if(diff &amp;gt; 3600) {
			amount = (int)(diff/3600);
			what = &amp;quot;hour&amp;quot;;
		}
		else if(diff &amp;gt; 60) {
			amount = (int)(diff/60);
			what = &amp;quot;minute&amp;quot;;
		}
		else {
			amount = (int)diff;
			what = &amp;quot;second&amp;quot;;
			if(amount &amp;lt; 6) {
				return &amp;quot;Just now&amp;quot;;
			}
		}

		if(amount == 1) {
			if(what.equals(&amp;quot;day&amp;quot;)) {
				return &amp;quot;Yesterday&amp;quot;;
			}
			else if(what.equals(&amp;quot;week&amp;quot;) || what.equals(&amp;quot;month&amp;quot;) || what.equals(&amp;quot;year&amp;quot;)) {
				return &amp;quot;Last &amp;quot; + what;
			}
		}
		else {
			what += &amp;quot;s&amp;quot;;
		}

		return amount + &amp;quot; &amp;quot; + what + &amp;quot; ago&amp;quot;;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope someone finds it useful. :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Cross-browser imageless linear gradients v2</title>
    <link href="https://lea.verou.me/2009/04/cross-browser-imageless-linear-gradients-v2/"/>
    <updated>2009-04-24T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=316</id>
    <content xml:lang="en" type="html">&lt;p&gt;A while ago, I posted &lt;a href=&quot;http://lea.verou.me/2009/03/cross-browser-imageless-linear-gradients/&quot; title=&quot;Cross-browser imageless linear gradients v1&quot;&gt;a script of mine for creating 2-color cross-browser imageless linear gradients&lt;/a&gt;. As I stated there, I needed them for a color picker I have to create. And even though 2-color gradients are sufficient for most components, in most color spaces, I had forgotten an important one: &lt;strong&gt;Hue&lt;/strong&gt;. You can’t represent Hue with a 2-color gradient! So, I had to revise the script, and make it able to produce linear gradients of more than 2 colors. Furthermore, I needed to be able to specify a fully transparent color as one of the gradient colors, in order to create the photoshop-like 2d plane used by the picker (and no, a static image background like the one used in most JS color pickers wouldn’t suffice, for reasons irrelevant with this post). I hereby present you &lt;em&gt;Cross-browser, imageless, linear gradients &lt;strong&gt;v2&lt;/strong&gt;&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;The API has stayed just the same, with the following differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You may specify the keyword “transparent” instead of a #RRGGBB color (that was such a pain to implement btw!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When creating a Gradient object, color strings are now defined in an array. Example:&lt;/p&gt;
&lt;p&gt;var g = new Gradient(200, 100, [‘#000000’, ‘#ff1166’, ‘#23ff46’], true);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When calling &lt;code&gt;g.paint()&lt;/code&gt; it now takes &lt;strong&gt;2&lt;/strong&gt; arguments instead of 3: The new color array (or null if you don’t want that to change) and the direction (true for vertical, false for horizontal). For example:&lt;/p&gt;
&lt;p&gt;g.paint([‘#000000’, ‘#ff1166’, ‘#23ff46’], true);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2 new methods have been added: &lt;code&gt;g.setColorAt(index, color)&lt;/code&gt; and &lt;code&gt;g.direction(newDirection)&lt;/code&gt;. The first allows you to set a particular gradient color (index starting from 0) and the second to alter or toggle the direction (if you specify a direction parameter, you set the direction, if you call it with no parameters, it toggles from horizontal to vertical).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The fields &lt;code&gt;g.startColor&lt;/code&gt; and &lt;code&gt;g.endColor&lt;/code&gt; have been replaced by the array &lt;code&gt;g.colors&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;strong&gt;v2.0.1&lt;/strong&gt; Fixed a small bug with the ‘transparent’ keyword that affected multi-color gradients in browsers != IE when the transparent color wasn’t first or last.&lt;/p&gt;
&lt;p&gt;Enjoy:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lea.verou.me/scripts/gradient2/gradient.js&quot;&gt;gradient.js (5.1 KB)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lea.verou.me/scripts/gradient2/gradient-min.js&quot;&gt;gradient-min.js (2.7 KB)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lea.verou.me/scripts/gradient2/&quot;&gt;Test page&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Creating the perfect slider</title>
    <link href="https://lea.verou.me/2009/04/creating-the-perfect-slider/"/>
    <updated>2009-04-24T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=321</id>
    <content xml:lang="en" type="html">&lt;p&gt;I’ve previously discussed many times the color picker I have to create, and blogged about my findings on the way. An essential component of most color pickers is a slider control.&lt;/p&gt;
&lt;p&gt;I won’t go through much techincal details or JavaScript code in this article (after all the usability guidelines presented don’t only apply to JavaScript applications, and this is why I used Adobe Kuler as a good or bad example for some of them), it’s been done numerous times before and I prefer being a bit original than duplicating web content. You can google it and various implementations will come up if you need a starting point.&lt;/p&gt;
&lt;p&gt;Some might argue that I suffer from &lt;a href=&quot;http://en.wikipedia.org/wiki/Not_Invented_Here&quot;&gt;NIH syndrome&lt;/a&gt;, but I prefer to code things my way when I think I can do something even &lt;strong&gt;a bit&lt;/strong&gt; better. After all, if nobody ever tries to reinvent the wheel, the wheel stands no chances of improvement. In this case, I wanted to build the most usable slider ever (at least for color picking uses), or -from an arguably more conservative point of view- something significantly more usable than the rest (if you think about it, the two statements are equivalent, the first one just &lt;em&gt;sounds&lt;/em&gt; more arrogant :P ).&lt;/p&gt;
&lt;p&gt;I started by thinking about the way I personally use sliders and other form controls, and what bothers me most in the process. Then I combined that with the previously-done accessibility guidelines and the best slider implementations I’ve encountered (from a usability perspective), and here is what I came up with.&lt;/p&gt;
&lt;h3 id=&quot;requirements-for-the-perfect-slider-control&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/04/creating-the-perfect-slider/#requirements-for-the-perfect-slider-control&quot;&gt;Requirements for the perfect slider control&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;It should be &lt;a href=&quot;http://www.w3.org/WAI/intro/aria&quot;&gt;ARIA&lt;/a&gt;-compatible, so that disabled users can easily utilize it.&lt;/li&gt;
&lt;li&gt;It should be focusable, so that you can Tab to it.&lt;/li&gt;
&lt;li&gt;Of course the thumb should be draggable (why would you call it a slider otherwise anyway?)&lt;/li&gt;
&lt;li&gt;Of course the slider should be labeled so that the user knows what to use it for.&lt;/li&gt;
&lt;li&gt;Normal, hover and focus states should be different (at least in browsers supporting the :hover and :focus pseudo-classes)&lt;/li&gt;
&lt;li&gt;You should be able to click somewhere in the rail and have the thumb &lt;strong&gt;instantly move there&lt;/strong&gt;. Many slider implementations use animations for that, and even though I admit it raises the &lt;em&gt;wow&lt;/em&gt; factor, I don’t think it’s good for usability. &lt;strong&gt;When I choose something, I want it to be instantly selected&lt;/strong&gt;, I don’t want to wait for the pretty animation to finish, even if it’s short. Other implementations don’t move the slider to the point of the rail that you clicked, but just a bit &lt;em&gt;towards&lt;/em&gt; it. I find that very annoying. &lt;strong&gt;I clicked there because I want the slider to go there, not &lt;em&gt;towards&lt;/em&gt; there!&lt;/strong&gt; If I wanted to increment/decrement it a bit, I’d use other methods (read below).&lt;/li&gt;
&lt;li&gt;It should be keyboard-navigable. I think the ideal key-mappings are:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Left and right arrow keys&lt;/strong&gt; for small adjustments&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Page up/down&lt;/strong&gt; and &lt;strong&gt;Ctrl + left and right arrow keys&lt;/strong&gt; for big adjustments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Esc&lt;/strong&gt; to focus out (blur)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Home&lt;/strong&gt; and &lt;strong&gt;End&lt;/strong&gt; to navigate to the minimum and maximum respectively&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It should respond to the &lt;strong&gt;mousewheel&lt;/strong&gt; (and this is where all current implementations I’ve tested fail misreably) when focused. Small adjustments for normal mousewheel movement, big adjustments if the &lt;strong&gt;Ctrl&lt;/strong&gt; key is pressed as well. The pitfall to that is that you can’t cancel the default action (zoom in/out) in Safari. Why the Ctrl key and not Alt or Shift? Because we are accustomed to using the Ctrl key as a modifier. Alt and Shift are used more rarely. Especially designers (and for most color pickers they are a significant part of the target audience) are used in using the Ctrl key together with the mousewheel, since that’s a popular way for zooming or scrolling in most Adobe CS applications. Another important consideration when designing a mousewheel-aware slider, is to bind the event to the document element once the slider thumb is focused and unbind it when the slider thumb is blurred. Why? Because in most such cases, we don’t like to have to keep out mouse pointer on the slider to adjust it with the mousewheel. &lt;strong&gt;It being focused should suffice for letting the app know that this is what we want to adjust.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The exact numerical choice of the user should be visible, not only in an indicator that is positioned in a static place, but also &lt;strong&gt;above the slider thumb and have it move as the slider thumb moves&lt;/strong&gt;. &lt;strong&gt;I don’t want to have to look at two different places to see what I have selected!&lt;/strong&gt; (the slider thumb and the indicator) Why above the slider thumb? Because if it’s below, the mouse pointer is likely to hide it. This movable indicator should be hidden once the user focuses out (as long as we provide another one that is positioned statically). &lt;a href=&quot;http://kuler.adobe.com/#create/fromacolor&quot;&gt;Adobe Kuler&lt;/a&gt; does this fairly well, although it suffers from a few issues: When you click on the slider rail, the indicator doesn’t show up.&lt;/li&gt;
&lt;li&gt;The user should be able to click at some point in the rail and start dragging right away, &lt;strong&gt;without lifting their mouse button in the meantime&lt;/strong&gt;. Even though this sounds common-sense, I’ve seen &lt;strong&gt;many&lt;/strong&gt; implementations that fail at it (including Kuler’s).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, that’s it! What do you think? Could you come up with anything else to add?&lt;/p&gt;
</content>
  </entry><entry>
    <title>9 reasons why I prefer MySQL to MS SQL Server</title>
    <link href="https://lea.verou.me/2009/05/9-reasons-why-i-prefer-mysql-to-ms-sql-server/"/>
    <updated>2009-05-16T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=334</id>
    <content xml:lang="en" type="html">&lt;p&gt;In the past, I used MySQL for any of my DBMS needs. It wasn’t really an informed decision based on solid facts, actually I had never really given it any thought. It was what most developers used, it was what vBulletin used (one of the main projects of my company is based on vBulletin), it was what most hosts had pre-installed, in other words, it was the popular choice and I went with the crowd.&lt;/p&gt;
&lt;p&gt;Unlike most decisions taken that way, this one turned out to be correct (so far at least). In the university where I study (yeah, I do that too occasionally :P ), there is a great and extremely useful class on Database Systems offered in my semester. The only drawback is that it’s done on MS SQL Server. Consequently, I had to work with it quite a lot, and my conclusion was that MySQL is far superior (mostly syntax-wise as I don’t have the deep knowledge required to judge them fairly for other things, so don’t expect a deep analysis about performance or security - as far as I’m concerned, they are equally good at those). Here are a few reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;No ENUM datatype. Yeah, of course I can define a column with a char/varchar type and add a constraint to only allow for particular strings, but this kinda defeats the purpose of &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/storage-requirements.html&quot;&gt;memory saving that the ENUM datatype in MySQL offers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;No INSERT IGNORE. Instead you have to go through hell to simulate that in MS SQL Server.&lt;/li&gt;
&lt;li&gt;I hate it that I can’t use “USING(columnlabel)” in a JOIN query and I have to use “ON(table1.columnlabel = table2.colmnlabel)” all the time. Yeah, I know that the first one isn’t standard, but it’s shorter, cleaner, more elegant, and …you can still use “ON(…)” if you don’t like it. Having more options is never bad, is it?&lt;/li&gt;
&lt;li&gt;With MySQL you may insert multiple rows at once elegantly (“INSERT INTO tablename (…), (…), …”), without using the “INSERT INTO tablename SELECT (…) UNION ALL SELECT (…) UNION ALL …” hack. Moreover, the elegant MySQL way also &lt;a href=&quot;http://troels.arvin.dk/db/rdbms/#insert-multiple&quot;&gt;happens to be the standard&lt;/a&gt;, a standard that SQL Server doesn’t follow.&lt;/li&gt;
&lt;li&gt;Triggers can only run per statement, and not per row. This isn’t really important, since for most cases, it’s more efficient to define a per statement trigger anyway, but it doesn’t do any harm to have an extra option, does it?&lt;/li&gt;
&lt;li&gt;Paging is dead-easy on MySQL: SELECT * FROM foo LIMIT 10,20 . With MS SQL Server you have to &lt;a href=&quot;http://www.sqlteam.com/article/server-side-paging-using-sql-server-2005&quot;&gt;jump&lt;/a&gt; &lt;a href=&quot;http://www.asp101.com/articles/gal/effectivepaging/default.asp&quot;&gt;through&lt;/a&gt; &lt;a href=&quot;http://sqltips.wordpress.com/2007/08/10/optimized-solution-of-paging-by-using-count-over-functionality/&quot;&gt;hoops&lt;/a&gt; to do the same thing, especially if your query is not trivial.&lt;/li&gt;
&lt;li&gt;In MySQL, when you want to convert an integer to a hex string, you just call HEX(). In SQL Server you have to call an undocumented function and do some string manipulation to do the exact same thing.&lt;/li&gt;
&lt;li&gt;MySQL runs on every platform, whereas with MS SQL Server you’re stuck with Windows.&lt;/li&gt;
&lt;li&gt;Last but not least, MySQL is free (and when it’s not free, it’s at least cheap) and opensource :-)&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry><entry>
    <title>Tip: Multi-step form handling</title>
    <link href="https://lea.verou.me/2009/06/tip-multi-step-form-handling/"/>
    <updated>2009-06-16T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=346</id>
    <content xml:lang="en" type="html">&lt;p&gt;First of all, sorry for my long absence! I haven’t abandoned this blog, I was just really, really busy. I’m still busy, and this probably won’t change soon. However, I will still blog when I get too fed up with work or studying (this is one of these moments…). Now, let’s get to the meat.&lt;/p&gt;
&lt;h3 id=&quot;the-situation&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/06/tip-multi-step-form-handling/#the-situation&quot;&gt;The situation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In most web applications, even the simplest ones, the need for form handling will arise. There will be forms that need to be submitted, checked, processed or returned to the user informing them about any errors. A good empirical rule I try to follow is “Try not to produce URLs that don’t have a meaning if accessed directly”. It sounds simple and common-sense, doesn’t it? However, as Francois Voltaire said, “common sense is not so common”. I’ve seen variations of the following scenario several times, in several websites or even commercial web application software:&lt;/p&gt;
&lt;p&gt;Lets assume we have a two step process, like a registration form with an arguably¹ bad usability. The hypothetical script is called register.php (PHP is just an example here, the exact language doesn’t matter, it could be register.jsp or anything else). The user fills in the information required for the first step, and if they get it right, they advance to something like register.php?step=2 to complete the rest of the information. They fill in their information there as well, and submit the form. Everything is fine.&lt;/p&gt;
&lt;h3 id=&quot;or-is-it%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/06/tip-multi-step-form-handling/#or-is-it%3F&quot;&gt;Or is it?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;What we have done this way is that we have effectively created a completely useless URL. If someone tries to access register.php?step=2 directly (via their history for instance), we don’t have the POST data from the first step, so we either have to redirect them to the first step or, even worse, assume they are actually coming from the first step and present it to them full of errors telling them they got everything wrong. In both cases we have duplicate content, and in the second one, usability suffers a great deal.&lt;/p&gt;
&lt;p&gt;So, the right way is to pass step=2 via POST as well. This way, the URL stays as it was (register.php) and we avoid all the problems mentioned above. So, we end up doing something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;... form fields here ...
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;step&amp;quot; value=&amp;quot;2&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Create my account&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;now-we%E2%80%99re-done.-or-not%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/06/tip-multi-step-form-handling/#now-we%E2%80%99re-done.-or-not%3F&quot;&gt;Now we’re done. Or not?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This works fine. However, there’s still room for improvement. We could get rid of the extra input element by utilizing the submit button. Yeah, it’s a form element too, even though we often overlook that and just focus on styling it. If we give it a name, it will get sent along with the other form fields. So instead of the html above, we can do that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;... form fields here ...
&amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;step&amp;quot; value=&amp;quot;2&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;but-wait!-what-the-f*ck-is-that-%3F%3F%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/06/tip-multi-step-form-handling/#but-wait!-what-the-f*ck-is-that-%3F%3F%3F&quot;&gt;But wait! What the f*ck is that ???&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now usability suffers! Instead of our nice “Create my account” button, the user now sees a cryptic “2”. Who cares if it works or if it requires less code, if nobody understands how to register, right? Luckily for us, we don’t &lt;strong&gt;have&lt;/strong&gt; to use the &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt; tag to create submit buttons. A better (in terms of styling, semantics, markup clarity etc), albeit less known, alternative exists: The &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; tag. When using the &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; tag, the label of the button is derived from the markup within the start and end tags (yeah, we can also have html elements in there, not only text nodes, in case you’re wondering), not from the value attribute. So, we can set it’s name and value attributes to whatever we want, and the user won’t notice a thing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;... form fields here ...
&amp;lt;button type=&amp;quot;submit&amp;quot; name=&amp;quot;step&amp;quot; value=&amp;quot;2&amp;quot;&amp;gt;Create my account&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s really simple, although not done often. I guess it’s one of these “OMG how come I’ve never thought about this??” kind of things. :P&lt;/p&gt;
&lt;p&gt;¹ I firmly believe we should eliminate the number of steps required in any procedure and especially in registration forms that users are bored to fill in anyway. However, there’s an exception to that: If the form &lt;strong&gt;has&lt;/strong&gt; to be big for some reason, breaking it into steps actually makes it &lt;strong&gt;more&lt;/strong&gt; usable, since the user is not overwhelmed with all these fields. Another situation when this approach is favorable is when the second step is determined according to the data from the first, although thanks to JavaScript and Ajax, this is becoming obsolete nowadays.&lt;/p&gt;
</content>
  </entry><entry>
    <title>On password masking and usability</title>
    <link href="https://lea.verou.me/2009/06/on-password-masking-and-usability/"/>
    <updated>2009-06-28T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=351</id>
    <content xml:lang="en" type="html">&lt;p&gt;I just read &lt;a href=&quot;http://www.useit.com/alertbox/passwords.html&quot;&gt;Jakob Nielsen’s recent post in which he urged web designers/developers to stop password masking&lt;/a&gt; due to it’s inherent usability issues. I found it an interesting read. Hey, at last, someone dared to talk about the elephant in the room!&lt;/p&gt;
&lt;p&gt;In most cases password masking is indeed useless, but still, there are several cases where you need that kind of protection. He also points that out, suggesting a checkbox to enable the user to mask their entered password if they wish to do so. He also suggests that checkbox being enabled by default on sites that require high security.&lt;/p&gt;
&lt;p&gt;I think the checkbox idea is really good, as long as it works in the opposite way: Password masking should &lt;strong&gt;always&lt;/strong&gt; be the default and you should &lt;strong&gt;check&lt;/strong&gt; the checkbox to &lt;strong&gt;show&lt;/strong&gt; the characters you typed. This is in line with what Windows (Vista or newer) users are already accustomed to anyway:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2009/06/on-password-masking-and-usability/images/vistawirelesspasscode.png&quot; alt=&quot;Enter passphrase&quot; title=&quot;Enter passphrase&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This can (and should) be done with JavaScript alone: if the user has it turned off, no problem, just a regular old password field. Of course the checkbox should also be dynamically added, to prevent users with disabled JS from viewing a checkbox that does nothing at all.&lt;/p&gt;
&lt;p&gt;This seems easy at first, even without a library (although, in this particular case, a library would greatly reduce the amount of code required, so much that I’m tempted to include a jQuery version as well):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;window.onload = function() {
	var passwords = document.getElementsByTagName(&#39;input&#39;);
	for(var i=0; i&amp;lt;passwords.length; i++) {
		if(passwords&#92;[i&#92;].type == &#39;password&#39;) {
			var password = passwords&#92;[i&#92;];

			var showCharsCheckbox = document.createElement(&#39;input&#39;);
				showCharsCheckbox.type = &#39;checkbox&#39;;
				showCharsCheckbox.onclick = (function(input) {
					return function() {
						input.type = this.checked? &#39;text&#39; : &#39;password&#39;;
					};
				})(password);

			var showCharsLabel = document.createElement(&#39;label&#39;);
				showCharsLabel.appendChild(showCharsCheckbox);
				showCharsLabel.appendChild(document.createTextNode(&#39;Show characters&#39;));

			// If the password field is inside a &amp;lt;label&amp;gt; element, we don&#39;t want to insert our label in there as well!
			var previousSibling = /label/i.test(password.parentNode.nodeName)? password.parentNode : password;

			// Check whether it&#39;s the last child of it&#39;s parent
			if(previousSibling.nextSibling) {
				previousSibling.parentNode.insertBefore(showCharsLabel, previousSibling.nextSibling);
			}
			else {
				previousSibling.parentNode.appendChild(showCharsLabel);
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, nothing is ever simple, when you also need to support our &lt;em&gt;beloved&lt;/em&gt; Internet Explorer. Most moderately experienced JavaScript developers have probably already understood what I’m talking about: The all time classic IE bug (still present in IE8…) in regards to setting an &lt;input /&gt; element’s type attribute. You can only set it once, for elements that are not already in the DOM. After that, it becomes read-only, and any attempt to set it results in a “The command is not supported” error. And when I say “any” attempt I mean it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;element.setAttribute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.setAttributeNode()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.removeAttribute()&lt;/code&gt; and then &lt;code&gt;element.setAttribute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.cloneNode()&lt;/code&gt;, then one of the above, then replacing the node with the clone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;everything&lt;/strong&gt; fails miserably.&lt;/p&gt;
&lt;p&gt;I’ve encountered this problem several times in the past as well, but I could always think of an alternative way to do what I wanted without having to work around it. In this case, I don’t think there is one. So we’re left with two possible scenarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Perform an easy test in the beginning to see whether this bug exists and proceed only if the browser isn’t naughty. This could be done with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var supportsChangingTypeAttribute = (function() {
	var input = document.createElement(&#39;input&#39;);
	try {
		input.type = &#39;password&#39;;
		input.type = &#39;text&#39;;
	} catch(e) {
		return false;
	}
	return input.type == &#39;text&#39;;
})();

if(supportsChangingTypeAttribute) {
	// do stuff...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrap the statement that IE chokes on in a try…catch construct and in the catch(e) {…} block create a new input element, copy &lt;strong&gt;everything&lt;/strong&gt; (where everything is &lt;strong&gt;at least&lt;/strong&gt;: attributes, properties, event handlers - both traditional ones &lt;strong&gt;and&lt;/strong&gt; listeners) from the password field into it (except the type attribute of course!) and replace the original password field with it. After the first time, the text field could also be reused, to improve performance. If you have a shortage of trouble in your life, you may attempt it, I currently do not. :P It can be a &lt;strong&gt;very&lt;/strong&gt; simple task for particular cases, but a generic solution that would work in any site (or even in most sites) seems a really daunting, tedious and downright boring task. I also hope there might be a better solution, that I haven’t thought of. Any ideas?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry><entry>
    <title>Idea: The simplest registration form ever</title>
    <link href="https://lea.verou.me/2009/07/idea-the-simplest-registration-form-ever/"/>
    <updated>2009-07-23T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=361</id>
    <content xml:lang="en" type="html">&lt;p&gt;If a web application has some sort of registration system (and most do), the registration page should be one of the most attractive, inviting, usable pages of it. It should make you to &lt;strong&gt;want&lt;/strong&gt; to register, not repulse you. We don’t want the user to give up in the middle of filling it because they are fed up with it’s length or bad usability, or -even worse- not even attempt to do so, do we?&lt;/p&gt;
&lt;p&gt;The most popular websites usually take this rule to heart and employ the simplest registration forms: Only the basic fields required, and most of the times, even without password/email confirmation.&lt;/p&gt;
&lt;p&gt;I was wondering lately - what would be the simplest possible registration form? It should have the minimum number of fields required: Username and password and a field for some kind of human verification.&lt;/p&gt;
&lt;p&gt;At this point, some readers might argue “Hey, why not an email field as well?”. In my opinion, the email is not always a required field. Let’s see why it’s being asked for in most cases: Unique identification (to prevent double accounts) and for sending out notifications for important events. However, it’s useless for the first purpose due to all these disposable email websites. As for the second purpose, since notifications can be switched off (and if not, then they are essentially considered spam), it could be regarded optional and we don’t include optional fields in registration forms, do we? ;-)&lt;/p&gt;
&lt;p&gt;Of course, in websites that use the email instead of a username to let their users log in, you may just substitute the username field above with an email field (since in that case, the username is what could be considered optional) and we also have two fields. Smart readers might have noticed another pattern here: The only fields that are truly required for a registration form are the same ones that are required for a login form plus a human verification field.&lt;/p&gt;
&lt;p&gt;And then it dawned on me: We can make the registration process almost as quick as logging in! We could use the same form for both actions. The submit button label could indicate the dual nature of the form, for instance “Log in or register”. If the username (or email) doesn’t exist, we could then ask the user whether they want to create a new account and present them the human verification field at that point. There is no need for a password verification field, since &lt;a href=&quot;http://lea.verou.me/2009/06/on-password-masking-and-usability/&quot;&gt;we could just have a checkbox for displaying what the user typed&lt;/a&gt;, if they feel insecure about it.&lt;/p&gt;
&lt;p&gt;I find 3 inherent issues with this approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Security. If a login attempt fails, the user will know whether he got the username or the password wrong. However, in most websites, you can easily check whether a username exists anyway, so I don’t consider this a real concern. I just included it because I’m certain that if I didn’t, somebody would point it out to me in the comments.&lt;/li&gt;
&lt;li&gt;Despite being a more usable approach by nature, it’s not by any means a convention yet. Until it becomes one, I’m afraid that some users will be confused by its extreme …simplicity! Funny, isn’t it?&lt;/li&gt;
&lt;li&gt;We won’t be able to employ Ajax verification for the registration form, since it will essentially be a login form as well, and until the user submits, we won’t know what they plan to do (login or register). Having an Ajax verification script there by default will confuse existing users as hell (as in &lt;em&gt;“What do they mean by ‘Username is taken’? WTF??”&lt;/em&gt;). So, we have to sacrifice some usability to gain some usability. The question is: Is the usability we gain more than the usability we sacrifice? What do you think?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see by the problems mentioned above, it’s still a rough-on-the-edges idea (I just thought about it and I haven’t refined it yet), but I think it’s interesting. What are your thoughts?&lt;/p&gt;
</content>
  </entry><entry>
    <title>Bevels in CSS3</title>
    <link href="https://lea.verou.me/2009/07/bevels-in-css3/"/>
    <updated>2009-07-23T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=368</id>
    <content xml:lang="en" type="html">&lt;p&gt;Yeah, yeah I know, bevels are soooo 1996. And I agree. However, it’s always good to know the capabilities of your tools. Talented designers will know when it’s suitable to use a certain effect and incapable ones will abuse whatever is given to them, so after a lot of thought, I decided to blog about my discovery.&lt;/p&gt;
&lt;p&gt;Even though not directly mentioned in the spec, CSS3 is capable of easily creating a bevel effect on any element. Moreover, if the element has rounded corners, the bevel follows that as well. Before explaining the technique, let’s think about how a bevel actually gets drawn. It’s essentially two inner shadows, that when combined, create the illusion of a 3d appearance: a light one from the top left corner and a dark one from the bottom right corner. CSS3 includes the ability to create inner shadows, if you specify the keyword “inset” in the box-shadow declaration (currently only supported by Firefox 3.5). Moreover, the CSS3 spec allows for multiple box shadows on the same elements.&lt;/p&gt;
&lt;p&gt;Now, let’s examine an example (only works in Firefox 3.5):&lt;/p&gt;
&lt;p&gt;button {
background:#f16;
color:white;
padding:6px 12px 8px 12px;
border:none;
font-size:18px;
-moz-border-radius:10px;
-moz-box-shadow: -2px -2px 10px rgba(0,0,0,.25) inset, 2px 2px 10px white inset;
}&lt;/p&gt;
&lt;p&gt;which produces this result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2009/07/bevels-in-css3/images/css3bevel.png&quot; alt=&quot;css3bevel&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If we want, we can also create a “pressed” button state, in a similar fashion:&lt;/p&gt;
&lt;p&gt;button:active {
-moz-box-shadow: 2px 2px 10px rgba(0,0,0,.25) inset, -2px -2px 10px white inset;
padding:7px 11px 7px 13px;
}&lt;/p&gt;
&lt;p border:=&quot;&quot; 0;=&quot;&quot;&gt;button::-moz-focus-inner&lt;/p&gt;
&lt;p&gt;which produces this pressed state:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2009/07/bevels-in-css3/images/css3bevel_pressed.png&quot; alt=&quot;css3bevel_pressed&quot; /&gt;&lt;/p&gt;
&lt;p&gt;See it in action here (only for Firefox 3.5): &lt;a href=&quot;http://lea.verou.me/demos/css3bevel.html&quot; title=&quot;Linkification: http://lea.verou.me/demos/css3bevel.html&quot;&gt;http://lea.verou.me/demos/css3bevel.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course, if implemented in a real world website, you should also add the -webkit- and -o- CSS3 properties to provide a closer effect for the other browsers and be ready for the time when the ones that aren’t implemented yet in them will finally make it (for instance, when Webkit implements inset box shadows, it will work in it as well).&lt;/p&gt;
&lt;p&gt;Enjoy &lt;strong&gt;responsibly&lt;/strong&gt;. :-)&lt;/p&gt;
</content>
  </entry><entry>
    <title>(byte)size matters</title>
    <link href="https://lea.verou.me/2009/07/bytesize-matters/"/>
    <updated>2009-07-31T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=378</id>
    <content xml:lang="en" type="html">&lt;p&gt;Yesterday, I was editing a CSS file and I was wondering how many bytes/KB would a particular addition add to it, in order to decide if it was worth it. Since, I had found myself wondering about the exact same thing multiple times in the past, I decided to make a simple standalone HTML page that would compute the size of any entered text in bytes, KB, MB, etc (whatever was most appropriate). It should be simple and quick and it should account for line terminator differences across operating systems.&lt;/p&gt;
&lt;p&gt;About half an hour later, I was done. And then it dawned on me: Someone else might need it too! Since .com domains are, so cheap, hey, let’s get a domain for it as well! There are &lt;a href=&quot;http://kottke.org/08/02/single-serving-sites&quot;&gt;several&lt;/a&gt; &lt;a href=&quot;http://dowebsitesneedtolookexactlythesameineverybrowser.com/&quot;&gt;sites&lt;/a&gt; &lt;a href=&quot;http://amiawesome.com/&quot;&gt;with&lt;/a&gt; &lt;a href=&quot;http://r33b.net/&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;http://isitchristmas.com/&quot;&gt;domain&lt;/a&gt; &lt;a href=&quot;http://justfuckinggoogleit.com/&quot;&gt;that&lt;/a&gt; &lt;a href=&quot;http://www.sometimesredsometimesblue.com/&quot;&gt;are&lt;/a&gt; &lt;a href=&quot;http://www.d-e-f-i-n-i-t-e-l-y.com/&quot;&gt;way&lt;/a&gt; &lt;a href=&quot;http://www.tired.com/&quot;&gt;simpler&lt;/a&gt; than that anyway. A friend that was sitting next to me suggested “&lt;a href=&quot;http://sizematters.com/&quot;&gt;sizematters.com&lt;/a&gt;” as a joke, but as it turned out, &lt;a href=&quot;http://bytesizematters.com/&quot; title=&quot;(byte)size matters!&quot;&gt;bytesizematters.com&lt;/a&gt; was free, so we registered it. And there it is, less than a day after, &lt;a href=&quot;http://bytesizematters.com/&quot;&gt;it’s aliiive&lt;/a&gt;. :P&lt;/p&gt;
&lt;p&gt;Any feedback or suggestions are greatly welcome!&lt;/p&gt;
&lt;p&gt;For instance, should I implement a very simple minification algorithm and display bytesize for that as well, or is it too much and ruins the simplicity of it without being worth it? &lt;strong&gt;[edit: I did it anyway]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Should I implement a way to compare two pieces of text and find out the difference in byte size (could be useful for JavaScript refactoring)? &lt;strong&gt;[edit:&lt;/strong&gt; &lt;strong&gt;I did it anyway&lt;/strong&gt;**]**&lt;/p&gt;
</content>
  </entry><entry>
    <title>Exploring CSS3 text-shadow</title>
    <link href="https://lea.verou.me/2009/09/css-text-shadow/"/>
    <updated>2009-09-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=389</id>
    <content xml:lang="en" type="html">&lt;p&gt;I consider CSS3’s &lt;code&gt;text-shadow&lt;/code&gt; one of the most exciting CSS3* properties, which offers us a lot more effects than it’s name suggests. Of course, it can be used for creating drop shadows for text, and it carries out that task very well, but it’s inherent flexibility allows it to be also used for glow effects, outlines, bevels, extruded text, inset text, fuzzy text and many others (until browser bugs and backwards compatibility come into play… :(). This post is about various findings of mine (and others’, where a source is provided) regarding this property, including browser bugs and inconsistencies, effects that can be achieved with it, compatibility woes etc.&lt;/p&gt;
&lt;h3 id=&quot;browser-support&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/09/css-text-shadow/#browser-support&quot;&gt;Browser support&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Opera 9.5+&lt;/li&gt;
&lt;li&gt;Firefox 3.5+&lt;/li&gt;
&lt;li&gt;Safari 1.0+&lt;/li&gt;
&lt;li&gt;Google Chrome&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;text-shadow-syntax&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/09/css-text-shadow/#text-shadow-syntax&quot;&gt;text-shadow syntax&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The syntax is fairly simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;text-shadow: &amp;lt;offset-x&amp;gt; &amp;lt;offset-y&amp;gt; &amp;lt;blur-radius&amp;gt; &amp;lt;color&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are some variations (the color could be first instead of last, the blur radius can be omitted if it’s equal to zero and the color may be omitted if it’s the same as the text color) and you may include multiple comma delimited shadows.&lt;/p&gt;
&lt;p&gt;You may read more about the syntax in the official &lt;a href=&quot;http://www.w3.org/TR/css3-text/#text-shadow&quot;&gt;specification&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;how-it-works&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/09/css-text-shadow/#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It helps if you imagine the algorithm for drawing the text shadow as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a (most of the times differently colored) clone of the text and place it behind the text.&lt;/li&gt;
&lt;li&gt;Move it according to the X and Y offsets (positive values move it to the right and bottom respectively)&lt;/li&gt;
&lt;li&gt;If a blur radius is specified and it’s &amp;gt; 0, blur it accordingly (the specification doesn’t mention the blurring algorithm to be used, so each browser vendor may choose any blurring algorithm they prefer, and judging by my experiments, it seems they took advantage of this freedom). &lt;strong&gt;In all cases however, the bounding box of the blurred text can extend no further than the bounding box of the original text plus (+) the specified blur radius on each side.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Repeat for the rest of the shadows, if more than 1 are specified. The order in which shadows are drawn seems to be a subject of debate, judging by the wording of the specification and the various existing implementations.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;the-experiments&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/09/css-text-shadow/#the-experiments&quot;&gt;The experiments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You will find the experiments I performed &lt;a href=&quot;http://lea.verou.me/demos/text-shadow.html&quot;&gt;here&lt;/a&gt;. I tried to come up with (or find) interesting uses of the property. I also tried to make some of them “pretty”, so they could be useful to others, but given the fact that these were primarily created for testing purposes, this wasn’t achievable for all of them. Next to each experiment is the CSS used to produce the effect (directly fetched from the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag via JavaScript). You’d better not view it with IE until you read below or you might have some freaky nightmares tonight :P&lt;/p&gt;
&lt;p&gt;Screenshots from various browsers: (mouse over the thumbnails to see which browser was used for each one)&lt;/p&gt;
&lt;p&gt;[gallery link=“file”]&lt;/p&gt;
&lt;h3 id=&quot;browser-bugs-and-inconsistencies&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/09/css-text-shadow/#browser-bugs-and-inconsistencies&quot;&gt;Browser bugs and inconsistencies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Apparently, some browser bugs were exposed in these experiments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Opera 10&lt;/strong&gt; and &lt;strong&gt;Safari&lt;/strong&gt; don’t display the shadow when the text color is &lt;code&gt;transparent&lt;/code&gt; (demonstrated in Experiment #5). &lt;strong&gt;Opera 9.6&lt;/strong&gt; doesn’t seem to support &lt;code&gt;transparent&lt;/code&gt; as a text color, so it ignores it.&lt;/li&gt;
&lt;li&gt;When the text color is RGBA, &lt;strong&gt;Safari&lt;/strong&gt; applies transparency to the shadow, equal to the Alpha component (demonstrated in Experiment #8).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opera&lt;/strong&gt; paints the shadows in the order they were specified, whereas all others use the reverse. According to the current version of the specification, Opera is the only correct one, but I doubt that web designers will give her credit for it :p (Experiment #8)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Chrome&lt;/strong&gt; uses a crappy blurring algorithm (Experiments #5 and #7)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Safari&lt;/strong&gt; and &lt;strong&gt;Chrome&lt;/strong&gt; don’t default to the text color when no color is specified in text-shadow, but to &lt;code&gt;transparent&lt;/code&gt;. (Experiment #2)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opera&lt;/strong&gt; is seriously messed up when it comes to transparent shadows, as demonstrated by Experiment #9. I can’t even describe the bug (try messing with the text-shadow value a bit and you’ll see why…). Luckily, I can’t think of a single case where a transparent text-shadow would be useful :P&lt;/li&gt;
&lt;li&gt;You can see a bit of the shadow in &lt;strong&gt;Google Chrome&lt;/strong&gt; even if the offsets and blur radius are all 0 (Experiment #9). I’m not sure if this is a bug, but it’s inconsistent with the other implementations.&lt;/li&gt;
&lt;li&gt;Even if you ignore the bugs above, there are slight rendering variations when multiple blurred shadows are involved (or they are more apparent in those cases), as demonstrated by experiments #2, #6 and #7.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Firefox’s implementation seems to be the clear winner here…&lt;/p&gt;
&lt;p&gt;A note about the above observations: When no version number is mentioned, 3.5 is implied for Firefox, 10 for Opera and 4 for Safari and Chrome.&lt;/p&gt;
&lt;h3 id=&quot;alternatives-to-text-shadow&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/09/css-text-shadow/#alternatives-to-text-shadow&quot;&gt;Alternatives to text-shadow&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;ie-filters&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/09/css-text-shadow/#ie-filters&quot;&gt;IE Filters&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As you might have noticed, I have managed to completely avoid mentioning Internet Explorer up to this point. It’s no surprise that our dearest browser doesn’t support the text-shadow property. However, it does support some filters (&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms532985%28VS.85%29.aspx&quot;&gt;DropShadow&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms533086%28VS.85%29.aspx&quot;&gt;Shadow&lt;/a&gt;) that could be used to provide a very small subset of the different kinds of text shadows, although they severely &lt;strong&gt;mess up the font anti-aliasing&lt;/strong&gt; (just like all IE filters). Also, if the parent or siblings of the text node in question have backgrounds or borders &lt;strong&gt;an extra element is needed to enclose the text node&lt;/strong&gt; (you’ll see in the experiments why…). For these reasons,  I highly doubt whether they are worth it and I don’t use them personally. However, if you are interested you can see a brief demonstration of these two filters in Experiments #3 (DropShadow) and #6 (Shadow, actually 4 of them).&lt;/p&gt;
&lt;h3 id=&quot;the-%3Abefore-pseudo-element&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/09/css-text-shadow/#the-%3Abefore-pseudo-element&quot;&gt;The :before pseudo-element&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This could be used instead of the text-shadow, when the blur radius is 0, since browser support for the :before pseudo-element is better than browser support for text-shadow (even IE8 supports that, yay). &lt;a href=&quot;http://www.workingwith.me.uk/articles/css/cross-browser-drop-shadows&quot;&gt;Here is a thorough (although slightly outdated) tutorial on this technique&lt;/a&gt;. However,this workaround severely hurts separation of presentation and content/structure, since the content has to be duplicated in the CSS. Repeating something greatly increases the chance that the two copies become inconsistent, since people tend to be forgetful. Also, you have to know in advance the exact height of the text (in lines), another maintenance headache. For these reasons, I don’t use this workaround either.&lt;/p&gt;
&lt;p&gt;In my humble opinion, the text shadow is usually just icing on the cake and not something crucial to the design, so it doesn’t hurt if it won’t show in some old and/or crappy browsers. It degrades gracefully in most cases (ok, you’ll have to wait a few years before using it in ways that don’t) so it doesn’t hurt usability/accessibility either. It’s just one of the little treats I like to offer to visitors that were smart enough to use a decent browser. :-)&lt;/p&gt;
&lt;h3 id=&quot;epilogue&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/09/css-text-shadow/#epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;text-shadow is a very flexible property, with probably the best browser and editor – even Dreamweaver acknowledges it’s existence! – support among all notable CSS3* properties. It also degrades gracefully most of the times (the experiments above shouldn’t be considered “most of the times”! :P ) and this is why it’s probably also the most widely used CSS3* property.&lt;/p&gt;
&lt;p&gt;I think it could be improved even more by allowing for the inset keyword (just like inset box-shadows – sadly only Firefox 3.5 supports those at the time) and a fourth parameter could be used to enlarge or shrink the shadow (currently the only way to enlarge it is by blurring it, which isn’t always desirable) although it would complicate the shorthand (the blur radius would probably become required – so that the browser can tell them apart). However, a separate property could be used to solve that (text-shadow-size?). I guess we could combine the :before technique, with transparent text color (in the :before pseudo-element) and a text-shadow for that to imitate such an effect (I can elaborate if this seems obscure) although I haven’t actually tried it (however, even if it works, it’s too much of a hassle).&lt;/p&gt;
&lt;p&gt;Anyway, I guess it’s too late for such suggestions, so let’s focus on what we actually will get (?) which is more than sufficient :-)&lt;/p&gt;
&lt;p&gt;______________________________________________________________&lt;/p&gt;
&lt;p&gt;*Actually, it was originally proposed for CSS 2.1, but it was dropped due to lack of implementations (basically only Webkit supported it)&lt;/p&gt;
</content>
  </entry><entry>
    <title>A CSS3 learning(?) tool</title>
    <link href="https://lea.verou.me/2009/10/a-css3-learning-tool/"/>
    <updated>2009-10-08T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=414</id>
    <content xml:lang="en" type="html">&lt;p&gt;In case anyone is interested, &lt;a href=&quot;http://lea.verou.me/scripts/css3learn.html&quot;&gt;this is my take&lt;/a&gt; on the &lt;a href=&quot;http://ajaxian.com/archives/interactive-css-3-generator&quot;&gt;“challenge” that Brad Neuberg posted today on Ajaxian&lt;/a&gt;. It needs more properties, but it’s very easy to extend. I guess I should also add CSS3 values (RGBA/HSL(A) colors, CSS gradients etc) but oh well, I’m currently in a hurry. I will, if anyone actually finds it useful (?).&lt;/p&gt;
&lt;p&gt;It didn’t prove much of a challenge actually and I honestly doubt it’s educational value (actually it’s value in general), but it was an interesting thing to do while drinking my first coffee in the morning – I really enjoyed writing it :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>New version of rgba.php is out!</title>
    <link href="https://lea.verou.me/2009/10/new-version-of-rgba-php-is-out/"/>
    <updated>2009-10-25T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=418</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;http://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/&quot;&gt;It’s been a while since I posted my little server-side solution for cross-browser RGBA colors&lt;/a&gt; (in a nutshell: native rgba for the cool browsers that support it, a PHP-generated image for those that don’t). For features, advantages, disadvantages etc, go see the original post. In this one I’ll only discuss the new version.&lt;/p&gt;
&lt;p&gt;So, since it’s release I’ve received suggestions from many people regarding this script. Some other ideas were gathered during troubleshooting issues that some others faced while trying to use it. I hope I didn’t forget anything/anyone :)&lt;/p&gt;
&lt;h3 id=&quot;changelog-(%2Bcredits)%3A&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/10/new-version-of-rgba-php-is-out/#changelog-(%2Bcredits)%3A&quot;&gt;Changelog (+credits):&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;You may now specify the size of the generated image (thanks &lt;em&gt;&lt;strong&gt;&lt;a href=&quot;http://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/#comment-122&quot;&gt;Sander Arts&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;!)&lt;/li&gt;
&lt;li&gt;If the PHP version is below 5.1.7 the call to imagepng() uses 2 parameters instead of 4, to workaround the bug found by &lt;em&gt;&lt;strong&gt;&lt;a href=&quot;http://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/#comment-103&quot;&gt;Bridget&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt; (thanks &lt;strong&gt;&lt;em&gt;Chris Neale&lt;/em&gt;&lt;/strong&gt; for suggesting the use of phpversion()!)&lt;/li&gt;
&lt;li&gt;Added error_reporting() to only allow for fatal errors and parse errors to go through (I should had done this anyway but I completely forgot). This solves an issue that &lt;strong&gt;&lt;em&gt;Erin Doak&lt;/em&gt;&lt;/strong&gt; pointed out, since they had set up notices to be displayed and even a reference to an undefined index made the whole script collapse.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Mariotti Raffaele&lt;/strong&gt;&lt;/em&gt; pointed out that apache_request_headers() was not defined in all PHP installations. After looking into it a bit, I found out that it’s available only when PHP is installed as an Apache module. After some more research it turned out that the only way to get the If-Modified-Since header otherwise is an .htaccess, so I  ruled that out (It would complicate the workaround I think and I doubt all hosts allow .htaccess (?). On the other hand, an .htacess would also allow for some URL rewriting goodness… Hmmm… Should I consider this?). So, if the function is not available, it serves the file with an 200 response code every time, instead of just sending a 304 response when the If-Modified-Since header is present.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lea.verou.me/2009/10/new-version-of-rgba-php-is-out/#comment-893&quot;&gt;&lt;strong&gt;Igor Zevaka&lt;/strong&gt;&lt;/a&gt; for pointing out that the Expires header wasn’t a valid HTTP date.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;links&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2009/10/new-version-of-rgba-php-is-out/#links&quot;&gt;Links&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://lea.verou.me/2009/10/new-version-of-rgba-php-is-out/uploads/rgba.zip&quot;&gt;rgba.php&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://lea.verou.me/wp-content/themes/leaverou/images/rgba.php?r=255&amp;amp;g=0&amp;amp;b=100&amp;amp;a=80&quot;&gt;Demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Enjoy :) and please report any bugs!&lt;/p&gt;
</content>
  </entry><entry>
    <title>A different approach to elastic textareas</title>
    <link href="https://lea.verou.me/2009/11/a-different-approach-to-elastic-textareas/"/>
    <updated>2009-11-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=425</id>
    <content xml:lang="en" type="html">&lt;p&gt;I loved elastic textareas since the very first moment I used one (at facebook obviously). They let you save screen real estate while at the same time they are more comfortable for the end user. It’s one of the rare occasions when you can have your UI cake and eat it too!&lt;/p&gt;
&lt;p&gt;However, I never liked the implementation of the feature. In case you never wondered how it’s done, let me explain it in a nutshell: All elastic textarea scripts (or at least all that I know of) create a hidden (actually, absolutely positioned and placed out of the browser window) div, copy some CSS properties from the textarea to it (usually padding, font-size, line-height, font-family, width and font-weight) and whenever the contents of the textarea change they copy them to the hidden div and measure it’s dimensions. It might be good enough for facebook, where the styling of those textareas is fairly simple and consistent throughout the site, or any other particular site, but as a generic solution? I never liked the idea.&lt;/p&gt;
&lt;p&gt;So, I tried to explore a different approach. As Andrea Giammarchi &lt;a href=&quot;http://webreflection.blogspot.com/2009/11/google-closure-im-not-impressed.html&quot;&gt;recently wrote&lt;/a&gt; &lt;em&gt;“This is almost intrinsic, as developers, in our DNA: we spot some interesting concept? We rewrite it from scratch pretending we are doing it better!”&lt;/em&gt; and I’m no exception (although in this case I don’t think I did it better, I just think it has potential). The basic idea is quite naive, but it works quite well in most browsers (Internet Explorer being the black sheep as usual): Test if the textarea is scrollable, and if so, increase it’s &lt;code&gt;rows&lt;/code&gt; attribute and try again. If it’s not scrollable initially, try decreasing it’s &lt;code&gt;rows&lt;/code&gt; attribute until it becomes scrollable (and then ++ it).&lt;/p&gt;
&lt;p&gt;It works flawlessly on Firefox and quite well on Safari, Chrome and Opera (it just slightly twitches when it enlarges in those). Stupid Internet Explorer though repaints too many times, causing a flicker at the bottom when the user is typing, something really disturbing, so I can’t consider the script anything above &lt;strong&gt;experimental&lt;/strong&gt; at the moment. I’m just posting it in case anyone has an idea of how to fix the aforementioned issues, because apart from those it has quite a few advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should work with any CSS styles&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No&lt;/strong&gt; library requirements (unlike all the others I know of)&lt;/li&gt;
&lt;li&gt;Only &lt;strong&gt;800 bytes&lt;/strong&gt; minified (2.4KB originally)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, here it is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lea.verou.me/scripts/elastic-textarea/&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lea.verou.me/scripts/elastic-textarea/elastic-textarea.js&quot;&gt;elastic-textarea.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lea.verou.me/scripts/elastic-textarea/elastic-textarea-min.js&quot;&gt;elastic-textarea-min.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;For the record, I &lt;strong&gt;don’t&lt;/strong&gt; think that a script &lt;strong&gt;should&lt;/strong&gt; be needed for things like that. This looks like something that should be handled by CSS alone. We basically want the height of an element to adjust as necessary for it’s contents to fit. We already use CSS for these things on other elements, why not form controls as well?&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Yet another email hiding technique?</title>
    <link href="https://lea.verou.me/2009/11/yet-another-email-hiding-technique/"/>
    <updated>2009-11-29T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=443</id>
    <content xml:lang="en" type="html">&lt;p&gt;While &lt;a href=&quot;http://lea.verou.me/2009/11/exploring-browser-supported-unicode-characters-and-a-tweet-shortening-experiment/&quot;&gt;exploring browser-supported Unicode characters&lt;/a&gt;, I noticed that apart from the usual @ and . (dot), there was another character that resembled an @ sign (0xFF20 or ＠) and various characters that resembled a period (I think 0x2024 or ․ is closer, but feel free to argue).&lt;/p&gt;
&lt;p&gt;I’m wondering, if one could use this as another way of email hiding. It’s almost as easy as the foo [at] bar [dot] com technique, with the advantage of being far less common (I’ve never seen it before, so there’s a high chance that spambot developers haven’t either) and I think that the end result is more easily understood by newbies. To encode &lt;a href=&quot;mailto:foo@bar.com&quot; title=&quot;Linkification: mailto:foo@bar.com&quot;&gt;foo@bar.com&lt;/a&gt; this way, we’d use (in an html page):&lt;/p&gt;
&lt;p&gt;foo＠bar․com&lt;/p&gt;
&lt;p&gt;and the result is: foo＠bar․com&lt;/p&gt;
&lt;p&gt;I used that technique on the &lt;a href=&quot;http://lea.verou.me/demos/ligatweet/#conversions&quot;&gt;ligatweet page&lt;/a&gt;. Of course, if many people start using it, I guess spambot developers will notice, so it won’t be a good idea any more. However, for some reason I don’t think it will ever become that mainstream :P&lt;/p&gt;
&lt;p&gt;By the way, if you’re interested in other ways of email hiding, &lt;a href=&quot;https://csarven.ca/hiding-email-addresses&quot;&gt;here’s an extensive article on the subject&lt;/a&gt; that I came across after a quick googlesearch (to see if somebody else came up with this first – I didn’t find anything).&lt;/p&gt;
</content>
  </entry><entry>
    <title>Exploring browser-supported Unicode characters and a tweet shortening experiment</title>
    <link href="https://lea.verou.me/2009/11/exploring-browser-supported-unicode-characters-and-a-tweet-shortening-experiment/"/>
    <updated>2009-11-29T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=438</id>
    <content xml:lang="en" type="html">&lt;p&gt;I recently wanted to post something on twitter that was just slightly over the 140 chars limit and I didn’t want to shorten it by cutting off characters (some lyrics from Pink Floyd’s “Hey You” that expressed a particular thought I had at the moment – it would be barbaric to alter Roger Waters’ lyrics in any way, wouldn’t it? ;-)). I always knew there were some ligatures and digraphs in the Unicode table, so I thought that these might be used to shorten tweets, not only that particular one of course, but any tweet. So I wrote &lt;a href=&quot;http://lea.verou.me/scripts/unicode.html&quot; title=&quot;Browser supported unicode characters&quot;&gt;a small script&lt;/a&gt; (warning: very rough around the edges) to explore the Unicode characters that browsers supported, find the replacement pairs and build the tweet shortening script (I even thought of a name for it: ligatweet, LOL I was never good at naming).&lt;/p&gt;
&lt;p&gt;My observations were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Different browsers support different Unicode characters. I think Firefox has the best support (more characters) and Chrome the worst. By the way, it’s a shame that Chrome doesn’t support the Braille characters.&lt;/li&gt;
&lt;li&gt;The appearance of the same characters, using the same font has huge differences across browsers. A large number of glyphs are completely different. This is very apparent on dingbats (around 0x2600-0x2800).&lt;/li&gt;
&lt;li&gt;For some reason unknown to me, hinting suffers a great deal in the least popular characters (common examples are the unit ligatures, like ㏈ or ㎉). Lots of them looked terribly unlegible and pixelated in small sizes (and only in small sizes!!). Typophiles feel free to correct me if I’m mistaken, but judging by my brief experience with font design, I don’t think bad hinting (or no hinting at all) can do that sort of thing to a glyph. These characters appeared without any anti-aliasing at all! Perhaps it has to do with Cleartype or Windows (?). If anyone has any information about the cause of this issue, I would be greatly interested.&lt;/li&gt;
&lt;li&gt;It’s amazing what there’s in the Unicode table! There are many dingbats and various symbols in it, and a lot of them work cross browser! No need to be constrained by the small subset that html entities can produce!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tweet shortening script is here: &lt;a href=&quot;http://lea.verou.me/demos/ligatweet/&quot; title=&quot;Linkification: http://lea.verou.me/demos/ligatweet/&quot;&gt;http://lea.verou.me/demos/ligatweet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I might as well write a bookmarklet in the future. However, I was a bit disappointed to find out that even though I got a bit carried away when picking the replacement pairs, the gains are only around 6-12% for most tweets (case sensitive, of course case insensitive results in higher savings, but the result makes you look like a douchebag), but I’m optimistic that as more pairs get added (feel free to suggest any, or improvements on the current ones) the savings will increase dramatically. And even if they don’t I really enjoyed the trip.&lt;/p&gt;
&lt;p&gt;Also, exploring the Unicode table gave me lots of ideas about scripts utilizing it, some of which I consider far more useful than ligatweet (although I’m not sure if I’ll ever find the time to code them, even ligatweet was finished because I had no internet connection for a while tonight, so I couldn’t work and I didn’t feel like going to sleep)&lt;/p&gt;
&lt;p&gt;By the way, In case you were wondering, I didn’t post the tweet that inspired me to write the script. After coding for a while, It just didn’t fit my mood any more. ;-)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Reading cookies the regular expression way</title>
    <link href="https://lea.verou.me/2009/12/reading-cookies-the-regular-expression-way/"/>
    <updated>2009-12-03T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=460</id>
    <content xml:lang="en" type="html">&lt;p&gt;While taking a look on &lt;a href=&quot;http://24ways.org/2009/breaking-out-the-edges-of-the-browser&quot;&gt;the 2nd 24ways article for 2009&lt;/a&gt;, I was really surprised to read that &lt;em&gt;“The Web Storage API is basically cookies on steroids, a unhealthy dosage of steroids. Cookies are always a pain to work with. First of all you have the problem of setting, changing and deleting them. &lt;strong&gt;Typically solved by Googling and blindly relying on PPK’s solution.&lt;/strong&gt;”&lt;/em&gt; (bold is mine)&lt;/p&gt;
&lt;p&gt;Of course, there’s nothing wrong with &lt;a href=&quot;http://www.quirksmode.org/js/cookies.html#script&quot;&gt;PPK’s solution&lt;/a&gt;. It works just fine. However, I always thought his readCookie() function was too verbose and complicated for no reason. It’s a very common example of someone desperately trying to avoid using a regular expression. I googled for “&lt;a href=&quot;http://www.google.com/search?q=javascript+read+cookie&quot;&gt;javascript read cookie&lt;/a&gt;” and to my surprise, all examples found in the first results were very similar. I never understood why even experienced developers are so scared of regular expressions. Anyway, if anyone wants a shorter function to read a cookie, here’s what I use:&lt;/p&gt;
&lt;p&gt;function readCookie(name) {
// Escape regexp special characters (thanks kangax!)
name = name.replace(/([.*+?^=!:${}()|[&#92;]&#92;/&#92;&#92;])/g, ‘&#92;&#92;$1’);&lt;/p&gt;
&lt;p&gt;var regex = new RegExp(‘(?:^|;)&#92;&#92;s?’ + name + ‘=(.*?)(?:;|$)’,‘i’),
match = document.cookie.match(regex);&lt;/p&gt;
&lt;p&gt;return match &amp;amp;&amp;amp; unescape(match[1]); // thanks James!
}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;strong&gt;Function updated, see comments below&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I’ve been using it for years and it hasn’t let me down. :)&lt;/p&gt;
&lt;p&gt;Probably lots of other people have come up and posted something similar before me (I was actually very surprised that something like this isn’t mainstream), but I’m posting it just in case. :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Quickly find the Gravatar that cor­res­ponds to a given email</title>
    <link href="https://lea.verou.me/2009/12/quickly-find-the-gravatar-that-corresponds-to-a-given-email/"/>
    <updated>2009-12-07T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=470</id>
    <content xml:lang="en" type="html">&lt;p&gt;Today I needed to quickly find the Gravatars that corresponded to a bunch of email addresses for some reason (don’t ask). After a bit of googling and wandering around in &lt;a href=&quot;http://gravatar.com/&quot;&gt;Gravatar’s official site&lt;/a&gt; and others, I firgured out it’s probably much quicker to write a short PHP script for that myself, than keep looking.&lt;/p&gt;
&lt;p&gt;Here it is, in case someone ever needs to do something similar: (click on the screenshot)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lea0.verou.me/demos/gravatar.php&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2009/12/quickly-find-the-gravatar-that-corresponds-to-a-given-email/images/gravatar.png&quot; alt=&quot;Quickly find the Gravatar that cor­res­ponds to a given email&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(has anyone noticed my latest love affair with Helvetica/Arial? :P )&lt;/p&gt;
</content>
  </entry><entry>
    <title>Redesign</title>
    <link href="https://lea.verou.me/2010/02/redesign/"/>
    <updated>2010-02-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=482</id>
    <content xml:lang="en" type="html">&lt;p&gt;Was about time, wasn’t it?&lt;/p&gt;
&lt;p&gt;I wanted a simpler, more minimalistic (and wider!) theme for a while now. The other one was too restrictive. I had designed it when I had absolutely no content, and few changes were made to it afterwards.&lt;/p&gt;
&lt;p&gt;So, today that I was too sad and furious to do anything productive, I spent a few hours redesigning the blog (creative venting…). Please note that it’s just a few hours’ work (with no mockup), so it’s bound to be a bit rough around the edges. I will refine it more as time goes by.&lt;/p&gt;
&lt;p&gt;(and just like the previous one, it’s best viewed in more CSS3-supporting browsers, like Firefox, Chrome or Safari. If we can’t use the latest bells n’ whistles in our &lt;strong&gt;personal&lt;/strong&gt; blogs, where can we? ;))&lt;/p&gt;
&lt;p&gt;Here’s a screenshot from the previous theme:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2010/02/redesign/images/screenshot.png&quot; alt=&quot;Screenshot of the old lea.verou.me theme&quot; title=&quot;The old lea.verou.me theme&quot; /&gt;&lt;/p&gt;
&lt;p&gt;R.I.P. my first wordpress theme.&lt;/p&gt;
&lt;p&gt;PS: Yeah, I know I haven’t posted in a while. I have started lots of posts, but didn’t finish any. I hope I’ll have something complete to post soon.&lt;/p&gt;
</content>
  </entry><entry>
    <title>iPhone keyboard with CSS3 -- no images</title>
    <link href="https://lea.verou.me/2010/02/iphone-keyboard-with-css3-no-images/"/>
    <updated>2010-02-18T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=490</id>
    <content xml:lang="en" type="html">&lt;p&gt;Yeap, this is yet another of those things that make no practical sense but are fun to make just to see whether it can actually be done. It’s also a proof of the fact that when I have too many things to do, I tend to procrastinate more. :P&lt;/p&gt;
&lt;p&gt;Here it is (resize the window to get the narrow version ;)):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lea.verou.me/demos/iphone-keyboard/&quot;&gt;http://lea.verou.me/demos/iphone-keyboard/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It should look correct in &lt;strong&gt;Firefox 3.6, Chrome 4 and Safari 4&lt;/strong&gt;. It looks best on Firefox 3.6 due to it’s ability to render subpixel distances, whereas other browsers just round everything to the closest pixel. It also looks best in computers with &lt;strong&gt;Helvetica&lt;/strong&gt; installed (it’s installed by default on macs btw) but it should look sufficiently OK with Arial too, since it’s a rip-off of Helvetica ;) (the only problem with Arial is that the line-height of the buttons with the symbols will be slightly different since the custom font’s measurements are based on Helvetica Bold) Also, ironically, it doesn’t look ok in the iPhone!&lt;/p&gt;
&lt;p&gt;For those of you that don’t use one of the aforementioned browsers as your primary and are way too bored to switch (or don’t even have them installed (!)), here are two screenshots from Firefox 3.6 (nicely cropped to only contain the keyboard):&lt;/p&gt;
&lt;figure class=&quot;center&quot;&gt;
&lt;img src=&quot;https://lea.verou.me/2010/02/iphone-keyboard-with-css3-no-images/images/css_wide_keyboard.png&quot; alt=&quot;&quot; /&gt;
&lt;figcaption&gt;Screenshot of the wide version&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;center&quot;&gt;
&lt;img src=&quot;https://lea.verou.me/2010/02/iphone-keyboard-with-css3-no-images/images/css_narrow_keyboard.png&quot; alt=&quot;&quot; /&gt;
&lt;figcaption&gt;Screenshot of the narrow version&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As for how it’s done, as you can easily see, most of it is run-of-the-mill for someone with a decent grasp on CSS3: media queries, CSS gradients, shadows, border-radiuses and RGBA. The only tricky part is the symbols for shift, backspace and international. I have to admit I cheated a bit here: I didn’t use images, but I used @font-face with a custom font that just contains these 3 symbols. The reasons behind that are that this way I wouldn’t have to create 2 versions of the symbols (light and dark, for pressed and normal states respectively) and that they are vector, so they scale (try zooming in).&lt;/p&gt;
&lt;p&gt;Please note that there’s no functionality attached to it. It’s just an interface. I wasn’t interested at making an on-screen keyboard in general, I was just interested to see if a keyboard visually identical to iPhone’s is possible with CSS alone. If someone wants to actually use it and/or develop it further, you’re free to do so, as long as you keep the comment at the start of the css file. ;)&lt;/p&gt;
&lt;p&gt;An interesting discussion about this could be “What would be the ideal markup to semantically style a keyboard?”. Personally, I just paid attention to the more pragmatic objectives of making the keys focusable, and keeping the complexity of the DOM tree to a minimum, so you might find it semantically wrong (I used a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; for the container, &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s for the rows and &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;s for the keys) – but what is right actually in this case? Is a keyboard a list or a table of keys? I don’t think so…&lt;/p&gt;
</content>
  </entry><entry>
    <title>CSSNinja&#39;s custom forms revisited to work with CSS sprites</title>
    <link href="https://lea.verou.me/2010/02/cssninjas-custom-forms-revisited-to-work-with-css-sprites/"/>
    <updated>2010-02-19T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=512</id>
    <content xml:lang="en" type="html">&lt;p&gt;I read today &lt;a href=&quot;http://www.thecssninja.com/&quot;&gt;CSS Ninja&lt;/a&gt;’s (Ryan Sheddon’s) &lt;a href=&quot;http://www.thecssninja.com/css/custom-inputs-using-css&quot;&gt;brilliant new technique about the creation of custom checkboxes and radio buttons with CSS alone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The only thing that bugged me about it was something he pointed himself out as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This technique has only 1 drawback I can think of, IE support is not a drawback for me, you can’t use a big sprite image to save all the radio and checkbox states, they need to be individual images. Using CSS generated content to insert an image doesn’t give you control of the image position like a background image does.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And then I wondered “but hey, &lt;strong&gt;why&lt;/strong&gt; can’t we use background images?”. It seemed pretty obvious to me that we could combine a transparent text color with normal css sprites and a display of inline-block in the ::before pseudo-element to achieve the exact same effect. I verified that my initial assertion was actually correct, and tested it in Firefox, Chrome, Safari and Opera (the latest only, no time for testing in older ones at the moment) and it seems to work fine.&lt;/p&gt;
&lt;p&gt;Here it is: &lt;a href=&quot;http://lea.verou.me/demos/cssninja-custom-forms/&quot;&gt;demo&lt;/a&gt; | &lt;a href=&quot;http://lea.verou.me/demos/cssninja-custom-forms/source.zip&quot;&gt;source files (including .psd file of the sprite)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m afraid there’s some blatantly obvious drawback in my approach that made Ryan prefer his method over this, but I’m posting it just in case…&lt;/p&gt;
</content>
  </entry><entry>
    <title>CSS3 structural pseudo-class selector tester</title>
    <link href="https://lea.verou.me/2010/03/css3-structural-pseudo-class-selector-tester/"/>
    <updated>2010-03-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=521</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2010/03/css3-structural-pseudo-class-selector-tester/images/Screen-shot-2011-09-20-at-14.13.13-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2010/03/css3-structural-pseudo-class-selector-tester/images/Screen-shot-2011-09-20-at-14.13.13--300x187.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;I was doing some research today about how people explain the CSS3 structural* pseudo classes and I stumbled upon this demo by CSS tricks: &lt;a href=&quot;http://css-tricks.com/examples/nth-child-tester/&quot;&gt;http://css-tricks.com/examples/nth-child-tester/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I thought the idea is &lt;strong&gt;awesome&lt;/strong&gt;, but lacks a few features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It doesn’t use the native browser algorithm for selecting the elements. Granted, it’s not that tough to code your own properly, but I trust a browser implementation more (IE doesn’t support these altogether, so it’s out of the question anyway).&lt;/li&gt;
&lt;li&gt;Doesn’t allow you to test for nth-last-child, nth-of-type, nth-last-of-type (and especially the last two are a lot harder to understand for most people)&lt;/li&gt;
&lt;li&gt;Doesn’t allow you to add/remove list items to see the effects of the selector with different numbers of elements (especially needed if nth-last-child, nth-of-type, nth-last-of-type were involved)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, I decided to code my own. It allows you to test for all 4 nth-something selectors, supports adding/removing elements (the selected elements update instantly) and uses the native browser implementation to select them (so it won’t work on IE and old browsers).&lt;/p&gt;
&lt;p&gt;Enjoy: &lt;a href=&quot;http://lea.verou.me/demos/nth.html&quot;&gt;&lt;strong&gt;CSS3 structural pseudo-class selector tester&lt;/strong&gt;&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;*Yes, :root and :empty also belong to those, but are rarely used. All other structural pseudoclasses are actually shortcuts to some particular case of the aforementioned 4 :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>MySQL: Are you actually utilizing your indexes?</title>
    <link href="https://lea.verou.me/2010/03/mysql-are-you-actually-utilizing-your-indexes/"/>
    <updated>2010-03-25T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=527</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;em&gt;This might seem elementary to those of you that are DBAs or something similar, but it was fascinating to find out (not to mention it greatly helped what I had to do), so I decided to post it, in case it helps someone else too.&lt;/em&gt; A few moments ago I found out that whereas a query along the lines of…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT title, COUNT(1) as replies
FROM post INNER JOIN thread USING(threadid)
WHERE **UNIX&#92;_TIMESTAMP(NOW()) - post.dateline &amp;lt; 86400**
GROUP BY threadid
ORDER BY replies DESC
LIMIT 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;took a whopping &lt;strong&gt;~10 seconds&lt;/strong&gt; on a post table of around 2,000,000 rows and a thread table of around 40,000 rows, the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT title, COUNT(1) as replies
FROM post INNER JOIN thread USING(threadid)
WHERE **post.dateline &amp;gt; UNIX&#92;_TIMESTAMP(NOW()) - 86400**
GROUP BY threadid
ORDER BY replies DESC
LIMIT 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;took a mere &lt;strong&gt;0.03 seconds&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Probably, MySQL wasn’t able to utilize the B+ tree index of the dateline column in the first query, whereas in the second, things were a bit more obvious to it. This can also be observed by examining the information about the execution plan that EXPLAIN provides:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; explain select t.threadid, t.title, count(1) as replies from vb3&#92;_post as p inner join vb3&#92;_thread as t using(threadid) where unix&#92;_timestamp(now()) - p.dateline &amp;lt; 86400 group by p.threadid order by replies desc limit 5;
+----+-------------+-------+------+---------------+----------+---------+------------+-------+---------------------------------+
| id | select&#92;_type | table | type | possible&#92;_keys | key      | key&#92;_len | re         | rows  | Extra                           |
+----+-------------+-------+------+---------------+----------+---------+------------+-------+---------------------------------+
|  1 | SIMPLE      | t     | ALL  | PRIMARY       | NULL     | NULL    | NULL       | 39859 | Using temporary; Using filesort |
|  1 | SIMPLE      | p     | ref  | threadid      | threadid | 4       | t.threadid |    49 | Using where                     |
+----+-------------+-------+------+---------------+----------+---------+------------+-------+---------------------------------+
2 rows in set (0.01 sec)
```

```
mysql&amp;gt; explain select t.threadid, t.title, count(1) as replies from vb3&#92;_post as p inner join vb3&#92;_thread as t using(threadid) where p.dateline &amp;gt; UNIX&#92;_TIMESTAMP(NOW()) - 86400 group by p.threadid order by replies desc limit 5;
+----+-------------+-------+--------+-------------------+----------+---------+------------+------+----------------------------------------------+
| id | select&#92;_type | table | type   | possible&#92;_keys     | key      | key&#92;_len | ref        | rows | Extra                                        |
+----+-------------+-------+--------+-------------------+----------+---------+------------+------+----------------------------------------------+
|  1 | SIMPLE      | p     | range  | threadid,dateline | dateline | 4       | NULL       | 1171 | Using where; Using temporary; Using filesort |
|  1 | SIMPLE      | t     | eq&#92;_ref | PRIMARY           | PRIMARY  | 4       | p.threadid |    1 |                                              |
+----+-------------+-------+--------+-------------------+----------+---------+------------+------+----------------------------------------------+
2 rows in set (0.00 sec)
```

So, don&#39;t rest assured that MySQL will use your indexes every time it should. It seems that sometimes you have to explicitly point it out.
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry><entry>
    <title>On CSS counters plus a CSS3 Reversi UI</title>
    <link href="https://lea.verou.me/2010/04/on-css-counters-plus-a-css3-reversi-ui/"/>
    <updated>2010-04-01T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=540</id>
    <content xml:lang="en" type="html">&lt;p&gt;CSS Counters have a lot more potential than most web developers seem to think. The common use case consists of something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;somecontainer { counter-reset: foocount; }
Ε { counter-increment: foocount; }
Ε::before { content: counter(foocount) &amp;quot;. &amp;quot;; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;commonly used to add numbering to section headings or re-create an &lt;/p&gt;&lt;ol&gt;&#39;s counters in order to style them (since browser support for ::marker is ridiculous).&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Have you ever thought of applying the counter to &lt;strong&gt;different&lt;/strong&gt; elements than the ones being counted? This way we’re able to count elements and display their total count somewhere with CSS alone! (and with the variety of selectors in CSS3, I see great potential here…). I’m referring to something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;ul { counter-reset:foo; }
li { counter-increment:foo; }
p::after { content:counter(foo); }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From my tests, this works flawlessly in Firefox, Safari, Opera and Chrome (I’ve only checked the latest stable though), &lt;strong&gt;as long as the element that displays the count comes after the elements being counted (in the markup)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Another underutilized aspect of CSS counters (well, far less underused than the above, but still) is how we can combine multiple in the same pseudoelement. For instance, to count rows and cells of a table and display the count inside each cell:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;table {
	counter-reset:row;
}

tr {
	counter-increment:row;
	counter-reset:cell;
}

td {
	counter-increment:cell;
}

td::after {
	content:counter(row, upper-alpha) counter(cell);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which displays counters like A1, A2, A3, B1, B2, B3, etc in the cells. When the content property is more properly implemented, you wouldn’t even need the last rule.&lt;/p&gt;
&lt;p&gt;Last but not least, a &lt;a href=&quot;http://lea.verou.me/demos/Reversi/&quot;&gt;CSS3 Reversi UI&lt;/a&gt; (no images used!) I created a while ago that demonstrates the above (and various other things, like --finally-- a use case for &lt;strong&gt;:empty&lt;/strong&gt; :P ). &lt;em&gt;Looks&lt;/em&gt; fine only in Firefox and Opera 10.5, due to lack of support for inset box shadows in Safari and &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=36939&quot;&gt;buggy&lt;/a&gt; support in Chrome. &lt;em&gt;Works&lt;/em&gt; fine in all 4 of them (IE is out of the question anyway).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lea.verou.me/demos/Reversi/&quot;&gt;&lt;img src=&quot;http://lea.verou.me/demos/Reversi/screenshot.png&quot; alt=&quot;Screenshot of the UI&quot; title=&quot;Screenshot from Firefox 3.6&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The displayed counts of each player’s pieces (top right corner) are just CSS counters. Same goes for every cell’s name. This is mostly a proof of concept, since it’s impossible to determine if someone won by CSS alone, so we would have to count the pieces in JS too.&lt;/p&gt;
&lt;p&gt;As a game it’s not finalized, you are basically only able to play against yourself and it doesn’t know when somebody won, so it’s not very useful or enjoyable. If someone wants to take it up and develop it further be my guest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note to avoid confusion:&lt;/strong&gt; CSS Counters are &lt;strong&gt;not&lt;/strong&gt; CSS 3. They are perfectly valid &lt;strong&gt;CSS 2.1&lt;/strong&gt;. The “CSS3” in the title (“CSS3 Reversi”) is due to other techniques used in it’s UI.&lt;/p&gt;
&lt;/ol&gt;</content>
  </entry><entry>
    <title>&quot;Wow, Mona Lisa with pure CSS!&quot;</title>
    <link href="https://lea.verou.me/2010/05/wow-mona-lisa-with-pure-css/"/>
    <updated>2010-05-25T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=563</id>
    <content xml:lang="en" type="html">&lt;p&gt;There has been a recent flood of CSS experiments that utilize CSS3 features to convert some meaningless markup to spectacular pictures. It all started when &lt;a href=&quot;http://desandro.com/articles/opera-logo-css/&quot;&gt;David Desandro used CSS3 to draw the Opera logo&lt;/a&gt;. This seemed to inspire lots of other folks who created similar demos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rathersplendid.net/home/pure-css-icons&quot;&gt;Pure CSS icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.insicdesigns.com/2010/03/create-social-media-icons-in-pure-css/&quot;&gt;Create Social Media Icons in pure CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.romancortes.com/blog/css3-flower/&quot;&gt;CSS flower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://desandro.com/resources/curtis-css-typeface/&quot;&gt;Curtis CSS typeface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gabri.me/htmlcss/2010/css3-gradients-coffee-cup/&quot;&gt;CSS3 Gradients coffee cup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can certainly share their enthusiasm and I am also amazed by their results. Besides that, I think that pushing CSS3 to the edge like that, helps us understand the spec better, which leads us to find and file browser bugs or write comments regarding the spec itself. Filing bugs is crucial at this stage, with all browser vendors gradually adding experimental --and frequently buggy-- CSS3 support to their products. Also, don’t get me wrong: I can easily see the benefits of reducing the number of images in a web application interface (far quicker/easier modifications, less HTTP requests and most of the time, less bandwidth).&lt;/p&gt;
&lt;p&gt;However, I’m afraid we’re losing sight of the big picture. These aren’t demos that are or will ever be legitimate CSS use cases. Even after universal CSS3 browser support is achieved, they would (and should) still be considered “hacks”. Almost all the arguments pro their usage also apply to more suitable ways of including images in web applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fewer HTTP requests&lt;/strong&gt;: Same with any kind of embedded image (data URIs, inline SVG and so on)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: Same with SVG and symbols embedded in custom fonts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easier to modify:&lt;/strong&gt; Same with SVG&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Less bandwidth (in some cases):&lt;/strong&gt; Same with SVG (and it can be cached too, when not inline)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And apart from these, these illustrations require non-semantic crap to be included in the markup which, besides issues of theoretical purity, makes it harder for other people to use them.&lt;/p&gt;
&lt;p&gt;As for the &lt;strong&gt;graceful degradation&lt;/strong&gt; argument, yes, this does only apply to CSS “images”. But in this case, is it really an advantage? I seriously doubt it. People won’t notice rounded corners if they’re missing from an interface, but they’re definitely going to notice a blocky Opera logo. And they’re not used in thinking that their browser has something to do with how an image renders, so they’ll just blame the website.&lt;/p&gt;
&lt;p&gt;CSS is supposed to enhance the presentation of a document or interface, not to be (ab)used for the creation of illustrations from scratch. It’s supposed to separate presentation from structure, not generate stuff. There are other technologies that are far more suitable for this (*cough*SVG*cough*). I think we should use our energy and creativity to make CSS3 demos that people will actually use in the future when all this is fully supported, not stuff doomed to be eternally considered hackery.&lt;/p&gt;
&lt;p&gt;“Where should we draw the line?” one might ask. For example, is a &lt;a href=&quot;http://oddvalue.co.uk/blog/2010/02/css3_clock/&quot;&gt;Pure CSS analog clock&lt;/a&gt; a CSS &lt;strong&gt;ab&lt;/strong&gt;use case? Or even my own &lt;a href=&quot;http://lea.verou.me/2010/02/iphone-keyboard-with-css3-no-images/&quot;&gt;CSS iPhone keyboard&lt;/a&gt;? Now &lt;strong&gt;&lt;em&gt;that’s&lt;/em&gt;&lt;/strong&gt; a good question! A rule of thumb seems to be &lt;em&gt;“if it inherently (=not due to browser support issues) involves a bunch of empty (or with meaningless content) HTML elements, then that’s a bad sign”&lt;/em&gt; but that might be overly strict. What’s your take on it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Disclaimer:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;Yes, I’m fully aware that most of the time, such experiments are created just for fun by their (very talented) authors, which are perfectly aware of all the things mentioned above. However, I’ve also grown tired of reading comments by people that seem to to think that “This is the future of the web!”. Let’s hope it’s not.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Organizing a university course on modern Web development</title>
    <link href="https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/"/>
    <updated>2010-07-26T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=576</id>
    <content xml:lang="en" type="html">&lt;p&gt;About a year ago, prof. &lt;a href=&quot;http://twitter.com/vassalos&quot;&gt;Vasilis Vassalos&lt;/a&gt; of &lt;a href=&quot;http://aueb.gr/&quot; title=&quot;The university official website (yeah, I know...)&quot;&gt;Athens University of Economics and Business&lt;/a&gt; approached me and asked for my help in a new course they were preparing for their &lt;a href=&quot;http://www.cs.aueb.gr/&quot;&gt;Computer Science department&lt;/a&gt;, which would introduce 4th year undergrads to various web development aspects. Since I was always complaining about how outdated higher education is when it comes to web development, I saw it as my chance to help things change for the better, so I agreed without a second thought.&lt;/p&gt;
&lt;p&gt;This is one of the main reasons I didn’t have time to write many blog posts for the past months: This activity took up all my spare time. However, it proved to be an interesting and enlightening experience, in more than one ways. In this blog post I’ll describe the dilemmas we faced, the decisions we made and the insights I gained throughout these 6 months, with the hope that they’ll prove to be useful for anyone involved in something similar.&lt;/p&gt;
&lt;h3 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#table-of-contents&quot;&gt;Table of contents&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#course-content&quot;&gt;Content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#homework&quot;&gt;Homework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#labs&quot;&gt;Labs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#aftermath&quot;&gt;Personal aftermath&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;content&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#content&quot;&gt;Content&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The goals of a university course differ from the ones of a professional seminar or conference session in many ways, the key one being that most of its students will (professionally) utilize the things they learned in the future and not right after they walk away from class. So, the stuff being taught must be useful even after a couple years have passed. Also, issues of the present might not be issues of the future and what isn’t possible today (due to browser support issues) will probably be tomorrow. These observations led us to decide &lt;strong&gt;against teaching proprietary stuff. Instead, we only included  things which come with a specification that has reached a fairly stable state&lt;/strong&gt; (with the exception of &lt;strong&gt;very&lt;/strong&gt; widespread non-standard stuff, such as &lt;code&gt;innerHTML&lt;/code&gt;). We also decided &lt;strong&gt;not to address workarounds and browser incompatibilities at all&lt;/strong&gt;, since these would probably be out of date in a few years. Also because, if we teach everything else right, they should be able to learn these by themselves, if needed (we did teach feature detection techniques though, those are timeless ;-)). We also included &lt;strong&gt;many cutting edge topics (CSS3, HTML5, ES5, SVG…) since we believe that they will be necessary tools of the trade tomorrow&lt;/strong&gt;. To be pragmatic however, &lt;strong&gt;we did not teach stuff that no browser has implemented yet&lt;/strong&gt;, besides perhaps a brief mention.&lt;/p&gt;
&lt;p&gt;To make things easier for the students, we used &lt;strong&gt;Firefox 3.6&lt;/strong&gt; for everything. We tested their assignments there, we used it to present something in the labs etc. Why Firefox?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It’s at a quite good level of standards compliance and implements many modern technologies &amp;amp; features&lt;/li&gt;
&lt;li&gt;Fewer bugs (Webkit implements stuff faster, but in more buggy ways)&lt;/li&gt;
&lt;li&gt;It has the best development tools (Firebug)&lt;/li&gt;
&lt;li&gt;With Brendan Eich being Mozilla’s CTO, we all know how progressive Firefox is when it comes to JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, this doesn’t mean it’s the only right choice. Google Chrome for example would be another good pick.&lt;/p&gt;
&lt;p&gt;Another useful observation was that 4th year Computer Science students already know programming quite well, especially Java. So, &lt;strong&gt;we did not need to go through the basics of programming syntax&lt;/strong&gt; like introductory books or seminars frequently do. Consequently, &lt;strong&gt;we skipped explaining how control structures or operators work&lt;/strong&gt; in JavaScript or PHP and just &lt;strong&gt;focused on their differences&lt;/strong&gt; from Java and other languages.&lt;/p&gt;
&lt;p&gt;Another dilemma we faced was whether we should teach stuff on popular frameworks and whether we should allow them in the homeworks. We decided &lt;strong&gt;against allowing them in the homeworks&lt;/strong&gt; because I believe that someone must not use a framework just to skip learning about the intricacies of a language. They should be used after the basics have been consolidated, in order to save time. Also because if everyone skips learning and just uses an abstraction to do the heavy lifting from the very beginning, who will write the abstractions after all? Another reason was that a large portion of every JavaScript framework is about handling cross-browser differences. However, these had no place in our course, so a JS framework wasn’t as necessary as it is in day to day web development. Regarding teaching them, &lt;strong&gt;we thought it would be a good idea to introduce students to the popular JS &amp;amp; PHP frameworks in the last lectures&lt;/strong&gt;, but there was no time left. Maybe next year.&lt;/p&gt;
&lt;p&gt;To sum up, the course content ended up being (I’m listing client-side matters more extensively, since they are also the focus of this blog):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General stuff about web application architecture and how the HTTP protocol works&lt;/li&gt;
&lt;li&gt;We presented a small web application example (an AJAX shopping cart) in order for the students to get an idea about how everything clicks together&lt;/li&gt;
&lt;li&gt;Markup languages
&lt;ul&gt;
&lt;li&gt;SGML&lt;/li&gt;
&lt;li&gt;DTDs&lt;/li&gt;
&lt;li&gt;HTML and XHTML
&lt;ul&gt;
&lt;li&gt;Basic structure of an (X)HTML document&lt;/li&gt;
&lt;li&gt;Content model, block vs inline elements&lt;/li&gt;
&lt;li&gt;Basic HTML elements
&lt;ul&gt;
&lt;li&gt;headings &amp;amp; paragraphs&lt;/li&gt;
&lt;li&gt;lists (ordered, unordered, definition lists)&lt;/li&gt;
&lt;li&gt;tables&lt;/li&gt;
&lt;li&gt;grouping elements (div &amp;amp; span)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Doctypes, the HTML5 doctype&lt;/li&gt;
&lt;li&gt;The incentives behind XHTML &amp;amp; the future ((X)HTML 5)&lt;/li&gt;
&lt;li&gt;(X)HTML Validation&lt;/li&gt;
&lt;li&gt;HTML forms
&lt;ul&gt;
&lt;li&gt;How forms work, GET vs POST&lt;/li&gt;
&lt;li&gt;Form controls, shared attributes&lt;/li&gt;
&lt;li&gt;The various input types (+ the new ones HTML5 brings)&lt;/li&gt;
&lt;li&gt;Other form controls (buttons, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; lists, textareas)&lt;/li&gt;
&lt;li&gt;Basic form accessibility (labels &amp;amp; fieldsets)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Working with Multimedia (old methods, HTML5 video &amp;amp; audio elements, comparison)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XML and XPath, XQuery, XSLT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSS
&lt;ul&gt;
&lt;li&gt;CSS standards&lt;/li&gt;
&lt;li&gt;CSS rules&lt;/li&gt;
&lt;li&gt;Validation&lt;/li&gt;
&lt;li&gt;Adding CSS to a page (linking/embedding methods)&lt;/li&gt;
&lt;li&gt;Media targeting (The media attribute, @media rules, media queries)&lt;/li&gt;
&lt;li&gt;CSS selectors
&lt;ul&gt;
&lt;li&gt;Introduction to the DOM&lt;/li&gt;
&lt;li&gt;Basic selectors (Universal selector, Type selector, Class selector, Id selector)&lt;/li&gt;
&lt;li&gt;Classes vs Ids&lt;/li&gt;
&lt;li&gt;Attribute selectors (all 6)&lt;/li&gt;
&lt;li&gt;Pseudo-classes (including most of the CSS3 ones)&lt;/li&gt;
&lt;li&gt;Pseudo-elements&lt;/li&gt;
&lt;li&gt;Simple selectors &amp;amp; simple selector sequences&lt;/li&gt;
&lt;li&gt;Combinators (all 4)&lt;/li&gt;
&lt;li&gt;Selector grouping&lt;/li&gt;
&lt;li&gt;XML namespaces &amp;amp; CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cascading &amp;amp; Inheritance
&lt;ul&gt;
&lt;li&gt;The problem: Conflicts&lt;/li&gt;
&lt;li&gt;Specificity&lt;/li&gt;
&lt;li&gt;Origin&lt;/li&gt;
&lt;li&gt;!important&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;The special value &lt;em&gt;inherit&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Properties &amp;amp; values
&lt;ul&gt;
&lt;li&gt;Keywords&lt;/li&gt;
&lt;li&gt;Numerical values &amp;amp; units&lt;/li&gt;
&lt;li&gt;Colors (including CSS3 colors)&lt;/li&gt;
&lt;li&gt;How shorthands work&lt;/li&gt;
&lt;li&gt;Unsupported values &amp;amp; providing fallbacks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Box model
&lt;ul&gt;
&lt;li&gt;width &amp;amp; height&lt;/li&gt;
&lt;li&gt;Block level &amp;amp; inline level elements (reminder from the HTML lectures)&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;display&lt;/em&gt; property&lt;/li&gt;
&lt;li&gt;border&lt;/li&gt;
&lt;li&gt;padding&lt;/li&gt;
&lt;li&gt;margin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Positioning
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;position&lt;/em&gt; property&lt;/li&gt;
&lt;li&gt;Positioning types (absolute, relative, fixed)&lt;/li&gt;
&lt;li&gt;z-index&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;Problems with floats, the &lt;em&gt;clear&lt;/em&gt; property&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generated content
&lt;ul&gt;
&lt;li&gt;::before and ::after&lt;/li&gt;
&lt;li&gt;Static generated content&lt;/li&gt;
&lt;li&gt;Dynamic generated content (attributes &amp;amp; counters)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JavaScript
&lt;ul&gt;
&lt;li&gt;Adding JS to a document&lt;/li&gt;
&lt;li&gt;Separation of concerns&lt;/li&gt;
&lt;li&gt;A first, annotated, example (a simple script that generates tables of content from &lt;h2&gt; headings)&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;Basic syntax rules (including semicolons &amp;amp; semicolon insertion)&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Operators (including typeof, the comma operator, strict operators, differences of &amp;amp;&amp;amp;/|| in JS)&lt;/li&gt;
&lt;li&gt;Primitives (String, Number, Boolean, null, undefined)&lt;/li&gt;
&lt;li&gt;Conversion across primitives&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;in&lt;/em&gt; &amp;amp; &lt;em&gt;delete&lt;/em&gt; operators&lt;/li&gt;
&lt;li&gt;for…in loops&lt;/li&gt;
&lt;li&gt;Native objects for primitives (eg the literal 5 vs new Number(5))&lt;/li&gt;
&lt;li&gt;The global object&lt;/li&gt;
&lt;li&gt;Functions (including function expressions vs function declarations)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;this&lt;/em&gt; &amp;amp; changing execution context&lt;/li&gt;
&lt;li&gt;Arrays (including .forEach() traversal)&lt;/li&gt;
&lt;li&gt;Regular expressions in JavaScript&lt;/li&gt;
&lt;li&gt;OOP in JavaScript
&lt;ul&gt;
&lt;li&gt;OOP concepts in JS&lt;/li&gt;
&lt;li&gt;Constructors&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Encapsulation (private, priviledged &amp;amp; public properties)&lt;/li&gt;
&lt;li&gt;Method overloading&lt;/li&gt;
&lt;li&gt;JavaScript shortcomings when it comes to OOP&lt;/li&gt;
&lt;li&gt;for…in loops, inherited properties &amp;amp; [[Enumerable]], .hasOwnProperty()&lt;/li&gt;
&lt;li&gt;Type detection based on [[Class]] detection (using Object.prototype.toString())&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DOM
&lt;ul&gt;
&lt;li&gt;Traversal&lt;/li&gt;
&lt;li&gt;Node types&lt;/li&gt;
&lt;li&gt;Selecting elements (getElementById, getElementsByClassName, getElementsByName, querySelector, using XPath to select elements)&lt;/li&gt;
&lt;li&gt;DOM Manipulation&lt;/li&gt;
&lt;li&gt;innerHTML, advantages &amp;amp; criticism&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Events
&lt;ul&gt;
&lt;li&gt;Binding &amp;amp; Removing event handlers&lt;/li&gt;
&lt;li&gt;Traditional event binding&lt;/li&gt;
&lt;li&gt;Capturing &amp;amp; bubbling&lt;/li&gt;
&lt;li&gt;Event objects&lt;/li&gt;
&lt;li&gt;Event delegation&lt;/li&gt;
&lt;li&gt;Firing events&lt;/li&gt;
&lt;li&gt;Custom events&lt;/li&gt;
&lt;li&gt;What if there’s no mouse?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client side storage
&lt;ul&gt;
&lt;li&gt;Cookies via HTTP headers, cookies in JavaScript&lt;/li&gt;
&lt;li&gt;Problems with cookies&lt;/li&gt;
&lt;li&gt;Web storage (localStorage, sessionStorage)&lt;/li&gt;
&lt;li&gt;Client-side databases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BOM
&lt;ul&gt;
&lt;li&gt;The window object, window names&lt;/li&gt;
&lt;li&gt;Opening new windows&lt;/li&gt;
&lt;li&gt;Cross-window communication&lt;/li&gt;
&lt;li&gt;Closing windows, Focusing on windows&lt;/li&gt;
&lt;li&gt;Cross-origin window communication&lt;/li&gt;
&lt;li&gt;&lt;em&gt;location&lt;/em&gt; &amp;amp; it’s components&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;history&lt;/em&gt;, &lt;em&gt;screen&lt;/em&gt; &amp;amp; &lt;em&gt;navigator&lt;/em&gt; objects&lt;/li&gt;
&lt;li&gt;User Agent strings&lt;/li&gt;
&lt;li&gt;Why you shouldn’t use browser detection&lt;/li&gt;
&lt;li&gt;Built-in modal windows (alert, confirm, prompt)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JavaScript &amp;amp; CSS
&lt;ul&gt;
&lt;li&gt;CSS modification (className &amp;amp; classList, inline styles)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CSSStyleDeclaration&lt;/em&gt; objects&lt;/li&gt;
&lt;li&gt;The document.styleSheets collection&lt;/li&gt;
&lt;li&gt;Switching stylesheets&lt;/li&gt;
&lt;li&gt;&lt;em&gt;StyleSheet&lt;/em&gt; objects&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CSSStyleRule&lt;/em&gt; objects&lt;/li&gt;
&lt;li&gt;Computed style, getting the computed style&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Asynchronous execution
&lt;ul&gt;
&lt;li&gt;Timeouts &amp;amp; Intervals&lt;/li&gt;
&lt;li&gt;Background workers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Graphics creation (canvas)&lt;/li&gt;
&lt;li&gt;A brief mention of WebGL (we also showed the video of Google’s web based DOOM game)&lt;/li&gt;
&lt;li&gt;Best practices
&lt;ul&gt;
&lt;li&gt;When JS is disabled&lt;/li&gt;
&lt;li&gt;Feature detection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Regular expressions&lt;/li&gt;
&lt;li&gt;Ajax (including data interchange formats, like JSON, other async data transmission techniques, including dynamic script loading &amp;amp; JSONP, usability concerns)&lt;/li&gt;
&lt;li&gt;SVG&lt;/li&gt;
&lt;li&gt;Server side web development
&lt;ul&gt;
&lt;li&gt;PHP (also covering OOP in PHP extensively)&lt;/li&gt;
&lt;li&gt;Database driven websites&lt;/li&gt;
&lt;li&gt;State &amp;amp; session management&lt;/li&gt;
&lt;li&gt;REST&lt;/li&gt;
&lt;li&gt;SOAP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web application security&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;For brevity reasons, the lists above do not include introductory stuff such as:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What’s X?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A brief history of X&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Why use X?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;lessons-learned&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#lessons-learned&quot;&gt;Lessons learned&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It’s very hard to momentarily change your mindset and try to imagine that you live in a modern, fully standards-based web development world, where old browsers, proprietary stuff, hacks and compatibility workarounds have no place. A world where IE doesn’t exist. However, it’s the world that all our material assumed, for the reasons stated above. And it’s beautiful, so much that it becomes addictive and makes you hate all these bugs &amp;amp; incompatibilities that we have to face today even more.&lt;/p&gt;
&lt;h3 id=&quot;homework&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#homework&quot;&gt;Homework&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The students were given 3 assignments throughout the semester, each covering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1st assignment: HTML, CSS, XPath, XSLT&lt;/li&gt;
&lt;li&gt;2nd assignment: JavaScript, Ajax, SVG&lt;/li&gt;
&lt;li&gt;3rd assignment: Server side web dev + CSS, JavaScript, Ajax&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These homeworks accounted for 30% of their final grade (10% each), which probably should have been more.&lt;/p&gt;
&lt;p&gt;We searched for exercises on these topics from other universities but couldn’t find anything, so we made our own. I’ve translated them, in case someone finds them useful, given that there’s a great shortage of such material in the intertubes. You can get them through the links below, along with their complementary files.&lt;/p&gt;
&lt;h4 id=&quot;1st-assignment-%5Bpdf%5D-%5Bfiles%5D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#1st-assignment-%5Bpdf%5D-%5Bfiles%5D&quot;&gt;1st assignment [&lt;a href=&quot;http://lea.verou.me/wdclass/assignment1_en.pdf&quot;&gt;pdf&lt;/a&gt;] [&lt;a href=&quot;http://lea.verou.me/wdclass/assignment1_en.zip&quot;&gt;files&lt;/a&gt;]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I think 1.A and 1.B are excellent exercises to make the students fully understand how CSS selectors work and avoid them resulting to only use the 4-5 basic ones just because they don’t understand the rest (like many web developers do). It’s a pity that many of them resulted to online scripts for the conversion (but luckily it was easy to spot: These answers were way more verbose than the corresponding “handmade” ones, and in some cases even incorrect!)&lt;/li&gt;
&lt;li&gt;I also think 1.C is an excellent exercise for cascading &amp;amp; inheritance practice. Some of the cases were even quite tricky (for instance, the way specificity works for :not() or how grouping works if one of the selectors is invalid) and treated almost all factors that someone should know to predict which rule …overrules. It’s important however that the student justifies the answer, because otherwise they can just test it in a browser and write down the result, without understanding why.&lt;/li&gt;
&lt;li&gt;I’m not sure yet if freeform questions were a good idea, but (hopefully) they got them to practice their critical thinking and do some research (we hadn’t presented :checked and :lang() in class). We didn’t expect many to get the 3rd one right, but we were pleasantly surprised.&lt;/li&gt;
&lt;li&gt;What I like in 3.A is that I believe it enforces the Separation of Concerns guideline, since they cannot alter the HTML file (something even professionals commonly do to get something done, the quick &amp;amp; dirty way…) so they &lt;strong&gt;have&lt;/strong&gt; to move all presentation to the CSS file. It also contained a quite tricky part: Maintaining state without JavaScript, by utilizing the &lt;strong&gt;:checked&lt;/strong&gt; pseudo-class and some combinators (a technique made popular quite recently by &lt;a href=&quot;http://www.thecssninja.com/&quot;&gt;Ryan Seddon&lt;/a&gt;). Obviously, this is not a good way to change views in a photo gallery (too much wasted bandwidth), but it was perfect as a CSS exercise. To my surprise, more than half of the students got it right, which indicates that we probably did a good job explaining CSS Selectors :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2nd-assignment-%5Bpdf%5D-%5Bfiles%5D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#2nd-assignment-%5Bpdf%5D-%5Bfiles%5D&quot;&gt;2nd assignment [&lt;a href=&quot;http://lea.verou.me/wdclass/assignment2_en.pdf&quot;&gt;pdf&lt;/a&gt;] [&lt;a href=&quot;http://lea.verou.me/wdclass/assignment2_en.zip&quot;&gt;files&lt;/a&gt;]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I like exercise 1 because it teaches them how they can take somebody else’s work, extend it and make it more generic and useful. This is something that’s frequently done in web development. By the way, the deviation in the solutions was quite interesting. Others had implemented a recursive algorithm, others approached it in an Object Oriented manner and others took the classic iterative route.&lt;/li&gt;
&lt;li&gt;Exercise 2 lets them practice event delegation, unobtrusive progressive enhancement via JavaScript, decisions to improve performance (and still, it’s unbelievable how many students made choices that were obviously terrible performance-wise. I still remember one script that created another DOM element &lt;strong&gt;on every mouseover&lt;/strong&gt;!)&lt;/li&gt;
&lt;li&gt;Exercise 3 combines many of the technologies they learned in the previous lectures. It also lets them practice their critical thinking by comparing the methods afterwards. Most students picked the CSS method, which would also be my choice, for such a simple bar chart (however, anything rational got full points, I don’t think there’s a correct answer here, it depends on many factors).&lt;/li&gt;
&lt;li&gt;I like exercise 4 because it introduces them to the concept of writing JavaScript that is intended to be used by other developers, and not just in a particular project (along with 2 perhaps). However, none of the students fully understood what it was about. All of them fired the HTTP request when ajaxForm() was called and most of them also implemented callback() and errorCallback(), which wasn’t supposed to be their job.&lt;/li&gt;
&lt;li&gt;Exercise 5, besides serving well as regular JavaScript practice, it also lets them learn more about cutting edge technologies such as &lt;strong&gt;localStorage&lt;/strong&gt;, &lt;strong&gt;Web databases&lt;/strong&gt; or &lt;strong&gt;offline web apps&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3rd-assignment-%5Bpdf%5D-%5Bfiles%5D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#3rd-assignment-%5Bpdf%5D-%5Bfiles%5D&quot;&gt;3rd assignment [&lt;a href=&quot;http://lea.verou.me/wdclass/assignment3_en.pdf&quot;&gt;pdf&lt;/a&gt;] [&lt;a href=&quot;http://lea.verou.me/wdclass/assignment3_en.zip&quot;&gt;files&lt;/a&gt;]&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In this assignment, the students practiced in PHP, combined everything else they’ve learned and understood better how everything clicks together to bring a fully-fledged web application to life. We didn’t get many submissions, since most students were busy with other assignments these days but most of the ones we got were awesome, I had an extremely hard time picking the best one.&lt;/p&gt;
&lt;h4 id=&quot;lessons-learned-1&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#lessons-learned-1&quot;&gt;Lessons learned&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Most mistakes are not very original: They tend to appear over and over again in unrelated assignments. Most of them are caused either by ambiguities in the description or because the student didn’t bother to read all of it. Also, the most frequent excuse for not doing something right is “it wasn’t in the description!”. So, they have to be as detailed as possible, including even stuff that’s obvious to someone more experienced.&lt;/li&gt;
&lt;li&gt;Plagiarism is not a myth, but a real and frequent problem. Students copy from other students, from scripts posted online and from any source they can get their hands on. :( However, only teaching the standards makes it much easier to spot (at least when it comes to copying from the internet) since most scripts posted online have to account for browser incompatibilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;labs&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#labs&quot;&gt;Labs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We only held 3 hands-on lectures (2 hours each), due to time availability issues of everyone involved in the course. I taught the first 2 and another TA was responsible for the 3rd one. Details below:&lt;/p&gt;
&lt;h4 id=&quot;1st-lab-%5Bfinal-result%5D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#1st-lab-%5Bfinal-result%5D&quot;&gt;1st lab [&lt;a href=&quot;http://lea.verou.me/wdclass/lab1/&quot;&gt;final result&lt;/a&gt;]&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The students had to write an HTML file for the single page personal website of some fictional web developer and then use CSS to style it in a certain way. The process was guided, in order to keep all of them on the same track. The site was carefully designed to demonstrate many key CSS concepts &amp;amp; features at once.&lt;/p&gt;
&lt;h4 id=&quot;2nd-lab-%5Bfinal-result%5D-%5Bjs-code%5D-%5Bincomplete-js-code%5D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#2nd-lab-%5Bfinal-result%5D-%5Bjs-code%5D-%5Bincomplete-js-code%5D&quot;&gt;2nd lab [&lt;a href=&quot;http://lea.verou.me/wdclass/rating-widget/&quot;&gt;final result&lt;/a&gt;] [&lt;a href=&quot;http://lea.verou.me/wdclass/rating-widget/rating-widget.js&quot;&gt;JS code&lt;/a&gt;] [&lt;a href=&quot;http://lea.verou.me/wdclass/rating-widget/rating-widget-incomplete.js&quot;&gt;incomplete JS code&lt;/a&gt;]&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The students were given an HTML and a CSS file and they had to fill in a .js file that had some parts missing (replaced by TODO comments as placeholders) to complete a very simple ajax rating widget.&lt;/p&gt;
&lt;h4 id=&quot;lessons-learned-2&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#lessons-learned-2&quot;&gt;Lessons learned&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Never provide downloadable slides with the things the students must write by themselves prior to the lecture. They’ll just copy-paste everything from the pdf, even if they have to fix spacing afterwards. If you absolutely have to, make sure the text is not selectable.&lt;/li&gt;
&lt;li&gt;It takes students far more time to write code than you planned for&lt;/li&gt;
&lt;li&gt;When the students don’t understand something, most of them won’t ask. :( It’s best if you personally explain things to anyone having difficulties, but there’s usually not enough time for that&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;personal-aftermath&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/07/organizing-a-university-course-on-modern-web-development/#personal-aftermath&quot;&gt;Personal aftermath&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I found out that I &lt;strong&gt;love&lt;/strong&gt; teaching. Successfully helping a student with a problem they had or something they did not understand was sometimes enough to make my day. Preparing material for the course --although exhausting-- was one of the most interesting and creative things I have ever done. Even the actual teaching is thrilling. It’s very challenging to try to keep the students’ interest, since most of them will resort to chatting with their buddies instead of paying attention way more easily than professionals would during a conference talk. However, if you manage to do so, it can be quite rewarding.&lt;/li&gt;
&lt;li&gt;I &lt;strong&gt;hate&lt;/strong&gt; grading. It’s boring, time-consuming, carries a lot of responsibility and you have to ensure every point you deduct is justified, because you might have to defend your judgement in case a student complains. Sometimes it can also freak you out completely (“OMGWTF, how could they understand it so wrong?? Why didn’t they ask?”) These strips sum it up perfectly (and with a good dose of humor):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.phdcomics.com/comics.php?f=1319&quot;&gt;&lt;img src=&quot;http://www.phdcomics.com/comics/archive/phd051910s.gif&quot; alt=&quot;Grading Rubric&quot; title=&quot;Grading Rubric&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.phdcomics.com/comics.php?f=1320&quot;&gt;&lt;img src=&quot;http://www.phdcomics.com/comics/archive/phd052110s.gif&quot; alt=&quot;If only&quot; title=&quot;If only&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Lea Verou @ Front-Trends 2010</title>
    <link href="https://lea.verou.me/2010/08/lea-verou-at-front-trends-2010/"/>
    <updated>2010-08-03T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=627</id>
    <content xml:lang="en" type="html">&lt;p&gt;Just a quick note to let you know that &lt;a href=&quot;http://front-trends.com/speakers#lea-verou&quot;&gt;I’m speaking&lt;/a&gt; in this year’s &lt;a href=&quot;http://front-trends.com/&quot;&gt;Front-Trends&lt;/a&gt; conference, which will take place in Warsaw, Poland on October 21-22. Front-Trends is a new conference (starting this year) but the organizers have managed to put together an impressive line-up (&lt;a href=&quot;http://front-trends.com/speakers#douglas-crockford&quot;&gt;Crockford&lt;/a&gt;, &lt;a href=&quot;http://front-trends.com/speakers#peter-paul-koch&quot;&gt;PPK&lt;/a&gt;, &lt;a href=&quot;http://front-trends.com/speakers#paul-bakaus&quot;&gt;Paul Bakaus&lt;/a&gt;, &lt;a href=&quot;http://front-trends.com/speakers#dmitry-baranovskiy&quot;&gt;Dmitry Baranovskiy&lt;/a&gt;, &lt;a href=&quot;http://front-trends.com/speakers#tantek-celik&quot;&gt;Tantek Çelik&lt;/a&gt;, &lt;a href=&quot;http://front-trends.com/speakers#robert-nyman&quot;&gt;Robert Nyman&lt;/a&gt; and more).&lt;/p&gt;
&lt;p&gt;My talk will introduce many aspects of CSS3, some of them in good depth (eg. selectors). Here is the official abstract:&lt;/p&gt;
&lt;h4 id=&quot;pragmatic-css3&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/08/lea-verou-at-front-trends-2010/#pragmatic-css3&quot;&gt;Pragmatic CSS3&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;With browsers constantly adding support for CSS3, especially now that even IE jumped in the game, it’s quickly becoming a necessary tool of the trade. CSS3 offers exciting possibilities and changes the way that we design and develop websites.&lt;/p&gt;
&lt;p&gt;In this 2-hour practical session, full of real world use cases, you will learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Everything you ever wanted to know about CSS3 selectors&lt;/li&gt;
&lt;li&gt;Transparency and new color formats, including RGBA&lt;/li&gt;
&lt;li&gt;New ways to work with backgrounds, including CSS gradients, multiple background images and natively supported CSS sprites&lt;/li&gt;
&lt;li&gt;Rounded corners and border images&lt;/li&gt;
&lt;li&gt;Box and text shadows&lt;/li&gt;
&lt;li&gt;Transforms, transitions and their potential downsides&lt;/li&gt;
&lt;li&gt;New values, including calc(), attr() and new units&lt;/li&gt;
&lt;li&gt;Browser support information and techniques to take advantage of the exciting new stuff with respect to browsers of the past, to create experiences that are enjoyable for everyone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tickets are very cheap (Just &lt;strong&gt;€198&lt;/strong&gt;) but they’re selling quite fast, so if you want to come, &lt;a href=&quot;http://front-trends.com/registration&quot;&gt;hurry up&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Automatic login via notification emails?</title>
    <link href="https://lea.verou.me/2010/08/automatic-login-via-notification-emails/"/>
    <updated>2010-08-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=641</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2010/08/automatic-login-via-notification-emails/images/twitter-notification.png&quot; alt=&quot;Screenshot of a Twitter email notification&quot; title=&quot;Email notification example (via Twitter)&quot; /&gt;A couple hours ago, I received a notification email from &lt;a href=&quot;http://www.goodreads.com/&quot;&gt;Goodreads&lt;/a&gt; and unlike usually, I decided to actually visit the site (by the way, I believe that Goodreads, i.e. a &lt;a href=&quot;http://last.fm/&quot;&gt;last.fm&lt;/a&gt; for books, is an awesome idea but poorly implemented).When I did, I was quite annoyed to find out that I wasn’t already logged in, so I had to remember which one of my many passwords I had used for it and try them one by one. This is not a Goodreads fail, but a fairly common nuisance, since most (if not all) social websites behave that way.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“What if there was some magic involved?”&lt;/em&gt; Bill Scott &amp;amp; Theresa Neil advise interaction designers to ask themselves in &lt;a href=&quot;http://designingwebinterfaces.com/&quot;&gt;a book I’m currently reading&lt;/a&gt; (highly recommended by the way). Well, I guess, if there &lt;em&gt;was&lt;/em&gt; some magic involved, &lt;strong&gt;the site would “understand” that my click was initiated from an email and would automatically log me in and let me view whatever I was trying to&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What’s the point of asking for a password if the user can prove they have access to the associated email account? Such access is usually all that’s needed for someone to break into an account, theirs or not (via the forgotten password feature). So, it doesn’t help security much, just makes it slightly more time-consuming for potential impostors, while turning legitimate users with a weak memory (like yours truly) away from the site.&lt;/p&gt;
&lt;p&gt;I’m not sure whether it’s a good or a stupid idea, I’m not really suggesting it, just expressing a thought. :) I have some concerns myself too:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It’s definitely &lt;strong&gt;harder to implement&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;All links sent in notification emails must contain some special token, like reset password links do (I’ve never seen it implemented otherwise). The tokens in reset password links expire after a while, so probably these should too, for security reasons. And what happens after that? A regular login is required? Doesn’t this render the whole idea a bit pointless, since notification emails are frequently read 1+ days after they’re sent?&lt;/li&gt;
&lt;li&gt;Usually a frequent user receives a bunch of email notifications per day. &lt;strong&gt;Isn’t it a bit too risky to have dozens of such powerful emails floating around in your inbox?&lt;/strong&gt; On the other hand, it doesn’t seem more dangerous than using the “remember me” feature while logging in: Anyone that manages to get ahold of your laptop for a minute is able to use your account in most SN sites, one way or another. &lt;strong&gt;However, the “remember me” feature is a classic case where usability triumphed security&lt;/strong&gt;, at least in cases where the computer isn’t shared.&lt;/li&gt;
&lt;li&gt;Thinking of the “remember me” feature gives me another idea: It could be &lt;strong&gt;optional and active by default&lt;/strong&gt;. Perhaps with a link to easily deactivate the feature in every such email. On the other hand, more options = more confusion.&lt;/li&gt;
&lt;li&gt;Also, to avoid the issues stated in #3, this feature could be activated &lt;strong&gt;only if the user in question was inactive&lt;/strong&gt; for a while. &lt;strong&gt;Frequent users don’t need it&lt;/strong&gt; that much and even if they did, they don’t run away so easily, so it’s not as crucial.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;What do you think? Mostly useful or mostly evil?&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>On attr() and calc()</title>
    <link href="https://lea.verou.me/2010/09/on-attr-and-calc/"/>
    <updated>2010-09-11T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=653</id>
    <content xml:lang="en" type="html">&lt;p&gt;I recently posted my first suggestion to &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/&quot;&gt;www-style&lt;/a&gt;, the official W3 mailing list for CSS development. It was about &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2010Sep/0019.html&quot;&gt;allowing attr() values inside calc()&lt;/a&gt;. In this post I’ll describe in greater detail why I believe this is necessary, since not everyone follows www-style. If anyone has something to add in the discussion, you may post in the list, it’s public.&lt;/p&gt;
&lt;h3 id=&quot;attr()&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/09/on-attr-and-calc/#attr()&quot;&gt;attr()&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As you can easily &lt;a href=&quot;http://www.w3.org/TR/css3-values/#attribute&quot;&gt;find out in the specification&lt;/a&gt;, the W3 is planning for attr() to play a much bigger role in tomorrow’s CSS than it played in CSS 2.1, &lt;a href=&quot;http://www.w3.org/TR/CSS2/generate.html#propdef-content&quot;&gt;where it was originally defined&lt;/a&gt;, which opens up exciting possibilities. In a nutshell, we’re going to be able to use &lt;code&gt;attr()&lt;/code&gt; in any property, for any type of value, let it be &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt; or anything else. If the type is not obvious, we’re able to define it, via the second parameter and include a fallback value in the 3rd one. We might even be able to do things like &lt;code&gt;float: attr(X&lt;/code&gt;); (keywords are still under consideration).&lt;/p&gt;
&lt;h3 id=&quot;calc()&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/09/on-attr-and-calc/#calc()&quot;&gt;calc()&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On the other hand, as you’re probably already aware of, since &lt;a href=&quot;http://www.w3.org/TR/css3-values/#calc&quot;&gt;calc()&lt;/a&gt; is one of the hyped CSS3 features, we’re finally going to be able to do calculations with different types of units, for example &lt;code&gt;calc(100% - 30px)&lt;/code&gt;, which is something web designers requested for years.&lt;/p&gt;
&lt;h3 id=&quot;calc(attr())&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/09/on-attr-and-calc/#calc(attr())&quot;&gt;calc(attr())&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can easily see from the grammar presented in the specification for calc() that it does not allow attr() values to be used as operands in the calculations. To me, this is an obvious oversight. Since attr() values can be used anywhere, including where lengths and numbers are allowed, not being able to use them in calc() is absurd. As &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2010Sep/0072.html&quot;&gt;David Storey pointed out&lt;/a&gt;, this could be enormously useful when used in conjunction with the new form control attributes (min, max, step and the like) or HTML5 custom data attributes (data-x).&lt;/p&gt;
&lt;p&gt;Philosophically, it makes perfect sense that attr() should be allowed anywhere a &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt; or … is. &lt;strong&gt;We can’t expect attributes to only hold semantic and not presentational data, but expect these data to be ready to be utilized for presentation purposes, without any calculations whatsoever&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The first use case I can think of is the one that inspired me to suggest this. A while ago, I was researching CSS-based bar charts and progress bars. It turned out that there is no practical and purely semantic solution for specifying the bar widths. Either you have to &lt;a href=&quot;http://www.alistapart.com/articles/accessibledatavisualization&quot;&gt;include&lt;/a&gt; inline &lt;a href=&quot;http://www.standards-schmandards.com/exhibits/barchart/&quot;&gt;styles&lt;/a&gt; or you bloat your CSS &lt;a href=&quot;http://meyerweb.com/eric/css/edge/bargraph/demo.html&quot;&gt;with&lt;/a&gt; countless classes or &lt;a href=&quot;http://csswizardry.com/2010/02/css-bar-charts-styling-data-with-css3-and-progressive-enhancement/&quot;&gt;ids&lt;/a&gt;, one for each width or —even worse— bar. In cases where you just want to use the displayed percentage of the bar as its width as well, attr() can actually help. However, as you can see, this is not always the case. Most of the times the bar values are not percentages or you want to also perform calculations on the percentage, for example include padding (because usually you display the number as well) or cut it in half to prevent the bar chart from appearing very big, etc, in which calc() combined with attr() could be a lifesaver.&lt;/p&gt;
&lt;p&gt;One could argue that bar charts and progress bars are not legitimate CSS use cases but hacks that work around the lack of cross-browser SVG support, and it’s very possible that they are right (although the addition of elements like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress&quot;&gt;&lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt;&lt;/a&gt; in HTML5 is by itself an argument for the opposite). However, the use cases are not limited to that. Αny kind of stylistic treatment that is supposed to convey some kind of fraction or number (progress, temperature, distance etc) will benefit from keeping the actual data in a data-x attribute and utilize them via attr() and calc().&lt;/p&gt;
&lt;p&gt;Admittedly, coming up with more generic use cases is not very easy, since they greatly depend on the particular application. However, the same difficulty arises when trying to come up with use cases for the attr() function by itself when used for the numerical types (&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt; etc), in properties other than content. Perhaps this is the reason that not even the specification contains any practical examples for it either. I guess almost any real-life use case for attr(*, number|integer|length|angle|frequency|em|px|…, *) is also a use case for this.&lt;/p&gt;
&lt;p&gt;So far I’m optimistic about it, since almost all participants in the discussion were positive. However, calc() has already started being implemented (by Mozilla), so as time goes by, it will be increasingly harder to make changes to its grammar.&lt;/p&gt;
&lt;p&gt;What do you think? How would you use it if it’s implemented?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Sometime in Spring 2012, the issue was brought up again, and the CSS WG agreed that &lt;code&gt;attr()&lt;/code&gt; should be permitted in &lt;code&gt;calc()&lt;/code&gt;. Now it’s just a matter of browsers catching up to the spec. :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>My FT2010 slides and CSSS: My presentation framework</title>
    <link href="https://lea.verou.me/2010/10/my-ft2010-slides-and-csss-my-presentation-framework/"/>
    <updated>2010-10-29T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=676</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2010/10/my-ft2010-slides-and-csss-my-presentation-framework/images/cover-screenshot.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2010/10/my-ft2010-slides-and-csss-my-presentation-framework/images/cover-screenshot.png&quot; alt=&quot;Screenshot of the first slide&quot; title=&quot;cover-screenshot&quot; /&gt;&lt;/a&gt;About a week ago, I was in Warsaw, Poland to give &lt;a href=&quot;http://lea.verou.me/2010/08/lea-verou-at-front-trends-2010/&quot;&gt;my first talk&lt;/a&gt; at a big conference, &lt;a href=&quot;http://front-trends.com/&quot;&gt;Front Trends 2010&lt;/a&gt;. As every first-time speaker, I was extremely nervous and worried that everything would go bad. That my talk would be boring or too basic or that I would just freeze at stage, unable to say a word. It was a 2-hour talk with a break in between, so I was also terrified that nobody would show up the second hour.&lt;/p&gt;
&lt;p&gt;Contrary to my fears and insecurities, it went better than I could have ever hoped. The feedback on twitter and in general was enthusiastic! There wasn’t a single negative comment. Even people I look up to, like &lt;a href=&quot;http://twitter.com/#!/t/status/28020396001&quot;&gt;Tantek Çelik&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/ppk/status/28018480426&quot;&gt;PPK&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/jaffathecake/status/28016064374&quot;&gt;Jake Archibald&lt;/a&gt; or &lt;a href=&quot;http://twitter.com/robertnyman/status/28016285089&quot;&gt;Robert Nyman&lt;/a&gt; had something good to say! And instead of nobody showing up the second hour, the audience almost doubled!&lt;/p&gt;
&lt;p&gt;At this point, I would like to thank &lt;a href=&quot;http://www.wait-till-i.com/2010/10/25/fronttrends2010-in-warsaw-poland-my-impressions-slides-and-audio/&quot;&gt;Christian Heilmann&lt;/a&gt; for helping me become less nervous before my talk by going through all my slides with me and offering his invaluable advice for every part (I forgot to follow most of it, but it really helped in my attitude). I can’t thank you enough Christian!&lt;/p&gt;
&lt;p&gt;Many attendees asked me for my slides and presentation framework. You can find my slides &lt;a href=&quot;http://talks.verou.me/ft2010/&quot;&gt;online here&lt;/a&gt; or &lt;a href=&quot;https://lea.verou.me/2010/10/my-ft2010-slides-and-csss-my-presentation-framework/uploads/ft2010.zip&quot;&gt;download&lt;/a&gt; them. However, &lt;strong&gt;before you follow those links, read below&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I originally ran my presentation in &lt;strong&gt;Firefox 4 beta&lt;/strong&gt; so I was testing mainly in that and Minefield (Firefox’s nightly releases). It supports other browsers too (Chrome 7, Opera 10.6+), but it still displays better in Firefox or Minefield and is (surprisingly) faster in them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opera&lt;/strong&gt; has issues with a few unicode characters I used in some places and won’t display Helvetica Neue even if it’s installed (@font-face is not an option with that font, for legal reasons)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Any non-Gecko browser&lt;/strong&gt; will not display &lt;strong&gt;CSS gradients&lt;/strong&gt;, since Gecko is the only engine so far that supports the standard syntax. Therefore the gradient demos and the multiple backgrounds demo won’t work in non-Gecko browsers.&lt;/li&gt;
&lt;li&gt;Some slides are a bit slow on &lt;strong&gt;Webkit&lt;/strong&gt;. &lt;strong&gt;The first slide is extremely slow in it,&lt;/strong&gt; you have been warned.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opera&lt;/strong&gt; and &lt;strong&gt;Webkit&lt;/strong&gt; have (different) bugs with border-radius: 50%, so some things using it will look funny.&lt;/li&gt;
&lt;li&gt;I have &lt;strong&gt;only tested in OSX browsers&lt;/strong&gt;. I have no idea how it will perform on Windows or Linux distros yet.&lt;/li&gt;
&lt;li&gt;It’s a 2-hour talk and the presentation was designed to run locally. &lt;strong&gt;It’s not small and it will take a while to load&lt;/strong&gt;. That’s due to the images used, as you can easily see from the zip archive.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;editable examples&lt;/strong&gt; many of you liked are based on this &lt;a href=&quot;http://annevankesteren.nl/2010/03/css-wg-brainstorming&quot;&gt;CSS mindfuck by Anne van Kesteren&lt;/a&gt;. It’s smart and convenient, but beware: It breaks really, really easily. It’s good for &lt;em&gt;changing&lt;/em&gt; the code realtime, but it will most likely break if you try to &lt;em&gt;add&lt;/em&gt; extra code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In case you’re not feeling very adventurous today, or you’re just using a computer with only unsupported browsers, here’s the presentation as a series of images (not interactive, but still the same info):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/LeaVerou/css3-a-practical-introduction-ft2010-talk&quot; title=&quot;CSS3: A practical introduction (FT2010 talk)&quot;&gt;CSS3: A practical introduction (FT2010 talk)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2010/10/my-ft2010-slides-and-csss-my-presentation-framework/images/logo-small.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2010/10/my-ft2010-slides-and-csss-my-presentation-framework/images/logo-small.png&quot; alt=&quot;CSSS logo&quot; title=&quot;CSSS&quot; /&gt;&lt;/a&gt;By popular demand, I’m also releasing my presentation framework, for which in the meantime I found a name (&lt;strong&gt;CSSS&lt;/strong&gt;, inspired by S5), designed a logo and made a simpler, &lt;a href=&quot;http://lea.verou.me/csss/sample-slideshow.html&quot;&gt;sample presentation&lt;/a&gt; with a different, simpler theme. I released it in &lt;a href=&quot;http://github.com/LeaVerou/CSSS&quot;&gt;a public repo on Github&lt;/a&gt; (finally got around to learning the basics of Github and loved it!). Please note that this is a very first version and I haven’t been able to test it much, especially on Windows, since my Mac is quite new and I keep postponing to install some virtualization software. A friend reported that &lt;strong&gt;Firefox 3.6 on Windows has serious issues&lt;/strong&gt; with it, although it runs fine on my FF3.6 copy for Mac. It doesn’t work at all in IE, even IE9, as I don’t yet have IE to test it out. Please report any issues on Github’s bug tracker and eventually I --or someone else, you’re all welcome :p-- will fix them (don’t forget to mention exact browser version and OS). If you’re using Safari, press Ctrl+H for something cool ;) (it works on the others too, but it’s slower and not smooth)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2010/10/my-ft2010-slides-and-csss-my-presentation-framework/images/csss-logo.jpg&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2010/10/my-ft2010-slides-and-csss-my-presentation-framework/images/csss-logo-300x187.jpg&quot; alt=&quot;&quot; title=&quot;csss-logo&quot; /&gt;&lt;/a&gt;Some may ask: &lt;em&gt;“If CSS3 degrades so gracefully and we can use it today as you told us in your talk, then why all these issues with different browsers in CSSS or your FT presentation?”&lt;/em&gt;. First of all, these are not everyday use cases. Projects like CSSS or my FT presentation are quite experimental, use a lot of CSS3, including many edge cases and I could have devoted more time to make them degrade more gracefully, but given the target audience, I don’t think it’s worth it much. It’s expected that  there might be rendering problems in some browsers or that they might be slow, browsers need edge cases to highlight problems in their implementations of the new stuff before it’s finalized. Every time I experiment with CSS3, I find at least one browser bug, which I generally try to report (don’t let that scare you though, as I said, I have a penchant for edge cases).&lt;/p&gt;
&lt;p&gt;You may have also noticed I redesigned my blog. As you may have noticed, I have fallen in love with that &lt;a href=&quot;http://lukeroberts.us/2008/12/wallpaper-colourful-wood/&quot;&gt;Rainbow Wood wallpaper by Luke Roberts&lt;/a&gt; and I just &lt;strong&gt;&lt;em&gt;had&lt;/em&gt;&lt;/strong&gt; to put it in my blog too :P The new design has a few issues with Opera at the moment, but I hope to fix them soon. It will also look better to those that have Helvetica Neue installed.&lt;/p&gt;
</content>
  </entry><entry>
    <title>The curious case of border-radius:50%</title>
    <link href="https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/"/>
    <updated>2010-10-30T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=705</id>
    <content xml:lang="en" type="html">&lt;p&gt;Admittedly, percentages in border-radius are not one of the most common use cases. Some even consider them an edge case, since most people seem to set border-radius in pixels or --rarely-- ems. And since it’s not used very frequently, it’s still quite buggy. A bit of a chicken and egg case actually: Is it buggy because it’s used rarely or is it used rarely because it’s buggy? My vote would go to the first, so the purpose of this post is to let people know about why percentages in border-radius are incredibly useful and to highlight the various browser whims when it comes to rendering them.&lt;/p&gt;
&lt;h2 id=&quot;specification&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/#specification&quot;&gt;Specification&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we go into discussing implementations, let’s first examine what the right thing to do is, i.e. what &lt;a href=&quot;http://www.w3.org/TR/2010/WD-css3-background-20100612/#the-border-radius&quot;&gt;the specification says&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Percentages: Refer to corresponding dimension of the border box.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The two length &lt;strong&gt;or percentage&lt;/strong&gt; values of the ‘border-*-radius’ properties define the radii of a quarter ellipse that defines the shape of the corner of the outer border edge (see the diagram below). The first value is the horizontal radius, the second the vertical radius. If the second value is omitted it is copied from the first. If either length is zero, the corner is square, not rounded. &lt;strong&gt;Percentages for the horizontal radius refer to the width of the border box, whereas percentages for the vertical radius refer to the height of the border box&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;why-is-that-useful%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/#why-is-that-useful%3F&quot;&gt;Why is that useful?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It’s the only way of utilizing border-radius to draw a circle or ellipse, i.e. &lt;strong&gt;a rounded shape without any straight lines whatsoever&lt;/strong&gt; (without knowing the dimensions in advance).&lt;/p&gt;
&lt;p&gt;As you will see below, Firefox used to have a bug, or actually a different interpretation of the spec, which I think is a quite commonly needed use case, even more than ellipses: It &lt;strong&gt;always drew a regular curve&lt;/strong&gt; for the corners (quarter of a circle) &lt;strong&gt;with the maximum possible radii&lt;/strong&gt;. This is a &lt;strong&gt;very commonly needed shape&lt;/strong&gt; in UI design. If you’re using OSX, you’re seeing it everywhere: the buttons, the scrollbars, even Skype (notice the blue or grey shading around the usernames in a chat). As I’m writing this post, I can see the same shape in the buttons of Wordpress’ admin panel. And as the current spec stands, there’s no way to do that. You have to know the height (or width, if you want a vertical shape) in advance, which even when possible, makes border-radius depend on the value of other attributes (such as line-height) and you have to remember to change it every time you change those, which causes maintenance headaches. And what’s worse is that the Backgrounds &amp;amp; Borders module is almost done, so it’s quite unlikely that this will change anytime soon. :(&lt;/p&gt;
&lt;p&gt;As noted in &lt;a href=&quot;http://lea.verou.me/2010/10/the-curious-case-of-border-radius50/#comment-1516&quot;&gt;this comment by David Baron&lt;/a&gt;, that assumption wasn’t exactly correct about Firefox’s old rendering. It just resolved % as relative to width in every case (kinda like percentages in margins) and when the height was smaller than the width, it applied the rules for radii that are too big, which say to reduce it equally. A straightforward deduction is that we do have a standards-compliant way to get the behavior from old versions of Firefox, in every browser: Just specify a very big radius, like 9999px.&lt;/p&gt;
&lt;h2 id=&quot;different-implementations%2C-different-bugs&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/#different-implementations%2C-different-bugs&quot;&gt;Different implementations, different bugs&lt;/a&gt;&lt;/h2&gt;
&lt;figure class=&quot;float margin&quot;&gt;
&lt;a href=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/images/Firefox4b6.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/images/Firefox4b6.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;figcaption&gt;Firefox 4 beta 6&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As I mentioned above, &lt;strong&gt;Gecko&lt;/strong&gt; up to Firefox version 4 beta 6 always draws a regular curve for the corners with the largest radii applicable, resulting in a shape that is either a perfect circle or a rectangle with a semicircle on top and bottom (if height &amp;gt; width) or right and left (if width &amp;gt; height).&lt;/p&gt;
&lt;figure class=&quot;float margin&quot;&gt;
&lt;a href=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/images/Minefield.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/images/Minefield.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;figcaption&gt;Minefield (latest Gecko nightlies)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In the latest nightlies this bug is fixed, and it follows the spec to the letter. I can’t help but wonder if this was a bug, a misinterpretation of the spec or a deliberate disagreement with it.&lt;/p&gt;
&lt;figure class=&quot;float margin&quot;&gt;
&lt;a href=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/images/Firefox4b6.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/images/Webkit.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;figcaption&gt;WebKit nightlies&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Webkit&lt;/strong&gt; was late to support percentages in border-radius, but it seems to be the first (it or IE9, I’m not sure) to follow the spec to the letter --concerning corner radii at least-- and renders an ellipse (horizontal radius = width/2, vertical radius = height/2) no matter what. Webkit however seems to be having serious trouble with borders, rendering them with variable width strokes (!).&lt;/p&gt;
&lt;figure class=&quot;float margin&quot;&gt;
&lt;a href=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/images/Opera.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/images/Opera.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;figcaption&gt;Opera 11&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Presto&lt;/strong&gt; (Opera) is the weirdest when it comes to rendering a percentage border-radius. I can’t figure out the algorithm it uses to determine the radii of the corners even if it was to save my life, it even changes according to window size in my testcases! Since I’ve been using border-radius:50% regularly, I’ve had the pleasure of observing Opera’s rendering in many different designs and I still can’t find a pattern. It’s particularly funny when rendering the little fuchsia comment bubbles in the homepage of my blog: Every one of them has a different radius, even if they are about the same size. It even got one of them right and rendered it as an ellipse once!&lt;/p&gt;
&lt;figure class=&quot;float margin&quot;&gt;
&lt;a href=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/images/IE9.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2010/10/the-curious-case-of-border-radius50/images/IE9.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;figcaption&gt;Internet Explorer 9&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Trident (IE9)&lt;/strong&gt;, along with the latest Gecko nightly is the only 100% correct one when it comes to rendering the testcases, which is not surprising since the IE team boasted quite a lot for their bulletproof border-radius implementation. Well, their CSS3 support might be a bit lacking, but at least the bits they actually implement aren’t buggy. Kudos for that.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lea.verou.me/demos/border-radius-50p.html&quot;&gt;Link to testcases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Of course all bugs mentioned above have been reported to the respective browser vendors (except the Gecko one that is already fixed in the nightlies).&lt;/p&gt;
</content>
  </entry><entry>
    <title>Tag editing UIs</title>
    <link href="https://lea.verou.me/2010/11/tag-editing-uis/"/>
    <updated>2010-11-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=745</id>
    <content xml:lang="en" type="html">&lt;p&gt;I had to build the edit tags interface for an application I’m working on, so I took a good look at how these are implemented across many popular applications nowadays. It seems there are a few patterns that are used over and over, and I’m unsure which one is the most preferable by users, they all have their advantages and disadvantages. In this post I’m going to describe these patterns and list some of the pros and cons I think they have. For simplicity, I will focus on the tag editing interface itself, ignoring any tag suggestions and other extra features.&lt;/p&gt;
&lt;h3 id=&quot;pattern-%231%3A-input-field-to-add-new-tags%2C-delete-button-for-existing-ones&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/11/tag-editing-uis/#pattern-%231%3A-input-field-to-add-new-tags%2C-delete-button-for-existing-ones&quot;&gt;Pattern #1: Input field to add new tags, delete button for existing ones&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Used by: Wordpress, flickr, foursquare&lt;img src=&quot;https://lea.verou.me/2010/11/tag-editing-uis/images/Screen-shot-2010-11-14-at-16.45.11-.png&quot; alt=&quot;Screenshot of Wordpress&#39; tagging UI&quot; title=&quot;Wordpress&#39; tagging UI&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One click deletion of tags&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Impossible to edit a tag, you have to remove it and add the corrected version&lt;/li&gt;
&lt;li&gt;Hard to delete many tags at once&lt;/li&gt;
&lt;li&gt;Disconnected new and existing tags, making it hard to get the bigger picture&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;foursquare’s implementation was the worst I’ve tested: There’s no (discoverable?) way to delete or edit a tag and when you add one via the text field it doesn’t get cleared which is confusing because it makes it seem like an edit tags field although it’s an add tags field, as I found out the hard way (by creating a “pizza, pasta” tag instead of 2 tags: pizza and pasta).&lt;/p&gt;
&lt;h3 id=&quot;pattern-%232%3A-one-text-field-to-edit%2C-delete-or-add-new-tags&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/11/tag-editing-uis/#pattern-%232%3A-one-text-field-to-edit%2C-delete-or-add-new-tags&quot;&gt;Pattern #2: One text field to edit, delete or add new tags&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Used by: delicious, Google reader, stackoverflow, reddit&lt;a href=&quot;https://lea.verou.me/2010/11/tag-editing-uis/images/Screen-shot-2010-11-14-at-16.47.04-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2010/11/tag-editing-uis/images/Screen-shot-2010-11-14-at-16.47.04-.png&quot; alt=&quot;Screenshot of delicious&#39; tagging UI&quot; title=&quot;Delicious&#39; tagging UI&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lets the user edit tags too, in addition to adding and deleting&lt;/li&gt;
&lt;li&gt;Easy to delete many tags at once&lt;/li&gt;
&lt;li&gt;All tags at one place&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More cumbersome to delete a tag&lt;/li&gt;
&lt;li&gt;A bit more prone to mistakes than guided interfaces&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pattern-%233%3A-hybrid-approach%3A-text-field-for-all%2C-existing-tags-seem-to-be-inside-and-have-a-delete-button&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/11/tag-editing-uis/#pattern-%233%3A-hybrid-approach%3A-text-field-for-all%2C-existing-tags-seem-to-be-inside-and-have-a-delete-button&quot;&gt;Pattern #3: Hybrid approach: Text field for all, existing tags seem to be inside and have a delete button&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Used by: &lt;a href=&quot;http://last.fm/&quot;&gt;last.fm&lt;/a&gt;&lt;img src=&quot;https://lea.verou.me/2010/11/tag-editing-uis/images/Screen-shot-2010-11-14-at-16.54.45-.png&quot; alt=&quot;Screenshot of last.fm&#39;s tagging UI&quot; title=&quot;last.fm&#39;s tagging UI&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All tags in one place&lt;/li&gt;
&lt;li&gt;One click deletion&lt;/li&gt;
&lt;li&gt;Easy to delete many tags too&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There’s no editing in &lt;a href=&quot;http://last.fm/&quot;&gt;last.fm&lt;/a&gt;’s implementation, but the pattern easily allows for that, for example by using contentEditable on the tag &lt;a&gt;s&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://last.fm/&quot;&gt;last.fm&lt;/a&gt; chooses to implement this by faking the tags being inside an input field: Technically they’re implemented just like in pattern #1 above, with the difference that they visually appear to be inside the same box and every time a user inserts a comma (which is the tag separator) the tag they just typed is removed from the text field and a new &lt;a&gt; link with a delete button is created just before the text field, which is much smaller than it looks.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;which-pattern-is-the-best%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/11/tag-editing-uis/#which-pattern-is-the-best%3F&quot;&gt;Which pattern is the best?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As with most UI questions, I don’t think there’s a definite answer to that. It heavily depends on the audience too: A more technically inclined user might be more comfortable with the 2nd approach since it’s the least restrictive one. The average casual internet user might prefer the 3rd approach. I don’t think there’s any case where pattern #1 is better than pattern #3, except when development time is a concern (pattern #1 is a bit easier to implement, although #2 is the easiest of all).&lt;/p&gt;
&lt;h3 id=&quot;another-pattern%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/11/tag-editing-uis/#another-pattern%3F&quot;&gt;Another pattern?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My initial attempt for the application I’m building was to use a hybrid approach of #2 and #3: When the user clicked on “Edit tags”, the tag container would get a &lt;code&gt;contentEditable&lt;/code&gt; attribute and the idea was that every time a comma or any other non-permitted character would be inserted a new tag would be created (or if we were in the middle of one, it would get split into 2). That would have all the advantages of #2 and #3, except one-click deletion. It would also have the advantage that the user is directly editing the interface, which is usually a good idea usability-wise. I hate to admit I gave up on it for the time being, because it proved harder to implement than it seemed and I had to move on, so I went with #2. I might revisit it sometime in the future though if I still think it’s a good idea and nobody has done so by then.&lt;/p&gt;
</content>
  </entry><entry>
    <title>rgba.php v1.2: Improved URL syntax, now at Github</title>
    <link href="https://lea.verou.me/2010/12/rgba-php-v1-2-improved-url-syntax-now-at-github/"/>
    <updated>2010-12-08T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=763</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2010/12/rgba-php-v1-2-improved-url-syntax-now-at-github/images/Screen-shot-2011-11-15-at-15.19.14-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2010/12/rgba-php-v1-2-improved-url-syntax-now-at-github/images/Screen-shot-2011-11-15-at-15.19.14--300x187.png&quot; alt=&quot;&quot; title=&quot;rgba.php project page screenshot&quot; /&gt;&lt;/a&gt;I wrote the first version of rgba.php as a complement to &lt;a href=&quot;http://lea.verou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/&quot;&gt;an article on RGBA that I posted on Februrary 2009&lt;/a&gt;. Many people seemed to like the idea and started using it. With their valuable input, I made many changes and &lt;a href=&quot;http://lea.verou.me/2009/10/new-version-of-rgba-php-is-out/&quot;&gt;released v.1.1&lt;/a&gt; (1.1.1 shortly after I posted the article due to another little fix) on October 2009. More than a year after, quite a lot of people still ask me about it and use it, so I decided to make &lt;a href=&quot;https://github.com/LeaVerou/rgba.php&quot;&gt;a github repo for it&lt;/a&gt; and release a new version, with a much easier to use syntax for the URL, which lets you just copy and paste the color instead of rewriting it:&lt;/p&gt;
&lt;p&gt;background: url(‘rgba.php/rgba(255, 255, 255, 0.3)’);
background: rgba(255, 255, 255, 0.3);&lt;/p&gt;
&lt;p&gt;instead of:&lt;/p&gt;
&lt;p&gt;background: url(‘rgba.php?r=255&amp;amp;g=255&amp;amp;b=255&amp;amp;a=30’);
background: rgba(255, 255, 255, 0.3);&lt;/p&gt;
&lt;p&gt;I also made &lt;a href=&quot;http://lea.verou.me/rgba.php/&quot;&gt;a quick about/demo page for it&lt;/a&gt;. Enjoy :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Checkerboard, striped &amp; other background patterns with CSS3 gradients</title>
    <link href="https://lea.verou.me/2010/12/checkered-stripes-other-background-patterns-with-css3-gradients/"/>
    <updated>2010-12-22T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=775</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;http://lea.verou.me/demos/css3-patterns.html&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2010/12/checkered-stripes-other-background-patterns-with-css3-gradients/images/css3-patterns-1024x480.png&quot; alt=&quot;Screenshot of the CSS3 patterns I came up with&quot; title=&quot;The CSS3 patterns I came up with&quot; /&gt;&lt;/a&gt;You’re probably familiar with CSS3 gradients by now, including the closer to the standard Mozilla syntax and the ugly verbose Webkit one. I assume you know how to add multiple color stops, make your gradients angled or create radial gradients. What you might not be aware of, is that CSS3 gradients can be used to create many kinds of commonly needed patterns, including checkered patterns, stripes and more.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/demos/css3-patterns.html&quot; class=&quot;cta&quot;&gt;View demo&lt;/a&gt; (Works in Webkit, Firefox 3.6+, Opera 11.50+ and IE10+)&lt;/p&gt;
&lt;p&gt;The main idea behind the technique is the following, taken from the &lt;a href=&quot;http://dev.w3.org/csswg/css3-images/#color-stop-syntax&quot;&gt;CSS3 Images spec&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If multiple color-stops have the same position, they produce an infinitesimal transition from the one specified first in the rule to the one specified last. &lt;strong&gt;In effect, the color suddenly changes at that position rather than smoothly transitioning.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I guess this makes it obvious how to create the tile for the stripes (unless you’ve never created a striped background before, but teaching you this is beyond the scope of this post). For example the gradient for the horizontal stripes is:&lt;/p&gt;
&lt;p&gt;background-color: #0ae;
background-image: -webkit-gradient(linear, 0 0, 0 100%, color-stop(.5, rgba(255, 255, 255, .2)), color-stop(.5, transparent), to(transparent));
background-image: -moz-linear-gradient(rgba(255, 255, 255, .2) 50%, transparent 50%, transparent);
background-image: -o-linear-gradient(rgba(255, 255, 255, .2) 50%, transparent 50%, transparent);
background-image: linear-gradient(rgba(255, 255, 255, .2) 50%, transparent 50%, transparent);&lt;/p&gt;
&lt;p&gt;Why &lt;code&gt;transparent&lt;/code&gt; instead of the actual colors we want? For flexibility. &lt;code&gt;background-color&lt;/code&gt; serves two purposes here: Setting the color of half the stripes and serving as a fallback for browsers that don’t support gradients.&lt;/p&gt;
&lt;p&gt;However, without anything else, the tile will occupy the whole container. To control the size of each tile, you can use background-size:&lt;/p&gt;
&lt;p&gt;-webkit-background-size: 50px 50px;
-moz-background-size: 50px 50px;
background-size: 50px 50px;&lt;/p&gt;
&lt;p&gt;To create the picnic-style pattern, you just overlay horizontal stripes on vertical stripes.&lt;/p&gt;
&lt;p&gt;The hardest one to figure out was the checkered pattern. It consists of two 45° linear gradients and two -45° linear gradients, each containing ¼ of the dark squares. I still haven’t managed to think of a way to create a regular checkerboard (not at 45°) without needing an unacceptably large number of gradients. It will be very easily possible if conical gradients start being supported (currently they’re not even in the spec yet).&lt;/p&gt;
&lt;p&gt;Can you think of any other popular patterns that can be created with CSS3 and no images? If so, let me know with a comment. Cheers! :)&lt;/p&gt;
&lt;h3 id=&quot;added-afterwards%3A-other-patterns&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2010/12/checkered-stripes-other-background-patterns-with-css3-gradients/#added-afterwards%3A-other-patterns&quot;&gt;Added afterwards: Other patterns&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are far more pattern designs possible with CSS3 gradients than I originally thought. For more details, see &lt;a href=&quot;http://lea.verou.me/2011/04/css3-patterns-gallery-and-a-new-pattern/&quot;&gt;this later post&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Yet another redesign</title>
    <link href="https://lea.verou.me/2011/01/yet-another-redesign/"/>
    <updated>2011-01-05T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=799</id>
    <content xml:lang="en" type="html">&lt;p&gt;I had grown sick of my previous blog style and its various bugs (since it was put together in just a few hours), so I decided to make a new, more minimalistic one. Best viewed in browsers that support CSS gradients, like Firefox, Safari and Chrome. I also finally got around to making a logo for myself, although I’m not sure I’ll keep it. I also switched to HTML5, using &lt;a href=&quot;http://wordpress.org/extend/themes/toolbox&quot;&gt;Toolbox&lt;/a&gt; as a base.&lt;/p&gt;
&lt;p&gt;I want to make a few more changes, but I have to go to sleep sometime :p&lt;/p&gt;
&lt;p&gt;I also started using &lt;a href=&quot;http://disqus.com/&quot;&gt;DISQUS&lt;/a&gt; for the blog comments. I like it when a blog I read has it (since it offers a few features I find convenient, like comment editing for instance), so I wanted to offer it to my readers too. It’s a shame that in some of their buttons they haven’t added the standard CSS3 border-radius declarations, but only the prefixed proprietary ones, so they’re square in Opera (and probably IE9). I’m fed up with seeing this in websites, &lt;a href=&quot;http://topsy.com/&quot;&gt;TOPSY&lt;/a&gt;’s widget also does it. However, their carelessness will backfire soon, when browsers stop supporting the prefixed versions *evil grin*&lt;/p&gt;
</content>
  </entry><entry>
    <title>I&#39;m speaking at @media Web Directions ’11!</title>
    <link href="https://lea.verou.me/2011/01/im-speaking-at-atmedia-web-directions-11/"/>
    <updated>2011-01-05T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=809</id>
    <content xml:lang="en" type="html">&lt;p&gt;Just a quick note to let you know I’m speaking at &lt;a href=&quot;http://atmedia11.webdirections.org/&quot;&gt;this year’s @media Web Directions&lt;/a&gt; conference, which will take place during May 26–27 in London, UK. I’m very excited about this, since I always considered @media one of the top front-end conferences in the industry :)&lt;/p&gt;
&lt;p&gt;The title and abstract of &lt;a href=&quot;http://atmedia11.webdirections.org/program/design/#css3-at-the-outer-rim&quot;&gt;my talk&lt;/a&gt; is as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;css3-at-the-outer-rim&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/01/im-speaking-at-atmedia-web-directions-11/#css3-at-the-outer-rim&quot;&gt;CSS3 at the Outer Rim&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By now most of you know how to use the core CSS3 features in your designs to embed custom fonts and easily create rounded corners, drop shadows, and scalable designs with media queries. But there is still a large area of CSS3 that remains unexplored by most web designers and developers. In this talk Lea will present many CSS3 features that are useful but underrated, as well as uncommon ways of utilising the CSS3 features you already know about, in order to do much more with even fewer images and less code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Although it’s on the design track, I expect it to appeal to both developers and designers.&lt;/p&gt;
&lt;p&gt;You can use the coupon code &lt;strong&gt;WDVEROU&lt;/strong&gt; to take £50 off the current price. ;)&lt;/p&gt;
&lt;p&gt;Hope to see you there! :D&lt;/p&gt;
</content>
  </entry><entry>
    <title>Styling elements based on sibling count</title>
    <link href="https://lea.verou.me/2011/01/styling-children-based-on-their-number-with-css3/"/>
    <updated>2011-01-17T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=825</id>
    <content xml:lang="en" type="html">&lt;p&gt;The &lt;a href=&quot;http://andr3.net/blog/post/142&quot;&gt;original idea belongs to André Luís&lt;/a&gt;, but I think it could be improved to be much less verbose.&lt;/p&gt;
&lt;p&gt;André’s solution is like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* one item */
li:nth-child(1):nth-last-child(1) {
	width: 100%;
}

/* two items */
li:nth-child(1):nth-last-child(2),
li:nth-child(2):nth-last-child(1) {
	width: 50%;
}

/* three items */
li:nth-child(1):nth-last-child(3),
li:nth-child(2):nth-last-child(2),
li:nth-child(3):nth-last-child(1) {
	width: 33.3333%;
}

/* four items */
li:nth-child(1):nth-last-child(4),
li:nth-child(2):nth-last-child(3),
li:nth-child(3):nth-last-child(2),
li:nth-child(4):nth-last-child(1) {
	width: 25%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s based on the relationship between :nth-child and :nth-last-child. As you can see, the number of total rules is O(N) and the number of selectors in every rule is also O(N).&lt;/p&gt;
&lt;p&gt;However, what you really want, is to just target the first element. The others can be targeted with just a sibling selector. With my improvement, the number of total rules is still O(N), but the number of selectors in every rule becomes just 2, making this trick practical for far larger numbers of children:&lt;/p&gt;
&lt;p&gt;/* one item */
li:first-child:nth-last-child(1) {
width: 100%;
}&lt;/p&gt;
&lt;p&gt;/* two items */
li:first-child:nth-last-child(2),
li:first-child:nth-last-child(2) ~ li {
width: 50%;
}&lt;/p&gt;
&lt;p&gt;/* three items */
li:first-child:nth-last-child(3),
li:first-child:nth-last-child(3) ~ li {
width: 33.3333%;
}&lt;/p&gt;
&lt;p&gt;/* four items */
li:first-child:nth-last-child(4),
li:first-child:nth-last-child(4) ~ li {
width: 25%;
}&lt;/p&gt;
&lt;p&gt;And here’s a fiddle to prove it:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 300px&quot; src=&quot;https://jsfiddle.net/leaverou/HdfaT/embedded/result,css,html&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Yes, I know that with Flexbox and the other layout modules, techniques such as these are soon becoming obsolete, but I think they are still useful right now. I’m also aware that you can emulate this particular example with table display modes, but a) Table display modes have other implications that are sometimes undesirable and b) Widths are just an example, you could come up with other ways to style the elements based on their total count, which can’t be emulated by CSS tables.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Convert PHP serialized data to Unicode</title>
    <link href="https://lea.verou.me/2011/02/convert-php-serialized-data-to-unicode/"/>
    <updated>2011-02-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=835</id>
    <content xml:lang="en" type="html">&lt;p&gt;I recently had to convert a database of a large Greek website from single-byte Greek to Unicode (UTF-8).
One of the problems I faced was the stored PHP serialized data: As PHP stores the length of the data (in bytes) inside the serialized string, the stored serialized strings could not be unserialized after the conversion.&lt;/p&gt;
&lt;p&gt;I didn’t want anyone to go through the frustration I went through while searching for a solution, so here is a little function I wrote to recount the string lengths, since I couldn’t find anything on this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;function recount_serialized_bytes($text) {
	mb_internal_encoding(&amp;quot;UTF-8&amp;quot;);
	mb_regex_encoding(&amp;quot;UTF-8&amp;quot;);

	mb_ereg_search_init($text, &#39;s:[0-9]+:&amp;quot;&#39;);

	$offset = 0;

	while(preg_match(&#39;/s:([0-9]+):&amp;quot;/u&#39;, $text, $matches, PREG_OFFSET_CAPTURE, $offset) ||
		  preg_match(&#39;/s:([0-9]+):&amp;quot;/u&#39;, $text, $matches, PREG_OFFSET_CAPTURE, ++$offset)) {
		$number = $matches[1][0];
		$pos = $matches[1][1];

		$digits = strlen(&amp;quot;$number&amp;quot;);
		$pos_chars = mb_strlen(substr($text, 0, $pos)) + 2 + $digits;

		$str = mb_substr($text, $pos_chars, $number);

		$new_number = strlen($str);
		$new_digits = strlen($new_number);

		if($number != $new_number) {
			// Change stored number
			$text = substr_replace($text, $new_number, $pos, $digits);
			$pos += $new_digits - $digits;
		}

		$offset = $pos + 2 + $new_number;
	}

	return $text;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My initial approach was to do it with regular expressions, but the PHP serialized data format is not a regular language and cannot be properly parsed with regular expressions. All approaches fail on edge cases, and I had lots of edge cases in my data (I even had nested serialized strings!).&lt;/p&gt;
&lt;p&gt;Note that this will only work when converting &lt;strong&gt;from single-byte encoded data&lt;/strong&gt;, since it assumes the stored lengths are the string lengths in characters. Admittedly, it’s not my best code, it could be optimized in many ways. It was something I had to write quickly and was only going to be used by me in a one-time conversion process. However, it works smoothly and has been tested with lots of different serialized data. I know that not many people will find it useful, but it’s going to be a lifesaver for the few ones that need it.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Incrementable length values in text fields</title>
    <link href="https://lea.verou.me/2011/02/incrementable-length-values-in-text-fields/"/>
    <updated>2011-02-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=839</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2011/02/incrementable-length-values-in-text-fields/images/incrementable-demo.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2011/02/incrementable-length-values-in-text-fields/images/incrementable-demo-300x202.png&quot; alt=&quot;&quot; title=&quot;incrementable-demo&quot; /&gt;&lt;/a&gt;I always loved that Firebug and Dragonfly feature that allows you to increment or decrement a &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt; value by pressing the up and down keyboard arrows when the caret is over it. I wished my &lt;a href=&quot;http://lea.verou.me/2010/10/my-ft2010-slides-and-csss-my-presentation-framework/&quot;&gt;Front Trends slides&lt;/a&gt; supported it in the editable examples, it would make presenting so much easier. So, I decided to implement the functionality, to use it in my next talk.&lt;/p&gt;
&lt;p&gt;If you still have no idea what I’m talking about, you can see a demo here: &lt;a href=&quot;https://incrementable.verou.me/&quot; class=&quot;cta&quot;&gt;View demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may configure it so that it only does that when modifiers (alt, ctrl and/or shift) are used by providing a second argument to the constructor and/or change the units supported by filling in the third argument. However, bear in mind that holding down the Shift key will make it increment by ±10 instead of ±1 and that’s not configurable (it would add too much unneeded complexity, I’m not even sure whether it’s a good idea to make the other thing configurable either).&lt;/p&gt;
&lt;p&gt;You may download it or fork it from it’s &lt;a href=&quot;https://github.com/LeaVerou/Incrementable/&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And if you feel creative, you may improve it by fixing an Opera bug I gave up on: When the down arrow is pressed, the caret moves to the end of the string, despite the code telling it not to.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Checkerboard pattern with CSS3</title>
    <link href="https://lea.verou.me/2011/02/checkerboard-pattern-with-css3/"/>
    <updated>2011-02-16T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=850</id>
    <content xml:lang="en" type="html">&lt;p&gt;A while ago, I wrote a post on &lt;a href=&quot;http://lea.verou.me/2010/12/checkered-stripes-other-background-patterns-with-css3-gradients/&quot;&gt;creating simple patterns with CSS3 gradients&lt;/a&gt;. A common pattern I was unable to create was that of a regular, non-rotated checkerboard. However, I noticed today that by giving a different background-position to every triangle in the pattern tile, a checkerboard can be easily created:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 300px&quot; src=&quot;https://jsfiddle.net/leaverou/SUgfD/embedded/result,css&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;View in Gecko or Webkit. Webkit seems to have an odd rendering bug, so it needed a background-size override and it still doesn’t look perfect. Oh well, &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=54805&quot;&gt;reported the bug&lt;/a&gt; and moved on.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Custom &amp;lt;select&amp;gt; drop downs with CSS3</title>
    <link href="https://lea.verou.me/2011/03/custom-select-drop-downs-with-css3/"/>
    <updated>2011-03-04T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=856</id>
    <content xml:lang="en" type="html">&lt;p&gt;The CSS3 Basic UI module defines &lt;a href=&quot;http://dev.w3.org/csswg/css3-ui/#pointer-events&quot;&gt;&lt;code&gt;pointer-events&lt;/code&gt;&lt;/a&gt; as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;pointer-events&lt;/code&gt; property allows authors to control whether or when an element may be the target of user pointing device (pointer, e.g. mouse) events. This property is used to specify under which circumstance (if any) a pointer event should go “through” an element and target whatever is “underneath” that element instead. This also applies to other “hit testing” behaviors such as dynamic pseudo-classes (:hover, :active, :focus), hyperlinks, and Document.elementFromPoint().&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The property was originally SVG-only, but eventually browsers and the W3C adopted a more limited version for HTML elements too.&lt;/p&gt;
&lt;p&gt;It can be used in many use cases that weren’t possible before (or the solution was overly complicated), one of them being to create custom-looking &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; drop downs, by overlaying an element over the native drop down arrow (to create the custom one) and disallowing pointer events on it. Here’s a quick example:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 200px&quot; src=&quot;https://jsfiddle.net/leaverou/XxkSC/embedded/result,css&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;code&gt;-webkit-appearance: none&lt;/code&gt; was needed in Webkit to turn off the native OSX appearance (in OSX and maybe Safari on Windows, I didn’t test that). However, since that also removes the native drop down arrow, our custom arrow now obscures part of the text, so we had to add a 30px padding-right to the select element, only in Webkit. You can easily detect if &lt;code&gt;pointer-events&lt;/code&gt; is supported via JS and only apply this it if it is (eg by adding or removing a class from the body element):&lt;/p&gt;
&lt;p&gt;if(!(‘pointerEvents’ in document.body.style)) {
…
}&lt;/p&gt;
&lt;p&gt;However, there is one caveat in this: Opera does include pointerEvents in HTML elements as well, but it does not actually support the property on HTML. There’s a more elaborate feature detection script &lt;a href=&quot;https://github.com/ausi/Feature-detection-technique-for-pointer-events/blob/master/modernizr-pointerevents.js&quot;&gt;here&lt;/a&gt; as a Modernizr plugin (but the code is quite short, so you can adapt it to your needs).&lt;/p&gt;
&lt;p&gt;Also, don’t try to replicate the behavior in JavaScript for browsers that don’t support this: it’s impossible to open a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; drop down with JavaScript. Or, to put it differently, if you manage to do it, you’ll probably be the first to. Everything I could think of failed and I spent hours yesterday searching for a way, but no avail.&lt;/p&gt;
&lt;h3 id=&quot;references&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/03/custom-select-drop-downs-with-css3/#references&quot;&gt;References&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dev.w3.org/csswg/css3-ui/#pointer-events&quot;&gt;W3C specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/CSS/pointer-events&quot;&gt;MDN article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry><entry>
    <title>WD @media talk subject change</title>
    <link href="https://lea.verou.me/2011/03/wd-media-talk-subject-change/"/>
    <updated>2011-03-08T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=869</id>
    <content xml:lang="en" type="html">&lt;p&gt;I recently changed my &lt;a href=&quot;http://lea.verou.me/2011/01/im-speaking-at-atmedia-web-directions-11/&quot;&gt;Web Directions @media talk&lt;/a&gt; title &amp;amp; abstract to something more specialized. Instead of discussing under-hyped CSS3 features in general I will only focus on one CSS3 feature (more hyped than the ones I was planning to show, but all the hype is only about very basic use cases): CSS3 Gradients:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;mastering-css3-gradients&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/03/wd-media-talk-subject-change/#mastering-css3-gradients&quot;&gt;Mastering CSS3 Gradients&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With most browsers adding increasing support, and the simplicity of providing fallbacks for those that don’t, CSS3 gradients are something we can start to use right now. They benefit our users with faster websites and ourselves with more time in our hands to spend in other things, since they are easy to create, edit and update. A very powerful feature that can also be utilized for a surprising number of design effects, even ones that don’t resemble gradients at all. In this talk, Lea will explore CSS3 gradients in great depth and it’s almost guaranteed that no matter your expertise level, you will walk out having learned new things.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I tested a draft of this talk with a meetup group in Oslo (&lt;a href=&quot;http://www.meetup.com/framsia/events/16517556/&quot;&gt;Framsia&lt;/a&gt;) and it went very well. I got reviews like “I was amazed that you managed to speak almost an hour of CSS3 gradients and still keep the crowd interested” (thanks Legendre!). Even &lt;a href=&quot;http://twitter.com/brucel&quot;&gt;Bruce Lawson&lt;/a&gt;, who happened to be there, told me he didn’t know like 70% of the material presented! :)&lt;/p&gt;
&lt;p&gt;I’m looking forward to it since it’s a topic I’m passionate about, and I hope to see you there! Don’t forget that you can use the coupon code &lt;strong&gt;WDVEROU&lt;/strong&gt; when &lt;a href=&quot;http://atmedia11.webdirections.org/&quot;&gt;registering&lt;/a&gt; to take £50 off the current price.&lt;/p&gt;
&lt;p&gt;PS: I don’t like the title very much, so if you have anything more witty to suggest, feel free. ;)&lt;/p&gt;
</content>
  </entry><entry>
    <title>On CSS preprocessors</title>
    <link href="https://lea.verou.me/2011/03/on-css-preprocessors/"/>
    <updated>2011-03-09T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=879</id>
    <content xml:lang="en" type="html">&lt;p&gt;Lately there has been a rise in the usage of CSS preprocessors such as &lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt; and &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt;, which makes sense given the simultaneous increase of CSS3 usage. I’ve frequently argued with fellow front-end web developers about whether they should be used or not and I decided to finally put my thoughts in writing.&lt;/p&gt;
&lt;p&gt;To start, I can fully understand the advantage of using such preprocessors over vanilla CSS3. I hate listing all the vendor prefixes, and not being able to use variables, mixins or nesting just like the next web developer. All this syntactic sugar can simplify your workflow by a great deal and make writing CSS3 incredibly fun. However, I still refrain from using them, and I’ll explain why below.&lt;/p&gt;
&lt;h3 id=&quot;losing-track-of-css-filesize&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/03/on-css-preprocessors/#losing-track-of-css-filesize&quot;&gt;Losing track of CSS filesize&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I’m writing CSS, I try to keep the filesize as small as possible. I’m not a filesize hypochondriac, I try to balance filesize and readability and I prefer to err on the side of the latter. I’m not one of those people that will use &lt;code&gt;#000&lt;/code&gt; instead of &lt;code&gt;black&lt;/code&gt; just to save a byte and I use lots of indents and newlines (later minification takes care of that). However, in cases when the readability impact is small and the filesize impact is large (and minification won’t help), I will do the optimization.&lt;/p&gt;
&lt;p&gt;For example, consider the following case: Let’s suppose you have 3 rules (&lt;code&gt;#foo&lt;/code&gt;, &lt;code&gt;#bar&lt;/code&gt; and &lt;code&gt;#baz&lt;/code&gt;) that will both use the same CSS rotate transformation, among other CSS declarations. Using a mixin is simple (using the LESS syntax in this example):&lt;/p&gt;
&lt;p&gt;.rotate (@degrees: 10deg) {
-moz-transform: rotate(@degrees);
-ms-transform: rotate(@degrees);
-o-transform: rotate(@degrees);
-webkit-transform: rotate(@degrees);
transform: rotate(@degrees);
}&lt;/p&gt;
&lt;p&gt;#foo {
font-size: 150%;
.rotate(40deg);
}&lt;/p&gt;
&lt;p&gt;#bar {
background: silver;
.rotate(40deg);
}&lt;/p&gt;
&lt;p&gt;#baz {
background: white;
.rotate(40deg);
}&lt;/p&gt;
&lt;p&gt;Sweet, huh? And only 370 bytes. However, what the end user downloads is this beast:&lt;/p&gt;
&lt;p&gt;#foo {
font-size: 150%;
-moz-transform: rotate(40deg);
-ms-transform: rotate(40deg);
-o-transform: rotate(40deg);
-webkit-transform: rotate(40deg);
transform: rotate(40deg);
}&lt;/p&gt;
&lt;p&gt;#bar {
background: silver;
-moz-transform: rotate(40deg);
-ms-transform: rotate(40deg);
-o-transform: rotate(40deg);
-webkit-transform: rotate(40deg);
transform: rotate(40deg);
}&lt;/p&gt;
&lt;p&gt;#baz {
background: white;
-moz-transform: rotate(40deg);
-ms-transform: rotate(40deg);
-o-transform: rotate(40deg);
-webkit-transform: rotate(40deg);
transform: rotate(40deg);
}&lt;/p&gt;
&lt;p&gt;which is almost double the filesize (600 bytes). It could have easily been this:&lt;/p&gt;
&lt;p&gt;#foo, #bar, #baz {
-moz-transform: rotate(40deg);
-ms-transform: rotate(40deg);
-o-transform: rotate(40deg);
-webkit-transform: rotate(40deg);
transform: rotate(40deg);
}&lt;/p&gt;
&lt;p&gt;#foo {
font-size: 150%;
}&lt;/p&gt;
&lt;p&gt;#bar {
background: silver;
}&lt;/p&gt;
&lt;p&gt;#baz {
background: white;
}&lt;/p&gt;
&lt;p&gt;which at 290 bytes, is even smaller than the first one. The differences would be even bigger if you had to specify a different transform-origin.&lt;/p&gt;
&lt;p&gt;Of course you can still do such optimizations when using CSS preprocessors, but since you don’t have the ugliness in front of you and the file you’re working with remains small, it’s easy to forget and just do what’s easy. You lose sight of the big picture. But it’s the big picture (or big file, in this case ;)) that your users eventually download.&lt;/p&gt;
&lt;p&gt;Same goes for nesting: Instead of actually putting some thought into the selectors you choose, you can just nest and let the preprocessor sort it out, usually in the straightforward but unavoidably verbose way.&lt;/p&gt;
&lt;p&gt;LESS is better in this aspect, since it also offers a client-side version, so the user downloads the small file you wrote, and all the expansion is done in their machine. However, this has the (big, IMO) disadvantage that all your CSS becomes dependent on JavaScript to work and that your users have to download the LESS code, which isn’t that small: 33KB minified which is way larger than most stylesheets (granted, if you gzip, it will be smaller, but this is true for stylesheets as well).&lt;/p&gt;
&lt;h3 id=&quot;maintenance-woes&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/03/on-css-preprocessors/#maintenance-woes&quot;&gt;Maintenance woes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Eventually, CSS will start supporting all this sweetness. &lt;a href=&quot;http://www.xanthir.com/blog/&quot;&gt;Tab Atkins&lt;/a&gt; has already drafted &lt;a href=&quot;http://www.xanthir.com/blog/b49w0&quot;&gt;a proposal&lt;/a&gt; and soon Webkit nightlies will implement the functionality. After that, I think it’s safe to assume that within 2 years Firefox and Opera will also implement the (by then) standard and within 1-2 more even IE. Then we’ll need another 2-3 years to be able to start using it (adoption rates of new browser versions will have increased too). This means that in as little as 6 years, we might be able to use CSS variables, mixins and nesting in vanilla CSS. All the code written for today’s preprocessors will eventually have to be rewritten. Maybe even sooner, since when a standard is published, I think it’s safe to assume (or hope) that the new versions of CSS preprocessors will deprecate their old syntax and start supporting and recommending the standard way, effectively becoming polyfills (which I definitely support). So, coding for a CSS preprocessor today feels a bit like building castles on sand.&lt;/p&gt;
&lt;h3 id=&quot;debugging-woes-(thanks-to-jesper-ek)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/03/on-css-preprocessors/#debugging-woes-(thanks-to-jesper-ek)&quot;&gt;Debugging woes (thanks to Jesper Ek)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Preprocessors make debugging CSS harder, since the CSS you see in Web Inspectors like Firebug or Dragonfly is not the CSS you wrote. The line numbers don’t match any more and the CSS itself is different. A lighter form of the same problem also occurs with minifiers, but you can delay using them until you’re done with the site. With CSS preprocessors, you have to use them from the beginning if you want to really take advantage of them.&lt;/p&gt;
&lt;p&gt;Also, when I develop my CSS, I want to be able to instantly preview the changes in the file by just refreshing the browser. With preprocessors this becomes harder (although not impossible).&lt;/p&gt;
&lt;h3 id=&quot;generic-concerns-with-such-abstractions&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/03/on-css-preprocessors/#generic-concerns-with-such-abstractions&quot;&gt;Generic concerns with such abstractions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With every new syntax, comes more effort required by someone to start working on our code. We either have to only collaborate with people proficient in the CSS preprocessor of our choice, or teach them its syntax. So we are either restricted in our choice of collaborators or need to spend extra time for training, both of which are nuisances.&lt;/p&gt;
&lt;p&gt;Also, what happens if the preprocessor stops being updated? Granted, most (if not all) are open source, but the community’s interest might shift to something else. Many open source projects have eventually died due to lack of interest. And let’s not forget &lt;a href=&quot;http://en.wikipedia.org/wiki/Leaky_abstraction#The_Law_of_Leaky_Abstractions&quot;&gt;the law of leaky abstractions&lt;/a&gt;…&lt;/p&gt;
&lt;p&gt;Yes, both concerns are valid for every framework, in every language, but at least PHP frameworks or JavaScript libraries are more needed than CSS preprocessors, so it’s a tradeoff is that’s worth it. For CSS preprocessors, I’m not so sure.&lt;/p&gt;
&lt;h3 id=&quot;conclusion-%26-disclaimer&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/03/on-css-preprocessors/#conclusion-%26-disclaimer&quot;&gt;Conclusion &lt;em&gt;&amp;amp;&lt;/em&gt; disclaimer&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have to admit that even though I’ve read quite a bit on CSS preprocessors and talked with fellow web developers about them, I don’t have hands-on experience with them. Maybe I will change my mind if I actually do so. Besides, I think that if someone uses a CSS preprocessor carefully, with knowledge of the points mentioned above, it can actually turn out to be beneficial. However personally, I prefer to wait at least until they start supporting the (future) standard syntax, whenever that happens.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Beveled corners &amp; negative border-radius with CSS3 gradients</title>
    <link href="https://lea.verou.me/2011/03/beveled-corners-negative-border-radius-with-css3-gradients/"/>
    <updated>2011-03-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=892</id>
    <content xml:lang="en" type="html">&lt;p&gt;Just found out how to do beveled corners and simulate negative border radius without images, by utilizing CSS gradients once again. It’s amazing how many CSS problems can be solved with gradients alone. Read the text in the dabblet below to find out how (or just check the code):&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 800px&quot; src=&quot;https://dabblet.com/gist/10168919&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;It also falls back to a solid color background if CSS gradients are not supported. It will work on Firefox 3.6+, Chrome, Safari, Opera 11.10+ and IE10+.&lt;/p&gt;
&lt;p&gt;PS: For my twitter friends, I had already written this when the robbers came and I was about to post it. I might have been really calm, but not as much as making CSS experiments the same day I was robbed and threatened by a gun :P&lt;/p&gt;
</content>
  </entry><entry>
    <title>Convert standard gradient syntax to -webkit-gradient and others</title>
    <link href="https://lea.verou.me/2011/03/convert-standard-gradient-syntax-to-webkit-gradient-and-others/"/>
    <updated>2011-03-26T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=907</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2011/03/convert-standard-gradient-syntax-to-webkit-gradient-and-others/images/cssgradientsplease-screenshot-300x148.png&quot; alt=&quot;Screenshot of the demo&quot; title=&quot;cssgradientsplease - screenshot&quot; /&gt;I hate &lt;code&gt;-webkit-gradient()&lt;/code&gt; with a passion. Its syntax is cumbersome and it’s really limited: No angle support, no &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;s in color stop positions, no implied color stop positions, no elliptical gradients… So, I was really happy, when Webkit implemented the standard syntax this January. However, we’re still stuck with the horrid &lt;code&gt;-webkit-gradient()&lt;/code&gt; for quite a while, since older Webkit browsers that don’t support it are widely used at this time.&lt;/p&gt;
&lt;p&gt;Today, I decided to finally spare myself the hassle of converting my standard gradient syntax to -webkit-gradient() by hand. Tasks like that shouldn’t be handled by a human. So, I coded a little script to do the chore. Hope it helps you too: &lt;a href=&quot;https://lea.verou.me/demos/cssgradientsplease/&quot; class=&quot;cta&quot;&gt;View demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It currently only supports linear gradients, but I plan to add radial ones in the future. Also, when I get around to cleaning up the code a bit, I’ll add it on Github.&lt;/p&gt;
&lt;p&gt;(Hope I didn’t leave in any very stupid bug, it’s really late here and I’m half asleep.)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Create complex RegExps more easily</title>
    <link href="https://lea.verou.me/2011/03/create-complex-regexps-more-easily/"/>
    <updated>2011-03-28T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=916</id>
    <content xml:lang="en" type="html">&lt;p&gt;When I was writing &lt;a href=&quot;http://lea.verou.me/2011/03/convert-standard-gradient-syntax-to-webkit-gradient-and-others/&quot;&gt;my linear-gradient() to -webkit-gradient() converter&lt;/a&gt;, I knew in advance that I would have to use a quite large regular expression to validate and parse the input. Such a regex would be incredibly hard to read and fix potential issues, so I tried to find a way to cut the process down in reusable parts.&lt;/p&gt;
&lt;p&gt;Turns out JavaScript regular expression objects have a .source property that can be used in the RegExp constructor to create a new RegExp out of another one. So I wrote a new function that takes a string with identifiers for regexp replacements in  and replaces them with the corresponding sub-regexps, taken from an object literal as a second argument:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/**
 * Create complex regexps in an easy-to-read way
 * @param str {String} Final regex with  for replacements
 * @param replacements {Object} Object with the replacements
 * @param flags {String} Just like the flags argument in the RegExp constructor
 */
RegExp.create = function(str, replacements, flags) {
	for(var id in replacements) {
		var replacement = replacements&#92;[id&#92;],
			idRegExp = RegExp(&#39; + id + &#39;, &#39;gi&#39;);

		if(replacement.source) {
			replacement = replacement.source.replace(/^&#92;&#92;^|&#92;&#92;$$/g, &#39;&#39;);
		}

		// Don&#39;t add extra parentheses if they already exist
		str = str.replace(RegExp(&#39;&#92;&#92;&#92;&#92;(&#39; + idRegExp.source + &#39;&#92;&#92;&#92;&#92;)&#39;, &#39;gi&#39;), &#39;(&#39; + replacement + &#39;)&#39;);

		str = str.replace(idRegExp, &#39;(?:&#39; + replacement + &#39;)&#39;);
	}

	return RegExp(str, flags);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don’t like adding a function to the RegExp object, you can name it however you want. Here’s how I used it for my linear-gradient() parser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;self.regex = {};

self.regex.number = /^-?&#92;[0-9&#92;]&#92;*&#92;&#92;.?&#92;[0-9&#92;]+$/;
self.regex.keyword = /^(?:top&#92;&#92;s+|bottom&#92;&#92;s+)?(?:right|left)|(?:right&#92;&#92;s+|left&#92;&#92;s+)?(?:top|bottom)$/;

self.regex.direction = RegExp.create(&#39;^(?:|deg|0)$&#39;, {
	keyword: self.regex.keyword,
	number: self.regex.number
});

self.regex.color = RegExp.create(&#39;(?:||)&#39;, {
	keyword: /^(?:red|tan|grey|gray|lime|navy|blue|teal|aqua|cyan|gold|peru|pink|plum|snow|&#92;[a-z&#92;]{5,20})$/,
	func: RegExp.create(&#39;^(?:rgb|hsl)a?&#92;&#92;&#92;&#92;((?:&#92;&#92;&#92;&#92;s&#92;*%?&#92;&#92;&#92;&#92;s&#92;*,?&#92;&#92;&#92;&#92;s&#92;*){3,4}&#92;&#92;&#92;&#92;)$&#39;, {
		number: self.regex.number
	}),
	hex: /^#(?:&#92;[0-9a-f&#92;]{1,2}){3}$/
});

self.regex.percentage = RegExp.create(&#39;^(?:%|0)$&#39;, {
	number: self.regex.number
});

self.regex.length = RegExp.create(&#39;|0&#39;, {
	number: self.regex.number,
	unit: /%|px|mm|cm|in|em|rem|en|ex|ch|vm|vw|vh/
});

self.regex.colorStop = RegExp.create(&#39;&#92;&#92;&#92;&#92;s&#92;*?&#39;, {
	color: self.regex.color,
	length: self.regex.length
}, &#39;g&#39;);

self.regex.linearGradient = RegExp.create(&#39;^linear-gradient&#92;&#92;&#92;&#92;(&#92;&#92;&#92;&#92;s&#92;*(?:()&#92;&#92;&#92;&#92;s&#92;*,)?&#92;&#92;&#92;&#92;s&#92;*(&#92;&#92;&#92;&#92;s&#92;*(?:,&#92;&#92;&#92;&#92;s&#92;*&#92;&#92;&#92;&#92;s&#92;*)+)&#92;&#92;&#92;&#92;)$&#39;, {
	direction: self.regex.direction,
	colorStop: self.regex.colorStop
}, &#39;i&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(self in this case was a local variable, not the window object)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Invert a whole webpage with CSS only</title>
    <link href="https://lea.verou.me/2011/04/invert-a-whole-webpage-with-css-only/"/>
    <updated>2011-04-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=920</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2011/04/invert-a-whole-webpage-with-css-only/images/Screen-shot-2011-04-14-at-22.24.18-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2011/04/invert-a-whole-webpage-with-css-only/images/Screen-shot-2011-04-14-at-22.24.18--300x199.png&quot; alt=&quot;&quot; title=&quot;Screenshot from the effect applied on my blog&quot; /&gt;&lt;/a&gt;I recently saw &lt;a href=&quot;https://gist.github.com/373253&quot;&gt;Paul Irish’s jQuery invert page plugin&lt;/a&gt;. It inverts every color on a webpage including images or CSS. This reminded me of the invert color keyword that’s allowed on outlines (and sadly only supported by Opera and IE9+). So I wondered how it could be exploited to achieve the same effect through CSS alone. Turned out to be quite simple actually:&lt;/p&gt;
&lt;p&gt;body:before {
content:“”;
position:fixed;
top:50%; left: 50%;
z-index:9999;
width:1px; height: 1px;
outline:2999px solid invert;
}&lt;/p&gt;
&lt;p&gt;Not even &lt;code&gt;pointer-events:none;&lt;/code&gt; is needed, since outlines don’t receive pointer events anyway, and there’s no issue with scrollbars since they don’t contribute to scrolling. So this is not even CSS3, it’s just plain ol’ CSS 2.1.&lt;/p&gt;
&lt;p&gt;And here’s a bookmarklet to inject it into any given page: [Invert page](javascript:(function(){var%20style=document.createElement(‘style’);style.innerHTML=‘body:before%20{%20content:%22%22;%20position:fixed;%20top:50%25;%20left:50%25;%20z-index:9999;%20width:1px;%20height:%201px;%20outline:2999px%20solid%20invert;%20}’;document.body.appendChild(style)})();)&lt;/p&gt;
&lt;p&gt;**Note:**This will only work on Opera and IE9+ since they’re currently the only ones supporting the color keyword ‘invert’ on outlines. However, it’s probably possible to add Firefox support too with SVG filters, since they support them on HTML elements as well.&lt;/p&gt;
&lt;p&gt;As for why would someone want to invert a page… I guess it could be useful for people that can read white text on dark backgrounds more easily, April fools jokes, konami code fun and stuff like that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Mozilla is planning to &lt;strong&gt;never&lt;/strong&gt; support &lt;code&gt;invert&lt;/code&gt; because there’s a &lt;a href=&quot;http://www.w3.org/TR/CSS21/ui.html#propdef-outline-color&quot;&gt;loophole in the CSS 2.1 spec&lt;/a&gt; that allows them to do that. However, you can push them to support it by &lt;a href=&quot;https://bugzilla.mozilla.org/votes.cgi?action=show_user&amp;amp;bug_id=359497#vote_359497&quot;&gt;voting&lt;/a&gt; on the &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=359497&quot;&gt;relevant issue&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry><entry>
    <title>CSS3 patterns gallery and a new pattern</title>
    <link href="https://lea.verou.me/2011/04/css3-patterns-gallery-and-a-new-pattern/"/>
    <updated>2011-04-15T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=932</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2011/04/css3-patterns-gallery-and-a-new-pattern/images/csspatterns.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2011/04/css3-patterns-gallery-and-a-new-pattern/images/csspatterns-300x177.png&quot; alt=&quot;&quot; title=&quot;Screenshot from the gallery&quot; /&gt;&lt;/a&gt;I finally got around to doing what I wanted to do for quite a few months: Create a gallery with all the basic patterns I was able to create with CSS3 gradients. Here it is:  &lt;a href=&quot;http://lea.verou.me/css3patterns/&quot;&gt;CSS3 Pattern Gallery&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, it includes a brand new pattern, which is the hardest one I have ever made so far: Japanese cubes. Thanks to &lt;a href=&quot;http://twitter.com/dstorey&quot;&gt;David Storey&lt;/a&gt; for challenging me about it.&lt;/p&gt;
&lt;p&gt;Supported browsers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox 4 (the patterns themselves work on 3.6 too but the gallery doesn’t due to a JS limitation)&lt;/li&gt;
&lt;li&gt;Opera 11.10&lt;/li&gt;
&lt;li&gt;IE10&lt;/li&gt;
&lt;li&gt;Google Chrome&lt;/li&gt;
&lt;li&gt;Webkit nightlies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However bear in mind that every implementation has its limitations so a few of them won’t work in all the aforementioned browsers (for example Opera doesn’t support radial gradients and Firefox doesn’t support explicitly sized ones).&lt;/p&gt;
</content>
  </entry><entry>
    <title>Rule filtering based on specific selector(s) support</title>
    <link href="https://lea.verou.me/2011/05/rule-filtering-based-on-specific-selectors-support/"/>
    <updated>2011-05-02T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=966</id>
    <content xml:lang="en" type="html">&lt;p&gt;I’ve been using this trick for quite a while, but I never thought to blog about it. However, I recently realized that it might not be as common as I thought, so it might be a good idea to document it in a blog post.&lt;/p&gt;
&lt;p&gt;If you follow the discussions on www-style, you might have noticed the &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2011Apr/0428.html&quot;&gt;proposal for a @supports rule&lt;/a&gt; to query property and value support. Some people suggested that it should also test for selectors, for example whether a certain pseudo-class is supported. However, you can do that today, albeit in a limited manner (no OR and NOT support).&lt;/p&gt;
&lt;p&gt;The main principle that you need to keep in mind is that &lt;strong&gt;browsers are expected to drop rules with selectors they don’t understand, even partially&lt;/strong&gt;. So, if only one selector in a group cannot be parsed, the whole rule will be dropped. This means we can construct selector “tests”, which are use cases of the selector whose support we want to test, that will not match anything, even if the selector is supported. Then, we include that selector in the beginning of our selector group. If all this is unclear, don’t worry, as there’s an example coming next :)&lt;/p&gt;
&lt;h2 id=&quot;example&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/rule-filtering-based-on-specific-selectors-support/#example&quot;&gt;Example&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Suppose you want to apply the following CSS (for rudimentary custom checkboxes):&lt;/p&gt;
&lt;p&gt;input[type=“checkbox”] {
position:absolute;
clip: rect(0,0,0,0);
clip: rect(0 0 0 0);
}&lt;/p&gt;
&lt;p&gt;input[type=“checkbox”] + label::before {
content: url(‘checkbox.png’);
}&lt;/p&gt;
&lt;p&gt;input[type=“checkbox”]:checked + label::before {
content: url(‘checkbox-checked.png’);
}&lt;/p&gt;
&lt;p&gt;only in browsers that support the attribute equality selector, the &lt;code&gt;:checked&lt;/code&gt; pseudo-class and the &lt;code&gt;::before&lt;/code&gt; pseudo-element. We need to try to think of a selector that includes all of them but matches nothing. One such selector would be &lt;code&gt;#foo[type=&amp;quot;checkbox&amp;quot;]:checked::before&lt;/code&gt;. Even in supporting browsers, this matches nothing as there’s no element with id=“foo”. We can reduce the test for every rule to conserve bandwidth: For example, we don’t need to include tests for the attribute selector in any of them, since they are present anyway in all three rules. Also, we may eliminate &lt;code&gt;::before&lt;/code&gt; from the second test and we don’t need any test for the 3rd one, since it includes all features we want to test for. To sum up:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#foo:checked::before,&lt;/strong&gt;
input[type=“checkbox”] {
position:absolute;
clip: rect(0,0,0,0);
clip: rect(0 0 0 0);
}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#foo:checked,&lt;/strong&gt;
input[type=“checkbox”] + label::before {
content: url(‘checkbox.png’);
}&lt;/p&gt;
&lt;p&gt;input[type=“checkbox”]:checked + label::before {
content: url(‘checkbox-checked.png’);
}&lt;/p&gt;
&lt;p&gt;An important caveat of this technique is that &lt;strong&gt;Internet Explorer up to version 7&lt;/strong&gt; will split selectors before parsing them, so it will completely ignore our filters :( (Thanks to &lt;a href=&quot;http://www.thecssninja.com/&quot;&gt;Ryan Seddon&lt;/a&gt; for finding that out).&lt;/p&gt;
&lt;p&gt;Disclaimer: The original idea about custom checkboxes belongs to &lt;a href=&quot;http://www.thecssninja.com/css/custom-inputs-using-css&quot;&gt;Ryan Seddon&lt;/a&gt;, although his code was quite different.&lt;/p&gt;
</content>
  </entry><entry>
    <title>StronglyTyped: A library for strongly typed properties &amp; constants in JavaScript</title>
    <link href="https://lea.verou.me/2011/05/strongly-typed-javascript/"/>
    <updated>2011-05-05T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=983</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/leaverou/5691500699/in/photostream&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2011/05/strongly-typed-javascript/images/strongly-typed-300x210.png&quot; alt=&quot;StronglyTyped&quot; title=&quot;StronglyTyped logo&quot; /&gt;&lt;/a&gt;I’ll start by saying I &lt;strong&gt;love&lt;/strong&gt; the loosely typed nature of JavaScript. When I had to work with strongly typed languages like Java, it always seemed like an unnecessary hassle. On the contrary, my boyfriend even though very proficient with HTML, CSS and SVG, comes from a strong Java background and hates loosely typed scripting languages. So, to tempt him into JS and keep him away from heavy abstractions like Objective-J, I wrote a little library that allows you to specify strongly typed properties (and since global variables are also properties of the window object, those as well) of various types (real JS types like &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt; etc or even made up ones like &lt;code&gt;Integer&lt;/code&gt;) and constants (final properties in Java). It uses ES5 getters and setters to do that and falls back to regular, loosely typed properties in non-supporting browsers.&lt;/p&gt;
&lt;p&gt;Also, as a bonus, you get cross-browser &lt;code&gt;Function.prototype.bind&lt;/code&gt; and &lt;code&gt;Array.prototype.forEach&lt;/code&gt; and a robust type checking function: &lt;code&gt;StronglyTyped.is(type, value)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;example%3A-strongly-typed-properties&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/strongly-typed-javascript/#example%3A-strongly-typed-properties&quot;&gt;Example: Strongly typed properties&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You define strongly typed properties by using the corresponding methods of the &lt;code&gt;StronglyTyped&lt;/code&gt; object. For example, the following snippet defines a boolean property called “foo” on an object literal:&lt;/p&gt;
&lt;p&gt;var o = {};&lt;/p&gt;
&lt;p&gt;StronglyTyped.boolean(o, ‘foo’, true);&lt;/p&gt;
&lt;p&gt;console.log(o.foo); // prints true&lt;/p&gt;
&lt;p&gt;o.foo = false;
console.log(o.foo); // prints false&lt;/p&gt;
&lt;p&gt;o.foo = ‘bar’; // &lt;strong&gt;TypeError: foo must be of type Boolean. bar is not.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;example%3A-constants&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/strongly-typed-javascript/#example%3A-constants&quot;&gt;Example: Constants&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You define constants by using the &lt;code&gt;constant&lt;/code&gt; method of the &lt;code&gt;StronglyTyped&lt;/code&gt; object. For example, the following snippet defines a global MAGIC_NUMBER constant:&lt;/p&gt;
&lt;p&gt;var o = {};&lt;/p&gt;
&lt;p&gt;StronglyTyped.constant(window, ‘MAGIC_NUMBER’, 3.1415926535);&lt;/p&gt;
&lt;p&gt;console.log(MAGIC_NUMBER); // prints 3.1415926535&lt;/p&gt;
&lt;p&gt;MAGIC_NUMBER = 4;
console.log(MAGIC_NUMBER); // prints 3.1415926535&lt;/p&gt;
&lt;p&gt;Please note that constants only become read-only after they first get a non-undefined value. For example:&lt;/p&gt;
&lt;p&gt;StronglyTyped.constant(window, ‘MAGIC_NUMBER’);&lt;/p&gt;
&lt;p&gt;console.log(MAGIC_NUMBER); // prints undefined&lt;/p&gt;
&lt;p&gt;MAGIC_NUMBER = undefined;&lt;/p&gt;
&lt;p&gt;console.log(MAGIC_NUMBER); // prints undefined&lt;/p&gt;
&lt;p&gt;MAGIC_NUMBER = 3.1415926535;
console.log(MAGIC_NUMBER); // prints 3.1415926535&lt;/p&gt;
&lt;p&gt;MAGIC_NUMBER = 4;
console.log(MAGIC_NUMBER); // prints 3.1415926535&lt;/p&gt;
&lt;h2 id=&quot;supported-types&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/strongly-typed-javascript/#supported-types&quot;&gt;Supported types&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The property types currently supported by StronglyTyped are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;li&gt;Function&lt;/li&gt;
&lt;li&gt;Integer&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;RegExp&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; are valid in every type. &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt; values are accepted in both the Number and the Integer types.&lt;/p&gt;
&lt;p&gt;If you want to use a type that’s not among the above but either is native to the browser (for example &lt;code&gt;Element&lt;/code&gt;) or a global object, you can use the generic method &lt;code&gt;StronglyTyped.property(type, object, property [, initialValue])&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;var o = {};&lt;/p&gt;
&lt;p&gt;StronglyTyped.property(‘Element’, o, ‘foo’, document.body);&lt;/p&gt;
&lt;p&gt;console.log(o.foo); // prints a representation of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element&lt;/p&gt;
&lt;p&gt;o.foo = document.head;
console.log(o.foo); // prints a representation of the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element&lt;/p&gt;
&lt;p&gt;o.foo = 5; // &lt;strong&gt;TypeError: foo must be of type Element. 5 is not.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;browser-support&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/strongly-typed-javascript/#browser-support&quot;&gt;Browser support&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It should work on every browser that supports &lt;code&gt;Object.defineProperty&lt;/code&gt; or &lt;code&gt;__defineGetter__&lt;/code&gt; and &lt;code&gt;__defineSetter__&lt;/code&gt;. As you can see from kangax’s awesome compatibility tables for &lt;a href=&quot;http://kangax.github.com/es5-compat-table/&quot;&gt;Object.defineProperty&lt;/a&gt; and &lt;a href=&quot;http://kangax.github.com/es5-compat-table/non-standard/&quot;&gt;__define(G|S)etter__&lt;/a&gt;, those are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox 3.5+&lt;/li&gt;
&lt;li&gt;IE8 (only on DOM elements)&lt;/li&gt;
&lt;li&gt;IE9+&lt;/li&gt;
&lt;li&gt;Opera 10.5+&lt;/li&gt;
&lt;li&gt;Chrome 5+&lt;/li&gt;
&lt;li&gt;Safari 4+&lt;/li&gt;
&lt;li&gt;Konqueror 4.4+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, it’s only verified to work in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox 4 (Win and OSX)&lt;/li&gt;
&lt;li&gt;IE9+&lt;/li&gt;
&lt;li&gt;Opera 11.10 for OSX, Opera 11 for Windows&lt;/li&gt;
&lt;li&gt;Chrome (Win and OSX)&lt;/li&gt;
&lt;li&gt;Safari 5 (Win and OSX)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;This doesn’t mean it won’t work in the rest&lt;/strong&gt;, just that it hasn’t been tested there (yet). You can load &lt;a href=&quot;http://leaverou.github.com/StronglyTyped/&quot;&gt;the unit tests (sort of…)&lt;/a&gt; in a browser you want to test and let me know about the results. :)&lt;/p&gt;
&lt;h2 id=&quot;naice!-can-i-haz%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/strongly-typed-javascript/#naice!-can-i-haz%3F&quot;&gt;Naice! Can I haz?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As usual, you can get it from Github: &lt;a href=&quot;https://github.com/LeaVerou/StronglyTyped&quot;&gt;Github repo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;credits&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/strongly-typed-javascript/#credits&quot;&gt;Credits&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks a lot to Max (&lt;a href=&quot;http://twitter.com/suprMax&quot;&gt;@suprMax&lt;/a&gt;) for Windows testing!&lt;/p&gt;
</content>
  </entry><entry>
    <title>My experience from Geek Meet</title>
    <link href="https://lea.verou.me/2011/05/my-experience-from-geek-meet/"/>
    <updated>2011-05-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1030</id>
    <content xml:lang="en" type="html">&lt;p&gt;I decided to start writing a blog post after every talk I give, to be able to go back and remember what I thought about each event, what feedback my talk got etc. And I’m starting with &lt;a href=&quot;http://robertnyman.com/2011/04/06/geek-meet-may-2011-with-lea-verou/&quot;&gt;Geek Meet May 2011&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-event&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/my-experience-from-geek-meet/#the-event&quot;&gt;The event&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Geek Meet is a meetup organized in Stockholm by &lt;a href=&quot;http://robertnyman.com/&quot;&gt;Robert Nyman&lt;/a&gt;. It has hosted talks by many industry leaders like &lt;a href=&quot;http://robertnyman.com/2011/01/12/geek-meet-february-2011-with-jake-archibald/&quot;&gt;Jake Archibald&lt;/a&gt;, &lt;a href=&quot;http://robertnyman.com/2010/09/06/geek-meet-september-2010-with-bruce-lawson/&quot;&gt;Bruce Lawson&lt;/a&gt;, &lt;a href=&quot;http://robertnyman.com/2009/09/21/geek-meet-october-2009-molly-holzschlag-will-present-about-html-5-and-other-goodies/&quot;&gt;Molly Holzschlag&lt;/a&gt;, &lt;a href=&quot;http://robertnyman.com/2009/05/04/geek-meet-charity-june-4th-2009-chris-mills-and-remy-sharp-speaking/&quot;&gt;Chris Mills, Remy Sharp&lt;/a&gt;, &lt;a href=&quot;http://robertnyman.com/2008/10/16/geek-meet-december-2008-chris-heilmann-presentations/&quot;&gt;Christian Heilmann&lt;/a&gt; and more. It’s free to attend and has sponsors so it can afford to offer free food, drinks and speaker accommodation.&lt;/p&gt;
&lt;h2 id=&quot;my-experience&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/my-experience-from-geek-meet/#my-experience&quot;&gt;My experience&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was very surprised to hear that the event was sold out just 18 minutes after Robert’s announcement! According to him, that set a new record for it!&lt;/p&gt;
&lt;p&gt;This event was kinda challenging in many ways. I was the only speaker, so if I failed, everyone would notice. Also, I had to give 2 talks and one of them was brand new, which is always stressful.&lt;/p&gt;
&lt;p&gt;However, the crowd there was awesome! Not only they were very relaxed, but they had a great sense of humor too. I don’t think I had ever been in an event that was so relaxed. And their reaction to my talks was so encouraging, I don’t think I have ever heard such loud clapping in my life!&lt;/p&gt;
&lt;p&gt;I’m saving the feedback I got here, to bottle the feeling:&lt;/p&gt;
</content>
  </entry><entry>
    <title>Change URL hash without page jump</title>
    <link href="https://lea.verou.me/2011/05/change-url-hash-without-page-jump/"/>
    <updated>2011-05-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1053</id>
    <content xml:lang="en" type="html">&lt;p&gt;In modern complex layouts, sometimes the point where a hash will transport you to will be entirely different than the one you actually wanted. If you prevent the default event, you will save yourself from the page jump, but the hash won’t change either. You can accept the regular behavior and change scrollTop after the jump, but the user will still see a distracting flicker. &lt;a href=&quot;http://css-tricks.com/&quot;&gt;Chris Coyier&lt;/a&gt; found &lt;a href=&quot;http://css-tricks.com/hash-tag-links-padding/&quot;&gt;a great workaround&lt;/a&gt; last year but it’s not meant for every case.&lt;/p&gt;
&lt;h2 id=&quot;a-different-solution&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/change-url-hash-without-page-jump/#a-different-solution&quot;&gt;A different solution&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Turns out we can take advantage of the &lt;a href=&quot;http://www.w3.org/TR/html5/history.html#the-history-interface&quot;&gt;History API&lt;/a&gt; to do that quite easily. It’s just one line of code:&lt;/p&gt;
&lt;p&gt;history.pushState(null, null, ‘#myhash’);&lt;/p&gt;
&lt;p&gt;and we can combine it with the old method of setting location.hash to cater for older browsers as well:&lt;/p&gt;
&lt;p&gt;if(history.pushState) {
history.pushState(null, null, ‘#myhash’);
}
else {
location.hash = ‘#myhash’;
}&lt;/p&gt;
&lt;h2 id=&quot;browser-support%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/change-url-hash-without-page-jump/#browser-support%3F&quot;&gt;Browser support?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The History API is supported by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox 4+&lt;/li&gt;
&lt;li&gt;Safari 5+&lt;/li&gt;
&lt;li&gt;Chrome 8+&lt;/li&gt;
&lt;li&gt;Coming soon in Opera&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Get your hash — the bulletproof way</title>
    <link href="https://lea.verou.me/2011/05/get-your-hash-the-bulletproof-way/"/>
    <updated>2011-05-23T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1065</id>
    <content xml:lang="en" type="html">&lt;p&gt;This is probably one of the things that everyone thinks they know how to do but many end up doing it wrong. After coming accross yet one more super fragile snippet of code for this, I decided a blog post was in order.&lt;/p&gt;
&lt;h2 id=&quot;the-problem&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/get-your-hash-the-bulletproof-way/#the-problem&quot;&gt;The problem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You want to remove the pound sign (#) from &lt;code&gt;location.hash&lt;/code&gt;. For example, when the hash is &lt;code&gt;&amp;quot;#foo&amp;quot;&lt;/code&gt;, you want to get a string containing &lt;code&gt;&amp;quot;foo&amp;quot;&lt;/code&gt;. That’s really simple, right?&lt;/p&gt;
&lt;h2 id=&quot;tricky-cases&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/get-your-hash-the-bulletproof-way/#tricky-cases&quot;&gt;Tricky cases&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What most developers seem to miss is that in modern, JavaScript-heavy applications, a hash can contain any unicode character. It doesn’t necessarily have to correspond to the value of an actual id attribute in the page. And even when it does, &lt;a href=&quot;http://mathiasbynens.be/notes/html5-id-class&quot;&gt;ID attributes can now contain almost any unicode character&lt;/a&gt;. Another thing sometimes forgotten is that there might be no hash in the page. Even in a URL that ends in #, &lt;code&gt;location.hash&lt;/code&gt; is actually equal to &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; (the empty string) and not &lt;code&gt;&amp;quot;#&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;naive-approaches&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/get-your-hash-the-bulletproof-way/#naive-approaches&quot;&gt;Naive approaches&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This one is the most recent, found in a book I was tech reviewing:&lt;/p&gt;
&lt;p&gt;var hash = location.hash.match(/#(&#92;w+)/)[1];&lt;/p&gt;
&lt;p&gt;which has quite a few issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Returns wrong results when there is any non-latin or non-alphanumeric character in the hash. For example, for the hash &lt;code&gt;#foo@o#bar$%huh hello&lt;/code&gt;, just &lt;code&gt;&amp;quot;foo&amp;quot;&lt;/code&gt; would be returned.&lt;/li&gt;
&lt;li&gt;Throws a &lt;code&gt;TypeError&lt;/code&gt; when &lt;code&gt;location.hash&lt;/code&gt; is empty, since &lt;code&gt;.match()&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other variations of this pattern I’ve seen include using explicitly defined character classes instead of &lt;code&gt;&#92;w&lt;/code&gt;, adding an anchor (&lt;code&gt;^&lt;/code&gt;) before the pound sign (which is an excellent idea for performance) and checking if &lt;code&gt;.match()&lt;/code&gt; actually returned something before using its result. However, they usually also fall into at least one of the 2 aforementioned issues.&lt;/p&gt;
&lt;p&gt;Another approach a friend of mine once used was this:&lt;/p&gt;
&lt;p&gt;var hash = location.hash.split(‘#’)[1];&lt;/p&gt;
&lt;p&gt;This also has its issues, which are ironically less than the first one, even though it seems a far more naive approach.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With the same test hash, it would at least get the &lt;code&gt;&amp;quot;foo@o&amp;quot;&lt;/code&gt; part, which means it only fails when the hash contains a pound sign&lt;/li&gt;
&lt;li&gt;When there’s no hash, it doesn’t throw an error, although it returns &lt;code&gt;undefined&lt;/code&gt; instead of the empty string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;getting-it-right&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/get-your-hash-the-bulletproof-way/#getting-it-right&quot;&gt;Getting it right&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The approach I usually use is far simpler than both of the above and probably looks too loose:&lt;/p&gt;
&lt;p&gt;var hash = location.hash.substring(1);&lt;/p&gt;
&lt;p&gt;However, let’s examine it a bit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With our weird test hash, it actually returns the correct result: “foo@o#bar$%huh hello”&lt;/li&gt;
&lt;li&gt;When no hash exists, it correctly returns the empty string&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“But it assumes there’s a pound sign at the start of the string!” I almost hear some of you cry. Well, that could be a real concern, if we were dealing with an arbitrary string. In that case, we would have to check if there’s actually a pound sign first or if the string even exists. However, with &lt;code&gt;location.hash&lt;/code&gt; the only case when that is not true, is when there is no hash. And we got that case covered. ;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; As &lt;a href=&quot;http://lea.verou.me/2011/05/get-your-hash-the-bulletproof-way/#comment-209660879&quot;&gt;pointed out&lt;/a&gt; in the comments, you may also use &lt;code&gt;location.hash.slice(1)&lt;/code&gt; instead of &lt;code&gt;substring&lt;/code&gt;. I kinda prefer it, since it’s 4 bytes shorter.&lt;/p&gt;
&lt;p&gt;If however you’re obsessed with RegExps and want to do it with them no matter what, this is just as bulletproof and almost as short:&lt;/p&gt;
&lt;p&gt;var hash = location.hash.replace(/^#/, ‘’);&lt;/p&gt;
&lt;p&gt;If for some reason (OCD?) you want to do it with &lt;code&gt;.match()&lt;/code&gt; no matter what, you could do this:&lt;/p&gt;
&lt;p&gt;var match = location.hash.match(/^#?(.*)$/)[1];&lt;/p&gt;
&lt;p&gt;In that case, since the pound sign is optional, since &lt;code&gt;.match()&lt;/code&gt; never returns &lt;code&gt;null&lt;/code&gt;. And no, the pound sign never erroneously becomes part of the returned hash, because of the way regex engines work.&lt;/p&gt;
&lt;h2 id=&quot;%E2%80%9Cthis-is-too-basic%2C-what-a-waste-of-my-time!%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/get-your-hash-the-bulletproof-way/#%E2%80%9Cthis-is-too-basic%2C-what-a-waste-of-my-time!%E2%80%9D&quot;&gt;“This is too basic, what a waste of my time!”&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sorry for that. I know that for some of you, this is elementary. But the guy who wrote that book is very knowledgable (the book is really good, apart from that code snippet) so I thought this means there are many good developers out there who get this wrong, so this post was needed to be written. If you’re not one of them, you can take it as a compliment.&lt;/p&gt;
&lt;h2 id=&quot;%E2%80%9Chey%2C-you-missed-something-too!%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/05/get-your-hash-the-bulletproof-way/#%E2%80%9Chey%2C-you-missed-something-too!%E2%80%9D&quot;&gt;“Hey, you missed something too!”&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In that case, I’d love to find out what it is, so please leave a comment! :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>My experience from Web Directions @media &amp; Standards.next</title>
    <link href="https://lea.verou.me/2011/06/my-experience-from-web-directions-media-standards-next/"/>
    <updated>2011-06-01T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1087</id>
    <content xml:lang="en" type="html">&lt;p&gt;Last week, I was in London to give 2 talks. The first one was last Thursday, in one of the conferences I wanted to go ever since I learned my first CSS properties: &lt;a href=&quot;http://atmedia11.webdirections.org/&quot;&gt;Web directions @media&lt;/a&gt;. The second one was 2 days later in a smaller event called &lt;a href=&quot;http://standards-next.org/&quot;&gt;Standards.next&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;web-directions-%40media&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/06/my-experience-from-web-directions-media-standards-next/#web-directions-%40media&quot;&gt;Web Directions @media&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I managed to get my @media talk early on schedule, so I could relax afterwards and enjoy the rest of the conference. Before I saw the feedback on twitter I thought they hated it, since the audience was silent and didn’t laugh at any of my jokes and asked no questions afterwards. However, I was wrong: The tweets about it were enthusiastic! Here’s a small sample:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/KrokoHunter/status/73686696381779968&quot;&gt;https://twitter.com/KrokoHunter/status/73686696381779968&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/adrmakow/status/73688461537849344&quot;&gt;https://twitter.com/adrmakow/status/73688461537849344&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/KrokoHunter/status/73691398058147840&quot;&gt;https://twitter.com/KrokoHunter/status/73691398058147840&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/xtinafowler/status/73691708138848256&quot;&gt;https://twitter.com/xtinafowler/status/73691708138848256&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/stefsull/status/73692171684941825&quot;&gt;https://twitter.com/stefsull/status/73692171684941825&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ubelly/status/73692212772343808&quot;&gt;https://twitter.com/ubelly/status/73692212772343808&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/pauliom/status/73694312315092992&quot;&gt;https://twitter.com/pauliom/status/73694312315092992&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mfujica/status/73694696517545984&quot;&gt;https://twitter.com/mfujica/status/73694696517545984&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/johnallsopp/status/73694876524490752&quot;&gt;https://twitter.com/johnallsopp/status/73694876524490752&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/johnallsopp/status/73695196986085376&quot;&gt;https://twitter.com/johnallsopp/status/73695196986085376&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/prawnstar/status/73697565970935808&quot;&gt;https://twitter.com/prawnstar/status/73697565970935808&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/KrokoHunter/status/73700078921056256&quot;&gt;https://twitter.com/KrokoHunter/status/73700078921056256&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/matmannion/status/73700794624516096&quot;&gt;https://twitter.com/matmannion/status/73700794624516096&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/farinab/status/73700896722268160&quot;&gt;https://twitter.com/farinab/status/73700896722268160&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/GlennCahill87/status/73701420704075776&quot;&gt;https://twitter.com/GlennCahill87/status/73701420704075776&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/NIMRweb/status/73701806122868736&quot;&gt;https://twitter.com/NIMRweb/status/73701806122868736&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/xtinafowler/status/73702048620744704&quot;&gt;https://twitter.com/xtinafowler/status/73702048620744704&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/KrokoHunter/status/73728517489172480&quot;&gt;https://twitter.com/KrokoHunter/status/73728517489172480&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/KrokoHunter/status/74227907878334464&quot;&gt;https://twitter.com/KrokoHunter/status/74227907878334464&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/blagdaross/status/74429856514965504&quot;&gt;https://twitter.com/blagdaross/status/74429856514965504&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/sparrk/status/74556639608442880&quot;&gt;https://twitter.com/sparrk/status/74556639608442880&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/anttio/status/74575465905520641&quot;&gt;https://twitter.com/anttio/status/74575465905520641&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/sirbenjaminnunn/status/74900149448609792&quot;&gt;https://twitter.com/sirbenjaminnunn/status/74900149448609792&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;http://talks.verou.me/css3-gradients/&quot;&gt;play with the HTML version of my slides&lt;/a&gt; or &lt;a href=&quot;http://www.slideshare.net/LeaVerou/mastering-css3-gradients&quot;&gt;view them on slideshare&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/LeaVerou/mastering-css3-gradients&quot; title=&quot;Mastering CSS3 gradients&quot;&gt;Mastering CSS3 gradients&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/8123661&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;View more &lt;a href=&quot;http://www.slideshare.net/&quot;&gt;presentations&lt;/a&gt; from &lt;a href=&quot;http://www.slideshare.net/LeaVerou&quot;&gt;Lea Verou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I really enjoyed some of the other talks in @media, especially:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3conversions.com/&quot;&gt;Stephanie Sullivan&lt;/a&gt;’s “Modern CSS”&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.brucelawson.co.uk/&quot;&gt;Bruce Lawson&lt;/a&gt;’s “Multimedia in HTML5”&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stubbornella.org/content/&quot;&gt;Nicole Sullivan&lt;/a&gt;’s “Performance of CSS3 and HTML5”&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;standards.next&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/06/my-experience-from-web-directions-media-standards-next/#standards.next&quot;&gt;Standards.next&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The morning before my Standards.next talk, I woke up with a sore throat, a running nose and a blocked ear. I even thought about cancelling my talk, but I’m one of those people that have to be dying to change their schedule. So I went, and I’m glad I did, as I got to attend &lt;a href=&quot;http://www.petergasston.co.uk/&quot;&gt;Peter Gasston&lt;/a&gt;’s incredible talk on CSS3 layout. I really learned so much stuff from that!&lt;/p&gt;
&lt;p&gt;As for my talk (“CSS Secrets: 10 things you might not know about CSS3”), it went fine after all. I had some trouble hearing the questions, due to the blocked ear, but nothing too bad. I had trouble with my last demo, as I got confused and used &lt;code&gt;background-origin: padding-box;&lt;/code&gt; instead of &lt;code&gt;content-box&lt;/code&gt;, but nobody there hated me because of it, like I was afraid would happen if I ever screwed up one of my demos :)&lt;/p&gt;
&lt;p&gt;That event was much smaller (it took place in a small room in a pub), so the tweets were much fewer, but still very positive:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/patrick%5C_h%5C_lauke/status/74496751716929536&quot;&gt;https://twitter.com/patrick&#92;_h&#92;_lauke/status/74496751716929536&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/stopsatgreen/status/74497512261693440&quot;&gt;https://twitter.com/stopsatgreen/status/74497512261693440&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mfujica/status/74499137558687744&quot;&gt;https://twitter.com/mfujica/status/74499137558687744&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/danielknell/status/74499496746299392&quot;&gt;https://twitter.com/danielknell/status/74499496746299392&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/brucel/status/74500503098245121&quot;&gt;https://twitter.com/brucel/status/74500503098245121&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/patrick%5C_h%5C_lauke/status/74501557349138432&quot;&gt;https://twitter.com/patrick&#92;_h&#92;_lauke/status/74501557349138432&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/danielknell/status/74502234251071488&quot;&gt;https://twitter.com/danielknell/status/74502234251071488&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mfujica/status/74504295927648257&quot;&gt;https://twitter.com/mfujica/status/74504295927648257&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/designjuju/status/74504416534855680&quot;&gt;https://twitter.com/designjuju/status/74504416534855680&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mfujica/status/74504823881469952&quot;&gt;https://twitter.com/mfujica/status/74504823881469952&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/twitrnick/status/74506406191046656&quot;&gt;https://twitter.com/twitrnick/status/74506406191046656&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/patrick%5C_h%5C_lauke/status/74506910807764992&quot;&gt;https://twitter.com/patrick&#92;_h&#92;_lauke/status/74506910807764992&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/stopsatgreen/status/74508394974810113&quot;&gt;https://twitter.com/stopsatgreen/status/74508394974810113&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/stefsull/status/74508645513175040&quot;&gt;https://twitter.com/stefsull/status/74508645513175040&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/albybarber/status/74532879832584194&quot;&gt;https://twitter.com/albybarber/status/74532879832584194&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jackosborne/status/74608125289828352&quot;&gt;https://twitter.com/jackosborne/status/74608125289828352&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I found out afterwards that one particular lady in the audience complained about my pronunciation of the words “fuchsia” and “ems”. That’s what I would’ve said to her if I heard: “Here’s some breaking news to you: Not everyone is a native english speaker. Shocking, isn’t it? I would really be interested to hear your pronunciation if you ever did a presentation in Greek. KKTHXBAI”&lt;/p&gt;
&lt;p&gt;Overall, I had a great time in London. I hadn’t been there for more than 10 years, so I had forgotten how beautiful city it is. I loved attending and speaking at both of those events, and I would like to thank Maxine Sherrin and John Allsopp for inviting me to @media and Bruce Lawson for inviting me at Standards.next.&lt;/p&gt;
</content>
  </entry><entry>
    <title>jQuery Pure: Call for contributors</title>
    <link href="https://lea.verou.me/2011/06/jquery-pure/"/>
    <updated>2011-06-09T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1095</id>
    <content xml:lang="en" type="html">&lt;p&gt;This post is about an idea I’ve had for ages, but never found the time to actually start working on it. Maybe because it looks like a quite big project if done properly, so it’s scary to do it on my own without any help.&lt;/p&gt;
&lt;p&gt;jQuery has a huge amount of code that deals with browser bugs and lack of implementations. For example, it needs a full-fledged selector engine, to cater for old browsers that don’t support the &lt;a href=&quot;http://www.w3.org/TR/selectors-api2/&quot;&gt;Selectors API&lt;/a&gt;. Or, it needs code that essentially does what the classList API is supposed to do, because old browsers don’t support it. Same goes for nextElementSibling (the .next() method) and tons of other stuff. However, not everyone needs all this. Some projects don’t need older browsers support, either due to the developer mindset or due to their tech-savvy target group. Also, some people only write demos/proof-of-concepts for modern browsers only and don’t need all this code. Same goes for intranet apps that are only designed for a particular modern browser. Last but not least, this code bloat makes the jQuery library hard to study for educational purposes.&lt;/p&gt;
&lt;p&gt;However, even in a browser that supports all the modern stuff, the jQuery API is still more concise than the native methods. Besides, there are tons of plugins that depend on it, so if you decide to implement everything in native JavaScript, you can’t use them.&lt;/p&gt;
&lt;p&gt;What I want to build is a fork of jQuery that is refactored so that all the extra code for working around browser bugs removed and all the code replaced by native functionality, where possible. All the ugliness removed, leaving a small, concise abstraction that only uses the current standards. Something like &lt;strong&gt;jQuery: The good parts&lt;/strong&gt;. It could also serve as a benchmark for browser standards support.&lt;/p&gt;
&lt;p&gt;The API will work in the exact same way and pass all unit tests (in modern browsers, in cases where they are not buggy) so that almost every plugin built on top of it will continue to function just as well. However, the jQuery library itself will be much smaller, with more elegant and easy to understand code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, who’s with me?&lt;/strong&gt; Do you find such an idea interesting and useful? Would you want to contribute? If so, leave a comment below or send me an email (it’s in the &lt;a href=&quot;http://lea.verou.me/about&quot;&gt;about page&lt;/a&gt;). Also, please let me know if you can think of any other uses, or if there’s already something like that that I’ve missed.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Pure CSS Tic Tac Toe</title>
    <link href="https://lea.verou.me/2011/06/pure-css-tic-tac-toe/"/>
    <updated>2011-06-17T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1103</id>
    <content xml:lang="en" type="html">&lt;p&gt;It’s supposed to be used by 2 people taking turns (click twice for the other sign).&lt;/p&gt;
&lt;p&gt;Basic idea:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It uses hidden checkboxes for the states (indeterminate means empty, checked means X, not checked means O) and labels for the visible part&lt;/li&gt;
&lt;li&gt;When it starts, a little script (the only js in the demo) sets the states of all checkboxes to indeterminate.&lt;/li&gt;
&lt;li&gt;It uses the &lt;code&gt;:checked&lt;/code&gt; and &lt;code&gt;:indeterminate&lt;/code&gt; pseudo-classes and sibling combinators to change the states and show who won.&lt;/li&gt;
&lt;li&gt;Once somebody clicks on a checkbox (or in this case, its label) they change it’s state from indeterminate to either checked or not checked, depending on how many times they click on it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;As a bonus, it’s perfectly accessible through the keyboard&lt;/strong&gt; (although I assume it’s not screen reader accessible).&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; would be much more appropriate for the markup, but I decided to sacrifice semantics in this case to make the demo simpler.&lt;/p&gt;
&lt;p&gt;All modern browsers support the indeterminate state in checkboxes (for Opera you will need the latest Opera.Next), however &lt;strong&gt;this demo doesn’t work on old Webkit (Chrome and Safari) because of an old bug&lt;/strong&gt; that made the sibling combinators (+ and ~) static in some cases which has been fixed in the nightlies. &lt;strong&gt;It should work in Firefox, Opera.next, Webkit nightlies and IE9, although I haven’t tested in Opera.next and IE9 to verify.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Enjoy:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 350px&quot; src=&quot;https://jsfiddle.net/leaverou/5X5Tq/embedded/result,css,html,js&quot;&gt;&lt;/iframe&gt;
</content>
  </entry><entry>
    <title>CSS reflections for Firefox, with -moz-element() and SVG masks</title>
    <link href="https://lea.verou.me/2011/06/css-reflections-for-firefox-with-moz-element-and-svg-masks/"/>
    <updated>2011-06-29T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1132</id>
    <content xml:lang="en" type="html">&lt;p&gt;We all know about the proprietary (and imho, horrible) &lt;code&gt;-webkit-box-reflect.&lt;/code&gt; However, you can create just as flexible reflections in Firefox as well, by utilizing &lt;a href=&quot;https://developer.mozilla.org/en/CSS/-moz-element&quot;&gt;-moz-element()&lt;/a&gt;, some CSS3 and Firefox’s capability to apply &lt;a href=&quot;https://developer.mozilla.org/En/Applying_SVG_effects_to_HTML_content&quot;&gt;SVG effects to HTML elements&lt;/a&gt;. And all these are actually standards, so eventually, this will work in all browsers, unlike &lt;code&gt;-webkit-box-reflect&lt;/code&gt;, which was never accepted by the CSS WG.&lt;/p&gt;
&lt;p&gt;First and foremost, have a look at the &lt;a href=&quot;http://lea.verou.me/demos/reflection/&quot;&gt;demo&lt;/a&gt;:&lt;/p&gt;
&lt;iframe src=&quot;http://lea.verou.me/demos/reflection/&quot; width=&quot;100%&quot; height=&quot;500px&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;how-it-works&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/06/css-reflections-for-firefox-with-moz-element-and-svg-masks/#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;For every element, we generate an &lt;code&gt;::after&lt;/code&gt; pseudoelement with the same dimensions and a position of being right below our original element.&lt;/li&gt;
&lt;li&gt;Then, we make it appear the same as our element, by giving it a background of &lt;code&gt;‑moz-element(#element-id)&lt;/code&gt; and no content.&lt;/li&gt;
&lt;li&gt;Reflections are flipped, so we flip it vertically, by applying &lt;code&gt;transform: scaleY(‑1);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If we want the reflection to have a little distance from the element (for example 10px like the demo), we also apply a transform of &lt;code&gt;translateY(10px)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We want the reflection to not be as opaque as the real element, so we give it an &lt;code&gt;opacity&lt;/code&gt; of around 0.3-0.4&lt;/li&gt;
&lt;li&gt;At this point, &lt;strong&gt;we already have a decent reflection&lt;/strong&gt;, and we didn’t even need SVG masks yet. It’s essentially the same result -webkit-box-reflect gives if you don’t specify a mask image. However, to really make it look like a reflection, we apply a mask through an SVG and the &lt;code&gt;mask&lt;/code&gt; CSS property. In this demo, the SVG is external, but it could be a data URI, or even embedded in the HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;caveats&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/06/css-reflections-for-firefox-with-moz-element-and-svg-masks/#caveats&quot;&gt;Caveats&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Won’t work with replaced elements (form controls, images etc).&lt;/li&gt;
&lt;li&gt;If you have borders, it gets a bit more complicated to size it properly&lt;/li&gt;
&lt;li&gt;Doesn’t degrade gracefully, you still get the pseudoelement in other browsers, so you need to filter it out yourself&lt;/li&gt;
&lt;li&gt;Bad browser support (currently only Firefox 4+)&lt;/li&gt;
&lt;li&gt;You need to set the reflection’s background for every element and every element needs an id to use it (but this could be done automatically via script)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;further-reading&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/06/css-reflections-for-firefox-with-moz-element-and-svg-masks/#further-reading&quot;&gt;Further reading&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/css3-images/#element-reference&quot;&gt;element() function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://people.mozilla.com/~roc/SVG-CSS-Effects-Draft.html&quot;&gt;SVG effects for CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit:&lt;/strong&gt; &lt;a href=&quot;https://hacks.mozilla.org/2010/08/mozelement/&quot;&gt;Turns out Paul Rouget did something similar before me, back in August 2010&lt;/a&gt;. The pros of this approach is that it works with replaced elements as well, the cons is that it requires extra markup and JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Credits: Thanks to &lt;a href=&quot;http://wait-till-i.com/&quot;&gt;Christian Heilmann&lt;/a&gt; for helping me debug why SVG masks for HTML elements weren’t originally working for me.&lt;/p&gt;
</content>
  </entry><entry>
    <title>A polyfill for HTML5 progress element, the obsessive perfectionist way</title>
    <link href="https://lea.verou.me/2011/07/a-polyfill-for-html5-progress-element-the-obsessive-perfectionist-way/"/>
    <updated>2011-07-02T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1143</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2011/07/a-polyfill-for-html5-progress-element-the-obsessive-perfectionist-way/images/Screen-shot-2011-11-15-at-15.02.37-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2011/07/a-polyfill-for-html5-progress-element-the-obsessive-perfectionist-way/images/Screen-shot-2011-11-15-at-15.02.37--300x219.png&quot; alt=&quot;&quot; title=&quot;Progress polyfill, project page screenshot&quot; /&gt;&lt;/a&gt;Yesterday, for some reason I don’t remember, I was looking once more at &lt;a href=&quot;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills&quot;&gt;Paul Irish’s excellent list of polyfills on Github&lt;/a&gt;. I was really surprised to see that there are none for &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/the-button-element.html#the-progress-element&quot;&gt;the &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; element&lt;/a&gt;. It seemed really simple: Easy to fake with CSS and only 4 IDL attributes (value, max, position and labels). “Hey, it sounds fun and easy, I’ll do it!”, I thought. I have no idea how in only 1 day this turned into “OMG, my brain is going to explode”. I’ve documented below all the pitfalls I faced. And don’t worry, it has a happy ending: I did finish it. And &lt;a href=&quot;https://github.com/LeaVerou/HTML5-Progress-polyfill&quot;&gt;published it&lt;/a&gt;. So, if you’re not interested in long geeky stories, just jump straight to &lt;a href=&quot;http://lea.verou.me/polyfills/progress/&quot;&gt;its page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;first-things-first%3A-controlling-the-width-of-the-value-bar&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/07/a-polyfill-for-html5-progress-element-the-obsessive-perfectionist-way/#first-things-first%3A-controlling-the-width-of-the-value-bar&quot;&gt;First things first: Controlling the width of the value bar&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most progress bars out there use 2 elements: One for the container and one for the value bar. I was pretty stubborn about not using an extra element. I wanted to use pseudo-elements instead and keep the DOM tree as clean as I found it. And there it was, the first problem: How to set the width?&lt;/p&gt;
&lt;p&gt;CSS3 attr() and calc() are hardly supported and &lt;a href=&quot;http://lea.verou.me/2010/09/on-attr-and-calc/&quot;&gt;attr() is not even allowed in calc()&lt;/a&gt;, so I quickly realized that a pure CSS solution was out of the question. However, if I used JavaScript, how would I set a different width for every progress::before? You can’t set that in an inline style, and assigning every &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; element an ID and adding separate rules seems a bit too intrusive to me. Think about it for a second, what would you do?&lt;/p&gt;
&lt;p&gt;I realized I had to control the width of the pseudo-element through CSS properties of the parent container somehow. And then it dawned on me: If the pseudoelement has &lt;code&gt;display:block&lt;/code&gt;, it will automatically get the parent width, minus the padding and borders. There it was, this was my solution. I just had to set &lt;code&gt;padding-right&lt;/code&gt; accordingly, so that the value bar gets the width it needs to be! And I had already given it &lt;code&gt;box-sizing: border-box&lt;/code&gt;, as it was in Webkit’s UA stylesheet, so I didn’t have to worry about padding changing the width of the element. The first problem was solved.&lt;/p&gt;
&lt;h2 id=&quot;becoming-dynamic&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/07/a-polyfill-for-html5-progress-element-the-obsessive-perfectionist-way/#becoming-dynamic&quot;&gt;Becoming dynamic&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The static part was quite easy indeed. Selecting all &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; elements and using their attributes to set an appropriate padding-right was pretty much run of the mill. But that wasn’t enough. What happens if you set the properties through script? What happens if you set the attributes? The progress bar should update accordingly, it had to be dynamic. A static progress bar is not much of a fallback. It might be acceptable for &lt;code&gt;&amp;lt;meter&amp;gt;&lt;/code&gt;, since in most interfaces it’s used in a static way. But a progress bar needs to change in order to show um, &lt;em&gt;progress&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First step was adding the properties that are in its DOM Interface. “Easy, I’ll add them to the prototype” thought my naïve self. So, I needed to find which prototype, I didn’t want to add them in every HTML element of course. So I eagerly typed &lt;code&gt;Object.prototype.toString.call(document.createElement(&#39;progress&#39;))&lt;/code&gt; in Firebug’s console and it slapped me in the face with an &lt;code&gt;&#39;[object HTMLUnknownElement]&#39;&lt;/code&gt;. D’oh! I had forgotten that unknown elements share a common prototype named like that. So, I had to add them to each one individually. I hated that, but since it was the only way, I did it and moved on.&lt;/p&gt;
&lt;p&gt;Of course, I didn’t just assign a static value to them, otherwise they wouldn’t solve much: The progress bar would still be static. I assigned getters and setters that used the &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; attributes to return what they should. Assigning getters and setters to a property is a whole new problem by itself, as some browsers use &lt;code&gt;__defineGetter__&lt;/code&gt;/&lt;code&gt;__defineSetter__&lt;/code&gt; and some others the ES5 standard &lt;code&gt;Object.defineProperty&lt;/code&gt;. But &lt;a href=&quot;http://lea.verou.me/2011/05/strongly-typed-javascript/&quot;&gt;I had solved that one before&lt;/a&gt;, so it didn’t slow me down.&lt;/p&gt;
&lt;p&gt;The getters and setters solved the issue one-way only: If you set the properties, the progress bar and its attributes would be updated. That would be enough for most authors using the polyfill, but no, I wanted it to be &lt;em&gt;perfect&lt;/em&gt;. “If you change the attributes, the progress bar and its properties should too!” my annoyingly pedantic inner self insisted. “And what if you dynamically add more &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; elements?”.&lt;/p&gt;
&lt;p&gt;There are two ways to do stuff when attributes change and elements get added: Polling and &lt;a href=&quot;http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-eventgroupings-mutationevents&quot;&gt;mutation events&lt;/a&gt;. The advantage of polling is its perfect browser support, which comes at a big cost: It’s horrible performance-wise. Also, polling introduces a delay that could be unacceptable in some cases, especially considering how short the duration of some progress bar use cases is. So, I went with mutation events, even though they are deprecated (seriously W3C? deprecating something, without providing a solid alternative??) and don’t have perfect browser support. After all, it was the only way (I don’t consider polling a real option in this case).&lt;/p&gt;
&lt;h2 id=&quot;styling&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/07/a-polyfill-for-html5-progress-element-the-obsessive-perfectionist-way/#styling&quot;&gt;Styling&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After messing around a little, it seemed to work great in Opera 10.63 and Firefox 5, which I had open for my tests. It was time to write some unit tests and check it out in more browsers. Instead, I opted to style it, as a desperate attempt to delay my confrontation with IE8 a bit longer (and for good reason, as it turned out later). Given that CSS is kinda my specialization, I expected styling to be a piece of cake and even relaxing. Instead, it came with it’s fair share of trouble and hard dilemmas.&lt;/p&gt;
&lt;p&gt;If you notice the native progress bars in OSX, you will see that they use gradients. I mocked up something similar with CSS gradients, which wasn’t easy, as I wanted to keep the hue/saturation information in the background-color only, for easy modifications and Webkit uses a regular gradient with color stops that have different hues and saturations. And then I realised that this was not going to show up at all in IE8-IE9, which were 2 major browsers that my polyfill would target. No gradient may be acceptable in determinate progress bars, but it’s not an option in indeterminate ones: Scrolling diagonal stripes is the convention and there’s no other way to communicate this status to the average user.&lt;/p&gt;
&lt;p&gt;So I decided to go with the old way of using raster images for gradients (through a data URI). Another painful slap in the face was when I realized that those moving stripes need to be semi-transparent. To do that, my options were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS3 animations - no good in my case, as it’s crucial to show up and their browser support isn’t that good&lt;/li&gt;
&lt;li&gt;SVG with SMIL - Much better browser support than CSS3 animations, but still no go in IE&lt;/li&gt;
&lt;li&gt;APNG - Only supported by Firefox and Opera, even after all these years&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I happened to be chatting with &lt;a href=&quot;http://xanthir.com/blog&quot;&gt;Tab Atkins&lt;/a&gt; at the moment, and he suggested I go with plain ol’ GIFs. I was originally negative, but after thinking about it I realized that antialiasing is not that crucial in 45deg stripes, especially when they’re moving. I tried it, I liked the result, so I kept it. Phew, that one was easy.&lt;/p&gt;
&lt;h2 id=&quot;the-ie8-nightmare&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/07/a-polyfill-for-html5-progress-element-the-obsessive-perfectionist-way/#the-ie8-nightmare&quot;&gt;The IE8 nightmare&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After spending a few hours tweaking the gradients and the CSS (yes, hours. I said I’m an obsessive perfectionist, didn’t I?) I finally wrote some unit tests and fired up Virtualbox to test with IE8. I prepared myself for the worst, and secretly hoped I’d be pleasantly surprised. Instead, I faced a developer’s worst nightmare. Two words: Stack overflow.&lt;/p&gt;
&lt;p&gt;The culprit was a classic IE bug with DOM properties and HTML attrtibutes that I had blissfully forgotten: IE thinks they’re the same. I had added getters and setters (or etters, as I like to call both) to the max and value &lt;em&gt;properties&lt;/em&gt; which used the max and value &lt;em&gt;attributes&lt;/em&gt;, resulting in infinite recursion in IE8.&lt;/p&gt;
&lt;p&gt;This was the hardest of all problems, and I never completely solved it: A few unit tests still fail in IE8 because of it, although there’s no infinite recursion any more. Luckily, this bug was fixed in IE9, so the polyfill works flawlessly there.&lt;/p&gt;
&lt;p&gt;My first idea was the obvious one: to duplicate the values somewhere. In a lookup table, in another property, somewhere. I didn’t quite like the idea, so I kept brainstorming. And then it dawned on me. They’re already duplicated somewhere, and not only it’s not redundant, but actually encouraged: in the WAI-ARIA attributes!&lt;/p&gt;
&lt;p&gt;To clarify, when progress elements are natively supported, they already have built-in ARIA roles and attributes. However, when they’re not, you should add them yourself, if you want the control to be accessible. From my research, there was a &lt;code&gt;progressbar&lt;/code&gt; role, and it required the attributes &lt;code&gt;aria-valuemin&lt;/code&gt;, &lt;code&gt;aria-valuemax&lt;/code&gt;, &lt;code&gt;aria-valuenow&lt;/code&gt; and &lt;code&gt;aria-labelledby&lt;/code&gt;. I implemented all but the latter, as it proved too much of a hassle for very few edge cases (how many people put IDs in their &lt;em&gt;labels&lt;/em&gt; without using aria-labelledby themselves?). So, &lt;code&gt;aria-valuemax&lt;/code&gt; was already duplicating &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;aria-valuenow&lt;/code&gt; was duplicating &lt;code&gt;value&lt;/code&gt;. I changed everything to use those instead.&lt;/p&gt;
&lt;p&gt;After lots of head-scratching, IE-cursing and feeling that my brain was going to explode all over my laptop, I managed to kinda have it working. I knew in advance that some unit tests would fail, as it doesn’t support mutation events. I eventually gave up when I realized that the last unit test in the “static” category failed because &lt;code&gt;getAttribute(&#39;max&#39;)&lt;/code&gt; returned &lt;code&gt;null&lt;/code&gt;, since IE had completely removed the attribute from the DOM tree. It was the last straw and made me say “That’s it, I’m done with this piece of shit”.&lt;/p&gt;
&lt;h2 id=&quot;safari-5-craziness&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/07/a-polyfill-for-html5-progress-element-the-obsessive-perfectionist-way/#safari-5-craziness&quot;&gt;Safari 5 craziness&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After IE, it was Safari’s turn. I knew that I could only target Safari 5, as Safari 4 doesn’t support etters on DOM elements and Safari 5.1 will probably support progress elements natively, since they’ve been in Webkit for ages. I launched Safari without fear. “How can it possibly not work in Safari? It will probably be fine, maybe just need a one or two little tweaks in the worst case”, I reassured myself thinking.&lt;/p&gt;
&lt;p&gt;The progress bars were not even showing. At all. My first guess was that it was a one time rendering error. When it persisted after a few reloads, I opened the dev tools to see what the hell happened. I saw a series of errors like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; is not allowed inside &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;. Content ignored.
Unmatched  encountered.  Ignoring tag.&lt;/p&gt;
&lt;p&gt;At first, I thought the problem was the label. So I made all labels external. And then still got the same errors for the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s. And every other element I tried. Even when I put them directly into the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, Safari complained that they are not allowed to be inside it! It turned out that this was a bug in a build of Webkit, and coincidentally, this build was the one Safari 5 uses.&lt;/p&gt;
&lt;p&gt;There wasn’t much to think about in this one: They’re not in the DOM, so I can’t do anything about them. It’s mission impossible.&lt;/p&gt;
&lt;h2 id=&quot;happy(%3F)-end&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/07/a-polyfill-for-html5-progress-element-the-obsessive-perfectionist-way/#happy(%3F)-end&quot;&gt;Happy(?) end&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After IE8’s and Safari5’s cruel rejection, I was quite dispirited. IE8 had already caused me to make my code uglier and more verbose, and now Safari 5 flat out refuses to accept any treatment. It worked flawlessly in Firefox 3.5, but that didn’t cheer me up much. I decided that this has already taken up too much of my time. It’s now the community’s turn. Have any ideas about how further improvement? Maybe some more unit tests? I’ll be waiting for your pull requests! :) &lt;a href=&quot;https://github.com/LeaVerou/HTML5-Progress-polyfill&quot;&gt;Github repo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;appendix%3A-why-do-some-unit-tests-fail-in-browsers-that-natively-support-%3Cprogress%3E%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/07/a-polyfill-for-html5-progress-element-the-obsessive-perfectionist-way/#appendix%3A-why-do-some-unit-tests-fail-in-browsers-that-natively-support-%3Cprogress%3E%3F&quot;&gt;Appendix: Why do some unit tests fail in browsers that natively support &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt;?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While developing this, I discovered 2 browser bugs: One in Webkit’s implementation and in for Opera’s. I plan to report these soon.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Detecting CSS selectors support + my JSConf EU talk</title>
    <link href="https://lea.verou.me/2011/07/detecting-css-selectors-support-my-jsconf-eu-talk/"/>
    <updated>2011-07-21T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1153</id>
    <content xml:lang="en" type="html">&lt;p&gt;I’ll start with a little backstory, if you want to jump straight to the meat, skip the next 4 paragraphs.&lt;/p&gt;
&lt;p&gt;In the past few months, my CSS research has been getting some attention and I’ve been starting to become somewhat well-known in the CSS industry. A little known fact about me is that JavaScript has always been one of my loves, almost as much as CSS (even more than it in the past). Ironically, &lt;a href=&quot;http://front-trends.com/&quot;&gt;the first time I was asked to speak in a big conference&lt;/a&gt;, it was about JavaScript, even though I ended up choosing to speak about CSS3 instead.&lt;/p&gt;
&lt;p&gt;Lately, I’ve started wanting to get more into the JavaScript industry as well. I’m quite reluctant to submit speaking proposals myself (every conference or meetup I’ve given a talk so far has asked me to speak, not the other way around) and most JavaScript conferences expect you to submit a proposal yourself. I also couldn’t think of a good topic, something I was passionate about and hasn’t already been extensively covered.&lt;/p&gt;
&lt;p&gt;This changed a few weeks ago. While I was writing &lt;a href=&quot;http://lea.verou.me/2011/07/a-polyfill-for-html5-progress-element-the-obsessive-perfectionist-way/&quot;&gt;my &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; polyfill&lt;/a&gt;, it dawned on me: Polyfills is something that’s JS-related and I’m passionate about! I love studying them, writing them, talking about them. I quickly searched if there were any talks about polyfill writing already and I couldn’t find any. So, I decided to submit a proposal to &lt;a href=&quot;http://jsconf.eu/&quot;&gt;JSConf EU&lt;/a&gt;, even though the call for speakers had passed 10 days ago. When I read &lt;a href=&quot;http://twitter.com/#!/cramforce/status/90737580466896896&quot;&gt;@cramforce’s tweet&lt;/a&gt; that they had decided on most of the speakers, I spent a few days stressed as hell, checking my inbox every few minutes and hoping that my gut feeling that I would get accepted was right.&lt;/p&gt;
&lt;p&gt;And it was! 3 days ago I received an email from JSConf EU that my proposal was accepted!! I can’t even begin to describe how happy and excited I am about it. And nervous too: What if they know everything I’m going to say? What if they hate my talk? What if the JavaScript industry is really as sexist as some people claim and they dismiss me because of my gender? I decided to put my fears aside and start working on my slides, as I couldn’t wait until later (even though I have multiple deadlines creeping up on me right now…).&lt;/p&gt;
&lt;p&gt;A big part of writing polyfills is feature detection. Before trying to implement a feature with JavaScript, you first have to check if it’s already supported. So, a substantial portion of my talk will be about that. How to detect if APIs, HTML elements, CSS properties/values/selectors etc are supported. There are already established solutions and techniques about most of these, except CSS selectors. &lt;a href=&quot;http://www.modernizr.com/&quot;&gt;Modernizr&lt;/a&gt; doesn’t detect any, and judging from &lt;a href=&quot;http://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ie=UTF-8&amp;amp;ion=1&amp;amp;nord=1#sclient=psy&amp;amp;hl=en&amp;amp;safe=off&amp;amp;nord=1&amp;amp;site=webhp&amp;amp;source=hp&amp;amp;q=detect%20css%20selector%20support&amp;amp;pbx=1&amp;amp;oq=&amp;amp;aq=&amp;amp;aqi=&amp;amp;aql=&amp;amp;gs_sm=&amp;amp;gs_upl=&amp;amp;fp=39b0a615b729321b&amp;amp;ion=1&amp;amp;ion=1&amp;amp;bav=on.2,or.r_gc.r_pw.&amp;amp;fp=39b0a615b729321b&amp;amp;biw=1280&amp;amp;bih=679&amp;amp;ion=1&quot;&gt;my Google search&lt;/a&gt; nobody has written about any techniques for doing so in a generic fashion.&lt;/p&gt;
&lt;p&gt;A really simple way to detect CSS selectors support is using &lt;code&gt;document.querySelector()&lt;/code&gt; in a &lt;code&gt;try...catch&lt;/code&gt; statement. If the selector is not supported, an error will be thrown. However, that’s not really reliable, as the Selectors API is not supported in IE &amp;lt; 8. So, I thought of another idea: What if I turn the hassle of reading out a stylesheet via the DOM methods (browsers drop stuff they don’t understand) into a feature detection method?&lt;/p&gt;
&lt;p&gt;The basic idea is creating a new &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element with an empty rule and the selector we want to test support for, and then read out the stylesheet through the DOM methods to see if a rule actually exists. I’ve so far tested it in Firefox, Opera and Chrome and it seems to work. I haven’t tested it in IE yet, as I currently have too many apps running to turn on the vm, so it might need a few fixes to work there (or I might be unlucky and the idea might not work at all).&lt;/p&gt;
&lt;p&gt;You can test it out yourself in this &lt;a href=&quot;https://jsfiddle.net/leaverou/Pmn8m/&quot;&gt;fiddle&lt;/a&gt;, just check the console: &lt;a href=&quot;http://fiddle.jshell.net/leaverou/Pmn8m/show/light/&quot;&gt;http://fiddle.jshell.net/leaverou/Pmn8m/show/light/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apologies if this has already been documented elsewhere, I really couldn’t find anything.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; &lt;a href=&quot;https://jsfiddle.net/Skateside/5dKc7/5/&quot;&gt;James Long worked on fixing my example’s issues with IE&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Vote for me in The .net awards 2011!</title>
    <link href="https://lea.verou.me/2011/07/vote-for-me-in-the-net-awards-2011/"/>
    <updated>2011-07-25T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1156</id>
    <content xml:lang="en" type="html">&lt;p&gt;I don’t usually post shameless plugs like that, but I’m so excited about this I decided to make an exception. A few minutes ago I found out that I’m shortlisted in the &lt;a href=&quot;http://www.thenetawards.com/#num12&quot;&gt;“Brilliant newcomer” category&lt;/a&gt; of &lt;a href=&quot;http://www.thenetawards.com/&quot;&gt;The .net awards&lt;/a&gt;!!!&lt;/p&gt;
&lt;p&gt;Thank you so much @ everyone that nominated me and/or plans to vote for me. I really appreciate it guys*! :)&lt;/p&gt;
&lt;p&gt;* “guys” in that context is used in a gender neutral fashion, I’m not only thanking the men :P&lt;/p&gt;
</content>
  </entry><entry>
    <title>My experience from the CSS Summit 2011</title>
    <link href="https://lea.verou.me/2011/08/my-experience-from-the-css-summit-2011/"/>
    <updated>2011-08-02T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1165</id>
    <content xml:lang="en" type="html">&lt;p&gt;It’s been a few days since &lt;a href=&quot;http://environmentsforhumans.com/2011/css-summit/&quot;&gt;this year’s CSS Summit&lt;/a&gt; and my talk there. Where most people would assume that public speaking in a “real” conference is more daunting, I was much more nervous about this one, since it was my first talk at an online conference. I wouldn’t be able to see the faces of the audience, so how would I be able to tell if they like it or are bored shitless? Also, the whole idea of me, alone in a room, giving a talk to my laptop sounded kind of awkward, to say the very least.&lt;/p&gt;
&lt;p&gt;Contrary to my fears, it was a &lt;strong&gt;very&lt;/strong&gt; pleasant experience. In some ways, it’s much better than real-life conferences, the main one being the number of questions you get. In most real-life conferences you should be lucky to get more than 3 or 4 questions. Also, they’re usually at the end, so most attendees forget the questions they had at the beginning and middle of the talk (it happens to me a lot too, when I attend others’ talks). In the CSS Summit, I answered questions after every section of my talk, and there were quite a lot of them.&lt;/p&gt;
&lt;p&gt;The attendees had a group chat in which they talked about the presentation, posted questions and discussed many other stuff. That group chat was the other thing I really liked. It might surprise some people, but even though I’m not afraid of public speaking, I’m quite shy in some ways and I almost never talk to someone first. So, if I didn’t know anyone at a conference and vice versa, I’d probably sit in a corner alone with nobody to talk to during the breaks. The chat makes it much easier for attendees to get to know each other. On the minus side however, “meeting” somebody in a chat is not by any means the same as really meeting someone f2f in a real-life conference.&lt;/p&gt;
&lt;p&gt;Regarding my talk, it went surprisingly well. No technical hiccups like some of the other talks, no me going overtime as I was afraid I would (since I had to be slower), no internet connection failing on my part (like it sometimes does lately). I received lots of enthusiastic feedback on both the chat and twitter. I couldn’t even favorite them all, as the tweets were so many! That’s the 3rd good thing about online conferences: People tweet more, since they’re at home with their regular connection and not with a crappy conference wifi or a smartphone on expensive roaming.&lt;/p&gt;
&lt;p&gt;Here’s a small sample of the feedback I got:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/teleject/status/95872896257372161&quot;&gt;https://twitter.com/teleject/status/95872896257372161&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/boblet/status/95874502608691201&quot;&gt;https://twitter.com/boblet/status/95874502608691201&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/chriscoyier/status/95875236511236096&quot;&gt;https://twitter.com/chriscoyier/status/95875236511236096&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/snookca/status/95875859579277312&quot;&gt;https://twitter.com/snookca/status/95875859579277312&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/elizabethyalkut/status/95876076647100416&quot;&gt;https://twitter.com/elizabethyalkut/status/95876076647100416&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/wloescher/status/95877653730557952&quot;&gt;https://twitter.com/wloescher/status/95877653730557952&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/martuishere/status/95878117872246784&quot;&gt;https://twitter.com/martuishere/status/95878117872246784&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/PetraGregorova/status/95878976446271488&quot;&gt;https://twitter.com/PetraGregorova/status/95878976446271488&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/caffeinerush/status/95879094406873088&quot;&gt;https://twitter.com/caffeinerush/status/95879094406873088&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/yodasw16/status/95879645743951872&quot;&gt;https://twitter.com/yodasw16/status/95879645743951872&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/matthewcarleton/status/95880868744278017&quot;&gt;https://twitter.com/matthewcarleton/status/95880868744278017&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/redcrew/status/95881025602863104&quot;&gt;https://twitter.com/redcrew/status/95881025602863104&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/brandongcarroll/status/95881316796600320&quot;&gt;https://twitter.com/brandongcarroll/status/95881316796600320&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/digitalCULT/status/95884698315792384&quot;&gt;https://twitter.com/digitalCULT/status/95884698315792384&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/candiRSX/status/95885394192769025&quot;&gt;https://twitter.com/candiRSX/status/95885394192769025&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jewlofthelotus/status/95885472802422784&quot;&gt;https://twitter.com/jewlofthelotus/status/95885472802422784&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mortendk/status/95885749404176384&quot;&gt;https://twitter.com/mortendk/status/95885749404176384&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/idoclosecuts/status/95886200342188032&quot;&gt;https://twitter.com/idoclosecuts/status/95886200342188032&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/megcarpen/status/95886211897495552&quot;&gt;https://twitter.com/megcarpen/status/95886211897495552&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/V%5C_v%5C_V/status/95886299902386176&quot;&gt;https://twitter.com/V&#92;_v&#92;_V/status/95886299902386176&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/iScreem/status/95886472934195200&quot;&gt;https://twitter.com/iScreem/status/95886472934195200&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/pixelfuture/status/95886741176717312&quot;&gt;https://twitter.com/pixelfuture/status/95886741176717312&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/suprMax/status/95887286369132544&quot;&gt;https://twitter.com/suprMax/status/95887286369132544&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/PetraGregorova/status/95899659159080960&quot;&gt;https://twitter.com/PetraGregorova/status/95899659159080960&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Deborah Edwards-Onoro also put together a &lt;a href=&quot;http://deboraheo.posterous.com/css-summit-2011-css3-and-gradients-by-lea-ver&quot;&gt;write-up&lt;/a&gt; for some parts of my presentation.&lt;/p&gt;
&lt;p&gt;Thank you all!!&lt;/p&gt;
</content>
  </entry><entry>
    <title>CSS3 for developers: My Fronteers 2011 workshop</title>
    <link href="https://lea.verou.me/2011/08/css3-for-developers-my-fronteers-2011-workshop/"/>
    <updated>2011-08-06T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1170</id>
    <content xml:lang="en" type="html">&lt;p&gt;In case you haven’t noticed, in addition to my talk at &lt;a href=&quot;http://fronteers.nl/congres/2011&quot;&gt;Fronteers 2011&lt;/a&gt;, I’ll also be holding &lt;a href=&quot;http://fronteers.nl/congres/2011/workshops/css3-for-web-developers-lea-verou&quot;&gt;a full day workshop&lt;/a&gt; the day before the conference. The title of that workshop is “&lt;a href=&quot;http://fronteers.nl/congres/2011/workshops/css3-for-web-developers-lea-verou&quot;&gt;CSS3 for developers&lt;/a&gt;” and I wanted to explain a bit what it’s going to be about and why I chose to target web developers only.&lt;/p&gt;
&lt;h3 id=&quot;why-%E2%80%9Cfor-developers%E2%80%9D%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/08/css3-for-developers-my-fronteers-2011-workshop/#why-%E2%80%9Cfor-developers%E2%80%9D%3F&quot;&gt;Why “for developers”?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First of all, even though I do design websites and I really love design (not only web design), I consider myself primarily a developer. So, I think I can communicate better with other devs, rather than designers, since we “speak the same language”. Secondly, most CSS3 talks and workshops are presented by and targeted to, designers. Developers end up feeling left out and in return they tend to consider CSS an inferior technology which isn’t for them. CSS might not be a programming language, but it &lt;strong&gt;is&lt;/strong&gt; code, and to fully master, it requires a very similar skillset to programming. It’s no wonder that most people that actually do research on CSS and/or write the specifications are &lt;strong&gt;not&lt;/strong&gt; designers.&lt;/p&gt;
&lt;p&gt;Besides, CSS3, in essence, is about creating web applications that download faster and are easier to develop, maintain and edit. There are very few things that can’t be done at all with CSS2.1. CSS3 just allows us to do them better: Less HTTP requests, less kilobytes to download, less presentational JavaScript, more flexibility. CSS3 is mostly about coding speed, flexibility, performance, maintainability. None of these are artistic pursuits, they’re all purely developer goals!&lt;/p&gt;
&lt;h3 id=&quot;what-will-it-be-about%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/08/css3-for-developers-my-fronteers-2011-workshop/#what-will-it-be-about%3F&quot;&gt;What will it be about?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It will be about many well-implemented and popular CSS3 features, like border-radius, shadows, gradients, new background properties, selectors, media queries, transforms, transitions etc. The key difference from most CSS3 talks &amp;amp; workshops will be the &lt;strong&gt;depth&lt;/strong&gt; these will be covered in and the &lt;strong&gt;different perspective&lt;/strong&gt; (practical information rather than artistic or “inspirational”). I usually opt in for depth rather than breadth for my talks, and expect the same from this workshop. The feedback I get most frequently for my talks is “I thought I knew everything about topic X, but yet I learned so much!”. I’ll do my best to maintain this reputation for this workshop as well. ;)&lt;/p&gt;
&lt;p&gt;In addition to learning how CSS3 stuff can be used, information about browser support, fallbacks and performance will be provided.&lt;/p&gt;
&lt;h3 id=&quot;watch-a-single-person-talk-for-a-whole-day%3F-boooooring!&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/08/css3-for-developers-my-fronteers-2011-workshop/#watch-a-single-person-talk-for-a-whole-day%3F-boooooring!&quot;&gt;Watch a single person talk for a whole day? Boooooring!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hey, I agree. And it’s not just that: Listening to someone talk about a given topic and trying it out yourself are two very different things. I believe that you only really learn something when you actually use it. That’s why it won’t be done like that. ;) It will be very hands on and there is going to be at least one small exercise per almost everything explained. The exercises are going to be performed in a little web app designed exclusively for this workshop, so that you won’t need to bother with prefixes or write HTML and irrelevant CSS code just to try out a new property. And what’s best, you can take that app at home with you and practice what you learned as much as you want!&lt;/p&gt;
&lt;p&gt;Of course that means that every attendee will have to bring their own laptop (or borrow one from a friend).&lt;/p&gt;
&lt;h3 id=&quot;kewl%2C-can-i-haz-ticket%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/08/css3-for-developers-my-fronteers-2011-workshop/#kewl%2C-can-i-haz-ticket%3F&quot;&gt;Kewl, can I haz ticket?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Workshop attendance is priced at €350 (€275 for Fronteers members) and you can get your ticket here: &lt;a href=&quot;http://fronteers.paydro.net/&quot;&gt;http://fronteers.paydro.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To make the experience better and more educational, we limited the number of attendees to 30. That might mean you need to rush: there are currently tickets available, but in a few days there might not be any left!&lt;/p&gt;
&lt;p&gt;Looking forward to seeing you in Amsterdam! :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>CSS gradients are faster than SVG backgrounds</title>
    <link href="https://lea.verou.me/2011/08/css-gradients-are-much-faster-than-svg/"/>
    <updated>2011-08-12T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1188</id>
    <content xml:lang="en" type="html">&lt;p&gt;Which is really sad, because SVG is awesome. It lets you do what CSS gradients do and much more, in quite a small filesize, as it’s just text too. However, the browser needs to generate a DOM for every SVG graphic, which results in sluggishness.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/leaverou/8hQEy/embedded/result%2Ccss%2Cjs/&quot;&gt;Here’s my test case&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mouse over the 2 divs. They both use a spotlight effect that’s dynamically updated according to the position of the mouse cursor. One of them does it with an SVG (through a data URI), the other one through a CSS radial gradient.&lt;/p&gt;
&lt;p&gt;The test only works in &lt;strong&gt;Chrome&lt;/strong&gt;, &lt;strong&gt;Firefox nightlies&lt;/strong&gt; and &lt;strong&gt;perhaps IE10&lt;/strong&gt; (haven’t tested in Windows). Why? Because &lt;strong&gt;Opera&lt;/strong&gt; doesn’t support radial gradients yet (however you can see how slow SVG is in it too), and &lt;strong&gt;Firefox&lt;/strong&gt; before the nightlies used to have &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=308590&quot;&gt;a bug with gradients in SVG through data URIs&lt;/a&gt;. Also, jsFiddle seems not to work in &lt;strong&gt;Webkit nightlies&lt;/strong&gt; for some reason, but I’m too lazy right now to make a self-hosted test case.&lt;/p&gt;
&lt;p&gt;Thanks a lot to &lt;a href=&quot;http://twitter.com/#!/__chris__&quot;&gt;Christian Krebs&lt;/a&gt; (lead developer of Opera Dragonfly) who inspired these tests after a discussion we had today regarding CSS gradient performance.&lt;/p&gt;
&lt;p&gt;Edit: According to some commenters, they’re the same speed on Windows and Linux, so it could be an OSX issue. The only way to know for sure is to post more results, so go ahead and post yours!&lt;/p&gt;
&lt;p&gt;Also, some commenters say that this is not a fair comparison, because it generates a new SVG every time. I have several arguments to reply to this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We also generate a new gradient every time, so it is fair.&lt;/li&gt;
&lt;li&gt;You can’t manipulate an SVG used for a background, so it’s not an option for backgrounds. JS doesn’t run in it and you don’t have access to its DOM. The only way to do that would be to use an inline SVG embedded in HTML and the element() CSS3 function. However, that’s only supported by Firefox, so not really a pragmatic option.&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry><entry>
    <title>twee+: Longer tweets, no strings attached</title>
    <link href="https://lea.verou.me/2011/08/tweeplus-longer-tweets-no-strings-attached/"/>
    <updated>2011-08-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1197</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2011/08/tweeplus-longer-tweets-no-strings-attached/images/tweeplus-300x200.png&quot; alt=&quot;&quot; title=&quot;tweeplus screenshot&quot; /&gt;As some people that have been following me for a while know, the 140 character limit on twitter bugs me a lot sometimes, and I’ve tried to find &lt;a href=&quot;http://lea.verou.me/2009/11/exploring-browser-supported-unicode-characters-and-a-tweet-shortening-experiment/&quot;&gt;a way to overcome it&lt;/a&gt; previously as well. The most common ways these days seems to be either cutting down the long tweet into multiple pieces (yuck) or using a service to host the longer tweet and post a summary with a link to it.&lt;/p&gt;
&lt;p&gt;The latter isn’t an entirely horrible option. However, I see 3 big downsides:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I’m not very comfortable with the idea of some external service hosting my content which could close down any time due to failure to monetize their website. In that case, I’d be left with some dead links that are of no value and my content would be lost forever. Yes, they usually warn you in advance in such cases, but such news could be missed for a number of reasons.&lt;/li&gt;
&lt;li&gt;People (including yours truly) don’t plan those things in advance. They just seek services like that at the exact moment when they want to post a long tweet. Being greeted with a prompt to use Twitter Connect is NOT nice. For starters, it slows me down. Also, I don’t want to give permission to every website on the effing interwebs to post on my twitter timeline. I owe it to my followers to be responsible and not risk filling their timelines with crap.&lt;/li&gt;
&lt;li&gt;Most of these websites look like someone puked and what came out happened to be HTML and CSS. The only exception I’ve found is &lt;a href=&quot;http://twtmore.com/&quot;&gt;twtmore&lt;/a&gt;, but it still suffers from #1 and #2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, like every developer with a healthy amount of NIH syndrome, I decided to write my own :D&lt;/p&gt;
&lt;p&gt;My goals were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It had to be entirely client-side (except initially getting downloaded from the server of course). This way, whoever is concerned can download the full website and decode their tweets with it if it ever goes down. Also, being entirely client side allows it to scale very easily, as serving files is not a very resource intensive job (compared to databases and the like).&lt;/li&gt;
&lt;li&gt;No Twitter Connect, the tweets would get posted through &lt;a href=&quot;https://dev.twitter.com/docs/intents&quot;&gt;Twitter Web Intents&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It had to look good. I’m not primarily a designer, so I can’t make something that looks jaw-droppingly amazing, but I can at least make it look very decent.&lt;/li&gt;
&lt;li&gt;If I was gonna go through all the hassle of making this, I may as well try to keep it under 10K, so that I could take part in the &lt;a href=&quot;http://10k.aneventapart.com/&quot;&gt;10K apart contest&lt;/a&gt;. (I haven’t submitted it yet, I’ll submit a few days before the deadline, as it seems you can’t make changes to your submission and I want to polish the code a bit, especially the JS — I’m not too proud about it)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I managed to succeed in all my goals and I really liked the result. I ended up using it for stuff I never imagined, like checking if a twitter username corresponds to the account I think (as it shows the avatars). So I went ahead and came up with a name, bought a domain for it, and &lt;a href=&quot;http://tweeplus.com/&quot;&gt;tweeplus.com&lt;/a&gt; was born :)&lt;/p&gt;
&lt;h2 id=&quot;twee%2B%3F-seriously%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/08/tweeplus-longer-tweets-no-strings-attached/#twee%2B%3F-seriously%3F&quot;&gt;twee+? Seriously?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, I like it. The plus means “more”, which is fitting and + kinda looks like a t, so it could be read as “tweet” as well. Yes, I know that the word “twee” has some negative connotations, but oh well, I still like the name. Whoever doesn’t can just not use it, I won’t get depressed, I promise. :P&lt;/p&gt;
&lt;h2 id=&quot;geeky-stuff&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/08/tweeplus-longer-tweets-no-strings-attached/#geeky-stuff&quot;&gt;Geeky stuff&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;how-it-works&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/08/tweeplus-longer-tweets-no-strings-attached/#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A relatively new feature, Twitter automatically wraps URLs in &lt;a href=&quot;http://t.co/&quot;&gt;t.co&lt;/a&gt; links, making them only 20 characters long.&lt;/li&gt;
&lt;li&gt;All the text of the tweet is stored in the URL hash (query string will also work, although the output uses a hash). Some research revealed that actually &lt;a href=&quot;http://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url&quot;&gt;browsers can handle surprisingly long URLs&lt;/a&gt;. Essentially, the only limit (2083 characters) is enforced by Internet Explorer. I decided to limit tweets to 2000 characters (encoded length), not only because of the IE limit, but also because I wouldn’t like people to post whole books in &lt;a href=&quot;http://t.co/&quot;&gt;t.co&lt;/a&gt; links. We don’t want Twitter to start taking measures against this, do we? :)&lt;/li&gt;
&lt;li&gt;A hard part was deciding which encoding to use (twitter is quite limited in the characters it parses as part of a URL).
&lt;ul&gt;
&lt;li&gt;My first thought was base64, but I quickly realized this was not a very good idea:
&lt;ul&gt;
&lt;li&gt;The encoding &amp;amp; decoding functions (&lt;code&gt;btoa()&lt;/code&gt; and &lt;code&gt;atob()&lt;/code&gt; respectively) are relatively new and therefore not supported by older browsers. I’m fine with the app hardly working in old browsers, but existing links must as a minimum be readable.&lt;/li&gt;
&lt;li&gt;It uses approximately 1.34 characters per ASCII character. Unicode characters need to be URL-encoded first, otherwise an Exception is thrown. URL-encoding them uses 6 characters, which would result in 8 characters when they’re base64 encoded.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Then I thought of using URL-encoding for the whole thing. The good thing with it is that for latin alphanumeric characters (which are the most) it doesn’t increase the string length at all. For non-alphanumeric characters it takes up 3 characters and 6 characters for Unicode ones. Also, it’s much more readable.&lt;/li&gt;
&lt;li&gt;Still, implementing it was tricky. It doesn’t encode some characters (like the dot), even though twitter doesn’t accept them as part of a URL. Also, escape() and encodeURI() behave differently and &lt;a href=&quot;http://twitter.com/#!/LeaVerou/status/101348203756130304&quot;&gt;the Unicode encoding returned by the former isn’t accepted by Twitter&lt;/a&gt;. So I had to combine the two and do some substitutions manually.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When the textarea changes, the hash does too. The whole thing is a form with action=“&lt;a href=&quot;http://twitter.com/intent/tweet&quot;&gt;http://twitter.com/intent/tweet&lt;/a&gt;”, so submitting it does the right thing naturally. I keep a hidden input with the tweet and the textarea has no name, so it doesn’t get submitted.&lt;/li&gt;
&lt;li&gt;Usernames, hashtags and URLs get extracted and linkified. Usernames also get an avatar (it’s dead easy: Just use &lt;a href=&quot;http://twitter.com/api/users/profile&quot;&gt;twitter.com/api/users/profile&lt;/a&gt;_image?screen_name={username} where {username} is the user’s username)&lt;/li&gt;
&lt;li&gt;Internal “pages” (like “About” or “Browser support”) are essentially long “tweets” too.&lt;/li&gt;
&lt;li&gt;A little easter egg is that if the browser supports radial gradients, the gradient follows the mouse, creating a spotlight effect. This looks nice on Chrome and Firefox, and really shitty on IE10, probably due to bugs in the gradient implementation (which I have to reduce &amp;amp; report sometime).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;buzzword-compliance&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/08/tweeplus-longer-tweets-no-strings-attached/#buzzword-compliance&quot;&gt;Buzzword compliance&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This little app demonstrates quite a lot new open web technologies (HTML5, CSS3 etc), such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;textarea maxlength&lt;/li&gt;
&lt;li&gt;placeholder&lt;/li&gt;
&lt;li&gt;autofocus (edit: I had to remove it cause it triggered a Webkit bug in Safari)&lt;/li&gt;
&lt;li&gt;required inputs&lt;/li&gt;
&lt;li&gt;New input types (url)&lt;/li&gt;
&lt;li&gt;History API&lt;/li&gt;
&lt;li&gt;oninput event (with &lt;a href=&quot;http://mathiasbynens.be/notes/oninput&quot;&gt;keyup fallback&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;hashchange event&lt;/li&gt;
&lt;li&gt;SVG&lt;/li&gt;
&lt;li&gt;Common CSS3 (border-radius, shadows, transitions, rgba, media queries)&lt;/li&gt;
&lt;li&gt;CSS3 gradients&lt;/li&gt;
&lt;li&gt;CSS3 animations&lt;/li&gt;
&lt;li&gt;CSS3 resize&lt;/li&gt;
&lt;li&gt;:empty&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if I forgot something.&lt;/p&gt;
&lt;p&gt;Oh yeah, I did forget something. There it is: &lt;a href=&quot;http://tweeplus.com/&quot;&gt;twee+&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Better “CSS3 ticket-like tags”</title>
    <link href="https://lea.verou.me/2011/08/better-css3-ticket-like-tags/"/>
    <updated>2011-08-15T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1210</id>
    <content xml:lang="en" type="html">&lt;p&gt;Today I stumbled upon &lt;a href=&quot;http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/quick-tip-create-pure-css3-ticket-like-tags/&quot;&gt;this&lt;/a&gt; tutorial, which from the screenshot, looked very interesting. So, I read on, and to my horror I noticed the author suggesting some questionable practices, the worst of which was using 3 HTML elements for every tag, including nonsense markup like &lt;code&gt;&amp;lt;span class=&amp;quot;circle&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, I thought I’d take a chance at trying to recreate this effect without any extra markup. And it turned out to be quite easy, although using CSS gradients limits browser support a bit (IE10, Firefox 3.6+, Chrome, Safari 5.1).&lt;/p&gt;
&lt;p&gt;They have the same disadvantage as the originals: They depend on the background color. However, unlike the originals, they come at less code, they’re scalable without changing a million values (as shown in the “bigger” section) and of course, no extra markup.&lt;/p&gt;
&lt;p&gt;You can see the results in &lt;a href=&quot;https://jsfiddle.net/leaverou/T9bmw/&quot;&gt;the fiddle&lt;/a&gt; below:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 400px&quot; src=&quot;https://jsfiddle.net/leaverou/T9bmw/embedded/result%2Ccss%2Chtml&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Disclaimer: &lt;a href=&quot;http://webdesign.tutsplus.com/&quot;&gt;webdesign tuts+&lt;/a&gt; occasionally has some nice tutorials. I didn’t write this post to attack them in any way.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Why I love our industry</title>
    <link href="https://lea.verou.me/2011/08/why-i-love-our-industry/"/>
    <updated>2011-08-17T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1225</id>
    <content xml:lang="en" type="html">&lt;p&gt;I was thinking today how blessed I feel for being a part of the worldwide web development community (and the broader programming community). In a world where throwing shit at others is an acceptable way of climbing to the top, our industry is a breeze of fresh air. Here are a few reasons why I find our industry unique, in a very good way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In which other industry is it common for people to spend several hours, days or in some cases even months, working on something to give it away for free, just to help people?&lt;/li&gt;
&lt;li&gt;In which other industry do people help you and promote you just because they think you’re good, without getting anything out of it?&lt;/li&gt;
&lt;li&gt;In which other industry do people listen to you, not because of your titles, degrees and “decades of experience”, but because of what you actually know?&lt;/li&gt;
&lt;li&gt;In which other industry can you go to a big professional conference with jeans and a t-shirt and be in the majority? (And the best part is, even if you don’t like that kind of outfit and you prefer to wear a suit, you still fit in, cause appearances just don’t matter)&lt;/li&gt;
&lt;li&gt;Judging whether someone’s work is good is a very rational and objective process (unlike arts). Sure, the various criteria have different weights for every person, but the criteria are the same for everyone, more or less (correctness, speed, maintainability, readability etc).&lt;/li&gt;
&lt;li&gt;Even though it’s a male dominated field, I’ve never* experienced any discrimination or lack of respect due to my gender. Quite the contrary actually.&lt;/li&gt;
&lt;li&gt;I’ve yet to meet a developer that lacks a sense of humor.&lt;/li&gt;
&lt;li&gt;Work for us is our passion, not a chore. Yes, there are passionate people in every field, but in our industry it’s the norm, not the exception.&lt;/li&gt;
&lt;li&gt;You don’t need to hide your geekiness. Instead, you’re encouraged to embrace it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, I know that not all of them are true for every single person that happened to be a web developer. I’m talking about the part of the industry that’s active and that I meet in conferences, meetups, twitter etc.&lt;/p&gt;
&lt;p&gt;So, what are &lt;strong&gt;your&lt;/strong&gt; reasons for liking our industry, if any? Lets keep this post happy and not whine about what we DON’T like please. :)&lt;/p&gt;
&lt;p&gt;*Well, except one bad joke once, but he recently said he’s sorry and his intentions were good throughout, so I don’t count it.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Accessible star rating widget with pure CSS</title>
    <link href="https://lea.verou.me/2011/08/accessible-star-rating-widget-with-pure-css/"/>
    <updated>2011-08-18T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1233</id>
    <content xml:lang="en" type="html">&lt;p&gt;For ages, we couldn’t utilize the sibling combinators (&lt;code&gt;~&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt;) to ease the pain of creating star rating widgets, because of &lt;a href=&quot;http://css-tricks.com/8439-webkit-sibling-bug/&quot;&gt;this stupid Webkit bug&lt;/a&gt;. Nowadays, not only it’s fixed, but the fix has already propagated to Chrome and Safari 5.1. So, we can at least use the sibling combinator to make coloring the stars easier.&lt;/p&gt;
&lt;p&gt;But can we use &lt;strong&gt;no JavaScript&lt;/strong&gt; for a rating widget and make it just with CSS?&lt;/p&gt;
&lt;p&gt;Actually, we can. By adapting &lt;a href=&quot;http://www.thecssninja.com/css/custom-inputs-using-css&quot;&gt;Ryan Seddon’s technique for custom radio buttons with CSS&lt;/a&gt;, we can turn a series of radio buttons into stars that change colors (for the purposes of this demo they’re just unicode characters that change colors, but in your case they may as well be images) and use the sibling combinator to color the previous stars. &lt;a href=&quot;http://twitter.com/#!/stephband/status/104159169657053184&quot;&gt;A&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/scottjehl/status/104194465480183808&quot;&gt;series&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/anselmhannemann/status/104176613159206912&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/hlb/status/104176520939044865&quot;&gt;radio&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/tomfullerton/status/104165058191433728&quot;&gt;buttons&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/leads/status/104161288279695360&quot;&gt;is&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/jamygolden/status/104158932267827201&quot;&gt;what&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/thijs/status/104158812684038144&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/rossbruniges/status/104157949064249344&quot;&gt;people&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/maskingtape/status/104157878230843392&quot;&gt;use&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/edge0703/status/104157335756341249&quot;&gt;as&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/rasmusfl0e/status/104157216029949955&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/stephenhay/status/104157128704540672&quot;&gt;star&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/derSchepp/status/104157124787060737&quot;&gt;rating&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/hzr/status/104160608848584704&quot;&gt;widget&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/iPaintCode/status/104161792925765633&quot;&gt;fallback&lt;/a&gt; anyway, so the markup required is not necessarily more than usual. The only thing that needs to be done differently is their reverse ordering: The highest ratings need to go first, due to the way CSS3 selectors work (this limitation might be removed in CSS4, but that’s a long way ahead).&lt;/p&gt;
&lt;p&gt;Of course, you’d still need JS to attach an event handler if you want the votes to be registered through AJAX, but that’s not part of the rating widget per se (it could still work as part of a regular form).&lt;/p&gt;
&lt;p&gt;What’s best is that it’s fully keyboard accessible (focus and then use keyboard arrows) and screen reader accessible (although VoiceOver will also pronounce the generated stars, but that won’t happen if you use images instead of unicode stars). I’m guessing it could become even more accessible with proper ARIA, but I’ll leave that as an exercise to the commenter :D&lt;/p&gt;
&lt;p&gt;In browsers that don’t support &lt;code&gt;:checked&lt;/code&gt; (essentially only IE &amp;lt; 9), it degrades to a series of radio buttons (haven’t verified that it does, but it should do).&lt;/p&gt;
&lt;p&gt;So, here it is:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 180px;&quot; src=&quot;https://jsfiddle.net/leaverou/CGP87/embedded/result%2Ccss%2Chtml/&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Legal note, for those who need it: This code is MIT licensed.&lt;/p&gt;
</content>
  </entry><entry>
    <title>To write good code, you sometimes have to write bad code</title>
    <link href="https://lea.verou.me/2011/08/to-write-good-code-you-sometimes-have-to-write-bad-code/"/>
    <updated>2011-08-20T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1242</id>
    <content xml:lang="en" type="html">&lt;p&gt;And I’m not referring to learning.&lt;/p&gt;
&lt;p&gt;For example, yesterday I was trying to write code for something and it ended up beng harder than I expected. It’s one of those rare cases where you can fully imagine how the solution should work, enough to tell it to another person, but you can’t put your thoughts to code and you feel you’re not smart enough.&lt;/p&gt;
&lt;p&gt;I find that in those cases, it helps a lot to open a new editor window and try to write code that just works. Without being elegant, fast or maintainable. Just something that works properly. And after you manage to put your thoughts into (bad) code, it’s easy to refine it from there and end up with good code.&lt;/p&gt;
&lt;p&gt;Just don’t stop at the bad code, like many beginners do. It’s like when designers sketch a rough draft for a logo, before drawing the digital version. Could you imagine how horrible it would be if they wanted to stop there and give the rough sketches to the client instead? :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>On URL readability</title>
    <link href="https://lea.verou.me/2011/08/on-url-readability/"/>
    <updated>2011-08-30T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1251</id>
    <content xml:lang="en" type="html">&lt;p&gt;Yesterday, I was watching some season 6 episodes of Futurama (btw, this is their best season ever!) and I noticed the URLs in the website I was in (let’s call it &lt;a href=&quot;http://foo.com/&quot;&gt;foo.com&lt;/a&gt;). They were like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://foo.com/futurama/season/6/episode/9&quot;&gt;http://foo.com/futurama/season/6/episode/9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I thought to myself “hey, this looks very clean and readable”. And then I noticed that it only has 1 less character than its non-rewritten counterpart:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://foo.com/?futurama&amp;amp;season=6&amp;amp;episode=9&quot;&gt;http://foo.com/?futurama&amp;amp;season=6&amp;amp;episode=9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, I’m pretty sure you agree that the second one is much harder to read. I &lt;a href=&quot;http://twitter.com/#!/LeaVerou/status/108356094467915776&quot;&gt;asked for opinions on twitter&lt;/a&gt;, and got many interesting replies. Apart from the ones that completely missed the point, these were the core explanations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;= and especially &amp;amp; are more complex and look more like letters, so our brain has trouble tuning them out (&lt;a href=&quot;http://twitter.com/#!/feather/status/108358461888270337&quot;&gt;@feather&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/robert_tilt/status/108410782777229312&quot;&gt;@robert_tilt&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/rexxars/status/108427976768622592&quot;&gt;@rexxars&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/mrtazz/status/108431965241360384&quot;&gt;@mrtazz&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/manchurian/status/108545434011705344&quot;&gt;@manchurian&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Slashes have more whitespace around them, so they are less obtrusive (&lt;a href=&quot;http://twitter.com/#!/feather/status/108357826916794368&quot;&gt;@feather&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/stevelove/status/108393480488878080&quot;&gt;@stevelove&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/kenny1987/status/108415712292388864&quot;&gt;@kenny1987&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/janl/status/108432181549989888&quot;&gt;@janl&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;They’re all visual noise, but we always have slashes in a URL, so using the slash to separate keys and values as well only introduces 1 separator instead of 3 (&lt;a href=&quot;http://twitter.com/#!/Bugster/status/108356318741528577&quot;&gt;@bugster&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/craigpatik/status/108360564924874752&quot;&gt;@craigpatik&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/nyaray/status/108409202522861568&quot;&gt;@nyaray&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Slashes imply hierarchy, which our brains process easier than key-value pairs. Key-value pairs could be in any order, paths have a specified order. (&lt;a href=&quot;http://twitter.com/#!/sggottlieb/status/108356697109700609&quot;&gt;@sggottlieb&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/edwelker/status/108357422292283393&quot;&gt;@edwelker&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/stephenhay/status/108410752469180417&quot;&gt;@stevenhay&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/jwajsberg/status/108420275258916864&quot;&gt;@jwasjsberg&lt;/a&gt; &lt;a href=&quot;http://twitter.com/#!/stazybohorn/status/108518754878623744&quot;&gt;@stazybohorn&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ampersands and equal signs are harder to type than slashes. They’re both in the top row and ampersands even need the Shift key as well. (&lt;a href=&quot;http://twitter.com/#!/feather/status/108358640787927040&quot;&gt;@feather&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ampersands and equal signs have semantic meaning in our minds, whereas slashes not as much (&lt;a href=&quot;http://twitter.com/#!/snadon/status/108394403164467200&quot;&gt;@snadon&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding hierarchy and RESTful design, the first example isn’t exactly correct. If it was hierarchical, it should be &lt;a href=&quot;http://foo.com/futurama/season&quot;&gt;foo.com/futurama/season&lt;/a&gt;&lt;strong&gt;s&lt;/strong&gt;/6/episode&lt;strong&gt;s&lt;/strong&gt;/9. As it currently stands, it’s key-value pairs, masquerading as hierarchical. However, it still reads better.&lt;/p&gt;
&lt;p&gt;So I’m leaning towards the first three explanations, although I think all of them have a grain of truth. Which makes me wonder: Did we choose the wrong characters for our protocol? Could we have saved ourselves the hassle and performance overhead of URL rewriting if we were a bit more careful in choosing the separators back then?&lt;/p&gt;
&lt;p&gt;Also, some food for thought: Where do you think the following URLs stand in the legibility scale?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://foo.com/futurama/season=6/episode=9&quot;&gt;http://foo.com/futurama/season=6/episode=9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://foo.com/futurama/season:6/episode:9&quot;&gt;http://foo.com/futurama/season:6/episode:9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;http : &lt;a href=&quot;https://foo.com/futurama-season-6-episode-9&quot;&gt;//foo.com/futurama-season-6-episode-9&lt;/a&gt;  (suggested by Ben Alman)&lt;/p&gt;
&lt;p&gt;Do you think there are there any explanations that I missed?&lt;/p&gt;
</content>
  </entry><entry>
    <title>CSS.coloratum: Convert and share CSS colors</title>
    <link href="https://lea.verou.me/2011/09/css-coloratum-convert-and-share-css-colors/"/>
    <updated>2011-09-02T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1257</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2011/09/css-coloratum-convert-and-share-css-colors/images/shot1-300x200.png&quot; alt=&quot;&quot; title=&quot;screenshot&quot; /&gt;Whenever I wanted to convert a CSS named color to RGB, I used to open &lt;a href=&quot;http://www.w3.org/TR/css3-color/&quot;&gt;the CSS3 colors spec&lt;/a&gt; in a new tab, search in the page and copied the values. Every time it felt even more tedious. I didn’t want to search in long tables, I wanted to type the color somewhere and get the values back, in an easy to copy format. So, after yet another color lookup earlier today, I decided to scratch my own itch and do it myself.&lt;/p&gt;
&lt;p&gt;Of course, I didn’t plan to include a whole database of CSS colors in the website. My idea was much simpler: Use the named color to draw a rectangle in a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; and then read the R,G,B values through ctx.getImageData().&lt;/p&gt;
&lt;p&gt;I got the core functionality done in under 10 minutes, so I started adding stuff. I added a hex and HSL representation, I used canvas.toDataURL() to get a data URI of the rectangle and use it as a dynamic favicon*, I made the colors sharable and bookmarkable by using an old-fashioned hash. Also, I realized it actually supports any CSS supported color represenation by design, not just named colors.&lt;/p&gt;
&lt;p&gt;Regarding the color conversions themselves, I took extra care to avoid redundancy. So values &amp;lt; 1 don’t have leading zeroes (.5 instead of 0.5) and when the hex color is in the format #xxyyzz it gets converted to #xyz. When it’s an RGBA color, it still converts it to hex, since those values will be supported in CSS4.&lt;/p&gt;
&lt;p&gt;Since it’s for developers, I didn’t bother at all with fallbacks.&lt;/p&gt;
&lt;p&gt;Cool stuff used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML5: canvas, autofocus, output, oninput event, hashchange event&lt;/li&gt;
&lt;li&gt;CSS3: gradients, media queries, box-sizing, background-clip, border-radius, shadows, RGBA&lt;/li&gt;
&lt;li&gt;ES5: Array#map()&lt;/li&gt;
&lt;li&gt;Selectors API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason the input’s border appears weird on Webkit is &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=63952&quot;&gt;this long standing Webkit bug&lt;/a&gt;. Also, for some reason my nice dynamic favicons don’t display on Firefox, although they display fine in Webkit and Opera.&lt;/p&gt;
&lt;p&gt;Enjoy: &lt;a href=&quot;http://css.coloratum.com/&quot;&gt;CSS.coloratum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happy color sharing! Let me know of any problems or suggestions you may have.&lt;/p&gt;
&lt;p&gt;PS: In case you’re wondering about the domain, I’ve had it for ages for another project and I thought it was quite fitting.&lt;/p&gt;
&lt;p&gt;*Thanks to &lt;a href=&quot;http://twitter.com/milo&quot;&gt;@milo&lt;/a&gt; for giving me the idea of using a dynamic favicon&lt;/p&gt;
</content>
  </entry><entry>
    <title>Pure CSS3 typing animation with steps()</title>
    <link href="https://lea.verou.me/2011/09/pure-css3-typing-animation-with-steps/"/>
    <updated>2011-09-05T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1269</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;http://dev.w3.org/csswg/css3-animations/#animation-timing-function&quot;&gt;steps()&lt;/a&gt; is a relatively new addition to the CSS3 animations module. Instead of interpolating the values smoothly, it allows us to define the number of “frames” precisely. So I used it to create headers that have the well-known animated “typing effect”:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 160px&quot; src=&quot;https://jsfiddle.net/leaverou/7rnQP/embedded/result%2Ccss%2Chtml&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;As you can see, the number of characters is hardcoded in the steps() function, but that’s the only place. Everything else is totally flexible. Apart from the font: It has to be monospace, so that every character has the same width.&lt;/p&gt;
&lt;p&gt;Also, this particular way requires a solid background and an extra &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;. You can avoid these limitations by directly animating the width of the heading itself, but this requires a fixed target width hardcoded in the animation, so 2 things that need to be changed for every heading:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 160px&quot; src=&quot;https://jsfiddle.net/leaverou/y8kNx/embedded/result%2Ccss%2Chtml&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;If you’re having trouble understanding how it works, take a look at &lt;a href=&quot;https://jsfiddle.net/leaverou/vrEnp/&quot;&gt;this simpler example&lt;/a&gt;, with just the cursor.&lt;/p&gt;
&lt;p&gt;Gecko (Firefox) and Webkit only at the moment, since other engines haven’t implemented CSS animations yet. However, both examples degrade very gracefully in other browsers (IMO at least).&lt;/p&gt;
</content>
  </entry><entry>
    <title>Help the community: report browser bugs</title>
    <link href="https://lea.verou.me/2011/09/help-the-community-report-browser-bugs/"/>
    <updated>2011-09-07T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1282</id>
    <content xml:lang="en" type="html">&lt;p&gt;Thought I’d let you know that &lt;a href=&quot;https://www.smashingmagazine.com/2011/09/help-the-community-report-browser-bugs/&quot;&gt;my Smashing Magazine article with that title&lt;/a&gt; was published today. It discusses why, how, when and where to report browser bugs, as well as how to make a good bug report.&lt;/p&gt;
&lt;p&gt;Get comfortable and make a big cup of coffee before you dive in, as it’s quite long (4000 words).&lt;/p&gt;
</content>
  </entry><entry>
    <title>Chainvas: Make APIs chainable, enhance the canvas API</title>
    <link href="https://lea.verou.me/2011/09/chainvas-make-apis-chainable-enhance-the-canvas-api/"/>
    <updated>2011-09-11T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1288</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2011/09/chainvas-make-apis-chainable-enhance-the-canvas-api/images/chainvas.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2011/09/chainvas-make-apis-chainable-enhance-the-canvas-api/images/chainvas-300x228.png&quot; alt=&quot;&quot; title=&quot;chainvas page screenshot&quot; /&gt;&lt;/a&gt;It’s definitely not the first time someone writes a script to make the canvas API chainable, as &lt;a href=&quot;http://www.google.com/search?sourceid=chrome&amp;amp;ie=UTF-8&amp;amp;q=chainable+canvas&quot;&gt;a quick Google search&lt;/a&gt; will confirm.&lt;/p&gt;
&lt;p&gt;However, I think my attempt has merit, because it’s not really focused in chaining canvas methods, but just about every API you use it on and because it’s super small, only 1KB!&lt;/p&gt;
&lt;p&gt;You can find it here: &lt;a href=&quot;http://lea.verou.me/chainvas/&quot;&gt;chainvas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
  </entry><entry>
    <title>A better tool for cubic-bezier() easing</title>
    <link href="https://lea.verou.me/2011/09/a-better-tool-for-cubic-bezier-easing/"/>
    <updated>2011-09-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1293</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2011/09/a-better-tool-for-cubic-bezier-easing/images/Screen-shot-2011-09-14-at-10.33.11-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2011/09/a-better-tool-for-cubic-bezier-easing/images/Screen-shot-2011-09-14-at-10.33.11--300x204.png&quot; alt=&quot;&quot; title=&quot;Screenshot of cubic-bezier.com&quot; /&gt;&lt;/a&gt;A few days ago, I had a talk at &lt;a href=&quot;http://frontendconf.ch/&quot;&gt;a conference in Zurich&lt;/a&gt; (I’m going to write more about it in another post). The talk was about “10 things you might not know about CSS3”. The first of those things was how you can do bouncing transitions with cubic-bezier() instead of an easing keyword. As usual, my slides included a few live demos of the functionality, in which I edited the cubic-bezier() parameters and the audience could see the transition produced.&lt;/p&gt;
&lt;p&gt;However, in the case of cubic-bezier() that’s not enough. No matter how much you see someone changing the parameters, if you don’t picture it in a 2D plane, it’s very hard to understand how it works. So, the night before, I searched for a tool I could use to show them how bezier curves are formed. I found plenty, but all of them restricted the the coordinates to the 0-1 range. I’m not sure if the cause is ignorance about the spec changes or that Webkit hasn’t caught up with those changes yet (&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=45761&quot;&gt;but it will, soon&lt;/a&gt;). The only one that supported values out of range was &lt;a href=&quot;http://scope.bitbucket.org/ui-elements/bezier-control/index.xml&quot;&gt;this one&lt;/a&gt; from the Opera Dragonfly developers, but I found it kinda impossible to adapt.&lt;/p&gt;
&lt;p&gt;For my talk, I tried to adapt one of them but it was late so I gave up after a while and ended up just showing them a screenshot. And the day after the talk, I started adapting &lt;a href=&quot;http://www.roblaplaca.com/examples/bezierBuilder/&quot;&gt;this&lt;/a&gt; to my needs (ever tried coding at a conference? It’s awesome, you get to ask questions from very knowledgeable people and ger replies straight away). And then I started cleaning up the code, changing how it worked, adding features. At this point, I think the only thing that’s left from that tool is …the HTML5 doctype. After 3-4 days, I finished it, and got it its own domain, &lt;a href=&quot;http://cubic-bezier.com/&quot;&gt;cubic-bezier.com&lt;/a&gt; (I was surprised it was still free).&lt;/p&gt;
&lt;h2 id=&quot;so%2C-in-a-nutshell%2C-what-makes-this-better%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/09/a-better-tool-for-cubic-bezier-easing/#so%2C-in-a-nutshell%2C-what-makes-this-better%3F&quot;&gt;So, in a nutshell, what makes this better?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lots of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It supports y values out of range, as per &lt;a href=&quot;http://dev.w3.org/csswg/css3-transitions/#transition-timing-function&quot;&gt;the latest version of the spec&lt;/a&gt; (and shows a warning for Webkit)&lt;/li&gt;
&lt;li&gt;It’s fully accessible from the keyboard&lt;/li&gt;
&lt;li&gt;You can move the handles not only by dragging but also by clicking on the plane or using the keyboard arrow keys&lt;/li&gt;
&lt;li&gt;You can mouse over the plane and see the progression and time percentages that correspond to every point&lt;/li&gt;
&lt;li&gt;You can save curves you like in your “Library” (uses localStorage to persist them)&lt;/li&gt;
&lt;li&gt;You can import and export curves to/from your library to share them with others&lt;/li&gt;
&lt;li&gt;You can share a permalink to every curve. For example, &lt;a href=&quot;http://cubic-bezier.com/#.64,.57,.67,1.53&quot;&gt;here’s a bouncing transition&lt;/a&gt; (FF &amp;amp; Opera only)&lt;/li&gt;
&lt;li&gt;You can compare the current curve with any in your library, setting the duration yourself&lt;/li&gt;
&lt;li&gt;Custom favicon that reflects the current curve&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cool-stuff-used&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/09/a-better-tool-for-cubic-bezier-easing/#cool-stuff-used&quot;&gt;Cool stuff used&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given that this tool is not only for developers, but for badass developers that care about stuff like cubic-bezier(), I think I can safely assume they’re using a top notch browser. So, I went crazy with using cool modern stuff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML5: Canvas, localStorage, History API, range inputs, oninput event, output, classList, data- attributes&lt;/li&gt;
&lt;li&gt;ES5: Accessors, Array#map, Array#forEach&lt;/li&gt;
&lt;li&gt;Selectors API&lt;/li&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;CSS3: Transitions, gradients, media queries, border-radius, shadows, :in-range pseudoclass, box-sizing, transforms, text-overflow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also used my tiny chaining framework, &lt;a href=&quot;http://lea.verou.me/chainvas&quot;&gt;Chainvas&lt;/a&gt; throughout this project.&lt;/p&gt;
&lt;h2 id=&quot;browser-support&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/09/a-better-tool-for-cubic-bezier-easing/#browser-support&quot;&gt;Browser support&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So far, I’ve tested it in modern versions of Chrome, Firefox, Opera and Safari and it seems to work. I haven’t tested it in IE10 (too lazy to open vm), although I want it to work there too, so if it doesn’t let me know. :)&lt;/p&gt;
&lt;p&gt;Enjoy! &lt;a href=&quot;http://cubic-bezier.com/&quot;&gt;cubic-bezier.com&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Major update to Chainvas: modularity, a client side build script &amp; more</title>
    <link href="https://lea.verou.me/2011/09/major-update-to-chainvas-modularity-a-client-side-build-script-more/"/>
    <updated>2011-09-18T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1306</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2011/09/major-update-to-chainvas-modularity-a-client-side-build-script-more/images/Screen-shot-2011-11-15-at-14.57.17-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2011/09/major-update-to-chainvas-modularity-a-client-side-build-script-more/images/Screen-shot-2011-11-15-at-14.57.17--300x187.png&quot; alt=&quot;&quot; title=&quot;Chainvas project page screenshot&quot; /&gt;&lt;/a&gt;A week ago, &lt;a href=&quot;http://lea.verou.me/2011/09/chainvas-make-apis-chainable-enhance-the-canvas-api/&quot;&gt;I released Chainvas&lt;/a&gt;. It was a spin-off script I wrote while developing &lt;a href=&quot;http://lea.verou.me/2011/09/a-better-tool-for-cubic-bezier-easing/&quot;&gt;my cubic-bezier tool&lt;/a&gt;, to make using the Canvas API a bit less painful. However, unlike similar attempts to make the Canvas API chainable, most of my code was written in a very generic manner, and was actually able to make every API chainable. However, when I released it, even though I mentioned that it can be used for other APIs and provided some examples, practically everyone that shared the link on twitter or other means (thank you .net magazine for the newsletter mention btw!) focused on what Chainvas did for Canvas.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://lea.verou.me/chainvas/img/madewith.png&quot; alt=&quot;&quot; /&gt;Actually, while using Chainvas myself, I found it immensely more useful for chaining DOM methods and setting multiple element properties at once. Chainvas had a lot of potential, that most people were missing. And then it dawned on me: I should modularize the library! A generic chaining library at its core and additional modules for making the different APIs chainable. And I did it.&lt;/p&gt;
&lt;p&gt;On the way to that, I added IE8 compatibility, and tested in many other browsers, thanks to &lt;a href=&quot;http://www.browserstack.com/&quot;&gt;Browserstack&lt;/a&gt;. I actually found that Chainvas’ core even works in IE6! I also wrote &lt;a href=&quot;http://lea.verou.me/chainvas/unit-tests.html&quot;&gt;unit tests&lt;/a&gt;, a much more extensive &lt;a href=&quot;http://lea.verou.me/chainvas/#documentation&quot;&gt;documentation&lt;/a&gt;, added a script generated table of contents and designed &lt;a href=&quot;http://lea.verou.me/chainvas/img/logo.svg&quot;&gt;a logo&lt;/a&gt; and a &lt;a href=&quot;http://lea.verou.me/chainvas/img/madewith.svg&quot;&gt;Chainvas pride banner&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, since it was now modular, it needed a build script. I badly wanted to make this client side, so I followed this architecture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every module is included in chainvas.js and chainvas.min.js, along with a header comment that follows &lt;a href=&quot;http://lea.verou.me/chainvas/#making-your-own-modules&quot;&gt;a specific syntax&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The user selects a compression level and then, the relevant script is downloaded through XHR and split into parts according to the module headers. Then a module list is generated with checkboxes for the user to select the ones they want to include.&lt;/li&gt;
&lt;li&gt;When the user checks and unchecks those checkboxes, the URL of the download link changes to a data URI that contains the script.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This approach has the disadvantage that there is no default filename, and the “Save page as…” link is deactivated in Chrome (why Chrome??). However, I like the idea so much, I don’t mind these shortcomings.&lt;/p&gt;
&lt;p&gt;That’s about it. &lt;a href=&quot;http://lea.verou.me/chainvas/#documentation&quot;&gt;Enjoy&lt;/a&gt; and let me know about any bugs.&lt;/p&gt;
</content>
  </entry><entry>
    <title>My experience from Frontendconf Zurich</title>
    <link href="https://lea.verou.me/2011/09/my-experience-from-frontendconf-zurich/"/>
    <updated>2011-09-20T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1323</id>
    <content xml:lang="en" type="html">&lt;p&gt;I’m writing this blog post while eating some of the amazing Lindt chocolates I got for free 10 days ago at &lt;a href=&quot;http://frontendconf.ch/&quot;&gt;Frontend conference in Zurich&lt;/a&gt;. But it wasn’t a good experience only because of them!&lt;/p&gt;
&lt;p&gt;First of all, it gave me the opportunity to visit Zurich for free, and meet an old friend for the first time. A girl we used to be penpals with at primary school &amp;amp; junior high when she was still living in Athens and I in Lesvos. She is now living in Zurich and doing her PhD in ETH. I arrived in Zurich a day earlier and stayed in her place that first night. We caught up and I had a great time.&lt;/p&gt;
&lt;p&gt;Secondly, the rest of the speakers are great people and fun too, it was a pleasure to meet them. Especially &lt;a href=&quot;http://smashingmagazine.com/&quot;&gt;Smashing Magazine&lt;/a&gt;’s Vitaly Friedman. He’s a very kind guy, nothing like what you’d expect from somebody so successful. I also got the chance to meet &lt;a href=&quot;http://robertnyman.com/&quot;&gt;Robert&lt;/a&gt; again, who was lots of fun as always. Those Swedes have a great sense of humor!&lt;/p&gt;
&lt;p&gt;The conference itself was very nice, although small (only 200 people). Many inspiring talks, although I couldn’t attend them all because they were split into multiple tracks in one day. I would very much prefer it if it had 1 track and was 2 days. The 2nd day was an unconference, where attendees could speak, about whatever they wanted. I decided to get some sleep the second day, so I arrived a bit later, and didn’t attend many talks. It was kinda sad that it finished so early, around 4pm almost everyone was gone and most speakers were flying back the same day.&lt;/p&gt;
&lt;p&gt;My talk went great, although I had the most technical glitches I’ve ever faced in a talk. That was my fault, not the conference’s. I guess I should learn to stop tweaking my slides at the last moment, cause things might break (and this time they did). Despite those glitches however, the audience loved it. Here’s a small sample of the twitter feedback I got:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/frontendconfch/status/112089631616532480&quot;&gt;https://twitter.com/frontendconfch/status/112089631616532480&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/FabianBeiner/status/112089949096001536&quot;&gt;https://twitter.com/FabianBeiner/status/112089949096001536&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/michalbe/status/112090281519751168&quot;&gt;https://twitter.com/michalbe/status/112090281519751168&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jfahrenkrug/status/112091377571074048&quot;&gt;https://twitter.com/jfahrenkrug/status/112091377571074048&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/kcornelius/status/112091409833668608&quot;&gt;https://twitter.com/kcornelius/status/112091409833668608&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/backflip/status/112091599823056896&quot;&gt;https://twitter.com/backflip/status/112091599823056896&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/cainvommars/status/112091892581285888&quot;&gt;https://twitter.com/cainvommars/status/112091892581285888&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/euklid/status/112093174897459200&quot;&gt;https://twitter.com/euklid/status/112093174897459200&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/shvi/status/112095896040243200&quot;&gt;https://twitter.com/shvi/status/112095896040243200&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/lorentzforce/status/112096221350461441&quot;&gt;https://twitter.com/lorentzforce/status/112096221350461441&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mettlerd/status/112101440541032448&quot;&gt;https://twitter.com/mettlerd/status/112101440541032448&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/FabianBeiner/status/112101569058713600&quot;&gt;https://twitter.com/FabianBeiner/status/112101569058713600&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jfahrenkrug/status/112101867424718848&quot;&gt;https://twitter.com/jfahrenkrug/status/112101867424718848&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jfahrenkrug/status/112103061736009729&quot;&gt;https://twitter.com/jfahrenkrug/status/112103061736009729&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/Schnitzel/status/112103388187070464&quot;&gt;https://twitter.com/Schnitzel/status/112103388187070464&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/marcoegli/status/112103726835175424&quot;&gt;https://twitter.com/marcoegli/status/112103726835175424&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/FabianBeiner/status/112103972227133440&quot;&gt;https://twitter.com/FabianBeiner/status/112103972227133440&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mauricenaef/status/112104694171705344&quot;&gt;https://twitter.com/mauricenaef/status/112104694171705344&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/lulezi/status/112105754789560320&quot;&gt;https://twitter.com/lulezi/status/112105754789560320&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/smash%5C_it%5C_on/status/112107410155515904&quot;&gt;https://twitter.com/smash&#92;_it&#92;_on/status/112107410155515904&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/walktheweb/status/112107790918615040&quot;&gt;https://twitter.com/walktheweb/status/112107790918615040&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/andypanix/status/112113881966579712&quot;&gt;https://twitter.com/andypanix/status/112113881966579712&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/lorentzforce/status/112121470355914752&quot;&gt;https://twitter.com/lorentzforce/status/112121470355914752&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/loleg/status/112126016213876738&quot;&gt;https://twitter.com/loleg/status/112126016213876738&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/whitefleaCH/status/112132969468137472&quot;&gt;https://twitter.com/whitefleaCH/status/112132969468137472&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/Juztin/status/112195913929326592&quot;&gt;https://twitter.com/Juztin/status/112195913929326592&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/codepo8/status/112252082718916608&quot;&gt;https://twitter.com/codepo8/status/112252082718916608&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/derSchepp/status/112275821703602176&quot;&gt;https://twitter.com/derSchepp/status/112275821703602176&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/susanjrobertson/status/112286939964641280&quot;&gt;https://twitter.com/susanjrobertson/status/112286939964641280&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you read the above carefully, you might have noticed that my talk was recorded, so you can see it too. :) Enjoy!&lt;/p&gt;
</content>
  </entry><entry>
    <title>PrefixFree: Break free from CSS prefix hell!</title>
    <link href="https://lea.verou.me/2011/10/prefixfree-break-free-from-css-prefix-hell/"/>
    <updated>2011-10-12T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1365</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2011/10/prefixfree-break-free-from-css-prefix-hell/images/Screen-shot-2011-11-15-at-14.33.38-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2011/10/prefixfree-break-free-from-css-prefix-hell/images/Screen-shot-2011-11-15-at-14.33.38--300x187.png&quot; alt=&quot;&quot; title=&quot;-prefix-free project page screenshot&quot; /&gt;&lt;/a&gt;I wrote this script while at the airport travelling to Oslo and during the &lt;a href=&quot;http://www.frontend2011.com/&quot;&gt;Frontend 2011 conference&lt;/a&gt;. I think it’s amazing, and it makes authoring CSS3 a pleasure.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://coding.smashingmagazine.com/2011/10/12/prefixfree-break-free-from-css-prefix-hell/&quot;&gt;Read my announcement about it on Smashing Magazine.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hope you like it!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Easily keep gh-pages in sync with master</title>
    <link href="https://lea.verou.me/2011/10/easily-keep-gh-pages-in-sync-with-master/"/>
    <updated>2011-10-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1368</id>
    <content xml:lang="en" type="html">&lt;p&gt;I always loved Github’s ability to publish pages for a project and get the strain out of your server. However, every time I tried it, I struggled to keep the gh-pages branch up to date. Until I discovered the awesome &lt;code&gt;git rebase&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Usually my github workflow is like this:&lt;/p&gt;
&lt;p&gt;git add .
git status // to see what changes are going to be commited
git commit -m ‘Some descriptive commit message’
git push origin master&lt;/p&gt;
&lt;p&gt;Now, when I use gh-pages, there are only a few more commands that I have to use after the above:&lt;/p&gt;
&lt;p&gt;git checkout gh-pages // go to the gh-pages branch
git rebase master // bring gh-pages up to date with master
git push origin gh-pages // commit the changes
git checkout master // return to the master branch&lt;/p&gt;
&lt;p&gt;I know this is old news to some of you (I’m a github n00b, struggling with basic stuff, so my advice is probably for other n00bs), but if I had read this a few months ago, it would’ve saved me big hassles, so I’m writing it for the others out there that are like me a few months ago.&lt;/p&gt;
&lt;p&gt;Now if only I find an easy way to automate this… :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Optimizing long lists of yes/no values with JavaScript</title>
    <link href="https://lea.verou.me/2011/10/optimizing-long-lists-of-yesno-values-with-javascript/"/>
    <updated>2011-10-19T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1373</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;http://coding.smashingmagazine.com/2011/10/19/optimizing-long-lists-of-yesno-values-with-javascript/&quot;&gt;My newest article on Smashing Magazine’s coding section&lt;/a&gt; is for the geekiest among you. It’s about how you can pack long lists of boolean values into a string in the most space-efficient way. Hope you enjoy it :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>My experience from Fronteers, JSConf EU, Frontend and FromTheFront</title>
    <link href="https://lea.verou.me/2011/10/my-experience-from-fronteers-jsconf-eu-frontend-and-fromthefront/"/>
    <updated>2011-10-21T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1377</id>
    <content xml:lang="en" type="html">&lt;p&gt;This month has been very busy conference-wise. I had 4 conferences in a row, so I was flying from country to country and giving talks for 2 weeks. As I usually do after conferences, this post sums up my experiences and feedback I got from these conferences, in chronological order.&lt;/p&gt;
&lt;h2 id=&quot;fromthefront&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/10/my-experience-from-fronteers-jsconf-eu-frontend-and-fromthefront/#fromthefront&quot;&gt;&lt;a href=&quot;http://conf2011.fromthefront.it/&quot;&gt;FromTheFront&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was a rather low-budget Italian conference that took place in Cesena, a city near Bologna. Despite the extremely low ticket price, they managed to pull off a very decent one day conference, which is very admirable. Italian food is so good that I’d recommend visiting this country even if it’s just for the food! They were very nice hosts, and I thoroughly enjoyed my time there.&lt;/p&gt;
&lt;p&gt;My talk was right after &lt;a href=&quot;http://adactio.com/&quot;&gt;Jeremy Keith&lt;/a&gt;’s, who is a very well-known and experienced speaker that knows how to make audiences delirious (in a good way), so I was naturally a bit nervous about the unavoidable comparison. Despite my fears, my talk was very well received. Here’s a sample of the twitter feedback I got:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/cedmax/status/119499350039740416&quot;&gt;https://twitter.com/cedmax/status/119499350039740416&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/caludio/status/119500241358696448&quot;&gt;https://twitter.com/caludio/status/119500241358696448&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/andypanix/status/119502579943223296&quot;&gt;https://twitter.com/andypanix/status/119502579943223296&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/verlok/status/119511814827556864&quot;&gt;https://twitter.com/verlok/status/119511814827556864&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/fburatti/status/119512158500433921&quot;&gt;https://twitter.com/fburatti/status/119512158500433921&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/Facens/status/119513991616794624&quot;&gt;https://twitter.com/Facens/status/119513991616794624&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/matteocollina/status/119506533548699648&quot;&gt;https://twitter.com/matteocollina/status/119506533548699648&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;jsconf-eu&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/10/my-experience-from-fronteers-jsconf-eu-frontend-and-fromthefront/#jsconf-eu&quot;&gt;&lt;a href=&quot;http://jsconf.eu/2011/&quot;&gt;JSConf EU&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next stop was Berlin and JSConf’s European sister conference. This was one of the most well organized conferences I’ve been to: The food, the coffee, the afterparties, the wifi, the projectors, everything was top notch. Also, it had a get-together the day after the conference (called “hangover.js”) which I think is great and more conferences should start adopting this tradition. It eases the pain of the conference being over and you get to say goodbye to a few folks you weren’t able to catch at the afterparty. It also featured many cool ideas, like a gal drawing live visualizations of the talks (&lt;a href=&quot;http://www.flickr.com/photos/frauleinschiller/6237396700/in/set-72157627752113223/&quot;&gt;Here’s mine&lt;/a&gt;) and &lt;a href=&quot;http://vimeo.com/29873668&quot;&gt;a singer to open the conference in the first day singing a song to …Brendan Eich&lt;/a&gt; (!). I made new friends, had lots of fun and everything was awesome.&lt;/p&gt;
&lt;p&gt;I was a bit more nervous about my talk for two reasons: Firstly, it was my first JavaScript talk, and secondly, it had no live demos like my CSS talks, which is a big part of why people like them. It went much better than I expected, and I got very good feedback and even though I went hugely overtime (I had 30 minutes and did 55!) nobody complained. Thankfully, it was right before lunch so I didn’t eat up another speaker’s time (which is part of the reason I love the pre-lunch spot so much).  I didn’t get the super-enthusiastic feedback I get from my CSS talks, but it was good enough to not be disappointed. Here’s a sample:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/codepo8/status/120450328318590976&quot;&gt;https://twitter.com/codepo8/status/120450328318590976&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/WebReflection/status/120457934152007680&quot;&gt;https://twitter.com/WebReflection/status/120457934152007680&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nddrylliog/status/120457956830621696&quot;&gt;https://twitter.com/nddrylliog/status/120457956830621696&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/cramforce/status/120459076604928000&quot;&gt;https://twitter.com/cramforce/status/120459076604928000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/wpbasti/status/120462654316883968&quot;&gt;https://twitter.com/wpbasti/status/120462654316883968&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/claudiopro/status/120465480380203008&quot;&gt;https://twitter.com/claudiopro/status/120465480380203008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/VeganBen/status/120466919001300992&quot;&gt;https://twitter.com/VeganBen/status/120466919001300992&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nddrylliog/status/120469327110619137&quot;&gt;https://twitter.com/nddrylliog/status/120469327110619137&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can find my slides on &lt;a href=&quot;http://speakerdeck.com/u/leaverou/p/polyfilling-the-gaps&quot;&gt;Speakerdeck&lt;/a&gt; , &lt;a href=&quot;http://www.slideshare.net/LeaVerou/polyfilling-the-gaps&quot;&gt;Slideshare&lt;/a&gt; or &lt;a href=&quot;http://talks.verou.me/polyfilling-the-gaps&quot;&gt;the HTML version on my website&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;fronteers&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/10/my-experience-from-fronteers-jsconf-eu-frontend-and-fromthefront/#fronteers&quot;&gt;&lt;a href=&quot;http://fronteers.nl/congres/2011&quot;&gt;Fronteers&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was looking forward to Fronteers the most, since it’s my favorite conference. It might not be the one with the most money or the biggest, but it has a special place in my heart for a number of different reasons (not all of which I can write in a public blog post). It was the first international conference I ever attended (in 2010) and I’ve met there so many people I used to only know (and admire) as a name &amp;amp; avatar before. It’s the conference I’ve had the most fun at, in both years I’ve been there. Everyone, the volunteers, the attendees, the speakers, everyone is awesome. There is something magic about this conference, as most of its speakers and attendees think about it in the same way (Christian Heilmann for example calls it “his special conference” and he goes to A LOT of conferences). It doesn’t just feel like a professional conference, it feels like a big, loving, open, web development family that gets together once a year to celebrate the advances in our field.&lt;/p&gt;
&lt;p&gt;But this time, I wasn’t just an attendee. I wasn’t a regular speaker either. I was also hosting a workshop, my first full day workshop. I was super stressed about that, and in retrospect, it was the most exhausting thing I have ever done. Some other speakers told me it felt so exhausting because it was my first, I really hope they’re right. Luckily, attendees loved it, and they didn’t seem to notice my progressively getting tired after the 4th hour. Here’s some of the feedback I got:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/flyingpinguin/status/121507980964409346&quot;&gt;https://twitter.com/flyingpinguin/status/121507980964409346&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/V%5C_v%5C_V/status/121511282758258688&quot;&gt;https://twitter.com/V&#92;_v&#92;_V/status/121511282758258688&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/Jessman5/status/121519177977708547&quot;&gt;https://twitter.com/Jessman5/status/121519177977708547&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/tforza/status/121524521709744128&quot;&gt;https://twitter.com/tforza/status/121524521709744128&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ronderksen/status/121531111665971200&quot;&gt;https://twitter.com/ronderksen/status/121531111665971200&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My talk was the next day, and even though I was afraid it would be bad due to being tired from the workshop and the pre-party, I think it was my best talk ever. I was much more relaxed, and I got the most enthusiastic feedback I ever have. My hand literally got tired favoriting tweets, and I’m pretty sure I missed some. Here’s a small sample:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/smashingmag/status/121881600366608384&quot;&gt;https://twitter.com/smashingmag/status/121881600366608384&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ldebrouwer/status/121881926587002881&quot;&gt;https://twitter.com/ldebrouwer/status/121881926587002881&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/wnas/status/121882159756750848&quot;&gt;https://twitter.com/wnas/status/121882159756750848&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/FronteersConf/status/121883462251720704&quot;&gt;https://twitter.com/FronteersConf/status/121883462251720704&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ldebrouwer/status/121884227083042816&quot;&gt;https://twitter.com/ldebrouwer/status/121884227083042816&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/addy%5C_osmani/status/121885202581684224&quot;&gt;https://twitter.com/addy&#92;_osmani/status/121885202581684224&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LuukWilms/status/121887866258333697&quot;&gt;https://twitter.com/LuukWilms/status/121887866258333697&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/Georg%5C_Tavonius/status/121888702678044672&quot;&gt;https://twitter.com/Georg&#92;_Tavonius/status/121888702678044672&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/okonetchnikov/status/121889094346350592&quot;&gt;https://twitter.com/okonetchnikov/status/121889094346350592&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/decthomas/status/121889393752543233&quot;&gt;https://twitter.com/decthomas/status/121889393752543233&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/eising/status/121889474782314496&quot;&gt;https://twitter.com/eising/status/121889474782314496&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/artjulian/status/121889486358589440&quot;&gt;https://twitter.com/artjulian/status/121889486358589440&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ronderksen/status/121889810230157312&quot;&gt;https://twitter.com/ronderksen/status/121889810230157312&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/dantz/status/121890121669804032&quot;&gt;https://twitter.com/dantz/status/121890121669804032&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nerdismus/status/121890225273323520&quot;&gt;https://twitter.com/nerdismus/status/121890225273323520&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/okke29/status/121890604610355200&quot;&gt;https://twitter.com/okke29/status/121890604610355200&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mylittletony/status/121891613139144704&quot;&gt;https://twitter.com/mylittletony/status/121891613139144704&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LuukWilms/status/121893686874345472&quot;&gt;https://twitter.com/LuukWilms/status/121893686874345472&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/soswow/status/121893745921769472&quot;&gt;https://twitter.com/soswow/status/121893745921769472&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mennovanslooten/status/121893921394655232&quot;&gt;https://twitter.com/mennovanslooten/status/121893921394655232&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/FronteersConf/status/121894605963804673&quot;&gt;https://twitter.com/FronteersConf/status/121894605963804673&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/edgarleijs/status/121894745596362752&quot;&gt;https://twitter.com/edgarleijs/status/121894745596362752&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/usethetics/status/121894796573937664&quot;&gt;https://twitter.com/usethetics/status/121894796573937664&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/peterpeerdeman/status/121895792301707264&quot;&gt;https://twitter.com/peterpeerdeman/status/121895792301707264&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/bjornjohansen/status/121896246809083904&quot;&gt;https://twitter.com/bjornjohansen/status/121896246809083904&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/cruster/status/121896792873897984&quot;&gt;https://twitter.com/cruster/status/121896792873897984&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/decthomas/status/121911585227816960&quot;&gt;https://twitter.com/decthomas/status/121911585227816960&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/aral/status/121920658778234880&quot;&gt;https://twitter.com/aral/status/121920658778234880&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ldebrouwer/status/121992421474177025&quot;&gt;https://twitter.com/ldebrouwer/status/121992421474177025&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/wiekatz/status/121992495436537856&quot;&gt;https://twitter.com/wiekatz/status/121992495436537856&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/GovertVerschuur/status/121993644482891776&quot;&gt;https://twitter.com/GovertVerschuur/status/121993644482891776&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/johannesaxner/status/121999077859790849&quot;&gt;https://twitter.com/johannesaxner/status/121999077859790849&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/flurin/status/122042528794017792&quot;&gt;https://twitter.com/flurin/status/122042528794017792&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My slides are now online at &lt;a href=&quot;http://speakerdeck.com/u/leaverou/p/css3-secrets-10-things-you-might-not-know-about-css3&quot;&gt;Speakerdeck&lt;/a&gt;, &lt;a href=&quot;http://www.slideshare.net/LeaVerou/css3-secrets-10-things-you-might-not-know-about-css3&quot;&gt;Slideshare&lt;/a&gt; and &lt;a href=&quot;http://talks.verou.me/css3-secrets&quot;&gt;the interactive version on my website&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;frontend-2011&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/10/my-experience-from-fronteers-jsconf-eu-frontend-and-fromthefront/#frontend-2011&quot;&gt;&lt;a href=&quot;http://www.frontend2011.com/&quot;&gt;Frontend 2011&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Oslo is a city I’ve been to many times in the past, so there was nothing new to see there. I didn’t make it to the speakers dinner &amp;amp; pre-party due to my late flight, which kinda sucked but it’s my fault since it took me a long while to decide on my flight dates. The conference itself was a bit more design-focused that I’d like, but very well organized. It took place in the same hotel the speakers were staying at, which is always a good thing. It also had the best coffee I’ve ever drank at a conference, and one of the best I’ve tasted in general. I also loved the idea of having multiple projectors, so that everyone in the audience can see clearly. They had the very original idea of not only drawing caricatures for every speaker (&lt;a href=&quot;http://www.frontend2011.com/img/speakers/lea-verou.png&quot;&gt;here’s mine&lt;/a&gt;, I also got it in a nice frame) but also having the artist in the venue to draw caricatures for attendees as well!&lt;/p&gt;
&lt;p&gt;My talk went smoothly, and received very good feedback:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/iceMagic/status/123737225560199168&quot;&gt;https://twitter.com/iceMagic/status/123737225560199168&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/gustaff%5C_weldon/status/123741227563753472&quot;&gt;https://twitter.com/gustaff&#92;_weldon/status/123741227563753472&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/kaelig/status/123741479142297601&quot;&gt;https://twitter.com/kaelig/status/123741479142297601&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/orioltf/status/123742189896474624&quot;&gt;https://twitter.com/orioltf/status/123742189896474624&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/chemikpil/status/123742210842820608&quot;&gt;https://twitter.com/chemikpil/status/123742210842820608&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/gav%5C_taylor/status/123742248646094848&quot;&gt;https://twitter.com/gav&#92;_taylor/status/123742248646094848&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mikaeljorhult/status/123742623524585473&quot;&gt;https://twitter.com/mikaeljorhult/status/123742623524585473&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ken%5C_guru/status/123744573666246656&quot;&gt;https://twitter.com/ken&#92;_guru/status/123744573666246656&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/cornae/status/123803246300114945&quot;&gt;https://twitter.com/cornae/status/123803246300114945&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That’s it. I now get to rest for a while. Next stop is &lt;a href=&quot;http://swdc.se/2011/&quot;&gt;SWDC&lt;/a&gt; in November, which will host the première of my new talk “CSS in the 4th dimension: Not your daddy’s CSS animations” which will be about CSS transitions &amp;amp; animations, from the basics all way to badass secrets.&lt;/p&gt;
&lt;p&gt;Thanks to all the conference organizers for inviting me and for the attendees for attending and giving feedback on my talks. You are all awesome, and it was the best 2 weeks ever. :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Animatable: A CSS transitions gallery</title>
    <link href="https://lea.verou.me/2011/10/animatable-a-css-transitions-gallery/"/>
    <updated>2011-10-30T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1420</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2011/10/animatable-a-css-transitions-gallery/images/Screen-shot-2011-10-30-at-08.54.38-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2011/10/animatable-a-css-transitions-gallery/images/Screen-shot-2011-10-30-at-08.54.38--300x187.png&quot; alt=&quot;&quot; title=&quot;Screen shot 2011-10-30 at 08.54.38&quot; /&gt;&lt;/a&gt;What kind of transitions can you create with only one property? This is what my new experiment, &lt;a href=&quot;http://leaverou.github.com/animatable/&quot;&gt;animatable&lt;/a&gt; aims to explore.&lt;/p&gt;
&lt;p&gt;It’s essentially a gallery of basic transitions. It aims to show how different animatable properties look when they transition and to broaden our horizons about which properties can be animated. Hover over the demos to see the animation in action, or click “Animate All” to see all of them (warning: might induce nausea, headache and seizures :P ). You can also click on it to see more details and get a &lt;a href=&quot;http://leaverou.github.com/animatable/#background-size&quot;&gt;permalink&lt;/a&gt;. Instead of clicking, you can also navigate with the arrow keys and press Esc to return to the main listing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/LeaVerou/animatable&quot;&gt;Fork it on Github&lt;/a&gt; and add your own ideas. Be sure to add your twitter username to them as a &lt;code&gt;data-author&lt;/code&gt; attribute!&lt;/p&gt;
&lt;p&gt;I’ve only tested in Firefox and Chrome for OSX so far. Not sure which other browsers are supported. However, since it uses CSS animations, we know for sure that it won’t work in browsers that don’t support CSS animations.&lt;/p&gt;
&lt;p&gt;Hope you enjoy it :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Vendor prefixes have failed, what’s next?</title>
    <link href="https://lea.verou.me/2011/11/vendor-prefixes-have-failed-whats-next/"/>
    <updated>2011-11-18T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1458</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Edit:&lt;/strong&gt; This was originally written to be posted in &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/&quot;&gt;www-style&lt;/a&gt;, the mailing list for CSS development. I thought it might be a good idea to post it here as other people might be interested too. It wasn’t. Most people commenting didn’t really get the point of the article and thought I’m suggesting we should simply drop prefixes. Others think that it’s an acceptable solution for the CSS WG if CSS depends on external libraries like my own &lt;a href=&quot;http://leaverou.github.com/prefixfree&quot;&gt;-prefix-free&lt;/a&gt; or LESS and SASS. I guess it was an failure of my behalf (“Know your audience”) and thus I’m disabling comments.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Discussion about prefixes was recently stirred up again by &lt;a href=&quot;http://hsivonen.iki.fi/vendor-prefixes/&quot;&gt;an article by Henri Sivonen&lt;/a&gt;, so &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2011Nov/0271.html&quot;&gt;the CSS WG started debating for the 100th time&lt;/a&gt; about when features should become unprefixed.&lt;/p&gt;
&lt;p&gt;I think we need to think out of the box and come up with new strategies to solve the issues that vendor prefixes were going to fix. &lt;strong&gt;Vendor prefixes have failed and we can’t solve their issues by just unprefixing properties more early.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;issues&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/11/vendor-prefixes-have-failed-whats-next/#issues&quot;&gt;Issues&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The above might seem a bold statement, so let me try to support it by recapping the serious issues we run into with vendor prefixes:&lt;/p&gt;
&lt;h3 id=&quot;1.-unnecessary-bloat&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/11/vendor-prefixes-have-failed-whats-next/#1.-unnecessary-bloat&quot;&gt;1. Unnecessary bloat&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Authors need to use prefixes even when the implementations are already interoperable. As a result, they end up pointlessly duplicating the declarations, making maintenance hard and/or introducing overhead from CSS pre- and post-processors to take care of this duplication. We need to find a way to reduce this bloat to &lt;strong&gt;only the cases where different declarations are actually needed&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;2.-spec-changes-still-break-existing-content&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/11/vendor-prefixes-have-failed-whats-next/#2.-spec-changes-still-break-existing-content&quot;&gt;2. Spec changes still break existing content&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The biggest advantage of the current situation was supposed to be that spec changes would not break existing content, but prefixes have failed to even do this. The thing is, &lt;strong&gt;most authors will use something if it’s available&lt;/strong&gt;, no questions asked.  I doubt anyone that has done any real web development would disagree with that. And in most cases, they will prefer a slightly different application of a feature than none at all, so they use prefixed properties along with unprefixed. Then, when the WG makes a backwards-incompatible change, existing content breaks.&lt;/p&gt;
&lt;p&gt;I don’t think this can really be addressed in any way except disabling the feature by default in public builds. Any kind of prefix or notation is pointless to stop this, we’ll always run into the same issue. If we disable the feature by default, almost nobody will use it since they can’t tell visitors to change their browser settings. Do we really want that? Yes, the WG will be able to make all the changes they want, but then &lt;strong&gt;then who will give feedback for these changes?&lt;/strong&gt; Certainly not authors, as they will effectively have zero experience working with the feature as most of them don’t have the time to play around with features they can’t use right now.&lt;/p&gt;
&lt;p&gt;I think we should accept that changes will break &lt;em&gt;*some*&lt;/em&gt; existing content, and try to standardize faster, instead of having tons of features in WD limbo. However, I still think that there should be some kind of notation to denote that a feature is experimental so that at least authors know what they’re getting themselves into by using it and for browsers to be able to experiment a bit more openly. I don’t think that vendor prefixes are the right notation for this though.&lt;/p&gt;
&lt;h3 id=&quot;3.-web-development-has-become-a-popularity-contest&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/11/vendor-prefixes-have-failed-whats-next/#3.-web-development-has-become-a-popularity-contest&quot;&gt;3. Web development has become a popularity contest&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’ll explain this with an example: CSS animations were first supported by WebKit. People only used the &lt;code&gt;-webkit-&lt;/code&gt; prefix with them and they were fine with it. Then Firefox also implemented them, and most authors started adding &lt;code&gt;-moz-&lt;/code&gt; to their use cases. Usually only to the new ones, their old ones are still WebKit only. After a while, Microsoft announced CSS animations in IE10. Some authors started adding &lt;code&gt;-ms-&lt;/code&gt; prefixes to their new websites, some others didn’t because IE10 isn’t out yet. When IE10 is out, they still won’t add it because their current use cases will be for the most part not maintained any more. Some authors don’t even add &lt;code&gt;-ms-&lt;/code&gt; because they dislike IE. Opera will soon implement CSS animations. Who will really go back and add &lt;code&gt;-o-&lt;/code&gt; versions? Most people will not care, because they think Opera has too little market share to warrant the extra bloat.&lt;/p&gt;
&lt;p&gt;So browsers appear to support less features, only because authors have to take an extra step to explicitly support them. &lt;strong&gt;Browsers do not display pages with their full capabilities because authors were lazy, ignorant, or forgetful.&lt;/strong&gt; This is unfair to both browser vendors and web users. We need to find a way to (optionally?) decouple implementation and browser vendor in the experimental feature notation.&lt;/p&gt;
&lt;h2 id=&quot;ideas&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/11/vendor-prefixes-have-failed-whats-next/#ideas&quot;&gt;Ideas&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is a real problem that vendor prefixes attempted to solve, but vendor prefixes didn’t prove out to be a good solution. I think we should start thinking outside the box and propose new ideas instead of sticking to vendor prefixes and debating their duration. I’ll list here a few of my ideas and I’m hoping others will follow suit.&lt;/p&gt;
&lt;h3 id=&quot;1.-generic-prefix-(-x--or-something-else)-and%2For-new-%40rule&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/11/vendor-prefixes-have-failed-whats-next/#1.-generic-prefix-(-x--or-something-else)-and%2For-new-%40rule&quot;&gt;1. Generic prefix (-x- or something else) and/or new @rule&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A generic prefix &lt;a href=&quot;http://www.quirksmode.org/blog/archives/2010/03/css_vendor_pref_1.html&quot;&gt;has been proposed before&lt;/a&gt;, and usually the argument against it is that different vendors may have incompatible implementations. This could be addressed at a more general level, instead of having the prefix on every feature: An @-rule for addressing specific vendors. for example:&lt;/p&gt;
&lt;p&gt;@vendor (moz,webkit,o) {
.foo { -x-property: value; }
}&lt;/p&gt;
&lt;p&gt;@vendor (ms) {
.foo { -x-property: other-value; }
}&lt;/p&gt;
&lt;p&gt;A potential downside is selector duplication, but remember: &lt;strong&gt;The @vendor rule would ONLY be used when implementations are actually incompatible&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Of course, there’s the potential for misuse, as authors could end up writing separate CSS for separate browsers using this new rule. However, I think we’re in a stage where most authors have realized that this is a bad idea, and if they want to do it, they can do it now anyway (for example, by using @-moz-document to target Moz and so on)&lt;/p&gt;
&lt;h3 id=&quot;2.-supporting-both-prefixed-and-unprefixed-for-wd-features&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/11/vendor-prefixes-have-failed-whats-next/#2.-supporting-both-prefixed-and-unprefixed-for-wd-features&quot;&gt;2. Supporting both prefixed and unprefixed for WD features&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This delegates the decision to the author, instead of the WG and implementors. The author could choose to play it safe and use vendor prefixes or risk it in order to reduce bloat on a per-feature basis.&lt;/p&gt;
&lt;p&gt;I guess a problem with this approach is that extra properties mean extra memory, but it’s something that many browsers already do when they start supporting a property unprefixed and don’t drop the prefixed version like they should.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While this post was still in draft, I was informed that Alex Mogilevsky has suggested something very similar. &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2011Nov/0346.html&quot;&gt;Read his proposal&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;3.-prefixes-for-versioning%2C-not-vendors&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/11/vendor-prefixes-have-failed-whats-next/#3.-prefixes-for-versioning%2C-not-vendors&quot;&gt;3. Prefixes for versioning, not vendors&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When a browser implements a property for the first time, they will use the prefix &lt;code&gt;-a-&lt;/code&gt;. Then, when another browser implements that feature, they look at the former browser’s implementation, and if theirs is compatible, they use the same prefix. If it’s incompatible, they increment it by one, using &lt;code&gt;-b-&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;A potential problem with this is collisions: Vendors using the same prefix not because their implementations are compatible but because they developed them almost simultaneously and didn’t know about each other’s implementation. Also, it causes trouble for the smaller vendors that might want to implement a feature first.&lt;/p&gt;
&lt;h3 id=&quot;we-need-more-ideas&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/11/vendor-prefixes-have-failed-whats-next/#we-need-more-ideas&quot;&gt;We need more ideas&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Even if the above are not good ideas, I’m hoping that they’ll inspire others to come up with something better. I think we need more ideas about this, rather than more debates about fine-tuning the details of one bad solution.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Introducing dabblet: An interactive CSS playground</title>
    <link href="https://lea.verou.me/2011/12/introducing-dabblet-an-interactive-css-playground/"/>
    <updated>2011-12-15T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1471</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2011/12/introducing-dabblet-an-interactive-css-playground/images/Screen-shot-2011-12-14-at-23.32.02-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2011/12/introducing-dabblet-an-interactive-css-playground/images/Screen-shot-2011-12-14-at-23.32.02--300x183.png&quot; alt=&quot;&quot; title=&quot;Dabblet screenshot&quot; /&gt;&lt;/a&gt;I loved &lt;a href=&quot;https://jsfiddle.net/&quot;&gt;JSFiddle&lt;/a&gt; ever since I first used it. Being able to test something almost instantly and without littering my hard drive opened new possibilities for me. I use it daily for experiments, browser bug testcases, code snippet storage, code sharing and many other things. However, there were always a few things that bugged me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSFiddle is very JS oriented, as you can tell even from the name itself&lt;/li&gt;
&lt;li&gt;JSFiddle is heavily server-side so there’s always at least the lag of an HTTP request every time you make an action. It makes sense not to run JS on every keystroke (JSBin does it and it’s super annoying, even caused me to fall in an infinite loop once) but CSS and HTML could be updated without any such problems.&lt;/li&gt;
&lt;li&gt;I’m a huge tabs fan, I hate spaces for indenting with a passion.&lt;/li&gt;
&lt;li&gt;Every time I want to test a considerable amount of CSS3, I need to include &lt;a href=&quot;http://leaverou.github.com/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt; as a resource and I can’t save that preference or any other (like “No library”).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don’t get me wrong, I LOVE JSFiddle. It was a pioneer and it paved the way for all similar apps. It’s great for JavaScript experiments. But for pure CSS/HTML experiments, we can do better.&lt;/p&gt;
&lt;p&gt;The thought of making some interactive playground for CSS experiments was lingering in my mind for quite a while, but never attempted to start it as I knew it would be a lot of fascinating work and I wouldn’t be able to focus on anything else throughout. While I was writing &lt;a href=&quot;http://24ways.org/2011/css3-patterns-explained&quot;&gt;my 24ways article&lt;/a&gt;, I wanted to include lots of CSS demos and I wanted the code to be editable and in some cases on top of the result to save space. JSFiddle’s embedding didn’t do that, so I decided to make something simple, just for that article. It quickly evolved to something much bigger, and yes I was right, it was lots of fascinating work and I wasn’t able to focus on anything else throughout. I even delayed my 24ways article for the whole time I was developing it, and I’m grateful that Drew was so patient. After 3 weeks of working on it, I present &lt;a href=&quot;https://dabblet.com/&quot;&gt;dabblet&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;features&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/12/introducing-dabblet-an-interactive-css-playground/#features&quot;&gt;Features&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So what does dabblet have that similar apps don’t? Here’s a list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Realtime updates, no need to press a button or anything&lt;/li&gt;
&lt;li&gt;Saves everything to &lt;a href=&quot;https://gist.github.com/&quot;&gt;Github gists&lt;/a&gt;, so even if dabblet goes away (not that I plan to!) you won’t lose your data&lt;/li&gt;
&lt;li&gt;No page reloads even on saving, everything is XHR-ed&lt;/li&gt;
&lt;li&gt;Many familiar keyboard shortcuts&lt;/li&gt;
&lt;li&gt;Small inline previewers for many kinds of CSS values, in particular for: &lt;a href=&quot;http://dribbble.com/shots/338667-Mystery-upcoming-project-UI-detail-CSS-color-preview&quot;&gt;colors&lt;/a&gt;, &lt;a href=&quot;http://dribbble.com/shots/339917-Mystery-upcoming-project-UI-detail-Length-preview&quot;&gt;absolute lengths&lt;/a&gt;, durations, &lt;a href=&quot;http://dribbble.com/shots/346253-Mystery-upcoming-project-UI-detail-Angle-preview&quot;&gt;angles&lt;/a&gt;, &lt;a href=&quot;http://dribbble.com/shots/349045-Mystery-upcoming-project-UI-detail-Easing-previewer&quot;&gt;easing functions&lt;/a&gt; and &lt;a href=&quot;http://dribbble.com/shots/346247-Mystery-upcoming-project-UI-detail-CSS-gradient-preview&quot;&gt;gradients&lt;/a&gt;. Check them all in &lt;a href=&quot;https://dabblet.com/gist/1441328&quot;&gt;this dabblet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Automatically adds prefixes with &lt;a href=&quot;http://leaverou.github.com/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt;, to speed up testing&lt;/li&gt;
&lt;li&gt;Use the Alt key and the up/down arrows to increment/decrement &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt; values.&lt;/li&gt;
&lt;li&gt;Dabblet is &lt;a href=&quot;https://github.com/LeaVerou/dabblet&quot;&gt;open source&lt;/a&gt; under a NPOSL 3.0 license&lt;/li&gt;
&lt;li&gt;You can save anonymously even when you are logged in&lt;/li&gt;
&lt;li&gt;Multiple view modes: Result behind code, Split views (horizontal or vertical), separate tabs. View modes can be saved as a personal preference or in the gists (as different demos may look better with different view modes)&lt;/li&gt;
&lt;li&gt;Editable even from an embedded iframe (to embed just use the same dabblet URL, it will be automatically adjusted through media queries)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s a rough screencast that I made in 10 minutes to showcase some of dabblet’s features. There’s no sound and is super sloppy but I figured even this lame excuse of a screencast is better than none.&lt;/p&gt;
&lt;iframe width=&quot;600&quot; height=&quot;500&quot; src=&quot;http://www.youtube.com/embed/ztMJQJgTMSE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;I’m hoping to make a proper screencast in the next few days.&lt;/p&gt;
&lt;p&gt;However, dabblet is still very new. I wouldn’t even call it a beta yet, more like an Alpha. I’ve tried to iron out every bug I could find, but I’m sure there are many more lingering around. Also, it has some limitations, but it’s my top priority to fix them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It’s currently not possible to see or link to older versions of a dabblet. You can of course use Github to view them.&lt;/li&gt;
&lt;li&gt;It currently only works in modern, CORS-enabled browsers. Essentially Chrome, Safari and Firefox. I intend to support Opera too, once Opera 12 comes out. As for IE, I’ll bother with it when a significant percentage of web developers start using it as their main browser. Currently, I don’t know anyone that does.&lt;/li&gt;
&lt;li&gt;It doesn’t yet work very well on mobile but I’m working on it and it’s a top priority&lt;/li&gt;
&lt;li&gt;You can’t yet add other scripts like LESS or remove -prefix-free.&lt;/li&gt;
&lt;li&gt;Hasn’t been tested in Windows very much, so not sure what issues it might have there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you enjoy using it as much as I enjoyed making it. Please report any bugs and suggest new features in &lt;a href=&quot;https://github.com/LeaVerou/dabblet/issues&quot;&gt;its bug tracker&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;examples&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/12/introducing-dabblet-an-interactive-css-playground/#examples&quot;&gt;Examples&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are some dabblets that should get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dabblet.com/gist/1441328&quot;&gt;https://dabblet.com/gist/1441328&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dabblet.com/gist/1454230&quot;&gt;https://dabblet.com/gist/1454230&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dabblet.com/gist/1454409&quot;&gt;https://dabblet.com/gist/1454409&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dabblet.com/gist/1457668&quot;&gt;https://dabblet.com/gist/1457668&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dabblet.com/gist/1457677&quot;&gt;https://dabblet.com/gist/1457677&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dabblet.com/gist/1421054&quot;&gt;https://dabblet.com/gist/1421054&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dabblet.com/gist/1454889&quot;&gt;https://dabblet.com/gist/1454889&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;credits&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2011/12/introducing-dabblet-an-interactive-css-playground/#credits&quot;&gt;Credits&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://kizu.ru/en/&quot;&gt;Roman Komarov&lt;/a&gt; helped tremendously by doing QA work on dabblet. Without his efforts, it would have been super buggy and much less polished.&lt;/p&gt;
&lt;p&gt;I’d also like to thank &lt;a href=&quot;http://twitter.com/dstorey&quot;&gt;David Storey&lt;/a&gt; for coming up with the name “dabblet” and for his support throughout these 3 weeks.&lt;/p&gt;
&lt;p&gt;Last but not least, I’d also like to thank &lt;a href=&quot;http://oli.jp/&quot;&gt;Oli Studholme&lt;/a&gt; and &lt;a href=&quot;http://richclarkdesign.com/&quot;&gt;Rich Clark&lt;/a&gt; for promoting dabblet in their .net magazine articles even before its release.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Dabblet has its own twitter account now: Follow &lt;a href=&quot;http://twitter.com/dabblet&quot;&gt;@dabblet&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>On web apps and their keyboard shortcuts</title>
    <link href="https://lea.verou.me/2011/12/on-web-apps-and-their-keyboard-shortcuts/"/>
    <updated>2011-12-17T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1493</id>
    <content xml:lang="en" type="html">&lt;p&gt;Yesterday, &lt;a href=&quot;http://lea.verou.me/2011/12/introducing-dabblet-an-interactive-css-playground/&quot;&gt;I released dabblet.&lt;/a&gt; One of its aspects that I took extra care of, is it’s keyboard navigation. I used many of the commonly established application shortcuts to navigate and perform actions in it. Some of these naturally collided with the native browser shortcuts and I got &lt;a href=&quot;https://github.com/LeaVerou/dabblet/issues/54&quot;&gt;a few bug reports&lt;/a&gt; about that. Actually, overriding the browser shortcuts was by design, and I’ll explain my point of view below.&lt;/p&gt;
&lt;p&gt;Native apps use these shortcuts all the time. For example, I press Cmd+1,2,3 etc in Espresso to navigate through files in my project. People press F1 for help. And so on. These shortcuts are so ingrained in our (power users) minds and so useful that we thoroughly miss them when they’re not there. Every time I press Cmd+1 in an OSX app and I don’t go to the first tab, I’m distraught. However, in web apps, these shortcuts are taken by the browser. We either have to use different shortcuts or accept overriding the browser’s defaults.&lt;/p&gt;
&lt;p&gt;Using different shortcuts seems to be considered best practice, but how useful are these shortcuts anyway? They have to be individually learned for every web app, and that’s hardly about memorizing the “keyboard shortcuts” list. Our muscles learn much more slowly than our minds. To be able to use these shortcuts as mindlessly as we use the regular application shortcuts, we need to spend a long time using the web app and those shortcuts. If we ever do get used to them that much, we’ll have trouble with the other shortcuts that most apps use, as our muscles will try to use the new ones.&lt;/p&gt;
&lt;p&gt;Using the de facto standard keyboard shortcuts carries no such issues. They take advantage of muscle memory from day one. If we advocate that web is the new native, it means our web apps should be entitled to everything native apps are. If native editors can use Cmd+1 to go to the first tab and F1 for help, so should a web editor. When you’re running a web app, the browser environment is merely a host, like your OS. The focus is the web app. When you’re working in a web app and you press a keyboard shortcut, chances are you’re looking to interact with that app, not with the browser Chrome.&lt;/p&gt;
&lt;p&gt;For example, I’m currently writing in Wordpress’ editor. When I press Cmd+S, I expect my draft to be saved, not the browser to attempt to save the current HTML page. Would it make sense if they wanted to be polite and chose a different shortcut, like Alt+S? I would have to learn the Save shortcut all over again and I’d forever confuse the two.&lt;/p&gt;
&lt;p&gt;Of course, it depends on how you define a web app. If we’re talking about a magazine website for example, you’re using the browser as a kind of reader. The app you’re using is still the browser, and overriding its keyboard shortcuts is bad. It’s a sometimes fine distinction, and many disagreements about this issue are basically disagreements about what constitutes a web app and how much of an application web apps are.&lt;/p&gt;
&lt;p&gt;So, what are your thoughts? Play it safe and be polite to the host or take advantage of muscle memory?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; &lt;a href=&quot;http://snook.ca/&quot;&gt;Johnathan Snook&lt;/a&gt; posted these thoughts in the comments, and I thought his suggested approach is pure genius and every web UX person should read it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On Yahoo! Mail, we have this same problem. It’s an application with many of the same affordances of a desktop application. As a result, we want to have the same usability of a desktop application—including with keyboard shortcuts. In some cases, like Cmd-P for printing, we’ll override the browser default because the browser will not have the correct output.&lt;/p&gt;
&lt;p&gt;For something like tab selection/editing, we don’t override the defaults and instead, create alternate shortcuts for doing so.&lt;/p&gt;
&lt;p&gt;One thing I suggest you could try is to behave somewhat like overflow areas in a web page. When you scroll with a scroll mouse or trackpad in the area, the browser will scroll that area until it reaches it’s scroll limit and then will switch to scrolling the entire page. It would be interesting to experiment with this same approach with other in-page mechanisms. For example, with tabs, I often use Cmd-Shift-[ and Cmd-Shift-] to change tabs (versus Cmd-1/2/3, etc). You could have it do so within the page until it hits its limit (first tab/last tab) and then after that, let the event fall back to the browser. For Cmd-1, have it select the first tab. If the user is already on the first tab, have it fall back to the browser.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry><entry>
    <title>Dabblet blog</title>
    <link href="https://lea.verou.me/2012/01/dabblet-blog/"/>
    <updated>2012-01-05T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1531</id>
    <content xml:lang="en" type="html">&lt;p&gt;Not sure if you noticed, but &lt;a href=&quot;https://dabblet.com/&quot;&gt;Dabblet&lt;/a&gt; now has a blog: &lt;a href=&quot;http://blog.dabblet.com/&quot;&gt;blog.dabblet.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’ll post there about Dabblet updates and not flood my regular subscribers here who may not care. So, if you are interested on Dabblet’s progress, follow that blog or &lt;a href=&quot;http://twitter.com/dabblet&quot;&gt;@dabblet&lt;/a&gt; on twitter.&lt;/p&gt;
&lt;p&gt;That was also an excuse to finally try &lt;a href=&quot;http://tumblr.com/&quot;&gt;tumblr&lt;/a&gt;. So far, so good. I love how it gives you custom domains and full theme control for free (hosted Wordpress charges for those). Gorgeous, GORGEOUS interface too. Most of the themes have markup from the 2005-2007 era, but that was no surprise. I customized the theme I picked to make it more HTML5-ey and more on par with dabblet’s style and it was super easy (though my attempt is by no means finished). There are a few shortcomings (like no titles for picture posts), but nothing too bad.&lt;/p&gt;
</content>
  </entry><entry>
    <title>What we still can’t do client-side</title>
    <link href="https://lea.verou.me/2012/01/what-we-still-can%E2%80%99t-do-client-side/"/>
    <updated>2012-01-09T00:00:00Z</updated>
    <id>https://lea.verou.me/2012/01/what-we-still-can%E2%80%99t-do-client-side/</id>
    <content xml:lang="en" type="html">&lt;p&gt;With the rise of all these APIs and the browser race to implement them, you’d think that currently we can do pretty much everything in JavaScript and even if we currently can’t due to browser support issues, we will once the specs are implemented. Unfortunately, that’s not true. There are still things we can’t do, and there’s no specification to address them at the time of this writing and no way to do them with the APIs we already have (or if there is a way, it’s unreasonably complicated).&lt;/p&gt;
&lt;h3 id=&quot;we-can%E2%80%99t-do-templating-across-pages&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/what-we-still-can%E2%80%99t-do-client-side/#we-can%E2%80%99t-do-templating-across-pages&quot;&gt;We can’t do templating across pages&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Before rushing to tell me “no, we can”, keep reading.&lt;/strong&gt; I mean have different files and re-use them accross different pages. For example, a header and a footer. If our project is entirely client-side, we have to repeat them manually on every page. Of course, we can always use (i)frames, but that solution is worse than the problem it solves. There should be a simple way to inject HTML from another file, like server-side includes, but client-side. without using JavaScript at all, this is a task that belongs to HTML (with JS we can always use XHR to do it but…). The browser would then be able to cache these static parts, with significant speed improvements on subsequent page loads.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; The &lt;a href=&quot;http://webcomponents.org/&quot;&gt;Web Components&lt;/a&gt; family of specs sort of helps with this, but still requires a lot of DIY and &lt;a href=&quot;https://hacks.mozilla.org/2014/12/mozilla-and-web-components/&quot;&gt;Mozilla is against HTML imports and will not implement them&lt;/a&gt;, which is one main component of this.&lt;/p&gt;
&lt;h3 id=&quot;we-can%E2%80%99t-do-localization&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/what-we-still-can%E2%80%99t-do-client-side/#we-can%E2%80%99t-do-localization&quot;&gt;We can’t do localization&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At least not in a sane, standard way. Client-side localization is a big PITA. There should be an API for this. That would have the added advantage that browsers could pick it up and offer a UI for it. I can’t count the number of times I’ve thought a website didn’t have an English version just because their UI was so bad I couldn’t find the switcher. Google Chrome often detects a website language and offers to translate it, if such an API existed we could offer properly translated versions of the website in a manner detectable by the browser.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; We have the &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=globalization:specification_drafts&quot;&gt;ECMAScript Globalization API&lt;/a&gt;, although it looks far from ideal at the moment.&lt;/p&gt;
&lt;h3 id=&quot;we-can%E2%80%99t-do-screen-capture&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/what-we-still-can%E2%80%99t-do-client-side/#we-can%E2%80%99t-do-screen-capture&quot;&gt;We can’t do screen capture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And not just of the screen, but we can’t even capture an element on the page and draw it on a canvas unless we use huge libraries that basically try to emulate a browser or SVG foreignObject which has its own share of issues. We should have a Screen Capture API, or at the very least, a way to draw DOM nodes on canvas. Yes, there are privacy concerns that need to be taken care of, but this is so tremendously useful that it’s worth the time needed to go intro researching those.&lt;/p&gt;
&lt;h3 id=&quot;we-can%E2%80%99t-get-post-parameters-and-http-headers&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/what-we-still-can%E2%80%99t-do-client-side/#we-can%E2%80%99t-get-post-parameters-and-http-headers&quot;&gt;We can’t get POST parameters and HTTP headers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There’s absolutely NO way to get the POST parameters or the HTTP response headers that the current page was sent with. You can get the GET parameters through the location object, but no way to get POST parameters. This makes it very hard to make client-side applications that accept input from 3rd party websites when that input is too long to be on the URL (as is the case of &lt;a href=&quot;https://dabblet.com/&quot;&gt;dabblet&lt;/a&gt; for example).&lt;/p&gt;
&lt;h3 id=&quot;we-can%E2%80%99t-make-peer-to-peer-connections&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/what-we-still-can%E2%80%99t-do-client-side/#we-can%E2%80%99t-make-peer-to-peer-connections&quot;&gt;We can’t make peer to peer connections&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is absolutely no way to connect to another client running our web app (to play a game for example), without an intermediate server.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; There’s RTCPeerConnection in &lt;a href=&quot;http://w3c.github.io/webrtc-pc/&quot;&gt;WebRTC&lt;/a&gt;, though the API is pretty horrible.&lt;/p&gt;
&lt;p&gt;_________&lt;/p&gt;
&lt;p&gt;Anything else we still can’t do and we still don’t have an API to do so in the future? Say it in the comments!&lt;/p&gt;
&lt;p&gt;Or, if I’m mistaken about one of the above and there is actually an active spec to address it, please point me to it!&lt;/p&gt;
&lt;h3 id=&quot;why-would-you-want-to-do-these-things-client-side%3F!&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/what-we-still-can%E2%80%99t-do-client-side/#why-would-you-want-to-do-these-things-client-side%3F!&quot;&gt;Why would you want to do these things client-side?!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Everything that helps take load away from the server is good. The client is always one machine, everything on the server may end up running thousands of times per second if the web app succeeds, making the app slow and/or costly to run. I strongly believe in lean servers. Servers should only do things that architecturally need a server (e.g. centralized data storage), everything else is the client’s job. Almost everything that we use native apps for, should (and eventually will) be doable by JavaScript.&lt;/p&gt;
</content>
  </entry><entry>
    <title>My new year’s resolution</title>
    <link href="https://lea.verou.me/2012/01/my-new-years-resolution/"/>
    <updated>2012-01-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1545</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;strong&gt;Warning: Personal post ahead. If you’re here to read some code trickery, move along and wait for the next post, kthxbai&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Blogs are excellent places for new year’s resolutions. Posts stay there for years, to remind you what you’ve been thinking long ago. A list on a piece of paper or a file in your computer will be forgotten and lost, but a resolution on your blog will come back to haunt you. Sometimes you want that extra push. I’m not too fond of new year’s resolutions and this may as well be my first, but this year there are certain goals I want to achieve, unlike previous years were things were more fluid.&lt;/p&gt;
&lt;p&gt;So, in 2012 I want to…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Land my dreamjob in a US company/organization I respect&lt;/li&gt;
&lt;li&gt;Get the hell out of Greece and move to the Bay Area&lt;/li&gt;
&lt;li&gt;Strive to improve my english even more, until I sound and write like a native speaker&lt;/li&gt;
&lt;li&gt;Find a publisher I respect that’s willing to print in full color and write my first book.&lt;/li&gt;
&lt;li&gt;Stop getting into stupid fights on twitter. They are destructive to both my well-being and my creativity.&lt;/li&gt;
&lt;li&gt;Get my degree in Computer Science. This has been my longest side project, 4 years and counting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wonder how many of those I will have achieved this time next year, how many I will have failed and how many I won’t care about any more…&lt;/p&gt;
</content>
  </entry><entry>
    <title>Why tabs are clearly superior</title>
    <link href="https://lea.verou.me/2012/01/why-tabs-are-clearly-superior/"/>
    <updated>2012-01-17T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1552</id>
    <content xml:lang="en" type="html">&lt;p&gt;If you follow me &lt;a href=&quot;https://twitter.com/leaverou&quot;&gt;on twitter&lt;/a&gt; or have heard one of my talks you’ll probably know I despise spaces for indentation with a passion. However, I’ve never gone into the details of my opinion on stage, and twitter isn’t really the right medium for advocacy.
I always wanted to write a blog post about my take on this old debate, so here it is.&lt;/p&gt;
&lt;h2 id=&quot;tabs-for-indentation%2C-spaces-for-alignment&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/why-tabs-are-clearly-superior/#tabs-for-indentation%2C-spaces-for-alignment&quot;&gt;Tabs for indentation, spaces for alignment&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s get this out of the way: &lt;strong&gt;Tabs should &lt;em&gt;never&lt;/em&gt; be used for alignment.&lt;/strong&gt;
&lt;strong&gt;Using tabs for alignment is actively worse than using spaces for indentation&lt;/strong&gt; and is the base of all arguments against tabs.
But using tabs for alignment is misuse, and negates their main advantage: personalization.
It’s like trying to eat soup with a fork and complaining because it doesn’t scoop up liquid well.&lt;/p&gt;
&lt;p&gt;Consider this code snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (something) {
	let x = 10,
	    y = 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each line inside the conditional is indented with a tab, but the variables are aligned with four spaces.
Change the tab size to see how everything adapts beautifully:&lt;/p&gt;
&lt;label id=&quot;tab_size&quot;&gt;
Tab size:
&lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;8&quot; value=&quot;4&quot; oninput=&quot;this.nextSibling.textContent = document.body.style.tabSize = this.value;&quot; /&gt;
4
&lt;/label&gt;
&lt;p&gt;And yes, of course using tabs for alignment is a mess, because that’s not what they’re for:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (something) {
	let x = 10,
		y = 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another example: remember CSS vendor prefixes?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;div {
	-webkit-transition: 1s;
	   -moz-transition: 1s;
	    -ms-transition: 1s;
	     -o-transition: 1s;
	        transition: 1s;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;1.-tabs-can-be-personalized&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/why-tabs-are-clearly-superior/#1.-tabs-can-be-personalized&quot;&gt;1. Tabs can be personalized&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The width of a tab character can be adjusted per editor. This is not a disadvantage of tabs as commonly evangelized, but &lt;strong&gt;a major advantage&lt;/strong&gt;.
&lt;strong&gt;People can view your code in the way they feel comfortable with, not in the way *you* prefer.&lt;/strong&gt;
Tabs are one step towards decoupling the code’s presentation from its logic, just like CSS decouples presentation from HTML.
They give more power to the reader rather than letting the author control everything.
Basically, using spaces is like saying “I don’t care about how you feel more comfortable reading code, I will force you to use &lt;em&gt;my&lt;/em&gt; preferences because it’s &lt;em&gt;my&lt;/em&gt; code”.&lt;/p&gt;
&lt;p&gt;Personalization is incredibly valuable when a team is collaborating, as different engineers can have different opinions.
Some engineers prefer their indents to be 2 spaces wide, some prefer them to be 4 spaces wide.
With spaces for alignment, a lead engineer imposes their preference on the entire team; with tabs everyone gets to choose what &lt;em&gt;they&lt;/em&gt; feel comfortable with.&lt;/p&gt;
&lt;h2 id=&quot;2.-you-don%E2%80%99t-depend-on-certain-tools&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/why-tabs-are-clearly-superior/#2.-you-don%E2%80%99t-depend-on-certain-tools&quot;&gt;2. You don’t depend on certain tools&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When using spaces, you depend on your editor to abstract away the fact that an indent is actually N characters instead of one.
You depend on your editor to insert N spaces every time you press the Tab key and to delete N characters every time you press backspace or delete near an indent.
I have never seen an editor where this abstraction did not &lt;a href=&quot;https://en.wikipedia.org/wiki/Leaky_abstraction&quot;&gt;leak&lt;/a&gt; at all.
If you’re not careful, it’s easy to end up with indentation that is not an integer multiple of the indent width, which is a mess.
With tabs, the indent width is simply the number of tabs at the beginning of a line.
You don’t depend on tools to hide anything, and change the meaning of keyboard keys.
Even in the most basic of plain text editors, you can use the keyboard to navigate indents in integer increments.&lt;/p&gt;
&lt;h2 id=&quot;3.-tabs-encode-strictly-more-information-about-the-code&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/why-tabs-are-clearly-superior/#3.-tabs-encode-strictly-more-information-about-the-code&quot;&gt;3. Tabs encode strictly more information about the code&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Used right, tabs are only used for a singular purpose: indentation.
This makes them easy to target programmatically, e.g. through regular expressions or find &amp;amp; replace.
Spaces on the other hand, have many meanings, so programmatically matching indents is a non-trivial problem.
Even if you only match space characters at the beginning of a line, there is no way of knowing when to stop, as spaces are also used for alignment.
Being able to tell the difference requires awareness about the semantics of the language itself.&lt;/p&gt;
&lt;h2 id=&quot;4.-tabs-facilitate-portability&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/why-tabs-are-clearly-superior/#4.-tabs-facilitate-portability&quot;&gt;4. Tabs facilitate portability&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As &lt;a href=&quot;http://lea.verou.me/2012/01/why-tabs-are-clearly-superior/#comment-415098853&quot;&gt;pointed out by Norbert Süle in the comments&lt;/a&gt;, when you copy and paste code that’s indented with spaces, you have to manually adjust the indentation afterwards, unless the other person also &lt;em&gt;happens&lt;/em&gt; to prefer the same width indents as you.
With tabs, there is no such issue, as it’s always tabs so it will fit in with your (tabbed) code seamlessly. The world would be a better place if everyone used tabs.&lt;/p&gt;
&lt;h2 id=&quot;5.-tabs-take-up-less-space&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/why-tabs-are-clearly-superior/#5.-tabs-take-up-less-space&quot;&gt;5. Tabs take up less space&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the least important arguments here, but still worth mentioning.
Tabs take up only one byte, while spaces take up as many bytes as their width, usually 2-4x that.
On large codebases this can add up. E.g. in a codebase of 1M loc, averaging 1 indent per line (good luck computing these kinds of stats with spaces btw, see 3 above), with an indent width of 4 spaces, you would save 3MB of space by using tabs instead of spaces.
It’s not a tremendous cost if spaces actually offered a benefit, but it’s unclear what the benefit is.&lt;/p&gt;
&lt;h2 id=&quot;the-downsides-of-using-tabs-for-indentation&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/why-tabs-are-clearly-superior/#the-downsides-of-using-tabs-for-indentation&quot;&gt;The downsides of using tabs for indentation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Literally all downsides of using tabs for indentation stem from how vocal their opponents are and how pervasive spaces are for indentation.
To the point that &lt;a href=&quot;https://arstechnica.com/information-technology/2017/06/according-to-statistics-programming-with-spaces-instead-of-tabs-makes-you-rich/&quot;&gt;using spaces for indentation is associated with &lt;em&gt;significantly&lt;/em&gt; higher salaries&lt;/a&gt;!&lt;/p&gt;
&lt;h3 id=&quot;in-browsers&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/why-tabs-are-clearly-superior/#in-browsers&quot;&gt;In browsers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is unfortunate that most UAs have declared war to tabs by using a default tab size of 8, far too wide for any practical purpose.
For code you post online, you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/tab-size&quot;&gt;&lt;code&gt;tab-size&lt;/code&gt;&lt;/a&gt; property to set tab size to a more reasonable value, e.g. 4.
It’s &lt;a href=&quot;https://caniuse.com/css3-tabsize&quot;&gt;widely supported&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For reading code on other websites, you can use an extension like &lt;a href=&quot;https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne&quot;&gt;Stylus&lt;/a&gt; to set the tab size to whatever you want.
I have this rule applying on all websites:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* ==UserStyle==
@name           7/22/2022, 5:43:07 PM
@namespace      *
@version        1.0.0
@description    A new userstyle
@author         Me
==/UserStyle== */

* {
	tab-size: 4 !important;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;in-tooling&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/why-tabs-are-clearly-superior/#in-tooling&quot;&gt;In tooling&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Editors that handle smart tabs correctly are few and far between.
Even VS Code, the most popular editor right now, &lt;a href=&quot;https://github.com/microsoft/vscode/issues/33974&quot;&gt;doesn’t handle them correctly&lt;/a&gt;,
though there are extensions (&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=j-zeppenfeld.tab-indent-space-align&quot;&gt;Tab-Indent Space-Align&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Valsorym.smart-tabs#:~:text=Smart%20Tabs%20for%20Visual%20Studio,a%20multitude%20of%20open%20files.&quot;&gt;Smart Tabs&lt;/a&gt;, and others)&lt;/p&gt;
&lt;h2 id=&quot;what-does-it-matter%2C-tabs%2C-spaces%2C-whatever%2C-it%E2%80%99s-just-a-pointless-detail&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/why-tabs-are-clearly-superior/#what-does-it-matter%2C-tabs%2C-spaces%2C-whatever%2C-it%E2%80%99s-just-a-pointless-detail&quot;&gt;What does it matter, tabs, spaces, whatever, it’s just a pointless detail&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sure, in the grand scheme of things, using spaces for indentation will not kill anyone.
But it’s a proxy for a greater argument:
that technology should make it possible to read code in the way &lt;em&gt;you&lt;/em&gt; prefer,
without having to get team buy-in on your preferences.
There are other ways to do this (reformatting post-pull and pre-commit), but are too heavyweight and intrusive.
If we can’t even get people to see the value of not enforcing the same indentation width on everyone,
how can we expect them to see the value in further personalization?&lt;/p&gt;
&lt;h2 id=&quot;further-reading&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/01/why-tabs-are-clearly-superior/#further-reading&quot;&gt;Further reading&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lb-stuff.com/tabs&quot;&gt;Tabs. Spaces. Indentation. Alignment.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mystilleef.blogspot.com/2006/11/indentation-with-spaces-considered.html&quot;&gt;Indentation With Spaces Considered Harmful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rizzoweb.com/java/tabs-vs-spaces.html&quot;&gt;Tabs vs spaces for code indentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://derkarl.org/why_to_tabs.html&quot;&gt;Why I love having tabs in source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/cyrusn/archive/2004/09/14/229474.aspx&quot;&gt;Tabs vs spaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dmitryfrank.com/articles/indent_with_tabs_align_with_spaces&quot;&gt;Indent with tabs, align with spaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Relevant: &lt;a href=&quot;http://nickgravgaard.com/elastictabstops/&quot;&gt;Elastic tabstops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://twitter.com/boblet&quot;&gt;Oli&lt;/a&gt; for proofreading the first version of this post.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Exactly how much CSS3 does your browser support?</title>
    <link href="https://lea.verou.me/2012/02/exactly-how-much-css3-does-your-browser-support/"/>
    <updated>2012-02-02T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1562</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2012/02/exactly-how-much-css3-does-your-browser-support/images/Screen-shot-2012-02-02-at-14.20.15-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2012/02/exactly-how-much-css3-does-your-browser-support/images/Screen-shot-2012-02-02-at-14.20.15--300x187.png&quot; alt=&quot;&quot; title=&quot;Screen shot 2012-02-02 at 14.20.15&quot; /&gt;&lt;/a&gt;This project started as an attempt to improve &lt;a href=&quot;https://dabblet.com/&quot;&gt;dabblet&lt;/a&gt; and to generate data for the book chapter I’m writing for Smashing Book #3. I wanted to create a very simple/basic testsuite for CSS3 stuff so that you could hover on a e.g. CSS3 property and you got a nice browser support popup. While I didn’t achieve that (turns out BrowserScope doesn’t do that kind of thing), I still think it’s interesting as a spin-off project, especially since the results will probably surprise you.&lt;/p&gt;
&lt;h3 id=&quot;how-it-works&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/02/exactly-how-much-css3-does-your-browser-support/#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;css3test (very superficially) tests pretty much everything in the specs mentioned on the sidebar (not just the popular widely implemented stuff). You can click on every feature to expand it and see the exact the testcases run and whether they passed. &lt;strong&gt;It only checks what syntax the browser recognizes, which doesn’t necessarily mean it will work correctly when used.&lt;/strong&gt; WebKit is especially notorious for cheating in tests like this, recognizing stuff it doesn’t understand, like the values “round” and “space” for background-repeat, but the cheating isn’t big enough to seriously compromise the test.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Whether a feature is supported with a prefix or not doesn’t matter for the result.&lt;/strong&gt; If it’s supported without a prefix, it will test that one. If it’s supported only with a prefix, it will test the prefixed one. For properties especially, if an unprefixed one is supported, it will be used in all the tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Only stuff that’s in a W3C specification is tested.&lt;/strong&gt; So, please don’t ask or send pull requests for proprietary things like -webkit-gradient() or -webkit-background-clip: text; or -webkit-box-reflect and so on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Every feature contributes the same to the end score&lt;/strong&gt;, as well as to the score of the individual spec, regardless of the number of tests it has.&lt;/p&gt;
&lt;h3 id=&quot;crazy-shit&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/02/exactly-how-much-css3-does-your-browser-support/#crazy-shit&quot;&gt;Crazy shit&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Chrome may display slightly different scores (1% difference) across pageloads. It seems that for some reason, it fails the tests for border-image completely on some pageloads, which doesn’t make any sense. Whoever wants to investigate, I’d be grateful. Edit: Fixed (someone found and submitted an even crazier workaround.).&lt;/p&gt;
&lt;h3 id=&quot;browserscope&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/02/exactly-how-much-css3-does-your-browser-support/#browserscope&quot;&gt;Browserscope&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the first project of mine in which I’ve used &lt;a href=&quot;http://www.browserscope.org/user/settings&quot;&gt;browserscope&lt;/a&gt;. This means that your results will be sent over to its servers and aggreggated. When I have enough data, I’m gonna built a nice table for everyone to see :) In the meantime, check the &lt;a href=&quot;http://www.browserscope.org/browse?category=usertest_agt1YS1wcm9maWxlcnINCxIEVGVzdBidzawNDA&quot;&gt;results&lt;/a&gt; page.&lt;/p&gt;
&lt;h3 id=&quot;it-doesn%E2%80%99t-work-on-my-browser%2C-u-suck!&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/02/exactly-how-much-css3-does-your-browser-support/#it-doesn%E2%80%99t-work-on-my-browser%2C-u-suck!&quot;&gt;It doesn’t work on my browser, U SUCK!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The test won’t work on dinosaur browsers like IE8, but who cares measuring their CSS3 support anyway? “For a laugh” isn’t a good enough answer to warrant the time needed.&lt;/p&gt;
&lt;p&gt;If you find a bug, please remember you didn’t pay a dime for this before nagging. Politely report it on Github, or even better, fix it and send a pull request.&lt;/p&gt;
&lt;h3 id=&quot;why-did-you-build-it%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/02/exactly-how-much-css3-does-your-browser-support/#why-did-you-build-it%3F&quot;&gt;Why did you build it?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To motivate browsers to support the less hyped stuff, because I’m tired of seeing the same things being evangelized over and over. There’s much more to CSS3.&lt;/p&gt;
&lt;h3 id=&quot;current-results&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/02/exactly-how-much-css3-does-your-browser-support/#current-results&quot;&gt;Current results&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the time of this writing, these are the results for the major modern browsers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chrome Canary, WebKit nightlies, Firefox Nightly: &lt;strong&gt;64%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Chrome, IE10PP4: &lt;strong&gt;63%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Firefox 10: &lt;strong&gt;61%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Safari 5.1, iOS5 Safari: &lt;strong&gt;60%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Opera 11.60: &lt;strong&gt;56%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Firefox 9: &lt;strong&gt;58%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Firefox 6-8: &lt;strong&gt;57%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Firefox 5, Opera 11.1 - 11.5: &lt;strong&gt;55%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Safari 5.0: &lt;strong&gt;54%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Firefox 4: &lt;strong&gt;49%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Safari 4: &lt;strong&gt;47%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Opera 10: &lt;strong&gt;45%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Firefox 3.6: &lt;strong&gt;44%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;IE9: &lt;strong&gt;39%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy! &lt;a href=&quot;http://css3test.com/&quot;&gt;css3test.com&lt;/a&gt; &lt;a href=&quot;https://github.com/LeaVerou/css3test&quot;&gt;Fork css3test on Github&lt;/a&gt; &lt;a href=&quot;http://www.browserscope.org/browse?category=usertest_agt1YS1wcm9maWxlcnINCxIEVGVzdBidzawNDA&quot;&gt;Browserscope results&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Simpler CSS typing animation, with the ch unit</title>
    <link href="https://lea.verou.me/2012/02/simpler-css-typing-animation-with-the-ch-unit/"/>
    <updated>2012-02-05T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1572</id>
    <content xml:lang="en" type="html">&lt;p&gt;A while ago, &lt;a href=&quot;http://lea.verou.me/2011/09/pure-css3-typing-animation-with-steps/&quot;&gt;I posted&lt;/a&gt; about how to use &lt;code&gt;steps()&lt;/code&gt; as an easing function to create a typing animation that degrades gracefully.&lt;/p&gt;
&lt;p&gt;Today I decided to simplify it a bit and make it more flexible, at the cost of browser support. The new version fully works in Firefox 1+ and IE10, since Opera and WebKit don’t support &lt;a href=&quot;http://www.w3.org/TR/css3-values/#ch-unit&quot;&gt;the ch unit&lt;/a&gt; and even though IE9 supports it, it doesn’t support CSS animations. To put it simply, one &lt;code&gt;ch&lt;/code&gt; unit is equivalent to the width of the zero (0) character of the font. So, in monospace fonts, it’s equivalent to the width of &lt;strong&gt;every&lt;/strong&gt; character, since every character has the same width.&lt;/p&gt;
&lt;p&gt;In the new version, we don’t need an obscuring span, so no extra HTML and it will work with non-solid backgrounds too. Also, even though the number of characters still needs to be hard-coded, it doesn’t need to be hardcoded in the animation any more, so it could be easily done through script without messing with creating/modifying stylesheets. Note how each animation only has one keyframe, and takes advantage of the fact that when the &lt;code&gt;from&lt;/code&gt; (0%) and &lt;code&gt;to&lt;/code&gt; (100%) keyframes are missing, the browser generates them from the fallback styles. I use this a lot when coding animations, as I hate duplication.&lt;/p&gt;
&lt;p&gt;In browsers that support CSS animations, but not the ch unit (such as WebKit based browsers), the animation will still occur, since we included a fallback in ems, but it won’t be 100% perfect. I think that’s a pretty good fallback, but if it bothers you, just declare a fallback of auto (or don’t declare one at all, and it will naturally fall back to auto). In browsers that don’t support CSS animations at all (such as Opera), the caret will be a solid black line that doesn’t blink. I thought that’s better than not showing it at all, but if you disagree, it’s very easy to hide it in those browsers completely: Just swap the &lt;code&gt;border-color&lt;/code&gt; between the keyframe and the &lt;code&gt;h1&lt;/code&gt; rule (hint: when a &lt;code&gt;border-color&lt;/code&gt; is not declared, it’s &lt;code&gt;currentColor&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; It appears that Firefox’s support for the ch unit is a bit buggy so, the following example won’t work with the Monaco font for example. This is not the correct behavior.&lt;/p&gt;
&lt;p&gt;Enjoy:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 600px;&quot; src=&quot;https://dabblet.com/gist/1745856&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;&lt;/iframe&gt;
</content>
  </entry><entry>
    <title>Moving an element along a circle</title>
    <link href="https://lea.verou.me/2012/02/moving-an-element-along-a-circle/"/>
    <updated>2012-02-08T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1586</id>
    <content xml:lang="en" type="html">&lt;p&gt;It all started a few months ago, when &lt;a href=&quot;http://css-tricks.com/&quot;&gt;Chris Coyier&lt;/a&gt; casually asked me how would I move an element along a circle, without of course rotating the element itself. If I recall correctly, his solution was to use multiple keyframes, for various points on a circle’s circumference, approximating it. I couldn’t think of anything better at the time, but the question was stuck in the back of my head. 3 months ago, I came up with a first solution. Unfortunately, it required an extra wrapper element. The idea was to use two rotate transforms with different origins and opposite angles that cancel each other at any given time. The first transform-origin would be the center of the circle path and the other one the center of the element. Because we can’t use multiple transform-origins, a wrapper element was needed.&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 500px;&quot; src=&quot;https://jsfiddle.net/leaverou/zXPzY/embedded/result&quot; frameborder=&quot;0&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;So, even though this solution was better, I wasn’t fully satisfied with it due to the need for the extra element. So, it kept being stuck in the back of my head.&lt;/p&gt;
&lt;p&gt;Recently, I &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2012Feb/0201.html&quot;&gt;suggested to www-style that transform-origin should be a list&lt;/a&gt; and accept multiple origins and presented this example as a use case. And then &lt;a href=&quot;http://aryeh.name/&quot;&gt;Aryeh Gregor&lt;/a&gt; came up with &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2012Feb/0294.html&quot;&gt;this genius idea&lt;/a&gt; to prove that it’s already possible if you chain translate() transforms between the opposite rotates.&lt;/p&gt;
&lt;p&gt;I simplified the code a bit, and here it is:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 500px;&quot; src=&quot;https://dabblet.com/gist/1760283&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;With the tools we currently have, I don’t think it gets any simpler than that.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Vendor prefixes, the CSS WG and me</title>
    <link href="https://lea.verou.me/2012/02/vendor-prefixes-the-css-wg-and-me/"/>
    <updated>2012-02-09T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1593</id>
    <content xml:lang="en" type="html">&lt;p&gt;The CSS Working Group is recently discussing the very serious problem that vendor prefixes have become. We have reached a point where &lt;strong&gt;browsers are seriously considering to implement -webkit- prefixes&lt;/strong&gt;, just because authors won’t bother using anything else. &lt;strong&gt;This is just sad.&lt;/strong&gt; :( &lt;a href=&quot;http://www.glazman.org/weblog/dotclear/index.php?post/2012/02/09/CALL-FOR-ACTION:-THE-OPEN-WEB-NEEDS-YOU-NOW&quot;&gt;Daniel Glazman&lt;/a&gt;, &lt;a href=&quot;http://christianheilmann.com/2012/02/09/now-vendor-prefixes-have-become-a-problem-want-to-help-fix-it/&quot;&gt;Christian Heilmann&lt;/a&gt; and others wrote about it, making very good points and hoping that authors will wake up and start behaving. If you haven’t already, visit those links and read what they are saying. I’m not very optimistic about it, but I’ll do whatever I can to support their efforts.&lt;/p&gt;
&lt;p&gt;And that brings us to the other thing that made me sad these days. 2 days ago, &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2012Feb/0313.html&quot;&gt;the CSS WG published its Minutes&lt;/a&gt; (sorta like a meeting) and I was surprised to hear that I’ve been mentioned. My surprise quickly turned into this painful feeling in your stomach when you’re being unfairly accused:&lt;/p&gt;
&lt;p&gt;tantek: Opposite is happening right now. Web standards activists are teaching
people to use -webkit-
tantek: People like Lea Verou.
tantek: Their demos are filled with -webkit-. You will see presentations
from all the web standards advocates advocating people to use
-webkit- prefixes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Try to picture being blamed of the very thing you hate, and you might understand how that felt.&lt;/strong&gt; I’ve always been an advocate of inclusive CSS coding that doesn’t shut down other browsers. It’s good for future-proofing, it’s good for competition and it’s the right thing to do. Heck, &lt;a href=&quot;http://leaverou.github.com/prefixfree/&quot;&gt;I even made a popular script to help people adding all prefixes&lt;/a&gt;! I’m even one of the few people in the industry who has &lt;strong&gt;never expressed a definite browser preference&lt;/strong&gt;. I love and hate every browser equally, as I can see assets and defects in all of them (ok, except Safari. Safari must die :P).&lt;/p&gt;
&lt;p&gt;When Tantek realized he had falsely accused me of this, &lt;a href=&quot;http://krijnhoetmer.nl/irc-logs/css/20120207#l-1066&quot;&gt;he corrected himself&lt;/a&gt; in the #css IRC room on &lt;a href=&quot;http://w3.org/&quot;&gt;w3.org&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#92;[17:27&#92;] &amp;lt;tantek&amp;gt; (ASIDE: regarding using -webkit- prefix, clarification re: Lea Verou - she&#39;s advocated using &#92;*both&#92;* vendor prefixed properties (multiple vendors) and the unprefixed version after them. See her talk http://www.slideshare.net/LeaVerou/css3-a-practical-introduction-ft2010-talk from Front-Trends 2010 for example. An actual example of -webkit- &#92;*only&#92;* prefix examples (thus implied advocacy) is Google&#39;s http://slides.html5rocks.com/ , e.g.
&#92;[17:27&#92;] &amp;lt;tantek&amp;gt; http://slides.html5rocks.com/#css-columns has three -webkit- property declarations starting with -webkit-column-count )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s nice of him, and it does help. At least I had a link to give to people who kept asking me on twitter if I was really the prefix monster he made me out to be. :P The problem is that not many read the IRC logs, but many more read the www-style archives. Especially since, with all this buzz, many people were directed into reading this discussion by the above articles. I don’t know how many people will be misled by Tantek’s uninformed comment without reading his correction, but I know for sure that the number is non-zero. And the worst of all is that many of them are people in the CSSWG or in the W3C in general,  people who I have great respect and admiration for. And quite frankly, that sucks.&lt;/p&gt;
&lt;p&gt;I don’t think Tantek had bad intentions. I’ve met him multiple times and I know he’s a nice guy. Maybe he was being lazy by making comments he didn’t check, but that’s about it. It could happen to many people. My main frustration is that it feels there is nothing I can do about it, besides answering people when they take the time to talk to me about it. I can do nothing with the ones that won’t, and that’s the majority. At least, if a forum was used over a mailing list, this could’ve been edited or something.&lt;/p&gt;
</content>
  </entry><entry>
    <title>A List Apart article: Every time you call a proprietary feature &quot;CSS3&quot;, a kitten dies</title>
    <link href="https://lea.verou.me/2012/02/a-list-apart-article-every-time-you-call-a-proprietary-feature-css3-a-kitten-dies/"/>
    <updated>2012-02-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1611</id>
    <content xml:lang="en" type="html">&lt;p&gt;My first article in ALA was published today, read it here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.alistapart.com/articles/every-time-you-call-a-proprietary-feature-css3-a-kitten-dies/&quot;&gt;Every time you call a proprietary feature “CSS3”, a kitten dies&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some comments about it on twitter:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/kkmett/status/169424038421204994&quot;&gt;https://twitter.com/kkmett/status/169424038421204994&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/codepo8/status/169425611801108480&quot;&gt;https://twitter.com/codepo8/status/169425611801108480&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/lydiamann/status/169425704092573696&quot;&gt;https://twitter.com/lydiamann/status/169425704092573696&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/zeldman/status/169426392654684160&quot;&gt;https://twitter.com/zeldman/status/169426392654684160&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/alistapart/status/169426553787256833&quot;&gt;https://twitter.com/alistapart/status/169426553787256833&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/happycog/status/169426900865908737&quot;&gt;https://twitter.com/happycog/status/169426900865908737&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/AlanBWhitney/status/169428991470612480&quot;&gt;https://twitter.com/AlanBWhitney/status/169428991470612480&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeftyDesigner/status/169430280883544064&quot;&gt;https://twitter.com/LeftyDesigner/status/169430280883544064&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/dap6000/status/169432718038409216&quot;&gt;https://twitter.com/dap6000/status/169432718038409216&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/martuishere/status/169434598911123456&quot;&gt;https://twitter.com/martuishere/status/169434598911123456&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/rachelober/status/169442236709355521&quot;&gt;https://twitter.com/rachelober/status/169442236709355521&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/sgalineau/status/169443447554580480&quot;&gt;https://twitter.com/sgalineau/status/169443447554580480&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/sdague/status/169448377824722944&quot;&gt;https://twitter.com/sdague/status/169448377824722944&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/whitman/status/169451221495717889&quot;&gt;https://twitter.com/whitman/status/169451221495717889&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/peterwinnberg/status/169456073466585088&quot;&gt;https://twitter.com/peterwinnberg/status/169456073466585088&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/cssquirrel/status/169468390736527360&quot;&gt;https://twitter.com/cssquirrel/status/169468390736527360&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jameswillweb/status/169475627274088448&quot;&gt;https://twitter.com/jameswillweb/status/169475627274088448&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/rogerjohansson/status/169482651198160896&quot;&gt;https://twitter.com/rogerjohansson/status/169482651198160896&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/beardChamp/status/169490532928720896&quot;&gt;https://twitter.com/beardChamp/status/169490532928720896&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Flexible multiline definition lists with 2 lines of CSS 2.1</title>
    <link href="https://lea.verou.me/2012/02/flexible-multiline-definition-lists-with-2-lines-of-css/"/>
    <updated>2012-02-24T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1617</id>
    <content xml:lang="en" type="html">&lt;p&gt;If you’ve used definition lists (&lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt;) you’re aware of the problem. By default, &lt;code&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;s and &lt;code&gt;&amp;lt;dd&amp;gt;&lt;/code&gt;s have &lt;code&gt;display:block&lt;/code&gt;. In order to turn them into what we want in most cases (each &lt;em&gt;pair&lt;/em&gt; of term and definition on one line) we usually employ a number of different techniques:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using a different &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt; for each pair: Style dictating markup, which is bad&lt;/li&gt;
&lt;li&gt;Floats: Not flexible&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display: run-in;&lt;/code&gt; on the &lt;code&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;: Browser support is bad (No Firefox support)&lt;/li&gt;
&lt;li&gt;Adding a &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; after each &lt;code&gt;&amp;lt;dd&amp;gt;&lt;/code&gt; and setting both term and definition as &lt;code&gt;display:inline&lt;/code&gt;: Invalid markup. Need I say more?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If only adding &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;s was valid… Or, even better, &lt;strong&gt;what if we could insert &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;s from CSS? Actually, we can!&lt;/strong&gt; As you might be aware, the CR and LF characters that comprise a line break are regular unicode characters that can be inserted anywhere just like every unicode character. They have the unicode codes 000D and 000A respectively. This means they can also be inserted as generated content, if escaped properly. Then we can use an appropriate white-space value to make the browser respect line breaks only in that part (the inserted line break). It looks like this:&lt;/p&gt;
&lt;p&gt;dd:after {
content: ‘&#92;A’;
white-space: pre;
}&lt;/p&gt;
&lt;p&gt;Note that nothing above is CSS3. It’s all good ol’ CSS 2.1.&lt;/p&gt;
&lt;p&gt;Of course, if you have multiple &lt;code&gt;&amp;lt;dd&amp;gt;&lt;/code&gt;s for every &lt;code&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;, you will need to alter the code a bit. But in that case, this formatting probably won’t be what you want anyway.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; As &lt;a href=&quot;https://twitter.com/codepo8/status/173148263124451328&quot;&gt;Christian Heilmann pointed out&lt;/a&gt;, HTML3 (!) &lt;a href=&quot;http://www.w3.org/MarkUp/html3/deflists.html&quot;&gt;used to have a compact attribute&lt;/a&gt; on &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt; elements, which basically did this. It is now obsolete in HTML5, like every other presentational HTML feature.&lt;/p&gt;
&lt;p&gt;You can see a live result here:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 800px;&quot; src=&quot;https://dabblet.com/gist/1901867&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Tested to work in &lt;strong&gt;IE8+, Chrome, Firefox 3+, Opera 10+, Safari 4+&lt;/strong&gt;.&lt;/p&gt;
</content>
  </entry><entry>
    <title>In defense of reinventing wheels</title>
    <link href="https://lea.verou.me/2012/04/in-defense-of-reinventing-wheels/"/>
    <updated>2012-04-03T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1642</id>
    <content xml:lang="en" type="html">&lt;p&gt;One of the first things a software engineer learns is “don’t reinvent the wheel”. If something is already made, use that instead of writing your own. “Stand on the shoulders of giants, they know what they’re doing better than you”. Writing your own tools and libraries, even when one already exists, is labelled “NIH syndrome”  and is considered quite bad. &lt;em&gt;&lt;strong&gt;“But what if my version is better?”&lt;/strong&gt;&lt;/em&gt;. Surely, reinventing the wheel can’t be bad when your new wheel improves existing wheel designs, right? Well, not if the software is open source, which is usually the case in our industry. “Just contribute to it” you’ll be told. However, contributing to an open source project is basically teamwork. The success of any team depends on how well its members work together, which is not a given. Sometimes, your vision about the tool might be vastly different from that of the core members and it might be wiser to create your own prototype than to try and change the minds of all these people.&lt;/p&gt;
&lt;p&gt;However, Open Source politics is not what I wanted to discuss today. It’s not the biggest potential benefit of reinventing the wheel. &lt;strong&gt;Minimizing overhead is.&lt;/strong&gt; You hardly ever need 100% of a project. Given enough time to study its inner workings, you could always delete quite a large chunk of it and it would still fit your needs perfectly. However, the effort needed to do that or to rewrite the percentage you actually need is big enough that you are willing to add redundant code to your codebase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redundant code is bad.&lt;/strong&gt; It still needs to get parsed and usually at least parts of it still need to be executed. &lt;strong&gt;Redundant code hinders performance.&lt;/strong&gt; The more code, the slower your app. Especially when we are dealing with backend code, when every line might end up being executed hundreds or even thousands of times per second. The slower your app becomes, the bigger the need to seriously address performance. The result of that is even more code (e.g. caching stuff) that could have been saved in the first place, by just running what you need. This is the reason software like Joomla, Drupal or vBulletin is so extremely bloated and brings servers to their knees if a site becomes mildly successful. It’s the cost of code that tries to match everyone’s needs.&lt;/p&gt;
&lt;p&gt;Performance is not the only drawback involved in redundant code. &lt;strong&gt;A big one is maintainability.&lt;/strong&gt; This code won’t only need to be parsed by the machine, it will also be parsed by humans, that don’t know what’s actually needed and what isn’t until they understand what every part does. Therefore, even the simplest of changes become hard.&lt;/p&gt;
&lt;p&gt;I’m not saying that using existing software or libraries is bad. I’m saying that it’s always a tradeoff between minimizing effort on one side and minimizing redundant code on the other side. I’m saying that you should &lt;em&gt;consider&lt;/em&gt; writing your own code when the percentage of features you need from existing libraries is tiny (lets say less than  20%). It might not be worth carrying the extra 80% forever.&lt;/p&gt;
&lt;p&gt;For example, in a project I’m currently working on, I needed to make a simple localization system so that the site can be multilingual. I chose to use JSON files to contain the phrases. I didn’t want the phrases to include HTML, since I didn’t want to have to escape certain symbols. However, they had to include simple formatting like bold and links, otherwise the number of phrases would have to be huge. The obvious solution is &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My first thought was to use an existing library, which for PHP is &lt;a href=&quot;http://michelf.com/projects/php-markdown/&quot;&gt;PHP Markdown&lt;/a&gt;. By digging a bit deeper I found that it’s actually considered pretty good and it seems to be well maintained (last update in January 2012) and mature (exists for over 2 years). I should happily use it then, right?&lt;/p&gt;
&lt;p&gt;That’s what I was planning to do. And then it struck me: I’m the only person writing these phrases. Even if more people write translations in the future, they will still go through me. So far, the only need for such formatting is links and bold. Everything else (e.g. lists) is handled by the HTML templates. That’s literally &lt;strong&gt;two lines of PHP&lt;/strong&gt;! So, I wrote my own function. It’s a bit bigger, since I also added emphasis, just in case:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;function markdown($text) {
 // Links
 $text = preg&#92;_replace(&#39;@&#92;&#92;&#92;&#92;&#92;[(.+?)&#92;&#92;&#92;&#92;&#92;]&#92;&#92;&#92;&#92;((#.+?)&#92;&#92;&#92;&#92;)@&#39;, &#39;&amp;lt;a href=&amp;quot;$2&amp;quot;&amp;gt;$1&amp;lt;/a&amp;gt;&#39;, $text);

 // Bold
 $text = preg&#92;_replace(&#39;@(?&amp;lt;!&#92;&#92;&#92;&#92;&#92;&#92;&#92;&#92;)&#92;&#92;&#92;&#92;&#92;*(?&amp;lt;!&#92;&#92;&#92;&#92;&#92;&#92;&#92;&#92;)&#92;&#92;&#92;&#92;&#92;*(.+?)(?&amp;lt;!&#92;&#92;&#92;&#92;&#92;&#92;&#92;&#92;)&#92;&#92;&#92;&#92;&#92;*(?&amp;lt;!&#92;&#92;&#92;&#92;&#92;&#92;&#92;&#92;)&#92;&#92;&#92;&#92;&#92;*@&#39;, &#39;&amp;lt;strong&amp;gt;$1&amp;lt;/strong&amp;gt;&#39;, $text);

 // Emphasis
 $text = preg&#92;_replace(&#39;@(?&amp;lt;!&#92;&#92;&#92;&#92;&#92;&#92;&#92;&#92;)&#92;&#92;&#92;&#92;&#92;*(.+?)(?&amp;lt;!&#92;&#92;&#92;&#92;&#92;&#92;&#92;&#92;)&#92;&#92;&#92;&#92;&#92;*@&#39;, &#39;&amp;lt;em&amp;gt;$1&amp;lt;/em&amp;gt;&#39;, $text);

 return $text;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since PHP regular expressions also support negative lookbehind, I can even avoid escaped characters, in the same line. Unfortunately, since PHP lacks regular expression literals, backslashes have to be doubled (&lt;code&gt;&#92;&#92;&lt;/code&gt; instead of &lt;code&gt;&#92;&lt;/code&gt; so &lt;code&gt;&#92;&#92;&#92;&#92;&lt;/code&gt; instead of &lt;code&gt;&#92;&#92;&lt;/code&gt;, which is pretty horrible).&lt;/p&gt;
&lt;p&gt;For comparison, PHP Markdown is about 1.7K lines of code. It’s great, if you need the full power of Markdown (e.g. for a comment system) and I’m glad Michel Fortin wrote it. However, for super simple, controlled use cases, is it really worth the extra code? I say no.&lt;/p&gt;
&lt;p&gt;Rachel Andrew recently wrote about something tangentially similar, in her blog post titled “&lt;a href=&quot;http://www.rachelandrew.co.uk/archives/2012/03/21/stop-solving-problems-you-dont-yet-have/&quot;&gt;Stop solving problems you don’t yet have&lt;/a&gt;”. It’s a great read and I’d advise you to read that too.&lt;/p&gt;
</content>
  </entry><entry>
    <title>git commit -m &quot;EVERYTHING&quot;</title>
    <link href="https://lea.verou.me/2012/04/git-commit-m-everything/"/>
    <updated>2012-04-04T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1670</id>
    <content xml:lang="en" type="html">&lt;p&gt;I was working on a project today, when I realized that I had forgotten to commit for days (local only repo). I switched to my terminal, spent at least five minutes trying to decide on the commit message before settling to the completely uninformative “Another commit”. Embarrassed with myself, I shared my frustration with twitter:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeaVerou/status/187533962283986944&quot;&gt;https://twitter.com/LeaVerou/status/187533962283986944&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Immediately, I started getting a flood of suggestions of what that commit message could have been. Some of them were hilarious, some clever and some both. So, I decided I wouldn’t be selfish and I’d share them. Enjoy:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/codepo8/status/187534089937620994&quot;&gt;https://twitter.com/codepo8/status/187534089937620994&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/vmasto/status/187534173429448704&quot;&gt;https://twitter.com/vmasto/status/187534173429448704&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/GovertVerschuur/status/187534218790846466&quot;&gt;https://twitter.com/GovertVerschuur/status/187534218790846466&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/upperdog_se/status/187534242182467584&quot;&gt;https://twitter.com/upperdog_se/status/187534242182467584&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/brunoscheele/status/187534245437243392&quot;&gt;https://twitter.com/brunoscheele/status/187534245437243392&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/idiot/status/187534264265490433&quot;&gt;https://twitter.com/idiot/status/187534264265490433&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LukeMaciak/status/187534411955314688&quot;&gt;https://twitter.com/LukeMaciak/status/187534411955314688&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jfgen/status/187534471703175168&quot;&gt;https://twitter.com/jfgen/status/187534471703175168&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/AlexGraul/status/187534893436256259&quot;&gt;https://twitter.com/AlexGraul/status/187534893436256259&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/captcodemonkey/status/187535071627059201&quot;&gt;https://twitter.com/captcodemonkey/status/187535071627059201&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/BoltClock/status/187535138266165248&quot;&gt;https://twitter.com/BoltClock/status/187535138266165248&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jwkozel/status/187535407397863425&quot;&gt;https://twitter.com/jwkozel/status/187535407397863425&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/skidding/status/187536889715228672&quot;&gt;https://twitter.com/skidding/status/187536889715228672&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/omgmog/status/187537072213598209&quot;&gt;https://twitter.com/omgmog/status/187537072213598209&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/stevehickeydsgn/status/187538150007123969&quot;&gt;https://twitter.com/stevehickeydsgn/status/187538150007123969&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/_dte/status/187538777441452032&quot;&gt;https://twitter.com/_dte/status/187538777441452032&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nathandim/status/187538945305870336&quot;&gt;https://twitter.com/nathandim/status/187538945305870336&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jwkozel/status/187539130585063424&quot;&gt;https://twitter.com/jwkozel/status/187539130585063424&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LukeMaciak/status/187539160851165184&quot;&gt;https://twitter.com/LukeMaciak/status/187539160851165184&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/croncobaurul/status/187539379428925442&quot;&gt;https://twitter.com/croncobaurul/status/187539379428925442&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/MayaPosch/status/187539668793950208&quot;&gt;https://twitter.com/MayaPosch/status/187539668793950208&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/OllyHodgson/status/187539827493834752&quot;&gt;https://twitter.com/OllyHodgson/status/187539827493834752&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/eternicode/status/187540177734991873&quot;&gt;https://twitter.com/eternicode/status/187540177734991873&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mrtnrsl/status/187540310094643201&quot;&gt;https://twitter.com/mrtnrsl/status/187540310094643201&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/kioopi/status/187540668728619008&quot;&gt;https://twitter.com/kioopi/status/187540668728619008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/streetpc/status/187541599532744704&quot;&gt;https://twitter.com/streetpc/status/187541599532744704&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/GNi33/status/187541700091195392&quot;&gt;https://twitter.com/GNi33/status/187541700091195392&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jo%5C_Osiah/status/187541784870666241&quot;&gt;https://twitter.com/jo&#92;_Osiah/status/187541784870666241&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/dalecruse/status/187541971949203460&quot;&gt;https://twitter.com/dalecruse/status/187541971949203460&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jordanpittman/status/187542101658058753&quot;&gt;https://twitter.com/jordanpittman/status/187542101658058753&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/michelegera/status/187542353446313984&quot;&gt;https://twitter.com/michelegera/status/187542353446313984&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/StuRobson/status/187543502538809344&quot;&gt;https://twitter.com/StuRobson/status/187543502538809344&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/gmoulin_dev/status/187544693779873792&quot;&gt;https://twitter.com/gmoulin_dev/status/187544693779873792&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Pure CSS scrolling shadows with background-attachment: local</title>
    <link href="https://lea.verou.me/2012/04/background-attachment-local/"/>
    <updated>2012-04-26T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1684</id>
    <content xml:lang="en" type="html">&lt;p&gt;A few days ago, the incredibly talented &lt;a href=&quot;https://twitter.com/kizmarh&quot;&gt;Roman Komarov&lt;/a&gt; posted an experiment of his with &lt;a href=&quot;http://kizu.ru/en/fun/shadowscroll/&quot;&gt;pure CSS “scrolling shadows”&lt;/a&gt;. If you’re using Google Reader, you are probably familiar with the effect:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2012/04/background-attachment-local/images/scrolling-shadows.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2012/04/background-attachment-local/images/scrolling-shadows.png&quot; alt=&quot;Screenshot demonstrating the “scrolling shadows” in Google Reader&quot; title=&quot;“Scrolling shadows” in Google Reader&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In Roman’s experiment, he is using absolutely positioned pseudoelements to cover the shadows (which are basically radial gradients as background images), taking advantage of the fact that when you scroll a scrollable container, its background does not scroll with it, but absolutely positioned elements within do. Therefore, when you scroll, the shadows are no longer obscured and can show through. Furthermore, these pseudoelements are linear gradients from white to transparent, so that these shadows are uncovered smoothly.&lt;/p&gt;
&lt;p&gt;When I saw Roman’s demo, I started wondering whether this is possible with no extra containers at all (pseudoelements included). It seemed like a perfect use case for &lt;code&gt;background-attachment: local&lt;/code&gt;. Actually, it was the first real use case for it I had ever came up with or seen.&lt;/p&gt;
&lt;h2 id=&quot;%E2%80%9Cbackground-attachment%E2%80%A6-what%3F-i-only-know-scroll-and-fixed!%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/04/background-attachment-local/#%E2%80%9Cbackground-attachment%E2%80%A6-what%3F-i-only-know-scroll-and-fixed!%E2%80%9D&quot;&gt;“background-attachment… what? I only know scroll and fixed!”&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scroll&lt;/code&gt; and &lt;code&gt;fixed&lt;/code&gt; were the only values for background-attachment back in the days of CSS 2.1. &lt;code&gt;scroll&lt;/code&gt; is the initial value and positions the background relative to &lt;em&gt;the element it’s applied on&lt;/em&gt;, whereas &lt;code&gt;fixed&lt;/code&gt; positions it relative to &lt;em&gt;the viewport&lt;/em&gt;, resulting in the background staying in place when the page was scrolled. As a result of these definitions, when only a part of the page was scrollable (e.g. a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with &lt;code&gt;overflow: auto&lt;/code&gt;), its background did not scroll when the container itself was scrolled.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://w3.org/TR/css3-background&quot;&gt;Backgrounds &amp;amp; Borders Level 3&lt;/a&gt;, a new value was added to lift this restriction: &lt;a href=&quot;http://www.w3.org/TR/css3-background/#local0&quot;&gt;&lt;code&gt;local&lt;/code&gt;&lt;/a&gt;. When &lt;code&gt;background-attachment: local&lt;/code&gt; is applied, the background is positioned relative to the element’s contents. The result is that it scrolls when the element is scrolled. This is not a new feature, it has been with us since &lt;a href=&quot;http://www.w3.org/TR/2005/WD-css3-background-20050216/#the-background-attachment&quot;&gt;the first drafts of Backgrounds and Borders 3 in 2005&lt;/a&gt; (of course, implementations took some more time, starting from 2009).&lt;/p&gt;
&lt;p&gt;If the way it works seems unclear, play a bit with this dabblet that demonstrates all three values (your browser needs to support all three of course):&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 600px;&quot; src=&quot;https://dabblet.com/gist/2494566&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;%E2%80%9Cok%2C-i-get-it.-back-to-the-scrolling-shadows-please%3F%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/04/background-attachment-local/#%E2%80%9Cok%2C-i-get-it.-back-to-the-scrolling-shadows-please%3F%E2%80%9D&quot;&gt;“Ok, I get it. Back to the scrolling shadows please?”&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Basically, the idea was to convert these absolutely positioned pseudoelements into background layers that have background-attachment: local applied. I tried it, it worked and helped reduce the code quite a lot. Here’s the dabblet with it:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 600px;&quot; src=&quot;https://dabblet.com/gist/2462915&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;The drawback of this is that it reduces browser support a bit. Roman’s original experiment might even work in IE8, if the gradients are converted into images (gradients are not essential for the functionality). When you rely on background-attachment: local, you reduce browser support to &lt;strong&gt;IE9+, Safari 5+, Chrome&lt;/strong&gt; and &lt;strong&gt;Opera&lt;/strong&gt;. Firefox is the most notable absentee of that list, you can vote on &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=483446&quot;&gt;bug #483446&lt;/a&gt; if you’re interested in getting them to implement it (edit: Firefox supports this now [2013]).&lt;/p&gt;
&lt;p&gt;However, browser support is not that important, since the effect degrades very gracefully. On browsers that don’t support this, you just get no shadow. ;)&lt;/p&gt;
</content>
  </entry><entry>
    <title>How I got into web development — the long version</title>
    <link href="https://lea.verou.me/2012/05/how-i-got-into-web-development-the-long-version/"/>
    <updated>2012-05-01T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1703</id>
    <content xml:lang="en" type="html">&lt;p&gt;I’m often asked how I got into web development, especially from people that haven’t met many women in the field. Other times it’s people with little kids and they are asking for guidance about how to steer them into programming. I promised them that I would write a long post about it at some point, and now that I’m in the verge of some big changes in my life, I’ve started reflecting on the fascinating journey that got me here.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rmurphey.com/&quot;&gt;Rebecca Murphey&lt;/a&gt; &lt;a href=&quot;http://rmurphey.com/blog/2012/03/25/girls-and-computers/&quot;&gt;wrote something similar&lt;/a&gt; a while back (albeit much shorter and less detailed), and I think it would be nice if more people in the field started posting their stories, especially women. I sure would find them interesting and if you give it a shot, you’ll see it’s quite enjoyable too. I sure had a blast writing this, although it was a bit hard to hit the “Publish” button afterwards.&lt;/p&gt;
&lt;p&gt;Keep in mind that this is just my personal story (perhaps in excruciating detail). &lt;strong&gt;I’m not going to attempt to give any advice, and I’m not suggesting that my path was ideal.&lt;/strong&gt; I’ve regretted some of my decisions myself, whereas some others proved to be great, although they seemed like failures at the time. I think I was quite lucky in how certain things turned out and I thank the &lt;a href=&quot;http://en.wikipedia.org/wiki/Flying_Spaghetti_Monster&quot;&gt;Flying Spaghetti Monster&lt;/a&gt; daily for them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This is going to be a very long read (over 3000 words) and there is no tl;dr.&lt;/p&gt;
&lt;h2 id=&quot;childhood-(1986-1998)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/05/how-i-got-into-web-development-the-long-version/#childhood-(1986-1998)&quot;&gt;Childhood (1986-1998)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was born on June 13th, 1986. I grew up in a Greek island called &lt;a href=&quot;http://en.wikipedia.org/wiki/Lesbos&quot;&gt;Lesbos&lt;/a&gt; (yes, &lt;a href=&quot;http://en.wikipedia.org/wiki/Lesbian#Origin_and_transformation_of_the_term&quot;&gt;the island where the word “lesbian” comes from&lt;/a&gt;, in case you were wondering), in the small town of &lt;a href=&quot;http://maps.google.com/maps?q=kalloni+lesbos&amp;amp;um=1&amp;amp;ie=UTF-8&amp;amp;hq=&amp;amp;hnear=0x14ba921f491ef7a1:0xdc822d7cec0b916e,Kalloni,+Greece&amp;amp;ei=ysyfT5CZMYep4gSExvWeAw&amp;amp;sa=X&amp;amp;oi=geocode_result&amp;amp;ct=title&amp;amp;resnum=1&amp;amp;ved=0CCQQ8gEwAA&quot;&gt;Kalloni&lt;/a&gt;. I didn’t have a computer as a kid, but I always loved making things. I had no siblings, so my childhood was mostly spent playing solitarily with paper, fabric, staples, scissors and the like. I was making all kinds of stuff: Little books, wallets, bags, pillows, anything I could come up with that was doable with my limited set of tools and materials. I also loved drawing. I had typical toys as well (legos, dolls, playmobil, cars, teddy bears) but the prevailing tendency in my childhood was &lt;em&gt;making stuff&lt;/em&gt;. I wasn’t particularly interested in taking things apart to see how they worked, I just liked making new things.&lt;/p&gt;
&lt;p&gt;I had never used a computer until I was around 10. We spent Christmas with an uncle of mine and his family in Athens. That uncle was working at Microsoft Hellas, and had a Windows 95 machine in his apartment. I got hooked from the first moment I used that computer. I didn’t do anything particularly interesting in it, just played around with MS Paint and some other equally mundane applications. However, for me it was so fascinating that I spent most of my Christmas vacation that year exploring Windows 95.&lt;/p&gt;
&lt;p&gt;After I returned to Lesbos, I knew I badly wanted a computer for myself. However, computers were quite expensive back then, so I didn’t get one immediately, even though my family was quite well off. My father started taking me to his job’s offices on weekends, and I spent hours every time on a Windows 3.1 machine, exploring it, mostly drawing on its paint app.&lt;/p&gt;
&lt;p&gt;In 1997, my mother finally bought me a computer. It cost around 700K drachmas (around €2000?) which was much more at the time than it is today. It was a Pentium MMX at 233MHz with 32MB of RAM and a 3.1GB hard drive, which was quite good at the time. I was so looking forward for it to arrive, and when it did, I spent every afternoon using it, from the moment I got back from school, until late at night. The only times I didn’t use my computer was when I was reading computer books or magazines or studying for school. In a year, I had become quite proficient about how its OS worked (Windows 95), editing the registry, trying to learn DOS (its command line). I also exercised my creativity by making magazines and newspapers in Microsoft Word. I’m quite surprised I didn’t break it, even though I was experimenting with anything I could get my cursor on.&lt;/p&gt;
&lt;p&gt;Unfortunately, my computer fascination was largely solitary. There were no other geeks in my little town I could relate to, which I guess made me even more of an introvert. The only people reading my MS Word-generated newspaper were me and a friend of mine. During my years in Lesbos, I only met 2 other kinda geeky kids, and we didn’t really hit it off. One of them was living too far, the other was kind of annoying. :P The former however gave me his fonts, which I was really grateful for. I loved fonts. I didn’t have any typographic sophistication, so I loved about every font, but I remember desperately wanting to make my own. Unfortunately, I never pursued that, as I couldn’t find any font creation software until very recently.&lt;/p&gt;
&lt;p&gt;In late 1997, we visited some relatives in a NYC suburb to spend Christmas there. It was my first time in the US and I fell in love with the place. My uncle, knowing my computer obsession took me to a big computer store called CompUSA. I was like a kid in a candy store! The software that caught my eye the most was called “&lt;a href=&quot;http://en.wikipedia.org/wiki/Clickteam&quot;&gt;Mutimedia Fusion&lt;/a&gt;”. It was a graphical IDE that allowed you to make applications (mostly games and screensavers, but you could potentially make anything) without writing any code. The thought processes involved were the same as in programming, but instead of typing commands, you picked them from menus or wrote mathematical expressions through a GUI. You could even go online and get new plugins that added functionality, but my access to the internet in my little town was very limited.&lt;/p&gt;
&lt;p&gt;I got super excited. The idea of being able to make my very own programs, was too good to be true. I convinced my mother to buy it for me and thankfully, she did. For the year that followed, my afternoons and weekends became way more creative. I wasn’t interested in making games, but more in utility applications. Things that were going to be useful for my imaginary users. My biggest app back then was something that allowed you to draw different kinds of grids (from horizontal and vertical grids to simple 3d-like kinds of grids), with different parameters, or even mix them together and overlay them over an image. Anything that combined programming with graphics was doubly fascinating for me.&lt;/p&gt;
&lt;p&gt;My access to the internet was limited, so I couldn’t share my creations with anybody. What kept me going was the idea that if I make something amazing, it will get popular and people will use it. I had no idea how that would happen, but it was useful as a carrot in front of me that made me constantly strive to improve. We had dial-up, but due to technical issues, I could only connect about 10% of the times I tried it, and even then I had to keep it short as it was quite expensive. I spent my limited time online downloading plugins for Multimedia Fusion, searching anything I could come up with in Altavista and perusing IRC chatrooms with Microsoft Comic Chat.&lt;/p&gt;
&lt;h2 id=&quot;adolescence-(1998-2004)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/05/how-i-got-into-web-development-the-long-version/#adolescence-(1998-2004)&quot;&gt;Adolescence (1998-2004)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After a year of making applications with Multimedia Fusion, I wanted something more flexible and powerful. I wanted to finally learn a programming language. My Microsoft uncle sent me a free copy of Visual Studio, so I was trying to decide which “Visual Whatever” language was best to start with. Having read that C++ was “teh pro stuff”, I got a book about Visual C++. Unfortunately, I couldn’t understand much. I decided that it was probably too early for me and C++, so I got a Visual Basic 6 book.  It was about 10cm thick, detailing everything you could ever possibly want to learn about Visual Basic. Thankfully, Visual Basic didn’t prove so hard, so I started with it, making small apps and finally ported my grid application from Multimedia Fusion to Visual Basic 6.&lt;/p&gt;
&lt;p&gt;I had a very fun and creative 3 years, full of new knowledge and exercise for the mind. Unfortunately, when I reached 15, I realized that boys in my little town weren’t really into geeky girls. I decided that if I wanted a boyfriend, I should quit programming (if any geeky teenage girls are reading this: Just be patient. It gets better, you can’t imagine how much). It “helped” that my computer was broken during the summer and I had to wait for it to come back, so I had to find other things to do in the meantime.&lt;/p&gt;
&lt;p&gt;Unable to code, I pursued other geeky interests, such as mobile phones and mathematics, which I guess shows that no matter how much you try, you can’t escape who you are. In retrospect, this helped me, as I got some pretty good distinctions in the various stages of the national mathematical competitions, up to 2nd place nationally for two years in a row (these competitions had 4 stages. I failed the preliminary contest for the Balkan Mathematical Olympiad, so I never went there.). I was fascinated by Number Theory and started wanting to become a mathematician, rather than a programmer. Sometime around then I also moved from my small town to Athens, which I wanted to do since childhood.&lt;/p&gt;
&lt;p&gt;When the time of career decisions came, I chickened out. I knew that if I became a mathematician and failed at research, I would end up teaching mathematics in a high school. I didn’t want that, so I picked a “safer” career path. Since my grades were very good, I went to study Electrical and Computer Engineering, which is a profession held in very high esteem in Greece, about as much as lawyers and doctors. I told myself that I would probably find it interesting, as it would involve lots of mathematics and programming. I was wrong.&lt;/p&gt;
&lt;h2 id=&quot;adulthood-(2004-today)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/05/how-i-got-into-web-development-the-long-version/#adulthood-(2004-today)&quot;&gt;Adulthood (2004-Today)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was away from Athens, in a city that most Greeks love (Thessaloniki). However, I found it cold, gray, old and with hordes of cockroaches. I hated it with a passion. I also hated my university. It involved little coding and little theoretical Mathematics, the kind that I loved. Most of it was physics and branches of Mathematics I didn’t like, such as linear algebra. It only had two coding courses, both of which were quite mundane and lacked any kind of creativity. Moreover, most of my fellow students had perviously wanted to become doctors and failed medical school so they just went for the next highly respected option. They had no interest in technology and their main life goals were job security, making money and be respected. I felt more lonely than ever. After the first semester, I slowly stopped going to lectures and eventually gave up socializing with them. Not going to lectures is not particularly unusual for a university student in Greece. Most Greeks do it after a while, since attendance is not compulsory and Greek universities are free (as in beer). As long as you pass your exams every semester and do your homework, you can still get a degree just fine.&lt;/p&gt;
&lt;p&gt;During my first summer as a university student, we decided with my then boyfriend to make an online forum. We were both big fans of online forums and we wanted to make something better. He set up the forum software in an afternoon (using &lt;a href=&quot;http://www.simplemachines.org/&quot;&gt;SMF&lt;/a&gt;) and then we started customizing it. I didn’t know much about web development back then, so I constrained myself to helping with images and settings. After 2 months, the forum grew to around 200 members, and we decided to switch to the more professional (and costly) forum software, &lt;a href=&quot;https://www.vbulletin.com/&quot;&gt;vBulletin&lt;/a&gt;. It was probably too early, but the signs were positive, so we thought better earlier than later.&lt;/p&gt;
&lt;p&gt;The migration took 2-3 days of nonstop work, during which we took turns in sleeping and worked the entire time that we were awake. We wanted everything to be perfect, even the forum theme should be as similar to the old one as possible. I had a more involved role in this, and I even started learning a bit of PHP while trying to install some “mods” (modifications to the vBulletin source code that people posted). Due to my programming background, I caught up with it quite easily and after a few months, I was the only one fiddling with code on the website.&lt;/p&gt;
&lt;p&gt;I was learning more and more about PHP, HTML, CSS and (later) JavaScript. That online forum was my primary playground, where I put my newly acquired knowledge into practice. Throughout these years, I released quite a few of &lt;a href=&quot;http://www.vbulletin.org/forum/member.php?u=106158&amp;amp;hacksort=title#hacks&quot;&gt;my own vBulletin mods&lt;/a&gt;, many of which are still in use in vBulletin forums worldwide. Having spent so many years making apps that nobody used, I found it fascinating that you can make something and have people use it only a few hours later.&lt;/p&gt;
&lt;p&gt;By the end of 2005, I started undertaking some very small scale client work, most (or all) of which doesn’t exist anymore. I was not only interested in code, but also in graphic design. I started buying lots of books, both about the languages involved and graphic design principles. The pace of learning new things back then was crazy, almost on par with my early adolescence years.&lt;/p&gt;
&lt;p&gt;In late 2006, I decided I couldn’t take it any more with my university. I had absolutely no interest in Electrical Engineering, and my web development work had consumed me entirely. I didn’t want to give up on higher education, so I tried to decide where I should switch to. Computer Science was the obvious choice, but having grown up with civil engineer parents, I didn’t want to give up on engineering just yet (strangely, CS is not considered engineering in Greece, it’s considered a science, kinda like Mathematics). I also loved graphic design, so I considered going to a graphic design school, but there are no respected graphic design universities in Greece and I wasn’t ready to study abroad. I was also in a long term relationship in Greece, which I didn’t want to give up on.&lt;/p&gt;
&lt;p&gt;I decided to go with Architecture, although I had no interest in buildings. The idea was that it bridges engineering and art, so it would satisfy both of my interests. Unfortunately, since I hadn’t taken drawing classes in high school, I had to take the entire national university placement exams (Πανελλήνιες), again, including courses I aced the first time, such as Mathematics. I was supposed to spend the first half of 2007 preparing for these exams, but instead I spent most of it freelancing and learning more about web development. I did quite well on the courses I had been previously examined on (although not as good as the first time), but borderline failed freehand drawing. Passing freehand drawing was a requirement for Architecture, so that was out of the question now. This seemed like a disaster at the time, but in retrospect, I’m very grateful to the grader that failed me. I would’ve been utterly miserable in Architecture.&lt;/p&gt;
&lt;p&gt;Not wanting to go back to EE, I took a look at my options. My mother suggested Computer Science and even though I was still a bit reluctant, I put it in my application. I picked a &lt;a href=&quot;http://www.cs.aueb.gr/&quot;&gt;CS school&lt;/a&gt; that seemed more programming-oriented, as I didn’t want to have many physics, computer architecture and circuits courses again. When the results came out, I had been placed there. It turned out to be one of my best decisions. I could get good grades on most of the courses with hardly any studying, as I knew lots of the stuff already. I also learned a bunch of useful new things. I can’t say that everything I learned was useful for my work, but it was enough to make it worth it.&lt;/p&gt;
&lt;p&gt;In mid 2007, the online forum we built had grown quite a lot. We decided to make a company around it, in order to be able to accept more high-end advertising. We had many dreams about expanding what it does, most of which never got materialized. In 2008, after a long time of back and forth, we officially registered &lt;a href=&quot;http://fresset.gr/&quot;&gt;a company&lt;/a&gt; for it so I stopped freelancing and focused solely on that.&lt;/p&gt;
&lt;p&gt;It wasn’t easy, but eventually it started generating a very moderate income. I decided to start a Greek blog to post about my CSS and JS discoveries, but it didn’t go very well. After a dozen posts or so, I decided to close it down, and start a new one, in English this time. It turned out that developers abroad were more interested in what I had to say, so I got my first conference invitation in 2010, to speak in a new Polish conference called &lt;a href=&quot;http://2010.front-trends.com/&quot;&gt;Front-Trends&lt;/a&gt;. When I got the invitation email, I couldn’t believe my eyes. Why would someone want &lt;strong&gt;me&lt;/strong&gt; to speak at a conference? I wasn’t that good! How would I speak in front of all these people? It even crossed my mind that it might be a joke, but they had confirmed speakers like Douglas Crockford, Jake Archibald, Jeremy Keith and Paul Bakaus. I told my inner shy self to shut up, and enthusiastically agreed to speak there.&lt;/p&gt;
&lt;p&gt;I spent the 8 months until that conference stressing about my presentation. I had never been to a conference outside Greece, and the only Greek conference I had attended was a graphic design one. I had only spoken once before, to an audience of around 30 people in a barcamp-style event. I decided that I didn’t want my first web development conference to be the one I speak at, so I bought a ticket for &lt;a href=&quot;http://fronteers.nl/congres/2010&quot;&gt;Fronteers 2010&lt;/a&gt;. It had a great line-up and was quite affordable (less than €300 for a ticket). I convinced 3 of my friends to come with me (for vacation), and we shared a quadruple hotel room, so the accommodation ended up not costing too much either.&lt;/p&gt;
&lt;p&gt;It was an amazing experience that I will never forget. I met people I admired and only knew through their work online. It was the first time in my life that I was face to face with people that really shared the same interests. I even met my partner to date there. Until today, Fronteers is my favorite conference. Partly because it was my first, partly because it’s a truly great conference with a very strong sense of community.&lt;/p&gt;
&lt;p&gt;There was a talk or two at Fronteers that year, which were criticized for showing things that most people in the audience already knew. This became my worst fear about giving talks. Until today, I always try to add nuggets of more advanced techniques in my talks, to avoid getting that kind of reaction, and it works quite well. I remember going back home after Fronteers and pretty much changing all my slides for my upcoming talk. I trashed my death-by-powerpoint kind of slides and my neat bulleted lists and made a web-based slideshow with interactive examples for everything I wanted to show.&lt;/p&gt;
&lt;p&gt;I was incredibly nervous before and during my Front-Trends talk, so I kept mumbling and confusing my words. However, despite what I thought throughout, the crowd there loved it. The comments on twitter were enthusiastic! Many people even said it was the best talk of the conference.&lt;/p&gt;
&lt;p&gt;That first talk was the beginning of a roller-coaster that I just can’t describe. I started getting more invitations for talks, articles, workshops and many other kinds of fascinating things. I met amazing people along the way. Funny, like-minded, intelligent people. To this day, I think that getting in this industry has been the best thing in my life. I have experienced no sexism or other discrimination, nothing negative, just pure fun, creativity and a sense that I belong in a community with like-minded people that understand me. It’s been great, and I hope it continues to be like this for a very long time. Thank you all.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Text masking — The standards way</title>
    <link href="https://lea.verou.me/2012/05/text-masking-the-standards-way/"/>
    <updated>2012-05-04T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1721</id>
    <content xml:lang="en" type="html">&lt;p&gt;As much as I like .net magazine, I was recently outraged by their “&lt;a href=&quot;http://www.netmagazine.com/tutorials/texturise-web-type-css&quot;&gt;Texturizing Web Type&lt;/a&gt;” article. It features a way to apply a texture to text with &lt;code&gt;-webkit-mask-image&lt;/code&gt;, presenting it as an experimental CSS property and misleading readers. There are even -moz-, -o- and -ms- prefixes for something that is not present in any specification, and is therefore unlikely to ever be supported by any non-WebKit browser, which further contributes to the misdirection. A while back, &lt;a href=&quot;http://www.alistapart.com/articles/every-time-you-call-a-proprietary-feature-css3-a-kitten-dies/&quot;&gt;I wrote&lt;/a&gt; about how detrimental to our work and industry such proprietary features can be.&lt;/p&gt;
&lt;p&gt;A common response to such complaints is that they are merely philosophical and who cares if the feature works right now and degrades gracefully. This argument could be valid for some cases, when the style is just a minor, gracefully degrading enhancement and no standards compliant alternative is present (for example, I’ve used &lt;code&gt;::-webkit-scrollbar&lt;/code&gt; styles myself). However, this is not the case here. We have had &lt;a href=&quot;http://www.w3.org/TR/2001/WD-SVG11-20011030/&quot; title=&quot;Warning: This is a very early version of the SVG 1.1 spec. For reference, use the latest one.&quot;&gt;a standards compliant alternative for this for the past 11 years&lt;/a&gt; and it’s called SVG. It can also do much more than masking, if you give it a chance. Here’s an example of texturized text with SVG:&lt;/p&gt;
&lt;iframe style=&quot;width: 100%; height: 600px;&quot; src=&quot;https://dabblet.com/gist/2594420&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Thanks to &lt;a href=&quot;https://twitter.com/devongovett/status/198513261333848064&quot;&gt;@devongovett’s improvements&lt;/a&gt;, the code is now simpler &amp;amp; shorter.&lt;/p&gt;
&lt;p&gt;Yes, the syntax might be more unwieldy but it works in a much wider range of browsers: &lt;strong&gt;Chrome, Safari, Firefox, IE9, Opera&lt;/strong&gt;. Also, it’s trivial to make a script that generates the SVG markup from headings and applies the correct measurements for each one. When WebKit fixes &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=65344&quot;&gt;this bug&lt;/a&gt;, we can even move the pattern to a separate SVG file and reference it from there.&lt;/p&gt;
&lt;p&gt;In case you’re wondering about semantics, the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element is considered “flow content” and is therefore allowed in heading elements. Also, even if search engines don’t understand inline SVG, they will just ignore the tags and still see the content inside the &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; element. Based on that, you could even make it degrade gracefully in IE8, as long as you include the HTML5 fix for the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element. Then the CSS rules for the typography will still apply. You’ll just need to conditionally hide the &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;, since IE8 displays a broken image there (a little known fact is that, in HTML, &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt; is basically equivalent to &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, so IE8 treats it as such) .&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Credits to &lt;a href=&quot;https://twitter.com/dstorey&quot;&gt;David Storey&lt;/a&gt;’s &lt;a href=&quot;http://my.opera.com/dstorey/blog/using-svg-masks-for-cut-out-text-effects&quot;&gt;original example&lt;/a&gt; that inspired this.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Poll: ¿Is animation-direction a good idea?</title>
    <link href="https://lea.verou.me/2012/05/is-animation-direction-a-good-idea/"/>
    <updated>2012-05-06T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1736</id>
    <content xml:lang="en" type="html">&lt;h2 id=&quot;%C2%BFanimation-direction%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/05/is-animation-direction-a-good-idea/#%C2%BFanimation-direction%3F&quot;&gt;¿animation-direction?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lets assume you have a CSS animation for &lt;code&gt;background-color&lt;/code&gt; that goes from a shade of yellow (#cc0) to a shade of blue (#079) and repeats indefinitely. The code could be something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@keyframes color {
  from { background: #cc0 }
  to { background: #079 }
}

div {
  animation: color 3s infinite;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we linearize that animation, the progression over time goes like this (showing 3 iterations):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2012/05/is-animation-direction-a-good-idea/images/Screen-shot-2012-05-05-at-19.53.52-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2012/05/is-animation-direction-a-good-idea/images/Screen-shot-2012-05-05-at-19.53.52-.png&quot; alt=&quot;&quot; title=&quot;No animation-direction specified&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the change from the end state to the beginning state of a new iteration is quite abrupt. You could change your keyframes to mitigate this, but there’s a better way. A property with the name &lt;code&gt;animation-direction&lt;/code&gt; gives a degree of control on the direction of the iterations to smooth this out. It also reverses your timing functions, which makes it even smoother.&lt;/p&gt;
&lt;p&gt;In early drafts, only the values &lt;code&gt;normal&lt;/code&gt; and &lt;code&gt;alternate&lt;/code&gt; were allowed. &lt;code&gt;normal&lt;/code&gt; results in the behavior described above, whereas &lt;code&gt;alternate&lt;/code&gt; flips every other iteration (the 2nd, the 4th, the 6th and so on), resulting in a progression like this (note how the 2nd iteration has been reversed):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2012/05/is-animation-direction-a-good-idea/images/Screen-shot-2012-05-05-at-20.04.21-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2012/05/is-animation-direction-a-good-idea/images/Screen-shot-2012-05-05-at-20.04.21--1024x80.png&quot; alt=&quot;&quot; title=&quot;animation-direction: alternate;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The latest draft also adds two more values: &lt;code&gt;reverse&lt;/code&gt; which reverses &lt;strong&gt;every&lt;/strong&gt; iteration and &lt;code&gt;alternate-reverse&lt;/code&gt;, which is the combination of both &lt;code&gt;reverse&lt;/code&gt; and &lt;code&gt;alternate&lt;/code&gt;. Here is a summary of what kind of progression these four values would create for the animation above:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2012/05/is-animation-direction-a-good-idea/images/Screen-shot-2012-05-05-at-20.19.05-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2012/05/is-animation-direction-a-good-idea/images/Screen-shot-2012-05-05-at-20.19.05--1024x362.png&quot; alt=&quot;&quot; title=&quot;animation-direction values&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-problem&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/05/is-animation-direction-a-good-idea/#the-problem&quot;&gt;The problem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was excited to see that &lt;code&gt;reverse&lt;/code&gt; and &lt;code&gt;alternate-reverse&lt;/code&gt; were finally added to the spec, but something in the syntax just didn’t click. I initially thought the reason was that these four values essentially set 2 toggles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;¿Reverse all iterations? yes/no&lt;/li&gt;
&lt;li&gt;¿Reverse even iterations? yes/no&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;so it’s pointless cognitive overhead to remember four distinct values. &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2012Apr/0799.html&quot;&gt;I proposed that they should be split in two keywords&lt;/a&gt; instead, which would even result to &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2012Apr/0804.html&quot;&gt;a simpler grammar&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;The proposal was well received by one of the co-editors of the animations spec (&lt;a href=&quot;https://twitter.com/sgalineau&quot;&gt;Sylvain Galineau&lt;/a&gt;), but there was a dilemma as to whether mixing &lt;code&gt;normal&lt;/code&gt; with &lt;code&gt;alternate&lt;/code&gt; or &lt;code&gt;reverse&lt;/code&gt; would make it easier to learn or more confusing. &lt;strong&gt;This is a point where your opinion would be quite useful.&lt;/strong&gt; Would you expect the following to work, or would you find them confusing?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;animation-direction: normal alternate;&lt;/code&gt; /* Equivalent to animation-direction: alternate; */&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animation-direction: alternate normal;&lt;/code&gt; /* Equivalent to animation-direction: alternate; */&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animation-direction: normal reverse;&lt;/code&gt; /* Equivalent to animation-direction: reverse; */&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animation-direction: reverse normal;&lt;/code&gt; /* Equivalent to animation-direction: reverse; */&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;a-better-(%3F)-idea&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/05/is-animation-direction-a-good-idea/#a-better-(%3F)-idea&quot;&gt;A better (?) idea&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At some point, in the middle of writing this blog post (I started it yesterday), while gazing at the graphic above, I had a lightbulb moment. ¡These values are not two toggles! All four of them control one thing: &lt;strong&gt;which iterations are reversed&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;normal&lt;/code&gt; reverses no iterations&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse&lt;/code&gt; reverses all iterations&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alternate&lt;/code&gt; reverses even iterations&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alternate-reverse&lt;/code&gt; reverses odd iterations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason it’s so confusing and it took me so long to realize myself, is that the mental model suggested by these keywords is detached from the end result, especially in the case of &lt;code&gt;alternate-reverse&lt;/code&gt;. You have to realize that it works as if both &lt;code&gt;alternate&lt;/code&gt; and &lt;code&gt;reverse&lt;/code&gt; were applied in sequence, so &lt;code&gt;reverse&lt;/code&gt; first reverses &lt;strong&gt;all&lt;/strong&gt; iterations and then &lt;code&gt;alternate&lt;/code&gt; reverses the &lt;strong&gt;even&lt;/strong&gt; ones. Even iterations are reversed &lt;strong&gt;twice&lt;/strong&gt;, and are therefore equivalent to the original direction. This leaves the odd ones as being reversed. It’s basically a double negative, making it hard to visualize and understand.&lt;/p&gt;
&lt;p&gt;I thought that a property that would reflect this in a much more straightforward way, would be &lt;code&gt;animation-reverse&lt;/code&gt; (or &lt;code&gt;animation-iteration-reverse&lt;/code&gt;), accepting the following values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt; (equivalent to animation-direction: normal)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all&lt;/code&gt; (equivalent to animation-direction: reverse)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;even&lt;/code&gt; (equivalent to animation-direction: alternate)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;odd&lt;/code&gt; (equivalent to animation-direction: alternate-reverse)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not only this communicates the end result much better, but it’s also more extensible. For example, if in the future it turns out that reversing every 3rd iteration is a common use case, it will be much easier to add expressions to it, similar to the ones :nth-child() accepts.&lt;/p&gt;
&lt;p&gt;I knew before &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2012May/0185.html&quot;&gt;proposing it&lt;/a&gt; that it’s too late for such drastic backwards-incompatible changes in the &lt;a href=&quot;http://www.w3.org/TR/css3-animations/&quot;&gt;Animations module&lt;/a&gt;, however I thought it’s so much better that it’s worth fighting for. After all, &lt;code&gt;animation-direction&lt;/code&gt; isn’t really used that much in the wild.&lt;/p&gt;
&lt;p&gt;Unfortunately, it seems that only me and Sylvain thought it’s better, and even he &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2012May/0188.html&quot;&gt;was reluctant to support the change&lt;/a&gt;, due to the backwards compatibility issues. So, I started wondering if it’s really as much better as I think. &lt;strong&gt;¿What are your thoughts?&lt;/strong&gt; ¿Would it make it simpler for you to understand and/or teach? Author feedback is immensely useful for standardization, so please, &lt;strong&gt;¡voice your opinion!&lt;/strong&gt; Even without justifying it if you don’t have the time or energy. Gathering opinions is incredibly useful.&lt;/p&gt;
&lt;h2 id=&quot;tl%3Bdr&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/05/is-animation-direction-a-good-idea/#tl%3Bdr&quot;&gt;TL;DR&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;¿Is &lt;code&gt;alternate reverse&lt;/code&gt; and &lt;code&gt;reverse alternate&lt;/code&gt; (either would be allowed) a better value for &lt;code&gt;animation-direction&lt;/code&gt; over &lt;code&gt;alternate-reverse&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;¿If so, should redundant combinations of &lt;code&gt;normal&lt;/code&gt; with &lt;code&gt;alternate&lt;/code&gt; or &lt;code&gt;reverse&lt;/code&gt; also be allowed, such as &lt;code&gt;normal alternate&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;¿Or maybe we should ditch it altogether and replace it with &lt;code&gt;animation-reverse&lt;/code&gt;, accepting values of &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;even&lt;/code&gt;, &lt;code&gt;odd&lt;/code&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; If you’re wondering about the flipped question and exclamation marks (¿¡) it’s because &lt;a href=&quot;https://twitter.com/LeaVerou/status/198556042387390464&quot;&gt;I believe they improve the usability of the language&lt;/a&gt; if widely adopted, so &lt;a href=&quot;https://twitter.com/LeaVerou/status/198559059346063360&quot;&gt;I’m doing my part&lt;/a&gt; for it ;) And no, I don’t speak Spanish.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Teaching: General case first or special cases first?</title>
    <link href="https://lea.verou.me/2012/05/teaching-general-case-first-or-special-cases-first/"/>
    <updated>2012-05-09T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1780</id>
    <content xml:lang="en" type="html">&lt;p&gt;A common dilemma while teaching (I’m not only talking about teaching in a school or university; talks and workshops are also teaching), is whether it’s better to first teach some easy special cases and then generalize, or first the general case and then present special cases as merely shortcuts.&lt;/p&gt;
&lt;p&gt;I’ve been revisiting this dilemma recently, while preparing the slides for &lt;a href=&quot;http://lea.verou.me/speaking/&quot;&gt;my upcoming regular expressions talks&lt;/a&gt;. For example: Regex quantifiers.&lt;/p&gt;
&lt;h2 id=&quot;1.-general-rule-first%2C-shortcuts-after&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/05/teaching-general-case-first-or-special-cases-first/#1.-general-rule-first%2C-shortcuts-after&quot;&gt;1. General rule first, shortcuts after&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can use {m,n} to control how many times the preceding group can repeat (m = minimum, n = maximum). If you omit n (like {m,}) it’s implied to be infinity (=“at least m times”, with no upper bound).&lt;/p&gt;
&lt;ul&gt;
&lt;li m=&quot;&quot;&gt;{m, m} can also be written as&lt;/li&gt;
&lt;li&gt;{0,1} can also be written as ?&lt;/li&gt;
&lt;li&gt;{0,} can also be written as *&lt;/li&gt;
&lt;li&gt;{1,} can also be written as +&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;advantages-%26-disadvantages-of-this-approach&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/05/teaching-general-case-first-or-special-cases-first/#advantages-%26-disadvantages-of-this-approach&quot;&gt;Advantages &amp;amp; disadvantages of this approach&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Harder to understand the general rule, so the student might lose interest before moving on to the shortcuts&lt;/li&gt;
&lt;li&gt;After understanding the general rule, all the shortcuts are then trivial.&lt;/li&gt;
&lt;li&gt;If they only remember one thing, it will be the general rule. That’s good.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2.-special-cases-first%2C-general-rule-after&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/05/teaching-general-case-first-or-special-cases-first/#2.-special-cases-first%2C-general-rule-after&quot;&gt;2. Special cases first, general rule after&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You can add ? after a group to make it optional (it can appear, but it may also not).&lt;/li&gt;
&lt;li&gt;If you don’t care about how many times something appears (if at all), you can use *.&lt;/li&gt;
&lt;li&gt;If you want something to appear at least once, you can use +&lt;/li&gt;
&lt;li n=&quot;&quot;&gt;If you want something to be repeated exactly n times, you can use&lt;/li&gt;
&lt;li&gt;If you want to set specific upper and lower bounds, you can use {m,n}. Omit the n for no upper bound.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;advantages-%26-disadvantages-of-this-approach-1&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/05/teaching-general-case-first-or-special-cases-first/#advantages-%26-disadvantages-of-this-approach-1&quot;&gt;Advantages &amp;amp; disadvantages of this approach&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Easy to understand the simpler special cases, building up student interest&lt;/li&gt;
&lt;li&gt;More total effort required, as every shortcut seems like a separate new thing until you get to the general rule&lt;/li&gt;
&lt;li&gt;Special cases make it easier to understand the general rule when you get to it&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-usually-happens&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/05/teaching-general-case-first-or-special-cases-first/#what-usually-happens&quot;&gt;What usually happens&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In most cases, educators seem to favor the second approach. In the example of regex quantifiers, pretty much every regex book or talk explains the shortcuts first and the general rule afterwards. In other disciplines, such as Mathematics, I think both approaches are used just as often.&lt;/p&gt;
&lt;p&gt;What do you think? Which approach do you find easier to understand? Which approach do you usually employ while teaching?&lt;/p&gt;
</content>
  </entry><entry>
    <title>Hacking lookahead to mimic intersection, subtraction and negation</title>
    <link href="https://lea.verou.me/2012/05/hacking-lookahead-to-mimic-intersection-subtraction-and-negation/"/>
    <updated>2012-05-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1784</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; To understand the following, I expect you to know how regex lookahead works. If you don’t, &lt;a href=&quot;http://www.regular-expressions.info/lookaround.html&quot;&gt;read about it first&lt;/a&gt; and return here after you’re done.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I was quite excited to discover this, but to my dismay, &lt;a href=&quot;https://twitter.com/slevithan/status/201340048317227008&quot;&gt;Steven Levithan assured me&lt;/a&gt; it’s actually well known. However, I felt it’s so useful and underdocumented (the only references to the technique I could find was several StackOverflow replies) that I decided to blog about it anyway.&lt;/p&gt;
&lt;p&gt;If you’ve been using regular expressions for a while, you surely have stumbled on a variation of the following problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Intersection&lt;/strong&gt;: “I want to match something that matches pattern A AND pattern B” &lt;em&gt;Example: A password of at least 6 characters that contains at least one digit, at least one letter and at least one symbol&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subtraction&lt;/strong&gt;: “I want to match something that matches pattern A but NOT pattern B” &lt;em&gt;Example:&lt;/em&gt; &lt;em&gt;Match any integer that is not divisible by 50&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Negation&lt;/strong&gt;: “I want to match anything that does NOT match pattern A” &lt;em&gt;Example: Match anything that does NOT contain the string “foo”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even though in ECMAScript we can use the caret (^) to negate a character class, we cannot negate anything else. Furthermore, even though we have the pipe character to mean OR, we have nothing that means AND. And of course, we have nothing that means “except” (subtraction). All these are fairly easy to do for single characters, through character classes, but not for entire sequences.&lt;/p&gt;
&lt;p&gt;However, we can mimic all three operations by taking advantage of the fact that lookahead is zero length and therefore does not advance the matching position. We can just keep on matching to our heart’s content after it, and it will be matched against the same substring, since the lookahead itself consumed no characters. For a simple example, the regex &lt;code&gt;/^(?!cat)&#92;w{3}$/&lt;/code&gt; will match any 3 letter word that is NOT “cat”. This was a very simple example of &lt;strong&gt;subtraction&lt;/strong&gt;. Similarly, the solution to the subtraction problem above would look like &lt;code&gt;/^(?!&#92;d+[50]0)&#92;d+$/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For &lt;strong&gt;intersection&lt;/strong&gt; (AND), we can just chain multiple positive lookaheads, and put the last pattern as the one that actually captures (if everything is within a lookahead, you’ll still get the same boolean result, but not the right matches). For example, the solution to the password problem above would look like &lt;code&gt;/^(?=.*&#92;d)(?=.*[a-z])(?=.*[&#92;W_]).{6,}$/i&lt;/code&gt;. Note that if you want to support IE8, you have to take &lt;a href=&quot;http://blog.stevenlevithan.com/archives/regex-lookahead-bug&quot;&gt;this bug&lt;/a&gt; into account and modify the pattern accordingly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Negation&lt;/strong&gt; is the simplest: We just want a negative lookahead and a .+ to match anything (as long as it passes the lookahead test). For example, the solution to the negation problem above would look like &lt;code&gt;/^(?!.*foo).+$/&lt;/code&gt;. Admittedly, negation is also the least useful on its own.&lt;/p&gt;
&lt;p&gt;There are caveats to this technique, usually related to what actually matches in the end (make sure your actual capturing pattern, outside the lookaheads, captures the entire thing you’re interested in!), but it’s fairly simple for just testing whether something matches.&lt;/p&gt;
&lt;p&gt;Steven Levithan took lookahead hacking to the next level, by using something similar to &lt;a href=&quot;http://blog.stevenlevithan.com/archives/mimic-conditionals&quot;&gt;mimic conditionals&lt;/a&gt; and &lt;a href=&quot;http://blog.stevenlevithan.com/archives/mimic-atomic-groups&quot;&gt;atomic groups&lt;/a&gt;. Mind = blown.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Why I bought a high-end MacBook Air instead of the Retina MBP</title>
    <link href="https://lea.verou.me/2012/06/why-i-bought-a-high-end-macbook-air-instead-of-the-retina-mbp/"/>
    <updated>2012-06-17T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1803</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2012/06/why-i-bought-a-high-end-macbook-air-instead-of-the-retina-mbp/images/my-mba.jpg&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2012/06/why-i-bought-a-high-end-macbook-air-instead-of-the-retina-mbp/images/my-mba-300x224.jpg&quot; alt=&quot;&quot; title=&quot;My new MacBook Air&quot; /&gt;&lt;/a&gt;After the WWDC keynote, I was convinced I would buy a new MacBook Air. I was looking forward to any announcements about new hardware during the event, as my 13&amp;quot; 2010 MacBook Pro (Henceforth abbreviated as MBP) was becoming increasingly slow and dated. Also, I wanted to gift my MBP to my mother, who is currently using a horrible tiny Windows XP Netbook and every time I see her struggling to work on it, my insides hurt. All tweets about my shopping plans, or, later, about my new toy (I bought it yesterday) were met with surprise and bewilderment: I was repeatedly bombarded with questions asking why I’m not getting a Retina MacBook Pro, over and over again. The fact that I paid about $2200 + tax for it (it’s the best 13&amp;quot; Air you can currently get) made it even more weird: &lt;strong&gt;If you could afford that, why wouldn’t you possibly get the Retina MBP at the exact same price?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At first, I tried to reply with individual tweets to everyone that asked. Then I got tired of that and started replying with links to the first tweets, then I decided to write a blog post. So, here are my reasons:&lt;/p&gt;
&lt;h3 id=&quot;portability&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/06/why-i-bought-a-high-end-macbook-air-instead-of-the-retina-mbp/#portability&quot;&gt;Portability&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I travel a lot. For me, it’s very important to be able to use my laptop in a cramped airplane seat, or while standing in a line. You can’t really do that with a 15&amp;quot; MacBook Pro, even with the new slimmer design. I wanted to be able to quickly pull it out of my tote bag with one hand, hold it with said hand and quickly look up something with the other hand. Usage scenarios of that sort are just unthinkable for big laptops. Of course, portability is not the only thing that matters, as I only use one laptop as my main work machine. Having two machines, one for portability and one for “real work”, always seemed to me like more hassle than it’s worth. So, a 11&amp;quot; MacBook Air was also out of the question. Which brings us to the middle ground of a 13&amp;quot; laptop. All my laptops had always been around 13&amp;quot;. It’s a perfect trade-off between power and portability and I don’t wish to change that any time soon. It was quite simple: The 13&amp;quot; Air is more portable than my MBP. The 15&amp;quot; Retina MBP was less portable. I needed more portability than I had, not less.&lt;/p&gt;
&lt;h3 id=&quot;i-saw-the-retina-mbp-and-wasn%E2%80%99t-too-impressed&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/06/why-i-bought-a-high-end-macbook-air-instead-of-the-retina-mbp/#i-saw-the-retina-mbp-and-wasn%E2%80%99t-too-impressed&quot;&gt;I saw the Retina MBP and wasn’t too impressed&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I first went to the Apple Store to buy the MacBook Air, I saw the new Retina display. I even managed to use it a bit, despite the swarm of fellow geeks nerdgasming uncontrollably around it. I won’t lie: I was tempted at first. The display is very crisp indeed, although the difference between icons that were not updated for the Retina is quite obvious, especially next to their accompanying text (which is always crisp, since text is vector-based). I started being unsure about my decision, as &lt;a href=&quot;http://www.stubbornella.org/content/&quot;&gt;Nicole Sullivan&lt;/a&gt; can attest (she was with me). And then it dawned on me: Hey, I should see the MacBook I was planning to buy in person too. Maybe its screen is also quite crisp. Maybe the difference won’t even be that noticeable. I was right: My simple, untrained eyes could not really tell the difference. MacBook Airs have a decently crisp screen. Of course, if you put them next to each other, I’d imagine the difference would be fairly obvious. But who does that?&lt;/p&gt;
&lt;p&gt;However, my impression still wasn’t sufficient to make a decision. I’ve learned not to trust my unreliable human senses too much. I needed numbers. Calculating the actual DPI of a monitor is actually fairly simple: All you need is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Pythagorean_theorem&quot;&gt;Pythagorean theorem&lt;/a&gt; you learned in school, to calculate the hypotenuse of the screen in pixels, and then divide that number by the length of the diagonal in inches. The result will be the number of pixels per inch, commonly (and slightly incorrectly) referred to as DPI (PPI is more correct). If you know basic JavaScript, you don’t even need a calculator, just your ol’ trusty console.&lt;/p&gt;
&lt;p&gt;I even wrote a handy function that does it for me:&lt;/p&gt;
&lt;p&gt;function dpi(w,h,inches) { return Math.round(Math.sqrt(w*w + h*h)/inches) }&lt;/p&gt;
&lt;p&gt;For the 13&amp;quot; MacBook Air, the DPI is:&lt;/p&gt;
&lt;p&gt;&amp;gt; dpi(1440, 900, 13.3)
128&lt;/p&gt;
&lt;p&gt;For the Retina MBP, it’s:&lt;/p&gt;
&lt;p&gt;&amp;gt; dpi(2880, 1800, 15.4)
 221&lt;/p&gt;
&lt;p&gt;220 DPI is certainly higher than 130, but it’s not the kind of eyegasm-inducing difference I experienced when I moved from an iPhone 3G to an iPhone 4 (the difference there was 163 DPI vs 326 DPI).&lt;/p&gt;
&lt;h3 id=&quot;i-don%E2%80%99t-want-to-distance-myself-too-much-from-the-average-web-user&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/06/why-i-bought-a-high-end-macbook-air-instead-of-the-retina-mbp/#i-don%E2%80%99t-want-to-distance-myself-too-much-from-the-average-web-user&quot;&gt;I don’t want to distance myself too much from the average web user&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It happens more than we like to admit: We get cool new hardware, and eventually we’re carried away and think most web users are close to our level. We start designing for bigger and bigger resolutions, because it’s hard to imagine that some people are still on 1024x768. We code to better CPUs, because it’s hard to imagine how crappy computers many of our target users have. We don’t care about bandwidth and battery, because they aren’t a concern for most of us. Some of us will realize before launching, during a very painful testing session, some others will only realize after the complaints start pouring in. It’s the same reason a website always looks and works better in the browser its developers use, even though almost always it gets tested in many others.&lt;/p&gt;
&lt;p&gt;We like to think we’re better than that, that we always test, that we never get carried away, but in most cases we are lying to ourselves. So, even though I recognize that I probably have much better hardware than most web users, I consciously try to avoid huge resolutions as I know I’ll get carried away. I try to keep myself as close to the average user as I can tolerate. Using IE9 on a 1024x768 resolution would be over that threshold, but not using a Retina display is easily tolerable.&lt;/p&gt;
&lt;h3 id=&quot;that%E2%80%99s-all-folks&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/06/why-i-bought-a-high-end-macbook-air-instead-of-the-retina-mbp/#that%E2%80%99s-all-folks&quot;&gt;That’s all folks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hope this makes sense. Hopefully, it might help others trying to decide between the two. I sure am very happy so far with my new Air :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>So, you’ve been invited to speak</title>
    <link href="https://lea.verou.me/2012/06/so-youve-been-invited-to-speak/"/>
    <updated>2012-06-25T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1824</id>
    <content xml:lang="en" type="html">&lt;p&gt;I’ve been lucky enough to be invited to do &lt;a href=&quot;http://lea.verou.me/speaking/#past&quot;&gt;about 25 talks&lt;/a&gt; over the course of the past few years and I have quite &lt;a href=&quot;http://lea.verou.me/speaking/#upcoming&quot;&gt;a few upcoming gigs&lt;/a&gt; as well, most of them at international conferences around Europe and the US. Despite my speaking experience, I’m still very reluctant to call myself a “professional speaker” or even a “speaker” at all. In case you &lt;a href=&quot;https://twitter.com/leaverou&quot;&gt;follow me on twitter&lt;/a&gt;, you might have noticed that my bio says “Often pretends to be a speaker”, and that captures exactly how I feel. I’m not one of those confident performers that don’t just present interesting stuff, but also can blurt jokes one after the other, almost like stand-up comedians and never backtrack or go “ummm”. I greatly admire these people and I aspire to become as confident as them on stage one day. People like &lt;a href=&quot;https://twitter.com/aral&quot;&gt;Aral Balkan&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/codepo8&quot;&gt;Christian Heilmann&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/stubbornella&quot;&gt;Nicole Sullivan&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jaffathecake&quot;&gt;Jake Archibald&lt;/a&gt; and many others. Unlike them, I often backtrack mid-sentence, say a lot of &amp;quot;ummmm&amp;quot;s and sometimes talk about stuff that was going to be later in my slides, all of which are very awkward.&lt;/p&gt;
&lt;p&gt;However, I’ve reached the conclusion that I must be doing something right. I do get a lot of overwhelmingly positive feedback after almost every talk, even by people I admire in the industry. I don’t think I’ve ever gotten a negative comment for a talk, even in cases that I thought I had screwed up. Naturally, after all these conferences, I’ve attended a lot of technical talks myself, and I’ve gathered some insight on what constitutes a technical talk the audience will enjoy. I’ve been pondering to write a post with advice about this for a long time, but my lack of confidence about my speaking abilities put me off the task. However, since people &lt;a href=&quot;https://twitter.com/briangarcia/status/213321684890025984&quot;&gt;seem&lt;/a&gt; &lt;a href=&quot;https://twitter.com/yaypie/status/213307187475386369&quot;&gt;to&lt;/a&gt; &lt;a href=&quot;https://twitter.com/miketaylr/status/213299054166286337&quot;&gt;consider&lt;/a&gt; &lt;a href=&quot;https://twitter.com/aral/status/210720110535651330&quot;&gt;me&lt;/a&gt; &lt;a href=&quot;https://twitter.com/aral/status/209580131470147585&quot;&gt;good&lt;/a&gt;, I figured it might help others doing technical talks as well.&lt;/p&gt;
&lt;p&gt;All of the following are rules of thumb. You have to keep in mind that there are exceptions to every single one, but it’s often quicker and more interesting to talk in absolutes. I will try to stay away from what’s already been said in other similar articles, such as “tell a story” or “be funny” etc, not because it’s bad advice, but because a) I’m not really good at those so I prefer to let others discuss them and b) I don’t like repeating stuff that’s already been said numerous times before. I will try to focus on what I do differently, and why I think it works. It might not fit your style and that’s ok. Audiences like a wide range of presentation styles, otherwise I’d be screwed, as I don’t fit the traditional “good speaker” profile. Also, it goes without saying that some of my advice might be flat out wrong. I’m just trying to do pattern recognition to figure out why people like my talks. That’s bound to be error-prone. My talks might be succeeding in spite of X and not because of it.&lt;/p&gt;
&lt;h3 id=&quot;1.-do-something-unique&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/06/so-youve-been-invited-to-speak/#1.-do-something-unique&quot;&gt;1. Do something unique&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are many nice talks with good minimal slides (almost everyone has read &lt;a href=&quot;http://www.presentationzen.com/&quot;&gt;Presentation Zen&lt;/a&gt; by now), funny pictures, good content and confident presenters. In fact, they dominate almost every conference I’ve been at. You can always become a good speaker by playing it safe, and many famous speakers in the industry have earned their fame by doing so. There is absolutely nothing wrong with that. However, to stand out doing that kind of talk, you need to be &lt;strong&gt;really, really good&lt;/strong&gt;. Hats off to the speakers that managed to stand out doing talks like that, because it means they are truly amazing.&lt;/p&gt;
&lt;p&gt;However, if you, like me, fear that your speaking skills are not yet close to that caliber, you need to figure out something else that sets you apart. Something that will make your talk memorable. &lt;strong&gt;We see a lot of innovation in our discipline, but it’s limited to the scripts and apps we write. Why not to our presentations as well?&lt;/strong&gt; Do something different, and make it your thing, your “trademark” way of presenting.&lt;/p&gt;
&lt;p&gt;For me, that was the embedded demos in my slides. I usually have a small text field where I write code, and something (often the entire slide or text field itself) that displays the outcome. This lets the attendees see not just the end result, but also the intermediate states until we get there, which often proves out to be enlightening. It also makes the slide quite flexible, as I can always show something extra if I have the time.&lt;/p&gt;
&lt;p&gt;Of course, it also means that things might (and if you talk often enough, will at some point) go wrong. To mitigate this to a degree, I try to keep demos small, with a sensible starting state, so that I won’t have to write a lot of code. Which brings us to the next point.&lt;/p&gt;
&lt;h3 id=&quot;2.-never-show-a-lot-of-code-on-a-slide&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/06/so-youve-been-invited-to-speak/#2.-never-show-a-lot-of-code-on-a-slide&quot;&gt;2. Never show a lot of code on a slide&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have a theory: Attendees’ understanding of code decreases exponentially as the lines of simultaneously displayed code increase. Avoid showing many lines of code at once like the plague. Although I’ve shown up to 10 lines of code on a single slide (maybe even more), I usually try to keep it well below five. Ideally less than three even. If you absolutely &lt;strong&gt;must&lt;/strong&gt; present more code, try to use a technique to make the audience understand it by chunks, so that they still only have to process very little code at any given time.&lt;/p&gt;
&lt;p&gt;One technique I use for that is showing little code at first, and writing the rest on stage, gradually, explaining the steps as I go. When that isn’t possible or it doesn’t make sense (for example when there is no visual result to see), I try to show parts of the code step by step, explaining what everything does as it appears. This doesn’t necessarily mean showing one line at a time. For example, if you are showing a JS function, it makes sense to show the closing brace at the same time as the opening brace and not at the end. Show the elements of the code in the order you would write them in a top-down implementation, not by pure source order (although in some cases those two may coincide). To make this more clear, here’s an &lt;a href=&quot;http://talks.verou.me/polyfilling-the-gaps/#slide45&quot;&gt;example slide&lt;/a&gt; where I used this technique. It’s from my “Polyfilling the gaps” talk at JSConf EU 2011, one of the very few talks of mine that had no live coding.&lt;/p&gt;
&lt;p&gt;Also, it goes without saying that if you have to present a lot of code at once, syntax highlighting is a must. Comments aren’t: That’s what you are there for. Comments just add visual clutter and make it harder for people to interpret the actual code. Also, while explaining the code, try to somehow highlight the part you’re currently describing, even if your method is as rudimentary as selecting the text. Otherwise, if someone misses a sentence, they will completely lose track.&lt;/p&gt;
&lt;h3 id=&quot;3.-ides-are-not-good-presentation-tools&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/06/so-youve-been-invited-to-speak/#3.-ides-are-not-good-presentation-tools&quot;&gt;3. IDEs are not good presentation tools&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’ve seen this so many times: Someone wants to live demo a technology and fires up their IDE or text editor and starts coding. The audience tries to follow along at first, but at some point almost always gets lost. While these tools are great for programming, they are not presentation tools. They have a lot of distracting clutter, very small text and require you to show parts of the code that aren’t really relevant. They also require you to switch applications to toggle between the code and result, which disrupts the flow of your presentation.&lt;/p&gt;
&lt;p&gt;In addition, the probability you will make a mistake increases exponentially with the amount of code you write, both in real life and especially in presentations where you are also nervous. Then the audience is stuck with an embarrassed presenter trying to find what’s wrong for five minutes, until someone from the audience decides to put them out of their misery and shout that a closing parenthesis is missing on line 25.&lt;/p&gt;
&lt;p&gt;That’s why live coding has gotten a bad reputation over the years.&lt;/p&gt;
&lt;p&gt;As you’ve probably figured from tip #1, I’m not against live coding. Done well, it can really help the audience learn. However, if not done properly, it can end up completely wrecking a talk. Even if you absolutely have to use an external tool, try to make the experience as smooth as possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hide any toolbars, sidebars, panels. If your editor doesn’t allow you to hide everything that isn’t relevant, use another editor.&lt;/li&gt;
&lt;li&gt;Make the text BIG. If possible, as big as the text in your slides. Remember: Text in slides is big, because you need even the attendees sitting in the back rows to still be able to read it. Why is it that this simple consideration seems to escape so many presenter minds when they switch from slides to code?&lt;/li&gt;
&lt;li&gt;If parts of the code are needed but not relevant (e.g. CSS files in a JavaScript talk), put them in separate files and reference them. Try to minimize the code you will actually show as much as possible, and then even more.&lt;/li&gt;
&lt;li&gt;If applicable, use &lt;a href=&quot;http://livereload.com/&quot;&gt;LiveReload&lt;/a&gt; and have the browser window and code editor side by side.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4.-don%E2%80%99t-aim-to-beginners-(only)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/06/so-youve-been-invited-to-speak/#4.-don%E2%80%99t-aim-to-beginners-(only)&quot;&gt;4. Don’t aim to beginners (only)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some of the nastiest criticism I’ve seen against people’s talks was that they were too elementary. Getting feedback like that has almost become a phobia of mine. Of course, it’s always better if your entire audience is at the same level, and you are fully aware what that level is. However, that’s almost never the case, so you will have to err on one side. Do your best to cater to the median, but when you have to err, err on the side of more advanced content. A somewhat selfish reason would be that &lt;strong&gt;when people find your talk too elementary, they will blame you; when they find it too advanced, they will blame themselves.&lt;/strong&gt; However, it’s not just covering your ass, it’s better for your audience as well. Someone who didn’t learn anything new gets absolutely nothing out of your talk (unless it’s an interesting performance on its own, e.g. so funny it could have been stand up comedy for geeks). A person that learned many things but didn’t understand some of the more advanced concepts will still have gotten a lot out of it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If someone learns a useful thing or two from your talk, that’s what they’ll remember.&lt;/strong&gt; Even if the rest of the talk was elementary or too advanced for them, they will walk out with a positive impression, thinking “I learned something today!”. Even if most of your talk is elementary, try to sneak in some more advanced or obscure bits, that not many people know.&lt;/p&gt;
&lt;p&gt;My favorite approach to cater for a diverse audience with very different levels of experience, is to pick a narrow topic, start from the very basics and work my way up to more advanced concepts. This way everyone learns something, and nobody feels intimidated. On the flip side, if you are in a multi-track conference, this also limits the potential audience that might come to your talk.&lt;/p&gt;
&lt;h3 id=&quot;5.-eat-your-own-dog-food&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/06/so-youve-been-invited-to-speak/#5.-eat-your-own-dog-food&quot;&gt;5. Eat your own dog food&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m a huge fan of HTML-based (or SVG-based) slideshows. I’ve always been, since my first talk. It’s a technology you’re already accustomed to, so you can do amazing things with it. You can write scripts that demonstrate the concepts you describe in some visual way, you can do live demos, you can embed iframes of other people’s demos, you know how to style it much better than you likely know how to use Keynote. Yes, if you’re used to traditional presentation tools, it might be hard at first. Many features you’ve been taking for granted will be missing. Styling is not visual, there are no presenter notes, no next slide preview, no automatic adjustment to the projector resolution to name a few. But what you gain in potential and expressiveness, are totally worth the trade-off. Also, rather than having the talk prep keep you from writing code and becoming better at what you do, it will now actually contribute to it! It’s also a great chance to try experimental stuff, as it’s going to be run in a very controlled environment.&lt;/p&gt;
&lt;p&gt;You don’t even need to write your own presentation framework if you don’t want to. There are a ton available now, such as &lt;a href=&quot;https://github.com/LeaVerou/CSSS&quot;&gt;my own CSSS&lt;/a&gt;, &lt;a href=&quot;http://bartaz.github.com/impress.js/&quot;&gt;impress.js&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Web-based_slideshow&quot;&gt;many others&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;6.-involve-the-audience&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/06/so-youve-been-invited-to-speak/#6.-involve-the-audience&quot;&gt;6. Involve the audience&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is an old Chinese proverb that goes like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tell me, and I’ll forget Show me, and I’ll remember Involve me, and I’ll understand&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ve noticed that audiences respond extremely well to talks that attempt to involve them. &lt;a href=&quot;http://seb.ly/&quot;&gt;Seb-Lee Delisle&lt;/a&gt; gave a talk at Fronteers 2011 where he involved the audience by ideas like demonstrating Web Sockets through making their iPhones flash in such a way that he could create light patterns with the audience. Even though some of the demos failed (I think something crashed, don’t remember very well), the audience &lt;strong&gt;loved every bit&lt;/strong&gt;. I’ve rarely seen people that excited about a talk.&lt;/p&gt;
&lt;p&gt;Involving the audience was something I wanted to do for a while. In my recent Regular Expressions talks, I had a series of small “challenges” where the audience tried to write a regexp to match a certain set of strings as quickly as possible and tweet it. I provided a link to &lt;a href=&quot;http://leaverou.github.com/regexplained/&quot;&gt;an app I made especially for that&lt;/a&gt;. The person who got most regexes right (or more right than others) won a book. This was also very well received and lots of positive feedback mentioned it. When it feels like a game, learning is much more fun.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Important -prefix-free update</title>
    <link href="https://lea.verou.me/2012/07/important-prefix-free-update/"/>
    <updated>2012-07-24T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1845</id>
    <content xml:lang="en" type="html">&lt;p&gt;Those of you that have been following and/or using my work, are surely familiar with &lt;a href=&quot;http://leaverou.github.com/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt;. Its promise was to let you write DRY code, without all the messy prefixes, that would be standards-compliant in the future (which is why I’m always against adding proprietary features in it, regardless of their popularity). The way &lt;a href=&quot;http://leaverou.github.com/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt; works is that it feature tests which CSS features are available &lt;strong&gt;only&lt;/strong&gt; with a prefix, and then adds the prefix in front of their occurences in the code. Nothing will happen if the feature is supported both with and without a prefix or if it’s not supported at all.&lt;/p&gt;
&lt;p&gt;This worked well when browsers implementations aren’t significantly different from the unprefixed, standard version. It also works fine when the newer and the older version use incompatible syntaxes. For example, direction keywords in gradients. The old version uses &lt;code&gt;top&lt;/code&gt; whereas the new version uses &lt;code&gt;to bottom&lt;/code&gt;. If you include both versions, the cascade does its job and ignores the latter version if it’s not supported:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;background: linear-gradient(top, white, black);
background: linear-gradient(to bottom, white, black);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, when the same syntax means different things in the older and the newer version, things can go horribly wrong. Thankfully, this case is quite rare. A prime example of this is linear gradient angles. &lt;code&gt;0deg&lt;/code&gt; means a horizontal (left to right) gradient in prefixed linear-gradients and a vertical (bottom to top) gradient in unprefixed implementations, since they follow the newer &lt;a href=&quot;http://www.w3.org/TR/css3-images/&quot;&gt;Candidate Recommendation&lt;/a&gt; rather than the old draft. This wasn’t a problem when every browser supported only prefixed gradients. However, now that &lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2012/06/25/unprefixed-css3-gradients-in-ie10.aspx&quot;&gt;IE10&lt;/a&gt; and &lt;a href=&quot;http://hacks.mozilla.org/2012/07/aurora-16-is-out/&quot;&gt;Firefox 16&lt;/a&gt; are unprefixing their gradients implementations, it was time for me to face the issue I was avoiding ever since I wrote &lt;a href=&quot;http://leaverou.github.com/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The solution I decided on is consistent with &lt;a href=&quot;http://leaverou.github.com/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt;’s original promise of allowing you to write mostly standards-compliant code that will not even need &lt;a href=&quot;http://leaverou.github.com/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt; in the future. Therefore, &lt;strong&gt;it will assume that your gradients use the newer syntax&lt;/strong&gt;, and if only a prefixed implementation is available, it will convert the angles to the legacy definition. This means that &lt;strong&gt;if you update &lt;a href=&quot;http://leaverou.github.com/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt; on a page that includes gradients coded with the older definition, they might break&lt;/strong&gt;. However, &lt;strong&gt;they would break anyway&lt;/strong&gt; in modern browsers, so the sooner the better. Even if you weren’t using &lt;a href=&quot;http://leaverou.github.com/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt; at all, and had written all the declarations by hand before the angles changed, you would still have to update your code. Unfortunately, that’s the risk we all take when using experimental features like CSS gradients and I think it’s worth it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://leaverou.github.com/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt; will not take care of any other syntax changes, since when the syntaxes are incompatible, you can easily include both declarations. The angles hotfix was included out of necessity because there is no other way to deal with it.&lt;/p&gt;
&lt;p&gt;Here’s a handy JS function that converts older angles to newer ones:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function fromLegacy(deg) { return Math.abs(deg-450) % 360 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can read more about the changes in gradient syntax in &lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2012/06/25/unprefixed-css3-gradients-in-ie10.aspx&quot;&gt;this excellent IEblog article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition to this change, a new feature was added to &lt;a href=&quot;http://leaverou.github.com/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt;. If you ONLY want to use the prefixed version of a feature, but still don’t want to write out of all the prefixes, you can just use &lt;code&gt;-*-&lt;/code&gt; as a prefix placeholder and it will be replaced with the current browser’s prefix on runtime. So, if you don’t want to change your angles, you can just prepend &lt;code&gt;-*-&lt;/code&gt; to your linear-gradients, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;background: -*-linear-gradient(0deg, white, black);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, it’s a much more futureproof and standards compatible solution to just update your angles to the new definition. You know you’ll have to do it at some point anyway. ;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Although -prefix-free doesn’t handle syntax changes in radial gradients, since the syntaxes are mutually incompatible, you may use this little PrefixFree plugin I wrote for the &lt;a href=&quot;http://lea.verou.me/css3patterns/&quot;&gt;CSS Patterns Gallery&lt;/a&gt;, which converts the standard syntax to legacy syntax when needed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;StyleFix.register(function(css, raw) {
	if (PrefixFree.functions.indexOf(&#39;radial-gradient&#39;) &amp;gt; -1) {
		css = css.replace(/radial-gradient&#92;(([a-z-&#92;s]+&#92;s+)?at ([^,]+)(?=,)/g, function($0, shape, center){
			return &#39;radial-gradient(&#39; + center + (shape? &#39;, &#39; + shape : &#39;&#39;);
		});
	}

	return css;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keep in mind however that it’s very crude and not very well tested.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Introducing Prism: An awesome new syntax highlighter</title>
    <link href="https://lea.verou.me/2012/07/introducing-prism-an-awesome-new-syntax-highlighter/"/>
    <updated>2012-07-31T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1841</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;http://prismjs.com/&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2012/07/introducing-prism-an-awesome-new-syntax-highlighter/images/Screen-Shot-2012-07-31-at-18.33.58--300x158.png&quot; alt=&quot;&quot; title=&quot;Screenshot from Prism’s homepage&quot; /&gt;&lt;/a&gt;For the past three weeks, on and off, I’ve been working on releasing &lt;a href=&quot;https://dabblet.com/&quot;&gt;Dabblet&lt;/a&gt;’s syntax highlighter as standalone, since many people had requested it. Zachary Forrest  &lt;a href=&quot;https://twitter.com/zdfs/statuses/217834980871639041&quot;&gt;suggested the name “Prism”&lt;/a&gt; and I liked it so much I decided to go with it, even though there is &lt;a href=&quot;https://wiki.mozilla.org/Prism&quot;&gt;an abandoned Mozilla project with the same name&lt;/a&gt;. I ended up refactoring and extending it so much that I will need to backport it to Dabblet one of these days! This doesn’t mean I bloated it, the core is still a tiny 1.5KB minified &amp;amp; gzipped. It just means it’s more awesome. :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://prismjs.com/&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2012/07/introducing-prism-an-awesome-new-syntax-highlighter/images/Screen-Shot-2012-07-31-at-18.31.22-.png&quot; alt=&quot;&quot; title=&quot;Prism’s first themes&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;seriously%3F-the-world-needs-another-syntax-highlighter%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/07/introducing-prism-an-awesome-new-syntax-highlighter/#seriously%3F-the-world-needs-another-syntax-highlighter%3F&quot;&gt;Seriously? The world needs another syntax highlighter?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In certain ways, Prism is better than any other syntax highlighter I’ve seen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It’s tiny. The core is only 1.5KB minified &amp;amp; gzipped, which can go up to 2KB with the currently available language definitions (CSS, Markup and JS). But many other highlighters are also small, so read on.&lt;/li&gt;
&lt;li&gt;It’s &lt;strong&gt;incredibly extensible&lt;/strong&gt;. Not only it’s easy to add new languages (that’s a given with every syntax highlighter these days), but also to &lt;strong&gt;extend existing ones&lt;/strong&gt;. Most importantly, it supports &lt;strong&gt;plugins&lt;/strong&gt;, through &lt;strong&gt;hooks strategically placed in its source&lt;/strong&gt;. There are &lt;a href=&quot;http://prismjs.com/plugins/&quot;&gt;a few plugins already available&lt;/a&gt;, and it’s &lt;a href=&quot;http://prismjs.com/extending.html#writing-plugins&quot;&gt;really easy to write your own&lt;/a&gt;. I haven’t seen any other highlighter that supports plugins.&lt;/li&gt;
&lt;li&gt;It &lt;strong&gt;encourages good author practices&lt;/strong&gt;. Other highlighters encourage or even force you to use elements that are semantically wrong, like &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; (on its own) or &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;. Prism forces you to use the only semantically correct element for marking up code: &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;. On its own for inline code, or inside a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; for blocks of code. In addition, the code language is declared through &lt;a href=&quot;http://www.w3.org/TR/html5/the-code-element.html#the-code-element&quot;&gt;the way recommended in the HTML5 draft&lt;/a&gt;: through a language-xxxx class.&lt;/li&gt;
&lt;li&gt;One of its best features: &lt;strong&gt;The language definition is inherited&lt;/strong&gt;. This means that if multiple code snippets have the same language, you can just define it once, in one of their common ancestors. Obviously, if you define a language on the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element, you’ve essentially declared a default language for the entire document.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It looks good&lt;/strong&gt;. All three of its existing themes. Most people wanted me to release Dabblet’s highlighter because they found other highlighters (including their themes) quite ugly.&lt;/li&gt;
&lt;li&gt;It supports &lt;strong&gt;parallelism through Web Workers&lt;/strong&gt;, for better performance in certain cases.&lt;/li&gt;
&lt;li&gt;It &lt;strong&gt;doesn’t force you to use any Prism-specific markup&lt;/strong&gt;, not even a Prism-specific class name, only standard markup you should be using anyway. So, you can just try it for a while, remove it if you don’t like it and leave no traces behind.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, there are some limitations too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pre-existing HTML in the code block will be stripped off. However, there are plugins for &lt;a href=&quot;http://prismjs.com/plugins/autolinker/&quot;&gt;links&lt;/a&gt; and &lt;a href=&quot;http://prismjs.com/plugins/line-highlight&quot;&gt;highlighting certain lines&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I decided not to support IE8. Prism won’t break on IE8, it just won’t work. I don’t think many people using IE8 and below are able to read code, so I don’t see the point.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy: &lt;a href=&quot;http://prismjs.com/&quot;&gt;prismjs.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you like this project, don’t forget to &lt;a href=&quot;https://twitter.com/prismjs&quot;&gt;follow @prismjs on Twitter&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I’ll soon update this blog to use Prism in the code examples as well.&lt;/p&gt;
</content>
  </entry><entry>
    <title>lea＠w3․org</title>
    <link href="https://lea.verou.me/2012/08/lea-at-w3-org/"/>
    <updated>2012-08-01T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1866</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2012/08/lea-at-w3-org/images/Screen-Shot-2012-08-01-at-14.55.40-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2012/08/lea-at-w3-org/images/Screen-Shot-2012-08-01-at-14.55.40-.png&quot; alt=&quot;&quot; title=&quot;:)&quot; /&gt;&lt;/a&gt;In my recent post describing &lt;a href=&quot;http://lea.verou.me/2012/05/how-i-got-into-web-development-the-long-version/&quot;&gt;how I got into web development&lt;/a&gt; I wrote that I’m in the verge of some big changes in my life. The main one of them starts tomorrow. As of tomorrow, the above will be my professional email. Yes, you guessed it right; I’m joining the &lt;a href=&quot;http://w3.org/&quot;&gt;W3C&lt;/a&gt; &lt;a href=&quot;http://www.w3.org/People/&quot;&gt;team&lt;/a&gt;! Yes, the same &lt;a href=&quot;http://w3.org/&quot;&gt;W3C&lt;/a&gt; you all know and love :) I decided to title this blog post with it, as I like how a 10 letter string manages to neatly summarize so much.&lt;/p&gt;
&lt;p&gt;Working at W3C had been a dream of mine ever since I learned what a web standard is. As you probably know if you’ve been following my work, I’m a strong believer in open web standards. Even though proprietary technology might offer some short term benefits, in the long run only open standards can allow the Web to reach its full potential.&lt;/p&gt;
&lt;p&gt;I’d like to especially thank the two people below (in chronological order). If it wasn’t for them, this dream would have never materialized:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://oli.jp/&quot;&gt;Oli Studholme&lt;/a&gt;: I still remember our IRC conversation back in January. I was telling him how much I’d love to work for W3C, but “I’m not that good”. He repeatedly encouraged me to contact W3C and express my interest, despite my strong reluctance to do so. “Don’t be like the 15 year old boy that is too shy to ask the girl out” was the argument that finally convinced me. He even asked around to find which person I should contact.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://schepers.cc/&quot;&gt;Doug Schepers&lt;/a&gt;: If it wasn’t for Doug’s heroic efforts, this would have never happened. He believed in me from the start and did everything he could to for this to go through. He spent an incredible amount of time trying to help me, although I repeatedly bombarded him with a cornucopia of silly questions. :) Over the course of these 6 months, he didn’t just become a colleague, but also a friend.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you both. I’m deeply grateful.&lt;/p&gt;
&lt;p&gt;I will be part of the &lt;a href=&quot;http://www.w3.org/community/devrel/&quot;&gt;W3C developer relations&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/community/webed/&quot;&gt;web education&lt;/a&gt; efforts, working a lot with Doug (aka &lt;a href=&quot;http://twitter.com/shepazu&quot;&gt;@shepazu&lt;/a&gt;). In practice, this means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Help developers understand where standards are headed, and solicit early feedback on upcoming features.&lt;/li&gt;
&lt;li&gt;Help Working Groups understand what developers need.&lt;/li&gt;
&lt;li&gt;Help plan W3C developer events, including conferences&lt;/li&gt;
&lt;li&gt;Speaking about open web technologies at conferences and other events&lt;/li&gt;
&lt;li&gt;Writing articles and documentation about open web technologies&lt;/li&gt;
&lt;li&gt;Making demos and tools that demonstrate and help authors understand web standards&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, I will be helping with the design of many W3C-related things, as I will be the only designer at W3C.&lt;/p&gt;
&lt;p&gt;As you can see I’ll be wearing many hats, which is exactly what I love about this role! I had many tempting offers from big US companies that offered salaries with more digits and a lot of perks. However, my heart wanted W3C and this role was practically tailored to my talents and interests.&lt;/p&gt;
&lt;p&gt;I’m honored to be a part of &lt;a href=&quot;http://w3.org/&quot;&gt;W3C&lt;/a&gt; and I’m looking forward to helping out.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;voice type=&amp;quot;fangirl&amp;quot;&amp;gt;&lt;/code&gt;I have to admit I’m also really looking forward to meeting Sir &lt;a href=&quot;http://www.w3.org/People/all#timbl&quot;&gt;Tim Berners-Lee&lt;/a&gt; in person! :D&lt;code&gt;&amp;lt;/voice&amp;gt;&lt;/code&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Dive deep into CSS3 (and Bolognese!) in Bologna, Italy</title>
    <link href="https://lea.verou.me/2012/09/dive-deep-into-css3-in-bologna-italy/"/>
    <updated>2012-09-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1921</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2012/09/dive-deep-into-css3-in-bologna-italy/images/spk_verou.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2012/09/dive-deep-into-css3-in-bologna-italy/images/spk_verou.png&quot; alt=&quot;&quot; title=&quot;Illustration of me!&quot; /&gt;&lt;/a&gt;I don’t usually like to advertise my talks or workshops through blog posts, and even though I’ve given a lot, I’ve only posted about less a handful. However, this one is special: &lt;strong&gt;It might be my last&lt;/strong&gt;. Don’t get me wrong: I LOVE giving workshops, teaching people new things and seeing them put them in use right away is fantastic. However, I also find them incredibly exhausting. Speaking for an entire day (or sometimes two!) is pretty much the most tiring thing I’ve done. So, given &lt;a href=&quot;http://lea.verou.me/2012/08/lea-at-w3-org/&quot;&gt;my new job at W3C&lt;/a&gt;, I’m not sure if I will do one again. Of course, it goes without saying that I will still do plenty of talks! :)&lt;/p&gt;
&lt;p&gt;The last workshop on my schedule is in &lt;a href=&quot;http://2012.fromthefront.it/&quot;&gt;FromTheFront conference in Bologna, Italy&lt;/a&gt; on &lt;strong&gt;September 20th&lt;/strong&gt; (in 7 days!). There are still some spots available, so &lt;a href=&quot;http://2012.fromthefront.it/index.html#cart&quot;&gt;grab yours while you still can&lt;/a&gt;! It only costs &lt;strong&gt;€329.00&lt;/strong&gt;. It will be very hands-on, with interactive exercises that help you gain first-hand experience with small but advanced use cases. It will not be your usual CSS3-overview kind of workshop. Instead, we will dive really deep into a handful of CSS3 aspects that I think are most useful for your everyday work.&lt;/p&gt;
&lt;p&gt;While you’re at it, I’d also recommend getting a conference ticket as well. The &lt;a href=&quot;http://2012.fromthefront.it/speakers.html&quot;&gt;line-up&lt;/a&gt; has some excellent speakers and it’s only €110 more, so totally worth it!&lt;/p&gt;
&lt;p&gt;Apologies that my last two blog posts were personal, the next one will be more technical: I have a very useful tool in the pipeline that I’m gonna release soon ;)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Easy color contrast ratios</title>
    <link href="https://lea.verou.me/2012/10/easy-color-contrast-ratios/"/>
    <updated>2012-10-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1941</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2012/10/easy-color-contrast-ratios/images/Screen-Shot-2012-10-14-at-06.08.41-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2012/10/easy-color-contrast-ratios/images/Screen-Shot-2012-10-14-at-06.08.41--300x254.png&quot; alt=&quot;&quot; title=&quot;Screenshot with semi transparent background&quot; /&gt;&lt;/a&gt;I was always interested in accessibility, but I never had to comply with any guidelines before. &lt;a href=&quot;http://lea.verou.me/2012/08/lea-at-w3-org/&quot;&gt;At W3C&lt;/a&gt;, accessibility is considered very important, so everything we make needs to pass &lt;a href=&quot;http://www.w3.org/TR/WCAG/&quot;&gt;WCAG 2.0&lt;/a&gt; AA level. Therefore, I found myself calculating color contrast ratios very frequently. It was a very enlightening experience. I used to think that WCAG-mandated contrast ratios were too restrictive and basically tried to force you to use black and white, a sentiment shared by many designers I’ve spoken to. Surprisingly, in practice, I found that in most cases they are very reasonable: When a color combination doesn’t pass WCAG, it usually *is* hard to read. After all, the possible range for a contrast ratio is 1-21 but only ratios lower than 3 don’t pass WCAG AA (4.5 if you have smaller, non-bold text). So, effectively 90% of combinations will pass (82.5% for smaller, non-bold text).&lt;/p&gt;
&lt;p&gt;There are &lt;a href=&quot;http://snook.ca/technical/colour_contrast/colour.html&quot;&gt;plenty&lt;/a&gt; &lt;a href=&quot;http://www.colorsontheweb.com/colorcontrast.asp&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://juicystudio.com/services/luminositycontrastratio.php&quot;&gt;tools&lt;/a&gt; out there for this. However, I found that my workflow for checking a contrast ratio with them was far from ideal. I had to convert my CSS colors to hex notation (which I don’t often use myself anymore), check the contrast ratio, then adjust the colors as necessary, covert again etc. In addition, I had to adjust the lightness of the colors with a blindfold, without being able to see the difference my adjustments would make to the contrast ratio. When using semi-transparent colors, it was even worse: Since WCAG only describes an algorithm for opaque colors, all contrast tools only expect that. So, I had to calculate the resulting opaque colors after alpha blending had taken place. After doing that for a few days, I got so fed up that I decided to make &lt;a href=&quot;https://contrast-ratio.com/&quot;&gt;my own tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition, I discovered that there was no documented way of calculating the contrast ratio range that can be produced with a semi-transparent background, so I came up with an algorithm (after many successive failures to find the range intuitively), &lt;a href=&quot;http://lists.w3.org/Archives/Public/w3c-wai-ig/2012OctDec/0011.html&quot;&gt;published it in the w3c-wai-ig mailing list&lt;/a&gt; and used the algorithm in my app, effectively making it the first one that can accept semi-transparent colors. If your math is less rusty than mine, I’d appreciate any feedback on my reasoning there.&lt;/p&gt;
&lt;p&gt;Below is a list of features that make this tool unique for calculating color contrast ratios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accepts any CSS color the browser does, not just hex colors. To do this, it defers parsing of the color to the browser, and queries the computed style, which is always rgb() or rgba() with 0-255 ranges which be parsed much more easily than the multitude of different formats than modern browsers accept (and the even more that are coming in the future).&lt;/li&gt;
&lt;li&gt;Updates as you type, when what you’ve typed can be parsed as a valid CSS color.&lt;/li&gt;
&lt;li&gt;Accepts semi transparent colors. For semi-transparent backgrounds, the contrast ratio is presented with an error margin, since it can vary depending on the backdrop. In that case, the result circle will not have a solid background, but a visualization of the different possible results and their likelihood (see &lt;a href=&quot;https://lea.verou.me/2012/10/easy-color-contrast-ratios/images/Screen-Shot-2012-10-14-at-06.08.41-.png&quot;&gt;screenshot&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;You can share your results by sharing the URL. The URL hashes have a reasonable structure of the form #foreground-on-background, e.g. &lt;a href=&quot;http://leaverou.github.com/contrast-ratio/#black-on-yellow&quot;&gt;#black-on-yellow&lt;/a&gt; so you can even adjust the URL as a form of input.&lt;/li&gt;
&lt;li&gt;You can adjust the color by incrementing or decrementing its components with the keyboard arrow keys until you get the contrast right. This is achieved by including my &lt;a href=&quot;http://lea.verou.me/2011/02/incrementable-length-values-in-text-fields/&quot;&gt;Incrementable&lt;/a&gt; library.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Browser support is IE10 and modern versions of Firefox, Safari, Chrome, Opera. Basic support for IE9. No responsive version yet, sorry (but you can always &lt;a href=&quot;https://github.com/LeaVerou/contrast-ratio&quot;&gt;send pull requests&lt;/a&gt;!)&lt;/p&gt;
&lt;p&gt;Save the link: &lt;a href=&quot;https://contrast-ratio.com/&quot;&gt;contrast-ratio.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit 2022: Link updated to reflect current one. Original link was &lt;a href=&quot;http://leaverou.github.com/contrast-ratio&quot;&gt;leaverou.github.com/contrast-ratio&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Lots of improvements coming to dabblet</title>
    <link href="https://lea.verou.me/2012/11/lots-of-improvements-coming-to-dabblet/"/>
    <updated>2012-11-07T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1962</id>
    <content xml:lang="en" type="html">&lt;p&gt;I posted about this in both the &lt;a href=&quot;http://blog.webplatform.org/2012/11/live-examples-coming-soon/&quot;&gt;WebPlatform.org blog&lt;/a&gt; and &lt;a href=&quot;http://blog.dabblet.com/post/35203393585/lots-of-improvements-in-the-pipeline&quot;&gt;Dabblet’s blog&lt;/a&gt;, but I thought it might be interesting to many readers of this blog as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As many of you probably know, &lt;a href=&quot;http://lea.verou.me/&quot;&gt;I&lt;/a&gt;’ve started working for &lt;a href=&quot;http://www.w3.org/community/devrel/&quot;&gt;W3C Developer Relations&lt;/a&gt; since this August. Half of my time is devoted to &lt;a href=&quot;http://www.webplatform.org/&quot;&gt;WebPlatform.org&lt;/a&gt;, a very promising project to document the web with the help of all major players, in a vendor-neutral way. Even before I joined &lt;a href=&quot;http://w3.org/&quot;&gt;W3C&lt;/a&gt;, we discussed using a hosted, customized version of &lt;a href=&quot;https://dabblet.com/&quot;&gt;dabblet&lt;/a&gt; in &lt;a href=&quot;http://webplatform.org/&quot;&gt;WebPlatform.org&lt;/a&gt;, as a platform for live code examples. I recently started working towards making this happen.&lt;/p&gt;
&lt;p&gt;A lot of changes and improvements need to be made to achieve this, but the good news is, most of these will be pushed to &lt;a href=&quot;http://dabblet.com/&quot;&gt;dabblet.com&lt;/a&gt; as well! In a nutshell, this is what I’m currently working on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding JavaScript support — This will be a challenge UX-wise, as it shouldn’t run on every keystroke, like the HTML and CSS, but it should run on startup and it should be straight-forward how to get it to run. Perhaps it will also run after a significant pause in typing.&lt;/li&gt;
&lt;li&gt;Dabblets that are not stored in Github, but get their data through POST requests.&lt;/li&gt;
&lt;li&gt;Improving cross-browser support&lt;/li&gt;
&lt;li&gt;Strengthening security&lt;/li&gt;
&lt;li&gt;Integrating &lt;a href=&quot;http://prismjs.com/&quot;&gt;Prism&lt;/a&gt;. Dabblet’s syntax highlighter might have been Prism’s precursor, but currently Prism has solved many of its bugs, and these fixes need to be pushed to dabblet at some point.&lt;/li&gt;
&lt;li&gt;General bug fixing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These will probably be gradually rolled out in &lt;a href=&quot;http://dabblet.com/&quot;&gt;dabblet.com&lt;/a&gt; and tested by the community, before we integrate dabblet into &lt;a href=&quot;http://webplatform.org/&quot;&gt;WebPlatform.org&lt;/a&gt;. If a new feature is significant enough, there will be a new blog post about it here, but don’t expect blog posts about bugfixes. I’m really excited to see dabblet flourish, and I believe you will be too, once these updates are out!&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry><entry>
    <title>CSS Animations with only one keyframe</title>
    <link href="https://lea.verou.me/2012/12/animations-with-one-keyframe/"/>
    <updated>2012-12-12T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1975</id>
    <content xml:lang="en" type="html">&lt;p&gt;This is a very quick tip, about a pet peeve of mine in almost every CSS animation I see. As you may know, I’m a sucker for reducing the amount of code (as long as it remains human readable of course). I demonstrated a very similar example in my “CSS in the 4th dimension” talk, but I recently realized I never blogged about it (or seen anyone else do so).&lt;/p&gt;
&lt;p&gt;Lets assume you have a simple animation of a pounding heart, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@keyframes pound {
	from { transform: none; }
	50% { transform: scale(1.4); }
	to { transform: none; }
}

.heart {
	/* ... */
	animation: pound .5s infinite;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/4268782/a7d1b285a6af0a0183f94079ab310217c1076275&quot; style=&quot;width:100%; height:500px&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;You can see the problem already: the shrunk heart state is repeated twice in the keyframes (&lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;). You probably know you can combine them into one rule, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@keyframes pound {
	from, to { transform: none; }
	50% { transform: scale(1.4); }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/4268782/b8beab24426225097410b9b159d27a5cf7e4e3fd&quot; style=&quot;width:100%; height:500px&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;What many don’t know, is that you don’t need these two keyframes at all, since they basically replicate the same state as the one in the &lt;code&gt;.heart&lt;/code&gt; rule. To quote the &lt;a href=&quot;http://www.w3.org/TR/css3-animations/#keyframes&quot;&gt;CSS Animations spec&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a 0% or “from” keyframe is not specified, then the user agent constructs a 0% keyframe using the computed values of the properties being animated. If a 100% or “to” keyframe is not specified, then the user agent constructs a 100% keyframe using the computed values of the properties being animated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Therefore, the code could actually be as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@keyframes pound {
	50% { transform: scale(1.4); }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/4268782/b7849dbbd47761cf352fe7e0740c4bc227824f61&quot; style=&quot;width:100%; height:500px&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;This trick is very useful for providing fallbacks that are the same as the first or last keyframe, without having to repeat them in the &lt;code&gt;@keyframes&lt;/code&gt; rule. Of course it doesn’t only apply to animations where you only have one keyframe beyond &lt;code&gt;from&lt;/code&gt; and/or &lt;code&gt;to&lt;/code&gt;. You can omit the &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; keyframes in every animation, when you want them to be the same as the styles that are applied to the element anyway.&lt;/p&gt;
&lt;p&gt;Of course, to make this particular animation appear more natural, it would be much more wise to do something like this, still with only one keyframe (the &lt;code&gt;from&lt;/code&gt; state is dynamically generated by the browser):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@keyframes pound {
	to { transform: scale(1.4); }
}

.heart {
	/* ... */
	animation: pound .25s infinite alternate;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/4268782&quot; style=&quot;width:100%; height:500px&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;which just reverses every even iteration, instead of trying to have both states (shrinking and growing) in the animation. The reason this looks more natural is that &lt;code&gt;animation-direction: alternate;&lt;/code&gt; (which is what the &lt;code&gt;alternate&lt;/code&gt; keyword does in the animation shorthand) also reverses the timing (easing) function for the reversed iterations. ;)&lt;/p&gt;
</content>
  </entry><entry>
    <title>One year of pastries</title>
    <link href="https://lea.verou.me/2012/12/one-year-of-pastries/"/>
    <updated>2012-12-30T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=1995</id>
    <content xml:lang="en" type="html">&lt;p&gt;Last September, I was approached by &lt;a href=&quot;http://bitspushedaround.com/&quot;&gt;Alex Duloz&lt;/a&gt;, who invited me to take part in his ambitious new venture, &lt;a href=&quot;http://the-pastry-box-project.net/&quot;&gt;The Pastry Box Project&lt;/a&gt;. Its goal was to gather 30 people (“bakers”) every year who are influential in their field and ask them to share twelve thoughts — one per month. For 2012, that field would be the Web. I was honored by the invitation and accepted without a second thought (no pun intended). The project was quite successful and recently we all (&lt;a href=&quot;https://twitter.com/mollydotcom/status/281108923170308096&quot;&gt;almost&lt;/a&gt;) agreed for The Pastry Box Project to become a book, whose profits will be donated to charity.&lt;/p&gt;
&lt;p&gt;The initial goal of the project was to gather thoughts somehow related to the bakers’ work. Although many stuck to that topic, for many others it quickly drifted away from that, with them often sending thoughts that were general musings about their lives or life in general. For me …well lets just say I was never good at sticking to the topic at hand. ;)&lt;/p&gt;
&lt;p&gt;The Pastry Box showed me that I want a personal blog so &lt;a href=&quot;http://pensieve.verou.me/&quot;&gt;I made one today&lt;/a&gt;. I will still publish personal stuff here, as long as it’s even remotely web-related, so not much will change. However, my interests range to more than the Web, so I will now have another medium to express myself in. :)&lt;/p&gt;
&lt;p&gt;Since 2012 is now over, I decided to gather all my “pastries” and publish them in two blog posts: I will post the more techy/professional ones below and the more general/personal ones in &lt;a href=&quot;http://pensieve.verou.me/post/39242403969/one-year-of-pastries&quot;&gt;my personal blog&lt;/a&gt;. Since most of them were somewhere in the middle, it wasn’t easy to pick which ones to publish where. I figured the best solution is to allow for some overlap and publish most of them in both blogs.&lt;/p&gt;
&lt;h2 id=&quot;january&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/12/one-year-of-pastries/#january&quot;&gt;January&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Often people ask me how I come up with the new ideas I publish. I think my main “differentiator” is that I try not to be restricted by my knowledge about what’s possible and what is not. I first think about what I want to make (for example “I want to do a rating widget with pure CSS”) and then I investigate how it could be done. And I don’t give up easily. Sometimes it even takes months having the question in the back of my head before I come up with a solution.&lt;/p&gt;
&lt;p&gt;People push the boundaries of what’s achievable with web technologies every day. Do you want to be one of them, or do you want to be stuck repeating what’s been done over and over again until you get sick of it? Don’t be afraid to try new things. If a voice inside you screams “That isn’t possible!”, ignore it. In most cases, this voice is wrong.&lt;/p&gt;
&lt;h2 id=&quot;february&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/12/one-year-of-pastries/#february&quot;&gt;February&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You may catch more flies with honey than with vinegar, but you catch even more with a little audacity. Being polite is a good rule of thumb, but like everything, it also needs moderation. Don’t say “share my content pleeeeeeaaaase”. It makes people think your content isn’t worthy of sharing if you have to grovel. In a long email, don’t write a paragraph apologizing for its length (true story!). Being overly polite when meeting someone, categorizes yourself as inferior in the other person’s subconscious. Treat yourself with the respect and admiration you expect from other people. If you don’t think highly of yourself, nobody will. When meeting someone you admire, treat them as an equal and they’re more likely to do the same.&lt;/p&gt;
&lt;p&gt;However, be careful not to cross the fine distinction between treating yourself with respect and being a cocky jackass. Treat others as equals, not as inferiors, otherwise your attitude will get you nowhere — and will piss everyone off along the way.&lt;/p&gt;
&lt;h2 id=&quot;march&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/12/one-year-of-pastries/#march&quot;&gt;March&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can get quite far by putting cool stuff out there and expecting everything to come to you. Yes, you will eventually get job offers, conference invitations and various distinctions. However, sometimes, just asking will get you what you want much faster.&lt;/p&gt;
&lt;p&gt;I used to avoid asking like the plague, and thought that if my work is good enough, what I want will naturally come to me. Which makes sense, to a certain extent: When someone keeps asking for stuff all the time, you can’t help but think that they merely see you as means to an end.&lt;/p&gt;
&lt;p&gt;However, when you really want something, it never hurts to approach it yourself. Lately, I’ve been experiencing how much easier this makes things, and I’d strongly recommend you try it too. Turns out that quite often you don’t have what you want not because you aren’t good enough, but because the parties involved have no idea you’re interested.&lt;/p&gt;
&lt;h2 id=&quot;april&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/12/one-year-of-pastries/#april&quot;&gt;April&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The best argument against conventional wisdom is the fate of everyone following it. If you aspire beyond mediocrity, conventional wisdom is recipe for failure. Think out of the box. What can you do to achieve your goals, that others are not already doing? The least popular paths are the most successful. The trick isn’t doing better than the others, it’s minimizing the number of “others”. Find unexplored territory and make it yours. It’s much easier than trying to claim your stake on someone else’s land.&lt;/p&gt;
&lt;h2 id=&quot;may&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/12/one-year-of-pastries/#may&quot;&gt;May&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I never make long-term plans. Life is an unpredictable adventure. Concrete plans restrict this amazing journey. Stressing over a series of mental checkboxes you need to check until a certain date shifts your focus away from making awesomeness. I have long-term dreams instead, and they are all the compass I need. They give me the drive to constantly strive to improve, while still allowing room for surprises. I learned to trust chaos, and so far, I was never disappointed.&lt;/p&gt;
&lt;h2 id=&quot;june&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/12/one-year-of-pastries/#june&quot;&gt;June&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Contrary to popular belief, the defining characteristic of a good professional, in any discipline, is not the ability to blurt out good ideas off the top of their head. It’s perseverance and not being easily satisfied. Where the others would stop, they keep going. For example, when writing CSS, they won’t stop after they’ve achieved a certain style. They will also try to make it more flexible, more maintainable, simpler. Next week, try this: When you’re about to give up and proclaim that something is “done”, try to spend five more minutes on the task, thinking how you can improve it further, how to make it more elegant. I think it will help you be much more satisfied and proud of your work.&lt;/p&gt;
&lt;h2 id=&quot;july&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/12/one-year-of-pastries/#july&quot;&gt;July&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before you start complaining about what you don’t like in CSS, HTML or JavaScript, ask yourself: How would I do it better? Sometimes, the things that bother us are just unavoidably subpar solutions to very hard problems. It sounds obvious, but many people I’ve spoken with get a completely new perspective when they ask themselves this question. Also, there are many other factors affecting design choices, beyond syntactical elegance and ease of understanding. For example, making implementations easier, maintaining backwards compatibility or matching what browsers already do. Sometimes that “obvious better solution” is just not possible in practice.&lt;/p&gt;
&lt;h2 id=&quot;august&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/12/one-year-of-pastries/#august&quot;&gt;August&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We all teach from time to time, whether it’s explaining something to a colleague, writing a blog post about the cool CSS technique we discovered, or giving a technical talk. If you are serious about becoming better at it, I’d strongly recommend reading up on psychology and neuroscience. If you don’t have the time to, here’s one fact that I’ve found most useful: Humans have incredibly impressive pattern recognition skills. We use them in pretty much everything we do, from learning our native language as kids, to escaping predators in the wild.&lt;/p&gt;
&lt;p&gt;How does that help you teach more effectively? In one word: Examples, examples, examples. No matter how good you are at explaining the rules, nothing beats a few good examples of their application in practice. Our abstract thinking is not nearly as good as our pattern recognition skills.&lt;/p&gt;
&lt;p&gt;However, don’t be fooled into thinking that theory is useless. Often, multiple explanations fit a given example. The theory helps us pick the one that fits, which might not be the one we initially recognized.&lt;/p&gt;
&lt;p&gt;I’ve found that this principle applies to pretty much everything I’ve taught or have been taught, from mathematics to natural and programming languages. You can forget the theory, but you should never forget the examples.&lt;/p&gt;
&lt;h2 id=&quot;september&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/12/one-year-of-pastries/#september&quot;&gt;September&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;People often think it’s hard to change my mind, that I’m too fixated on my own opinions. The reason I give this impression is that I will fiercely defend them. However, I will only do so until I see compelling arguments for the other side. I always try to keep an open mind to being wrong, and it has only made me better.&lt;/p&gt;
&lt;p&gt;In the past few months I’ve been witnessing myself slowly change my views regarding yet another major life issue: The place I want to live in. Moving to the US has been a life goal for me ever since I first visited, almost fifteen years ago. However, as I spend more time there and get closer to moving, I’ve started noticing things that I don’t like so much. I’ve tried to ignore them, but they keep being there, giving me the finger like dead pixels on a brand new screen. I might go forward with it anyway, or I might pick another country, but this is yet another experience that has taught me to avoid being dogmatic.&lt;/p&gt;
&lt;p&gt;We are all, and should be, subject to change. Whoever insists in their rigid convictions reminds me of software whose bugs never get fixed. You are the only maintainer of that software. Be vigilant enough to discover and fix your own bugs. Be open-minded enough to listen to other people’s bug reports about it. Most people forget to do this after a certain age. They become so arrogant that they think they don’t have any more bugs to fix, or so insecure that they believe they can’t fix any more. That’s the turning point where the years that pass by start to become “aging”, instead of “growing up”. Aging doesn’t have to do with how long you’re on this planet, it has to do with giving up on yourself. To stop being subject to change is to start being stagnant.&lt;/p&gt;
&lt;h2 id=&quot;october&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2012/12/one-year-of-pastries/#october&quot;&gt;October&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These days, we almost all unequivocally embrace graceful degradation and progressive enhancement. It’s the extent that people disagree on, since everyone has a different definition of what is “graceful” and what is “enhancement”. Is a solid color an acceptable fallback for a pattern? What if your lightbox has no overlay? What if your stripes become a solid color? What if your transitions are not there? What if your code has no syntax highlighting? That’s the true challenge: How different can they look? Is it sufficient if the content is accessible in IE8 or does it also have to be pretty? How pretty? Those are the questions you need to agree on with your team to ensure you’re all on the same page. An agreement on the basic premise that websites don’t have to look the same in every browser is far from enough. Graceful degradation is not black &amp;amp; white, it’s a spectrum. You need to find where you lie on that spectrum and where your colleagues lie on it too, otherwise expect a lot of tension every time decisions need to be made.&lt;/p&gt;
</content>
  </entry><entry>
    <title>W3Conf in San Francisco, February 21-22</title>
    <link href="https://lea.verou.me/2013/01/w3conf-in-san-francisco-february-21-22/"/>
    <updated>2013-01-30T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2006</id>
    <content xml:lang="en" type="html">&lt;p&gt;You might have heard about &lt;a href=&quot;http://w3.org/conf&quot;&gt;W3Conf&lt;/a&gt;, &lt;a href=&quot;http://w3.org/&quot;&gt;W3C&lt;/a&gt;’s conference for web designers and developers. This year, I have the pleasure of not only speaking there but also organizing it, along with &lt;a href=&quot;http://twitter.com/shepazu&quot;&gt;Doug Schepers&lt;/a&gt; and designing the &lt;a href=&quot;http://w3.org/conf&quot;&gt;website&lt;/a&gt; for it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://w3.org/conf&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/01/w3conf-in-san-francisco-february-21-22/images/Screen-Shot-2013-01-30-at-02.43.26--1024x640.png&quot; alt=&quot;&quot; title=&quot;Website screenshot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alongside with yours truly, it features an excellent lineup of amazing speakers like &lt;a href=&quot;http://twitter.com/meyerweb&quot;&gt;Eric Meyer&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/Fyrd&quot;&gt;Alexis Deveria&lt;/a&gt; of &lt;a href=&quot;http://caniuse.com/&quot;&gt;caniuse.com&lt;/a&gt; fame, &lt;a href=&quot;https://twitter.com/necolas&quot;&gt;Nicolas Gallagher&lt;/a&gt; and many others. You can use coupon code &lt;strong&gt;VEROU&lt;/strong&gt; to get &lt;strong&gt;$100 off&lt;/strong&gt; the already affordable Early Bird price of &lt;strong&gt;$300&lt;/strong&gt;. But hurry up, cause Early Bird prices are only valid &lt;strong&gt;until January 31st&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Hope to see you there!&lt;/p&gt;
</content>
  </entry><entry>
    <title>iOS 6 switch style checkboxes with pure CSS</title>
    <link href="https://lea.verou.me/2013/03/ios-6-switch-style-checkboxes-with-pure-css/"/>
    <updated>2013-03-15T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2027</id>
    <content xml:lang="en" type="html">&lt;p&gt;I recently found myself looking at the Tools switch in Espresso:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/ios-6-switch-style-checkboxes-with-pure-css/images/Screen-Shot-2013-03-15-at-15.32.33-.png&quot; alt=&quot;&quot; title=&quot;Screen Shot 2013-03-15 at 15.32.33&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Not because I was going to use it (I rarely do), but because I started wondering what would be the best way to replicate this effect in CSS. I set on to create something that adhered to the following rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It should be keyboard accessible&lt;/li&gt;
&lt;li&gt;It should work in as many browsers as possible and degrade gracefully to a plain checkbox in the rest&lt;/li&gt;
&lt;li&gt;It shouldn’t depend on pseudo-elements in replaced elements (such as checkboxes), since that’s non-standard so not very dependable&lt;/li&gt;
&lt;li&gt;It shouldn’t require any extra HTML elements&lt;/li&gt;
&lt;li&gt;It shouldn’t use JS, unless perhaps to generate HTML that could be written by hand if the author wishes to do so.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why you may ask? Some of them are good practices in general, and the rest make it easier to reuse the component (and they made it more challenging too!).&lt;/p&gt;
&lt;p&gt;The best idea I came up with was to use a radial gradient for the knob and animate its background-position. All that on a checkbox. After a lot of tweaking, I settled on something that looked decent (although not as good as the Espresso one) in the browser I was using (Chrome) and went ahead to test it in others. The result was disappointing: I had forgotten that not all browsers allow that kind of customization on checkboxes. And who can blame them? This is what happens when you’re wandering in Undefined Behavior Land. They are not violating any spec, because there is no spec mandating or forbidding checkboxes from being stylable with CSS and to what extent, so every browser does its thing there.&lt;/p&gt;
&lt;p&gt;Here you can see my failed attempt, which only works as intended in Chrome:&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/5078981/457e62ee672ba69fe6ce5a3f6c173528366a2203&quot; width=&quot;100%&quot; height=&quot;200&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;I realized I had to lift one of the restrictions if I wanted to solve this, so I picked the 4th (no extra HTML elements), as it was the least important one. I could have done it as a pseudoelements on &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;s, but I decided to use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; instead, for maximum flexibility. The &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is added through script in the Dabblet below, but it could be added by hand instead.&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/5078981&quot; width=&quot;100%&quot; height=&quot;500&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;To get around the limitation of pseudo-elements not being animatable in current and older versions of WebKit, I animate the padding of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;And then I thought, why not make iOS-style switches? Even more challenging! I turned on my iPhone and tried to replicate the look. Adding the ON/OFF text was very painful, as it needs to both animate and be styled differently for “ON” and “OFF”. Eventually, I ended up doing it with &lt;code&gt;text-indent&lt;/code&gt; in such a way that it depends on the knob’s position, so that when the knob animates, the text moves too.&lt;/p&gt;
&lt;p&gt;Another challenge with this was the different backgrounds. Changing the background color upon &lt;code&gt;:checked&lt;/code&gt; was not enough, since it needs to slide as well, not just abruptly change or fade in. I ended up doing it with a gradient and animating its background-position. Naturally, this makes it not look as good in IE9.&lt;/p&gt;
&lt;p&gt;So, without further ado, here is the final result:&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/5166717&quot; width=&quot;100%&quot; height=&quot;800&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Yes, I know there are other efforts on the web to replicate this effect with pure CSS, but none of them seems to come as close to the original, without images and with such minimal HTML.&lt;/p&gt;
&lt;p&gt;Why bother, you may ask? Well, it was a fun pastime during SXSW breaks or sessions that turned out to be less interesting than expected or in the plane on the way home. Besides, I think that it could be useful in some cases, perhaps if the styling is tweaked to not resemble iOS too obviously or maybe in iOS app mockups or something.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Credits to &lt;a href=&quot;http://www.thecssninja.com/css/custom-inputs-using-css&quot;&gt;Ryan Seddon&lt;/a&gt; for paving the way for custom form elements through CSS, a couple years ago&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Use MathML today, with CSS fallback!</title>
    <link href="https://lea.verou.me/2013/03/use-mathml-today-with-css-fallback/"/>
    <updated>2013-03-21T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2041</id>
    <content xml:lang="en" type="html">&lt;p&gt;These days, I’m working on the slides for &lt;a href=&quot;http://lea.verou.me/speaking&quot;&gt;my next talk&lt;/a&gt;, “The humble border-radius”. It will be about how much work is put into CSS features that superficially look as simple as border-radius, as well as what advances are in store for it in &lt;a href=&quot;http://dev.w3.org/csswg/css4-background&quot;&gt;CSS Backgrounds &amp;amp; Borders 4&lt;/a&gt; (of which I’m an editor). It will be fantastic and you should come, but this post is not about my talk.&lt;/p&gt;
&lt;p&gt;As you may know, my slides &lt;a href=&quot;http://github.com/LeaVerou/CSSS&quot;&gt;are made with HTML, CSS &amp;amp; JavaScript&lt;/a&gt;. At some point, I wanted to insert an equation to show how border-top-left-radius (as an example) shrinks proportionally when the sum of radii on the top side exceeds the width of the element. I don’t like LaTeX because it produces bitmap images that don’t scale and is inaccessible. The obvious open standard to use was &lt;a href=&quot;http://www.w3.org/TR/MathML/&quot;&gt;MathML&lt;/a&gt;, and it can even be directly embedded in HTML5 without all the XML cruft, just like SVG. I had never written MathML before, but after a bit of reading and poking around existing samples, I managed to write the following MathML code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;math display=&amp;quot;block&amp;quot;&amp;gt;
    &amp;lt;mrow&amp;gt;
        &amp;lt;msub&amp;gt;
            &amp;lt;mi&amp;gt;r&amp;amp;prime;&amp;lt;/mi&amp;gt;
            &amp;lt;mi&amp;gt;top-left&amp;lt;/mi&amp;gt;
        &amp;lt;/msub&amp;gt;
        &amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;
        &amp;lt;mi&amp;gt;min&amp;lt;/mi&amp;gt;
        &amp;lt;mo&amp;gt;(&amp;lt;/mo&amp;gt;
        &amp;lt;msub&amp;gt;
            &amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;
            &amp;lt;mrow&amp;gt;
                &amp;lt;mi&amp;gt;top-left&amp;lt;/mi&amp;gt;
            &amp;lt;/mrow&amp;gt;
        &amp;lt;/msub&amp;gt;
        &amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;
        &amp;lt;mi&amp;gt;width&amp;lt;/mi&amp;gt;
        &amp;lt;mo&amp;gt;&amp;amp;times;&amp;lt;/mo&amp;gt;
        &amp;lt;mfrac&amp;gt;
            &amp;lt;mrow&amp;gt;
                &amp;lt;msub&amp;gt;
                    &amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;
                    &amp;lt;mi&amp;gt;top-left&amp;lt;/mi&amp;gt;
                &amp;lt;/msub&amp;gt;
            &amp;lt;/mrow&amp;gt;
            &amp;lt;mrow&amp;gt;
                &amp;lt;msub&amp;gt;
                    &amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;
                    &amp;lt;mi&amp;gt;top-left&amp;lt;/mi&amp;gt;
                &amp;lt;/msub&amp;gt;
                &amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;
                &amp;lt;msub&amp;gt;
                    &amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;
                    &amp;lt;mi&amp;gt;top-right&amp;lt;/mi&amp;gt;
                &amp;lt;/msub&amp;gt;
            &amp;lt;/mrow&amp;gt;
        &amp;lt;/mfrac&amp;gt;
        &amp;lt;mo&amp;gt;)&amp;lt;/mo&amp;gt;
    &amp;lt;/mrow&amp;gt;
&amp;lt;/math&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was very proud of myself. My first MathML equation! It’s actually pretty simple when you get the hang of it: &lt;code&gt;&amp;lt;mi&amp;gt;&lt;/code&gt; is for identifiers, &lt;code&gt;&amp;lt;mo&amp;gt;&lt;/code&gt; for operators and those are used everywhere. For more complex stuff, there’s &lt;code&gt;&amp;lt;mfrac&amp;gt;&lt;/code&gt; for fractions (along with &lt;code&gt;&amp;lt;mrow&amp;gt;&lt;/code&gt; to denote the rows), &lt;code&gt;&amp;lt;msqrt&amp;gt;&lt;/code&gt; for square roots and so on.&lt;/p&gt;
&lt;p&gt;It looked very nice on Firefox, especially after I applied Cambria Math to it instead of the default Times-ish font:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2013/03/use-mathml-today-with-css-fallback/images/mathml-firefox.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/use-mathml-today-with-css-fallback/images/mathml-firefox.png&quot; alt=&quot;MathML native support in Firefox&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://lea.verou.me/2013/03/use-mathml-today-with-css-fallback/images/mathml-chrome-withcss.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, I soon realized that as awesome as MathML might be, &lt;a href=&quot;http://docs.webplatform.org/wiki/mathml#Compatibility&quot;&gt;not not all browsers had seen the light&lt;/a&gt;. IE10 and Chrome are the most notable offenders. It looked like an unreadable mess in Chrome:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2013/03/use-mathml-today-with-css-fallback/images/mathml-chrome-nocss.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/use-mathml-today-with-css-fallback/images/mathml-chrome-nocss.png&quot; alt=&quot;MathML in Chrome, with no CSS fallback&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are libraries to make it work cross-browser, the most popular of which is &lt;a href=&quot;http://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;. However, this was pretty big for my needs, I just wanted &lt;strong&gt;one&lt;/strong&gt; simple equation in &lt;strong&gt;one&lt;/strong&gt; goddamn slide. It would be like using a chainsaw to cut a slice of bread!&lt;/p&gt;
&lt;p&gt;The solution I decided to go with was to use &lt;a href=&quot;http://modernizr.com/&quot;&gt;Modernizr&lt;/a&gt; to detect MathML support, since apparently &lt;a href=&quot;https://github.com/Modernizr/Modernizr/blob/master/feature-detects/mathml.js&quot;&gt;it’s not simple at all&lt;/a&gt;. Then, I used the &lt;code&gt;.no-mathml&lt;/code&gt; class in conjunction with selectors that target the MathML elements, to mimic proper styling with simple CSS. It’s not a complete CSS library by any means, I just covered what I needed for that particular equation and tried to write it in a generic way, so that if I need it in future equations, I only have to &lt;em&gt;add&lt;/em&gt; rules. Here’s a screenshot of the result in Chrome:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2013/03/use-mathml-today-with-css-fallback/images/mathml-chrome-withcss.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/use-mathml-today-with-css-fallback/images/mathml-chrome-withcss.png&quot; alt=&quot;MathML in Chrome with CSS fallback&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It doesn’t look as good as Firefox, but it’s decent. You can see the CSS rules I used in the following Dabblet:&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/5214646&quot; height=&quot;500&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Obviously it’s not a complete MathML-to-CSS library, if one is even possible, but it works well for my use case. If I have to use more MathML features, I’d write more CSS rules. The intention of this post is not to provide a CSS framework to use as a MathML fallback, but to show you a solution you could adapt to your needs. Hope it helps!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Preview corner-shape, before implementations!</title>
    <link href="https://lea.verou.me/2013/03/preview-border-corner-shape-before-implementations/"/>
    <updated>2013-03-24T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2074</id>
    <content xml:lang="en" type="html">&lt;p&gt;As an editor of the &lt;a href=&quot;http://dev.w3.org/csswg/css4-background/&quot;&gt;Backgrounds &amp;amp; Borders Level 4&lt;/a&gt; spec, I am naturally a bit more interested in the cool features it will bring, once implementations start (it’s currently too early for that). One of the coolest features in it is &lt;a href=&quot;http://dev.w3.org/csswg/css-backgrounds-4/#corner-shaping&quot;&gt;corner-shape&lt;/a&gt;. While in &lt;a href=&quot;http://www.w3.org/TR/css3-background/&quot;&gt;Backgrounds &amp;amp; Borders 3&lt;/a&gt;, &lt;a href=&quot;http://www.w3.org/TR/css3-background/#the-border-radius&quot;&gt;border-radius&lt;/a&gt; was only used for rounded (actually, elliptical) corners, with the help of corner-shape, it will be able to do so much more! Beveled corners, scoop-style corners (informally known as “negative border-radius”), even rectangular notches.&lt;/p&gt;
&lt;p&gt;Unfortunately, until it’s implemented in browsers, it’s hard to play with it. Or, is it? I spent the weekend creating an app in which you can enter values for corner-shape, border-radius, width, and height, and see the result, simulated through SVG, as well as the fallback in browsers that don’t support border-corner-radius (which is currently all browsers).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2013/03/preview-border-corner-shape-before-implementations/images/Screen-Shot-2013-03-24-at-17.45.38-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/preview-border-corner-shape-before-implementations/images/Screen-Shot-2013-03-24-at-17.45.38-.png&quot; alt=&quot;corner-shape preview&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Obviously, it’s not a full preview, since you can only play with a limited subset of CSS properties, but it should be good for seeing the kinds of shapes that will be possible.You could also copy the generated SVG from the Developer tools of your browser, and use it as a background in any website!&lt;/p&gt;
&lt;p&gt;Use it here: &lt;a href=&quot;https://projects.verou.me/corner-shape&quot;&gt;corner-shape preview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tested to work in at least Chrome, IE9, Firefox, Safari and theoretically, should work in any SVG-enabled browser.&lt;/p&gt;
&lt;p&gt;Enjoy! Hope you like it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Please note that corner-shape is still at a very early stage and might completely change before implementations. You can also help to make it better: Play with it and comment on what you think about its naming and functionality!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Easily center text vertically, with SVG!</title>
    <link href="https://lea.verou.me/2013/03/easily-center-text-vertically-with-svg/"/>
    <updated>2013-03-24T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2065</id>
    <content xml:lang="en" type="html">&lt;p&gt;These days, we have a number of different ways to vertically align text in a container of variable dimensions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Table display modes&lt;/li&gt;
&lt;li&gt;Flexbox&lt;/li&gt;
&lt;li&gt;inline-block hacks&lt;/li&gt;
&lt;li&gt;Wrapping the text in an extra element and absolutely positioning it&lt;/li&gt;
&lt;li&gt;…and probably many others I’m forgetting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, often comes a time when neither is suitable, so here I am, adding yet another option to the list. Of course, it comes with its own set of drawbacks, but there are cases where it might be better than the existing solutions.&lt;/p&gt;
&lt;p&gt;It all started when I discovered the &lt;a href=&quot;http://www.w3.org/TR/SVG/text.html#TextAnchorProperty&quot;&gt;&lt;code&gt;text-anchor&lt;/code&gt;&lt;/a&gt; SVG property. It determines where the &lt;a href=&quot;http://www.w3.org/TR/SVG/text.html#TextElementXAttribute&quot;&gt;x&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/TR/SVG/text.html#TextElementYAttribute&quot;&gt;y&lt;/a&gt; attributes on &lt;a href=&quot;http://www.w3.org/TR/SVG/text.html#TextElement&quot;&gt;&lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt;&lt;/a&gt; elements refer to. The magic starts when you set it to “middle”, then the &lt;a href=&quot;http://www.w3.org/TR/SVG/text.html#TextElementXAttribute&quot;&gt;x&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/TR/SVG/text.html#TextElementYAttribute&quot;&gt;y&lt;/a&gt; attributes refer to the center of the text. So, if you set those to 50%, they refer to the center of the SVG graphic itself, and if you set the SVG width and height to 100%, the text basically sits in the center of the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;’s container, which could be any HTML element!&lt;/p&gt;
&lt;p&gt;One issue was that this centered the baseline of the text, so I tried to find a way to shift the baseline appropriately. Setting &lt;a href=&quot;http://www.w3.org/TR/SVG/text.html#DominantBaselineProperty&quot;&gt;&lt;code&gt;dominant-baseline&lt;/code&gt;&lt;/a&gt;&lt;code&gt;: middle;&lt;/code&gt; on the &lt;a href=&quot;http://www.w3.org/TR/SVG/text.html#TextElement&quot;&gt;&lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt;&lt;/a&gt; element seemed to fix it, but it looks like IE doesn’t support that. I ended up adding &lt;a href=&quot;http://www.w3.org/TR/SVG/text.html#TextElementDYAttribute&quot;&gt;&lt;code&gt;dy&lt;/code&gt;&lt;/a&gt;=“.3em” to the &lt;a href=&quot;http://www.w3.org/TR/SVG/text.html#TextElement&quot;&gt;&lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt;&lt;/a&gt; element, which fixes it but might need to be adjusted if you change the line-height.&lt;/p&gt;
&lt;p&gt;In addition, this method has the following drawbacks I can think of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extra markup (namely 2 elements: &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; and &lt;a href=&quot;http://www.w3.org/TR/SVG/text.html#TextElement&quot;&gt;&lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;If the text is more than one line, it won’t automatically wrap, you have to do it manually.&lt;/li&gt;
&lt;li&gt;Some new-ish CSS text properties may not be applied. For example, text-shadow is applied in Chrome but not in Firefox, since technically, it’s still not a part of the SVG spec.&lt;/li&gt;
&lt;li&gt;You need to duplicate the text color as a fill property, since SVG does not understand the color CSS property. No need to duplicate anything, just use &lt;code&gt;fill: currentColor;&lt;/code&gt; (&lt;a href=&quot;http://lea.verou.me/2013/03/easily-center-text-vertically-with-svg/#comment-841846526&quot;&gt;thanks GreLI!&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, it has a few advantages too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You don’t need to change anything on the parent HTML element&lt;/li&gt;
&lt;li&gt;Degrades gracefully in non-SVG browsers&lt;/li&gt;
&lt;li&gt;Should be perfectly accessible and won’t break SEO&lt;/li&gt;
&lt;li&gt;Works perfectly in IE9, unlike Flexbox&lt;/li&gt;
&lt;li&gt;You can include any kind of SVG styling on the text. For example, strokes!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see and play with the result in the dabblet below:&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/5229803&quot; height=&quot;500&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Verified to work in at least Chrome, Firefox, IE9+. Hope it’s useful, even though it won’t be a good fit in every single use case.&lt;/p&gt;
</content>
  </entry><entry>
    <title>border-corner-shape is in danger, and you can help!</title>
    <link href="https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/"/>
    <updated>2013-03-28T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2091</id>
    <content xml:lang="en" type="html">&lt;p&gt;Remember &lt;a href=&quot;http://lea.verou.me/2013/03/preview-border-corner-shape-before-implementations/&quot;&gt;my previous post about an app I made to preview border-corner-shape&lt;/a&gt;? It stirred a lot of discussion in the CSS WG, and &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2013Mar/0498.html&quot;&gt;David Baron posted this&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.w3.org/csswg/css4-background/#border-corner-shape&quot;&gt;http://dev.w3.org/csswg/css4-background/#border-corner-shape&lt;/a&gt; appears to me to be an example of a feature that’s addressing a problem that we don’t have – or at least that we don’t have enough to be worth adding such a feature. I think it should be removed.&lt;/p&gt;
&lt;p&gt;In particular, if there were demand for the bevel | curve | notch values, we’d be seeing authors using the equivalents of such values on significant numbers of Web sites. So before agreeing to accept this new feature, I’d like to see examples of Web sites that are doing what these values would do. Not something similar to what these values would do, but exactly what these values would do, or at least close enough that the author wouldn’t care about the difference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can read the whole discussion in the thread I linked to, above.&lt;/p&gt;
&lt;p&gt;I might be wrong, but I believe &lt;a href=&quot;http://dev.w3.org/csswg/css4-background/#border-corner-shape&quot;&gt;border-corner-shape&lt;/a&gt; would greatly simplify many common effects, especially its “bevel” value, which can even create triangles and other polygons, that we go to great lengths to make with CSS today, and it would degrade much more nicely than border-image or backgrounds. I think it was one of &lt;a href=&quot;http://fantasai.inkedblade.net/&quot;&gt;fantasai&lt;/a&gt;’s many great ideas and I’m glad she added it to &lt;a href=&quot;http://dev.w3.org/csswg/css4-background/&quot;&gt;the Editor’s Draft of Backgrounds &amp;amp; Borders 4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I posted a &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2013Mar/0505.html&quot;&gt;list of tutorials and questions from web designers &amp;amp; developers&lt;/a&gt;, to illustrate that these effects are needed. However, David &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2013Mar/0507.html&quot;&gt;argued that “Questions from authors don’t give you enough information to be sure that the feature being added is sufficient for the author’s needs&lt;/a&gt;&lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2013Mar/0507.html&quot;&gt;”&lt;/a&gt;. He did have a point, so with some help from the community, &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2013Mar/0653.html&quot;&gt;I posted a few links to websites using such effects, and use cases&lt;/a&gt;. &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2013Mar/0519.html&quot;&gt;Nicole Sullivan&lt;/a&gt;, &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2013Mar/0538.html&quot;&gt;Liam Quin&lt;/a&gt;, &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2013Mar/0648.html&quot;&gt;fantasai&lt;/a&gt; and &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2013Mar/0666.html&quot;&gt;Lev Solntsev&lt;/a&gt; posted a couple more.&lt;/p&gt;
&lt;p&gt;However, the more real examples we have, the more likely it is to retain the feature in some form. This is where you come in: If you think border-corner-shape has merit, provide use cases, either by links to websites whose design elements it would simplify, screenshots of websites or descriptions of cases where you needed such a thing (in that order of preference). You can either post to the thread directly, or comment here and I’ll post them to the list in batches.&lt;/p&gt;
&lt;p&gt;If you think it has merit but it could be improved, feel free to post about that as well. If you don’t think it’s a good idea, any alternatives you can think of are welcome as well. Or, if you don’t think it’s useful, say that too (but make sure you first fully understand what it can do). If you’re not sure how it can be used, play around with &lt;a href=&quot;https://projects.verou.me/corner-shape/&quot;&gt;the demo app I made&lt;/a&gt; and be creative!&lt;/p&gt;
&lt;p&gt;Below are a few examples of shapes:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/bevel-1.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/bevel-1.png&quot; alt=&quot;bevel-1&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/scoop-1.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/scoop-1.png&quot; alt=&quot;scoop-1&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/notch-1.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/notch-1.png&quot; alt=&quot;notch-1&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/notch-2.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/notch-2.png&quot; alt=&quot;notch-2&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/scoop-2.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/scoop-2.png&quot; alt=&quot;scoop-2&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/bevel-4.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/bevel-4.png&quot; alt=&quot;bevel-4&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/bevel-3.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/bevel-3.png&quot; alt=&quot;bevel-3&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/bevel-2.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/images/bevel-2.png&quot; alt=&quot;bevel-2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wanted to demo triangles and trapezoids as well, but it seems there’s a bug in my app, so I’ll have to debug it first :( If we allow border-corner-shape to have different values for all four corners, even more possibilites open (e.g. arrows).&lt;/p&gt;
&lt;p&gt;Spend a few minutes to help the CSS WG help you. Thanks!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Can we get rid of gradient prefixes?</title>
    <link href="https://lea.verou.me/2013/04/can-we-get-rid-of-gradient-prefixes/"/>
    <updated>2013-04-07T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2137</id>
    <content xml:lang="en" type="html">&lt;p&gt;I recently realized that unprefixed gradients finally propagated to stable Chrome, and after &lt;a href=&quot;https://twitter.com/LeaVerou/status/320365600998305792&quot;&gt;tweeting about it&lt;/a&gt;, I decided to do some research on which browsers support unprefixed gradients, and what percentage of users needs them.&lt;/p&gt;
&lt;p&gt;Currently, unprefixed gradients are supported in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chrome 26+&lt;/li&gt;
&lt;li&gt;Firefox 16+&lt;/li&gt;
&lt;li&gt;Opera 12.10+&lt;/li&gt;
&lt;li&gt;IE10+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets have a look at which prefixes we actually need to use for gradients today.&lt;/p&gt;
&lt;h3 id=&quot;-ms-&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2013/04/can-we-get-rid-of-gradient-prefixes/#-ms-&quot;&gt;-ms-&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There was &lt;strong&gt;never&lt;/strong&gt; a stable release of IE that supported -ms- prefixed gradients, those were only in preview versions (stable IE10 supports both prefixed and unprefixed gradients). So, -ms- is most definitely not required.&lt;/p&gt;
&lt;h3 id=&quot;-moz-&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2013/04/can-we-get-rid-of-gradient-prefixes/#-moz-&quot;&gt;-moz-&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Firefox versions &amp;gt;= 3.6 and &amp;lt; 16 account for &lt;strong&gt;4%&lt;/strong&gt; of the global user base*. This might or might not be significant, depending on how good the fallback is that these users will see. If the gradient only adds a subtle shadow or something like that, I’d say ditch -moz-. If it’s more crucial to the design &amp;amp; branding, it might be wise to still keep it. More tech-focused websites probably have a much lower percentage than 4%, so it might be a good idea to drop it there completely.&lt;/p&gt;
&lt;h3 id=&quot;-o-&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2013/04/can-we-get-rid-of-gradient-prefixes/#-o-&quot;&gt;-o-&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Opera unprefixed gradients in 12.10. Opera Mini never supported them. Opera versions &amp;lt; 12.10 currently account to a total of &lt;strong&gt;0.25%&lt;/strong&gt; of the global user base*. I’d say it’s safe to ditch -o- in gradients in most cases.&lt;/p&gt;
&lt;h3 id=&quot;-webkit-&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2013/04/can-we-get-rid-of-gradient-prefixes/#-webkit-&quot;&gt;-webkit-&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Chrome only very recently unprefixed gradients and Safari is a long way from doing so. Not to mention all the mobile browsers using WebKit. Unfortunately, we can’t ditch -webkit- in CSS gradients just yet.&lt;/p&gt;
&lt;h3 id=&quot;my-opinion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2013/04/can-we-get-rid-of-gradient-prefixes/#my-opinion&quot;&gt;My opinion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Don’t use -ms- prefixed gradients, there’s absolutely zero point in doing so. Include -moz- for the less subtle gradients. No significant need for -o- gradients. -webkit- is still needed and probably will be at least until the end of 2013. Or, of course, just use &lt;a href=&quot;https://projects.verou.me/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt; and don’t bother. :P&lt;/p&gt;
&lt;p&gt;Keep in mind that your stats might differ from global stats, so which prefixes you need to include might differ on a case by case basis. &lt;strong&gt;The purpose of this post is to alert you that maybe you don’t need all these prefixes, not to prescriptively tell you which ones to keep.&lt;/strong&gt; Except -ms-, please don’t use that. There’s absolutely zero reason whatsoever.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Last but not least, no matter which prefixes you include, always have a good solid color fallback!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;* Global market share statistics from &lt;a href=&quot;http://gs.statcounter.com/#browser_version-ww-monthly-201301-201303&quot;&gt;StatCounter&lt;/a&gt;, for a 3 month period of January 2013 - March 2013. The graph on the website only displays the most popular browser versions, but downloading the CSV file gives you all of them.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Meet dpi.lv: More than you probably wanted to know about screen DPI</title>
    <link href="https://lea.verou.me/2013/06/meet-dpi-lv-more-than-you-probably-wanted-to-know-about-screen-dpi/"/>
    <updated>2013-06-10T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2156</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2013/06/meet-dpi-lv-more-than-you-probably-wanted-to-know-about-screen-dpi/images/Screen-Shot-2013-06-10-at-13.41.39-.png&quot;&gt;
&lt;img src=&quot;https://lea.verou.me/2013/06/meet-dpi-lv-more-than-you-probably-wanted-to-know-about-screen-dpi/images/Screen-Shot-2013-06-10-at-13.41.39--300x221.png&quot; alt=&quot;Screen Shot 2013-06-10 at 13.41.39&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yesterday (Sunday) I was on a 9.5 hour flight from Canada with no inflight entertainment (well, thanks Air Canada), so I did what every bored human being would do instead of watching movies: I decided to code an app! And out of the infinite set of possible apps somebody can make, I decided to make an app to calculate screen DPI/PPI.&lt;/p&gt;
&lt;p&gt;You might be wondering if I’m still (?) sane, but you might be surprised to hear I found myself calculating screen PPIs quite frequently and wanted to save myself the hassle of doing the math every time. I’m a curious person and I wanted to know, even about products I would never buy and even when it wasn’t listed in the tech specs. Yes, my hobbies are somewhat weird. :o&lt;/p&gt;
&lt;p&gt;I first thought about doing such an app a while ago, but never found the time to code it. The last time I had thought about it was a few days ago at the SF Apple Store with a friend. We were looking at the 27&amp;quot; Apple Thunderbolt displays in awe and thought they must have huge pixel density. After a few calculations in the console (which ironically produced a result faster than the Apple guy my friend asked), it turned out it was only …102. “I need to code an app to make this sort of calculation easy! People are being misled by marketing!” I thought.&lt;/p&gt;
&lt;p&gt;Fast forward to my flight. You didn’t expect my laptop battery to last for 9.5 hours, right? Yeah, MacBook Air batteries are good, but not *that* good. Of course it eventually died so I had to find other ways to pass my time (I ended up sleeping — or trying to). However, by the time it died, I had gone over the threshold of being able to give it up, so I spent the rest of the day finishing it, despite my obvious jetlag and sleepiness. I was in the zone — You don’t just go sleeping when you’re in the zone, right?&lt;/p&gt;
&lt;p&gt;Besides the DPI/PPI calculator, I added a few other fun things too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A list of devices with pre-calculated data (stored in a separate JSON file, which makes it easy to update — *hint, hint*)&lt;/li&gt;
&lt;li&gt;Wrote a few FAQ items about DPI/PPI.&lt;/li&gt;
&lt;li&gt;Like many of my apps, it supports link sharing through URL hashes (for examples, check the &lt;a href=&quot;http://dpi.lv/#screens&quot;&gt;screens&lt;/a&gt; section).&lt;/li&gt;
&lt;li&gt;I even bought a proper domain for it (&lt;a href=&quot;http://dpi.lv/&quot;&gt;dpi.lv&lt;/a&gt;) and drew &lt;a href=&quot;http://dribbble.com/shots/1107403-dpi-love&quot;&gt;a logo&lt;/a&gt;! The logo took hours by itself. Not just to draw it, but to simplify Illustrator’s ugly, repetitive SVG output (which is still better than what most other tools spit out). Hand-simplifying SVG is a meditative experience that I thoroughly enjoy, to the bewilderment of everyone who read &lt;a href=&quot;https://twitter.com/LeaVerou/status/343864607368163329&quot;&gt;my tweet about it&lt;/a&gt;. Just for the lulz, here’s the &lt;a href=&quot;http://dpi.lv/img/logo-ai.svg&quot;&gt;before&lt;/a&gt; and the 66% smaller &lt;a href=&quot;http://dpi.lv/img/logo.svg&quot;&gt;after&lt;/a&gt; (the small design tweaks were intentional)&lt;/li&gt;
&lt;li&gt;The screen that displays the result resizes to reflect the aspect ratio of the resolution you’ve selected. It even animates to it, with CSS transitions! Oh, and it also uses FlexBox to center the text vertically.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://dpi.lv/&quot;&gt;Enjoy&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Of course it’s open source (under an MIT license, as usual), and you can &lt;a href=&quot;https://github.com/LeaVerou/dpi&quot;&gt;fork it on Github&lt;/a&gt;, as usual. The JS is a bit of a mess, but I’m too tired to refactor it now. Same goes for the lack of favicon and tagline. Oh well. I still like it. :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; If you are on a display with multiple dots per pixel (e.g. Retina), the resolution (pixel width × pixel height) it tries to guess will be incorrect, so you’ll have to actually input the right one. The default resolution in there is just a hint, it doesn’t mean it’s “broken” if it doesn’t guess right, they’re editable fields. That said, it would be nice to guess right in those cases too, and I will look into it.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Leaving W3C</title>
    <link href="https://lea.verou.me/2013/07/leaving-w3c/"/>
    <updated>2013-07-11T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2211</id>
    <content xml:lang="en" type="html">&lt;p&gt;About a year ago, &lt;a href=&quot;http://lea.verou.me/2012/08/lea-at-w3-org/&quot;&gt;I announced I was joining W3C&lt;/a&gt; as a full-time staff member, to work on Developer Relations and education. Working at &lt;a href=&quot;http://w3.org/&quot;&gt;W3C&lt;/a&gt; was a dream come true and I can’t say I was disappointed. Over the past year I’ve worked with some amazingly brilliant people, hopefully increased awareness for web standards in the developer community and helped materialize the vision behind &lt;a href=&quot;http://webplatform.org/&quot;&gt;WebPlatform.org&lt;/a&gt;. It’s been a fun ride and working for a non-profit was very fulfilling. If somebody told me a year ago that I would decide to leave W3C on my own free will, I would’ve asked them what they were smoking. However, our future selves often surprise us and although it was the most difficult decision of my life, I recently decided to leave. July 31st will be my last day at W3C. I will attempt to describe the reasons below for anyone interested, but in no way does me leaving mean that I don’t deeply appreciate W3C or that I regretted joining. If I could go a year back, I would make the same choice.&lt;/p&gt;
&lt;h2 id=&quot;reason-%231%3A-i-want-to-focus-on-other-projects&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2013/07/leaving-w3c/#reason-%231%3A-i-want-to-focus-on-other-projects&quot;&gt;Reason #1: I want to focus on other projects&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I didn’t have much time to work on my pet projects, as my job was consuming pretty much the entire me. &lt;strong&gt;This is absolutely not W3C’s fault, it’s mine&lt;/strong&gt; and a pretty common side effect of working from home. Pull requests kept piling up on Github, I didn’t have many ideas for new side projects or time for research &amp;amp; to come up with new techniques. I was able to work a bit on &lt;a href=&quot;https://dabblet.com/&quot;&gt;Dabblet&lt;/a&gt; and a &lt;a href=&quot;http://prismjs.com/plugins/wpd/&quot;&gt;WPD Prism plugin&lt;/a&gt;, as they were useful for &lt;a href=&quot;http://webplatform.org/&quot;&gt;WebPlatform.org&lt;/a&gt;, but for the most part, I wanted to work more on open source projects, do more research, blog more etc. I also recently signed a book deal with &lt;a href=&quot;http://oreilly.com/&quot;&gt;O’Reilly&lt;/a&gt; for a book on advanced CSS techniques (“CSS Secrets”, ETA Spring 2014) and I wanted to take some time off and write a great inaugural book, not just a decent one (and design it too!). I also kinda missed doing workshops or even client work, who knew!&lt;/p&gt;
&lt;p&gt;Having more time will also mean I will be able to focus more on standards work, which is a huge passion of mine. I know it sounds odd to leave W3C to work more on …standards, but standards work was never a part of my job at W3C. If I wanted to devote time to actively participate in the CSS WG beyond the weekly telcon, or to &lt;a href=&quot;http://dev.w3.org/csswg/css-backgrounds-4/&quot;&gt;the specification I edit&lt;/a&gt;, I would have to do it outside work hours. Obviously, I will still have to do it in my free time, but I recall having more of that when I was self-employed.&lt;/p&gt;
&lt;h2 id=&quot;reason-%232%3A-i-want-to-grow&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2013/07/leaving-w3c/#reason-%232%3A-i-want-to-grow&quot;&gt;Reason #2: I want to grow&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I want to be in a job that’s a challenge, that helps me grow and become a better professional. While I appreciate &lt;a href=&quot;http://webplatform.org/&quot;&gt;WebPlatform.org&lt;/a&gt;, I didn’t feel that doing front-end development &amp;amp; design on it made me particularly better at what I do, at least compared to other things I could have been doing in the past year. It could be a perfect opportunity to grow for someone else, but it wasn’t for me.&lt;/p&gt;
&lt;p&gt;I did become a better public speaker over the past year, but I would likely be doing as many talks anyway. I got some valuable conference organizing experience from &lt;a href=&quot;http://w3.org/conf&quot;&gt;W3Conf&lt;/a&gt;, which I thoroughly enjoyed working on, but that was only a small part of my work.&lt;/p&gt;
&lt;h2 id=&quot;reason-%233%3A-different-direction&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2013/07/leaving-w3c/#reason-%233%3A-different-direction&quot;&gt;Reason #3: Different direction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Had I stayed, my job description for the upcoming year would have a slightly different focus. Since W3C Developer Relations was a new activity, neither Doug (my manager) nor I were quite sure how we could make the biggest impact, so we were experimenting to some degree. A few months after I joined, &lt;a href=&quot;http://webplatform.org/&quot;&gt;WebPlatform.org&lt;/a&gt; launched and we slowly concentrated our efforts on that. If I had stayed for another year, my job would have an even stronger &lt;a href=&quot;http://webplatform.org/&quot;&gt;WebPlatform.org&lt;/a&gt; focus. Half of it would be front-end design &amp;amp; development and even writing documentation for a day per week. That meant I would have to cut down many parts of my job that I enjoyed and wanted to concentrate more on, such as public speaking and event planning, and though it includes some public-facing activities like gathering feedback from developers, I’d like to do even more of that. This was not a bad decision on W3C’s part — &lt;a href=&quot;http://webplatform.org/&quot;&gt;WebPlatform.org&lt;/a&gt; needs somebody concentrating on those aspects of it. However, although I strongly believe in the vision behind the project, this was not what I would personally enjoy doing.&lt;/p&gt;
&lt;h2 id=&quot;thank-you%2C-w3c&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2013/07/leaving-w3c/#thank-you%2C-w3c&quot;&gt;Thank you, W3C&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I’m leaving W3C, it will always have a very special place in my heart. I met &amp;amp; worked with the most brilliant people I have ever met. Special mention to &lt;a href=&quot;http://twitter.com/amyvdh&quot;&gt;Amy&lt;/a&gt;, who did not just prove to be an intelligent, interesting and kind person, but also a great friend in the past couple of weeks that I got to know her better. I got to visit &lt;a href=&quot;http://mit.edu/&quot;&gt;MIT&lt;/a&gt; and work from there for a while, which was an incredible experience. I got to contribute to &lt;a href=&quot;http://webplatform.org/&quot;&gt;WebPlatform.org&lt;/a&gt; which is a very ambitious and honorable project that I strongly believe in. I got to co-organize &lt;a href=&quot;http://w3.org/conf&quot;&gt;W3Conf&lt;/a&gt;, which turned out to a successful and fun conference.&lt;/p&gt;
&lt;p&gt;Me leaving is a personal decision that has less to do with W3C and more to do with what I want out of life. But I’m going to sorely miss the W3C Team, the culture, the technical discussions. It’s been a fun ride and I’m grateful for the chance and the trust W3C placed in me. In fact, I wouldn’t be surprised to find myself working for W3C again at some point in the future, in some way or in a different role.&lt;/p&gt;
&lt;p&gt;But for now, here’s to the future! I’m thrilled.&lt;/p&gt;
&lt;h2 id=&quot;want-to-work-at-w3c%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2013/07/leaving-w3c/#want-to-work-at-w3c%3F&quot;&gt;Want to work at W3C?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As you can imagine, there is one more opening now. :) Are you a great designer with front-end development skills? Are you passionate about creating the best open web platform documentation on the Web? &lt;strong&gt;&lt;a href=&quot;http://www.w3.org/Consortium/Recruitment/#design-webplatform&quot;&gt;Apply now!&lt;/a&gt;&lt;/strong&gt; You will be able to work from wherever in the world you want, whatever hours in the day you want, you will have great autonomy and &lt;a href=&quot;http://twitter.com/shepazu&quot;&gt;a pretty cool boss&lt;/a&gt;. Sweet, huh?&lt;/p&gt;
</content>
  </entry><entry>
    <title>What makes speakers happy</title>
    <link href="https://lea.verou.me/2013/07/what-makes-speakers-happy/"/>
    <updated>2013-07-19T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2233</id>
    <content xml:lang="en" type="html">&lt;p&gt;I wish I could speak at &lt;a href=&quot;http://cssconf.eu/&quot;&gt;CSSConf.eu&lt;/a&gt;, but unfortunately I had to decline the invitation, as it collided with a prior speaking engagement I had agreed on. I recently got another email from the organizers with an interesting question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We want to make this event as stress-free for our speakers as possible. Since you spoke at a bunch of events, can you share a tip or two about what will make a speakers’ life easier, and their stay more pleasant? Any typical mistakes we can avoid?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I thought it was lovely that they care about their speakers enough to ask this, this already places them above average. I started writing a reply, but I soon realized this is information that could be useful for other conference organizers as well, so I decided to post it here instead. So, what makes speakers happy?&lt;/p&gt;
&lt;h2 id=&quot;the-baseline&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2013/07/what-makes-speakers-happy/#the-baseline&quot;&gt;The baseline&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These are things every good conference is doing for their speakers, although they often miss one or two. They keep speakers happy, but they &#39;re not out of the ordinary.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cover their flights, accommodation for the entire conference and ground transportation from/to the airport (with a car, not public transport!).&lt;/li&gt;
&lt;li&gt;Do not expect them to go through the hassle of booking all those themselves and then sending you receipts. Offer it as an option, but book them yourself by default.&lt;/li&gt;
&lt;li&gt;Do not book flights without confirming the itinerary and personal info with them first. Also, this sounds obvious, but it’s surprising how many conferences have made this mistake with me: &lt;strong&gt;Type their name correctly&lt;/strong&gt; when booking flights!&lt;/li&gt;
&lt;li&gt;If hotel WiFi is not free, make sure it’s covered and included in their reservation. Same goes for breakfast.&lt;/li&gt;
&lt;li&gt;Offer a honorarium, at least to those who have to take time off work to speak at your event (e.g. freelancers). Even if your budget is small and can only give a tiny honorarium, it will at least cover their meals, cabs etc while there. If the honorarium is small and mainly intended to cover miscellaneous expenses of the trip, don’t ask them to submit an invoice to claim it.&lt;/li&gt;
&lt;li&gt;Have a speakers dinner before the event, where they can meet and socialize with the other speakers. This is also good for the conference, as they get the chance to catch up with their speaker friends (there aren’t that many people on the conference circuit, so we often know each other and want to catch up)  so they will talk more to the attendees during the conference. Make sure the speakers dinner does not overlap with the pre-party, if you have one.&lt;/li&gt;
&lt;li&gt;Do a tech check before their talk to make sure everything is smooth. Have dongles for Mac laptops. Have clickers they could use. Use wireless lapel microphones. Have a reliable private wifi network for speakers to use if they need an internet connection for their talk.&lt;/li&gt;
&lt;li&gt;Have breaks between talks so they have some margin of going overtime without impacting the schedule. If they are too stressed about going through their talk fast, it won’t be a very good talk.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;going-the-extra-mile&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2013/07/what-makes-speakers-happy/#going-the-extra-mile&quot;&gt;Going the extra mile&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These are all things one or more conferences have done for me, but they are not generally common so they are a positive surprise when they happen, not something expected.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Book Business class flights, especially for longer flights where passengers are expected to sleep. It’s so much more comfortable to sleep in a seat that fully reclines! I was incredibly grateful to the one conference that did this.&lt;/li&gt;
&lt;li&gt;Cover incidentals in the hotel. Yes, it’s a bit risky but come on, we’re not rockstars. We won’t screw you over. In most cases it will be a pretty small extra cost and it looks really good, it tells speakers you trust them and want them to have a good time.&lt;/li&gt;
&lt;li&gt;Offer a speaker gift bag. It can contain all kinds of things: Stuff that will make their stay more comfortable (stain remover, travel toothbrush etc), souvenirs from the place since we rarely have time to do touristy stuff, alcohol for impromptu get togethers with other speakers, snacks to eat during a late night craving in the hotel room, anything goes and I’ve seen conferences put all kinds of stuff in there. It’s a nice welcome gesture. Bonus points if they’re personalized based on what you’ve researched about the speaker.&lt;/li&gt;
&lt;li&gt;Send out a survey to the audience after the conference and &lt;strong&gt;let the speakers know how they did&lt;/strong&gt;. Let them know what comments their talk got and how well they did compared to other speakers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, make sure you read &lt;a href=&quot;http://quirksmode.org/coh/&quot;&gt;PPK’s excellent Conference Organizer’s Handbook&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Slanted tabs with CSS 3D transforms</title>
    <link href="https://lea.verou.me/2013/10/slanted-tabs-with-css-3d-transforms/"/>
    <updated>2013-10-18T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2252</id>
    <content xml:lang="en" type="html">&lt;p&gt;Not sure if I’m the first to come up with this idea, but I searched and didn’t find anything. So, for a long time, I was wondering if there’s an easy way to create trapezoid shapes in CSS, especially with borders etc. Eventually, I realized that I could use a pseudo-element for the background and 3D rotate it, so that it appears like a trapezoid. Then &lt;a href=&quot;https://twitter.com/krofdrakula&quot;&gt;@krofdrakula&lt;/a&gt; suggested on twitter that I could even add border-radius so that it looks like a tab, so I added that as well:&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/6867917&quot; width=&quot;100%&quot; height=&quot;250&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Eventually I thought, why not actually turn this into a tab demo? So I made a dabblet with that. And then I realized that if you change the transform-origin, other interesting tab shapes appear! Enjoy:&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/7039790&quot; width=&quot;100%&quot; height=&quot;700&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;The best part? It degrades pretty gracefully on browsers that don’t support transforms! You get nice rounded tabs that just aren’t slanted (although they have a pretty large top padding, but you can use Modernizr for that. Try it for yourself by commenting the transform out in the dabblet and see the result.&lt;/p&gt;
&lt;p&gt;Another issue is that the angled lines look a bit aliased in Firefox, but that’s a bug that will eventually get fixed.&lt;/p&gt;
&lt;p&gt;In general, it’s a bit rough around the edges, so treat it more as a proof of concept. But with a little more work, it could totally work in production. Tested in Chrome, Safari, Firefox, IE9 (fallback) and IE10.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Flexible Google-style loader with CSS</title>
    <link href="https://lea.verou.me/2013/11/flexible-google-style-loader-with-css/"/>
    <updated>2013-11-11T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2261</id>
    <content xml:lang="en" type="html">&lt;p&gt;So, for a while I had noticed the nice sutble loader Google apps use and I was wondering if it would be easy to make with CSS and CSS animations: &lt;img src=&quot;https://maps.gstatic.com/tactile/omnibox/loading.gif&quot; alt=&quot;Google’s loader&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Yesterday, I realised that you can get this effect by increasing border size until about the middle of the element, as long as the total width stays the same (by using &lt;code&gt;box-sizing: border-box&lt;/code&gt;):&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/7408996&quot; height=&quot;400&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;However, as you can see above, after the midpoint, the border is not curved any more, so does not produce the desired effect. However, what if we split the background colour in half, and animated &lt;code&gt;border-left&lt;/code&gt; &lt;em&gt;until&lt;/em&gt; 50% of the width and then &lt;code&gt;border-right&lt;/code&gt; &lt;em&gt;from&lt;/em&gt; 50% of the width? That worked, but only gave us 25% of the effect. I could recreate the whole effect by then animating border-top/bottom instead etc, but it’s easier to apply &lt;code&gt;animation-direction: alternate&lt;/code&gt; to alternate between showing and hiding the circle and and simultaneously rotate the loader by 90deg each time, by applying &lt;code&gt;animation-timing-function: steps(4)&lt;/code&gt; to a rotate animation that runs over 4x the duration of the border animation.&lt;/p&gt;
&lt;p&gt;This is the finished result:&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/7387255&quot; height=&quot;300&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;The dimensions are all set in ems so that you can change the size in one place: Just change the font-size and the loader scales perfectly. It’s also accessible to screen reader users, as there is still text there.&lt;/p&gt;
&lt;p&gt;And yes, it’s not super useful as-is, there are tons of spinners on the Web that you can use instead. However, I decided to post it (instead of just tweeting it) as I thought the techniques involved in making it might be interesting for some of you :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Cleanest CSS spinner, ever</title>
    <link href="https://lea.verou.me/2013/11/cleanest-css-spinner-ever/"/>
    <updated>2013-11-29T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2282</id>
    <content xml:lang="en" type="html">&lt;p&gt;For some reason, I seem to have a fascination with CSS loaders these days. After &lt;a href=&quot;http://lea.verou.me/2013/11/flexible-google-style-loader-with-css/&quot;&gt;recreating the Google loader with clean CSS&lt;/a&gt; recently, I set off to recreate the classic spinner with CSS. Yes, I know this has been done zillions of times, but I wanted a clean, maintainable, reusable solution, not just a proof of concept. Something with not tons of CSS and/or HTML elements.&lt;/p&gt;
&lt;p&gt;I managed to recreate it with only 2 elements. I’m still not completely satisfied, as I was hoping to come up with a solution with just one element, but it’s still much better than all those solutions out there that use tons of elements and code.&lt;/p&gt;
&lt;p&gt;So, how did I do it?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I use the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudoelements of the parent and child div to create the 4 first bars&lt;/li&gt;
&lt;li&gt;I use &lt;code&gt;box-shadow&lt;/code&gt; with no blur on all four of the above to create the remaining 4 bars&lt;/li&gt;
&lt;li&gt;I rotate the whole element with a &lt;code&gt;steps(8)&lt;/code&gt; timing function to create the animation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As with the Google-style loader, just changing the &lt;code&gt;font-size&lt;/code&gt; on this scales the whole element, as everything is sized with ems. Also, there is fallback text, to make it accessible to screen readers. Tested in Chrome, Firefox, Safari, IE10. Should degrade gracefully on IE9 (spinner should look fine, just no animation).&lt;/p&gt;
&lt;p&gt;Using a preprocessor for variables and calculations should simplify the code even further.&lt;/p&gt;
&lt;p&gt;Enjoy :)&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/7615212&quot; width=&quot;100%&quot; height=&quot;300&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Ideas for further improvement are welcome. Remember that it’s not just the size of the code that matters, but also its simplicity.&lt;/p&gt;
</content>
  </entry><entry>
    <title>CSS is for developers</title>
    <link href="https://lea.verou.me/2013/12/css-is-for-developers/"/>
    <updated>2013-12-05T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2290</id>
    <content xml:lang="en" type="html">&lt;p&gt;Quite often people assume that because the language I focus on is CSS, I &lt;em&gt;must&lt;/em&gt; be a web designer. Don’t get me wrong, I love visual design with a passion. I have studied it a lot over the years and I’ve worked on several design projects for clients. Heck, I even have &lt;a href=&quot;http://dribbble.com/LeaVerou&quot;&gt;a dribbble profile&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;However, &lt;strong&gt;if I had to pick one role, I would definitely consider myself more of a developer than a designer.&lt;/strong&gt; &lt;a href=&quot;http://lea.verou.me/2012/05/how-i-got-into-web-development-the-long-version/&quot;&gt;I discovered coding on my own when I was 12&lt;/a&gt; and so far it has been the most long lasting love of my life. Although I lost my coding virginity to Visual Basic (something I’m still embarrassed about), over the years I’ve coded in Java, C, C++, C#, PHP, JavaScript before I even got to CSS. I’ve actually studied Computer Science at university, graduated 4th in my class and I’m &lt;a href=&quot;http://lea.verou.me/2014/02/im-going-to-mit/&quot;&gt;gonna be doing research at MIT towards a PhD, starting fall 2014&lt;/a&gt;. Regarding design, I’m completely self-taught. My personality is more similar to the developers I know than the designers I know. Coding comes naturally, but I have to struggle to get better at design. I’m a better developer than I will ever be a designer.&lt;/p&gt;
&lt;p&gt;Still, the assumption often is that &lt;em&gt;I can’t possibly be a developer and interested in CSS, when there are all these amazing programming languages to focus my energy on instead. Therefore I must be a designer …right?&lt;/em&gt; There are even people who know about &lt;a href=&quot;https://github.com/LeaVerou/&quot;&gt;my open source projects&lt;/a&gt;, and still think that I can’t code in JavaScript or any other programming language (not sure how you can make most of these tools with pure CSS, but since &lt;a href=&quot;http://eli.fox-epste.in/rule110-full.html&quot;&gt;CSS is Turing complete&lt;/a&gt;, I guess there must be a way!).&lt;/p&gt;
&lt;p&gt;If you think I’m an exception, you’re mistaken. &lt;a href=&quot;http://www.w3.org/Style/CSS/members.en.php3&quot;&gt;Everyone else in the W3C CSS Working Group&lt;/a&gt;, the group which defines the future of CSS, fits the profile of a developer much more than that of a designer. In fact, I might be the most designer-y person in it! Even outside the WG, the people I know who are really good at CSS, are either developers or hybrids (designers &amp;amp; developers).&lt;/p&gt;
&lt;p&gt;This is no coincidence. &lt;strong&gt;The skills required to write good CSS code are by and large the same skills required to write good code in general.&lt;/strong&gt; CSS code also needs to be &lt;a href=&quot;http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&quot;&gt;DRY&lt;/a&gt;, maintainable, flexible etc. CSS might have a visual output, but is still code, just like SVG, WebGL/OpenGL or the JavaScript Canvas API. It still requires the same kind of analytical thinking that programming does. Especially these days that most people use preprocessors for their CSS, with variables, math, conditionals and loops, it’s almost starting to look like programming!&lt;/p&gt;
&lt;p&gt;I find it counter-productive that CSS in most jobs is assigned to designers. Designers should be doing what they do best and love: Design. Sure, they should be aware of the practical limitations of the medium and should be able to read and lightly edit CSS or hack together a prototype to show how their design behaves in different conditions, but it shouldn’t be their job to write CSS for production. The talents required to be a good designer and a good coder are very different and it’s unreasonable to expect both from everyone. Also, when you know you’re gonna have to implement the design you’re working on, it’s tempting to produce designs that can be easily converted to CSS, instead of pushing the boundaries. We don’t usually expect developers to design, even though it’s an added bonus when they have an eye for design as well. It should be the same for designers.&lt;/p&gt;
&lt;p&gt;And if you’re a designer who writes amazing CSS and is about to tell me off in the comments, hold your horses. &lt;strong&gt;I’m not saying you shouldn’t be coding CSS.&lt;/strong&gt; I’m saying that &lt;strong&gt;if you’re good at it, it means you’re both&lt;/strong&gt; a designer AND a developer. Own it! :D&lt;/p&gt;
</content>
  </entry><entry>
    <title>Simple script: Automatic talks list</title>
    <link href="https://lea.verou.me/2013/12/simple-script-automatic-talks-list/"/>
    <updated>2013-12-28T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2301</id>
    <content xml:lang="en" type="html">&lt;p&gt;I guess this will not be useful to many, but thought I’d open source it anyway, in case someone else finds it useful. I mostly wrote it because after 50+ conferences, I got seriously fed up updating &lt;a href=&quot;http://lea.verou.me/speaking&quot;&gt;the list&lt;/a&gt; by editing the HTML manually. Now I will only have to edit &lt;a href=&quot;https://projects.verou.me/talks/talks.json&quot;&gt;a JSON file&lt;/a&gt; manually! :P&lt;/p&gt;
&lt;p&gt;Admittedly, it’s not my best code (more like a quick hack), but it should be pretty easy to adapt to your needs, even to adapt it to lists of different things instead of talks. Using it for talks is very straight forward: Include the CSS and JS, add a list with a class of “talks” where you want it, done.&lt;/p&gt;
&lt;p&gt;Hope you enjoy it :)&lt;/p&gt;
&lt;p&gt;Links: &lt;a href=&quot;http://lea.verou.me/speaking/&quot;&gt;Live demo&lt;/a&gt; | &lt;a href=&quot;https://github.com/LeaVerou/talks&quot;&gt;Github repo&lt;/a&gt; | &lt;a href=&quot;https://projects.verou.me/talks/&quot;&gt;Script page&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Smooth state animations with animation-play-state</title>
    <link href="https://lea.verou.me/2014/01/smooth-state-animations-with-animation-play-state/"/>
    <updated>2014-01-09T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2315</id>
    <content xml:lang="en" type="html">&lt;p&gt;When a CSS animation is applied from the beginning of the page load, things are easy. You just use the animation property with appropriate parameters, and you’re done. However, what if the animation is applied on a certain state, e.g. :hover, :active, :focus or a JS-triggered class change?&lt;/p&gt;
&lt;p&gt;A naïve approach would be to try something like this:&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/8334474&quot; width=&quot;100%&quot; height=&quot;400&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;However, this means that when you hover out of the element, it abruptly snaps to its original state (no rotation). In many cases, it would be a more desirable to have it freeze in the last shown frame, until we hover over it again. To achieve that, we can apply the animation from the beginning, with &lt;code&gt;animation-play-state: paused;&lt;/code&gt; and just change it on :hover to &lt;code&gt;animation-play-state: running;&lt;/code&gt;. This is what happens then:&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/8333352&quot; width=&quot;100%&quot; height=&quot;400&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;I figured this out when I was recently helping my good friend &lt;a href=&quot;http://twitter.com/juliancheal&quot;&gt;Julian&lt;/a&gt; with &lt;a href=&quot;http://juliancheal.co.uk/&quot;&gt;his one page website&lt;/a&gt;*. When you hover over the figure, it starts scrolling, but when you hover out of it, it doesn’t snap back to its original position, which would’ve looked awful.&lt;/p&gt;
&lt;p&gt;*Beware it’s still a bit rough around the edges, e.g. the result has some rendering bugs on Firefox &amp;amp; IE plus some unsupported features messing it up (e.g. baseline-shift in SVG), but those are for another day as I had work to do and this ended up taking longer than the few hours I expected. Beyond the animation, you might want to explore the CSS-only &lt;em&gt;buttons&lt;/em&gt; (see what I did there?) or the leather figure frame. Credits to &lt;a href=&quot;https://twitter.com/laurakalbag&quot;&gt;Laura Kalbag&lt;/a&gt; for the tweed background &amp;amp; color scheme. I also experimented with SASS on this one and found it much smoother to work with than LESS, so I might stick with it for those cases where I need a preprocessor.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://juliancheal.co.uk/&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2014/01/smooth-state-animations-with-animation-play-state/images/Screen-Shot-2014-01-09-at-14.45.40--1024x558.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Vote for me in the net awards 2014!</title>
    <link href="https://lea.verou.me/2014/01/vote-for-me-in-the-net-awards-2014/"/>
    <updated>2014-01-30T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2334</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://thenetawards.com/vote/contribution/lea-verou/&quot;&gt;&lt;img src=&quot;http://future-publishing.msgfocus.com/files/amf_future_publishing/project_270/net-awards-2014-nominee-ribbon.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;I was excited and surprised to find out I’ve been in the 10 finalists for two (2!) categories in the net awards this year:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thenetawards.com/vote/contribution/lea-verou/&quot;&gt;Outstanding contribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thenetawards.com/vote/talk/lea-verou-the-humble-border-rad/&quot;&gt;Conference Talk of the Year&lt;/a&gt; (for The humble border-radius)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can vote for me by clicking the above links and have my eternal gratitude :-)&lt;/p&gt;
&lt;p&gt;Furthermore, the CERN line mode browser project, of which &lt;a href=&quot;http://line-mode.cern.ch/interviews/&quot;&gt;I was a part of&lt;/a&gt;, has been &lt;a href=&quot;https://thenetawards.com/vote/collaboration/line-mode-browser-2013/&quot;&gt;nominated in “Best Collaborative Project”&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I’ve given “The humble border-radius” more than once, so you can pick one to watch below (in the net awards page they’ve linked to the FOWD London one):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vimeo.com/70171266&quot;&gt;CSSDay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cssconf.com/talk-verou.html&quot;&gt;CSSConf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.futureinsights.com/home/lea-verou-keynote-the-humble-border-radius.html&quot;&gt;FOWD London&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vimeo.com/67567648&quot;&gt;Front-Trends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=JSaMl2OKjfQ&quot;&gt;Abridged version (only 15 minutes!) from this year’s O’Reilly Fluent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would recommend the CSSDay one, as it changes every time and that one is newer.&lt;/p&gt;
&lt;p&gt;Thanks again to anyone who nominated me and everyone who votes for me. You’re all wonderful. &amp;lt;3&lt;/p&gt;
</content>
  </entry><entry>
    <title>Introducing Whathecolor: A color game for web developers!</title>
    <link href="https://lea.verou.me/2014/02/whathecolor-a-color-game-for-web-developers/"/>
    <updated>2014-02-08T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2342</id>
    <content xml:lang="en" type="html">&lt;p&gt;I’ve been interested in digital color for a long time, and this year I decided to risk giving a technical talk about color some of the conferences I’m speaking at. “Why is that risky?” you might ask. Well, it might end up being really interesting, or it may end up alienating both designers because it’s too technical and developers because it’s about a “designery” topic.&lt;/p&gt;
&lt;p&gt;In preparation for this talk, I decided to make a simple game to see how well I and other web developers understand color, and especially CSS notations of color. Meet &lt;a href=&quot;https://projects.verou.me/whathecolor&quot;&gt;Whathecolor&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The idea is simple: You are presented with a color and you try to type in a CSS color that matches it. It could be anything, from hsl() or rgb() to even named colors (although that would be stupid). It would be interesting to see what averages people get by trying hsl() vs rgb() and whether the former is as easier for web developers as we think. Feel free to post your results here or on twitter! Perhaps in the future, something like this could be used by the CSS WG to test the usability of color notations we’re thinking of adding to CSS instead of speculating about it.&lt;/p&gt;
&lt;p&gt;Disclaimer: This is a quick hack. Please don’t complain that it doesn’t look great on your phone and stuff like that.&lt;/p&gt;
&lt;p&gt;Also, yes, if you want to cheat, it’s super easy, but I have no idea why somebody would cheat on something like this.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.verou.me/whathecolor&quot;&gt;Play&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;color-proximity&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2014/02/whathecolor-a-color-game-for-web-developers/#color-proximity&quot;&gt;Color proximity&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A challenging part in developing this was calculating the proximity of two colors to show the user how close they are getting. My first thought was to use the Euclidean distance of the two colors in the RGB cube and divide it by the maximum distance the color could have from any other RGB color. However, this proved out to be inaccurate in many cases, probably due to the lack of perceptual uniformity in RGB. As an example, try &lt;code&gt;#f0f&lt;/code&gt; and &lt;code&gt;#ff80ff&lt;/code&gt;. Although they are quite similar visually, the reported proximity was around 66% (1 - 128/382).&lt;/p&gt;
&lt;p&gt;So I researched  existing algorithms to get the proximity of two colors. Like most things color-related, it looks like &lt;a href=&quot;http://en.wikipedia.org/wiki/Color_difference&quot;&gt;Color Difference&lt;/a&gt; is not quite as simple as I thought, and is considered a topic of interest in Color Science. However, converting to L*a*b* and using the CIE94 and CIEDE2000 formulas seemed a bit of an overkill for this and I wasn’t terribly impressed with the CIE76 formula after trying the results out &lt;a href=&quot;http://colormine.org/delta-e-calculator/&quot;&gt;online&lt;/a&gt; for some sample pairs (e.g. it gives ~60% for the aforementioned pair, which is even lower than what I got with my naïve RGB method!).&lt;/p&gt;
&lt;p&gt;So I experimented a bit and ended up using an average of my original idea and a sum of the HSL differences (divided by the max differences), which seems to work relatively ok.  There are still cases where it’s off, but ho hum. After all, the proximity is mainly useful when you get close enough to the color (&amp;gt;90%), as until then you tend to play it by eye. Any improvements on the algorithm used are welcome. Or if enough people think it’s not working very well, I’ll bite the bullet and end up using DeltaE.&lt;/p&gt;
&lt;h3 id=&quot;other-notes&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2014/02/whathecolor-a-color-game-for-web-developers/#other-notes&quot;&gt;Other notes&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You do not need a proximity of 100% to win, since rounding errors might prevent you from matching the exact color if you’re using HSL. Also, because matching the exact same color isn’t really important, as long as you get close enough that any difference is imperceptible.&lt;/li&gt;
&lt;li&gt;I wrote a Color “class” for this, which you can find in &lt;a href=&quot;https://projects.verou.me/whathecolor/color.js&quot;&gt;color.js&lt;/a&gt;. Like most of my open source stuff, it’s MIT licensed. Maybe it could be useful in some other color-related project, who knows.&lt;/li&gt;
&lt;li&gt;My original idea was to have “levels”, where the color would get increasingly more difficult to get. For example, in the first level, you’d only have to guess simple colors whose RGB coordinates were either 0, 128 or 255. So, my Color.random() method accepts an entropy parameter, for that level. However, when I tested the game with truly random colors (any integer from 0 to 255), it turned out it wasn’t really that hard (it took me about a minute to guess each color), so I ditched the idea of levels early on. The code is still there though.&lt;/li&gt;
&lt;li&gt;An idea about making it harder in the future would be to introduce semi-transparent (RGBA/HSLA) colors. That would be fun :evil_grin:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2014/02/whathecolor-a-color-game-for-web-developers/images/Screen-Shot-2014-02-08-at-02.36.12-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2014/02/whathecolor-a-color-game-for-web-developers/images/Screen-Shot-2014-02-08-at-02.36.12-.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/a&gt;PS: The times in this screenshot aren’t real, I wanted to take one quickly, so I used the dev tools.&lt;/p&gt;
</content>
  </entry><entry>
    <title>I’m going to MIT!!</title>
    <link href="https://lea.verou.me/2014/02/im-going-to-mit/"/>
    <updated>2014-02-11T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2357</id>
    <content xml:lang="en" type="html">&lt;p&gt;Last year, I did something crazy, that I’ve been wanting to do since I was little: I applied to MIT’s PhD program in Electrical Engineering and Computer Science.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2014/02/im-going-to-mit/images/Screen-Shot-2014-02-11-at-18.25.21-.png&quot; alt=&quot;One of the letters&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It was not only crazy because I have been working for several years already, but also because I only applied to MIT, as I decided I did not want to go to any other university, both for pragmatic and emotional reasons. As any prospective grad student will tell you, applying to only one top university is recipe for failure. I didn’t tell many people, but everyone who knew thought I’d get in — except me. You see, I wasn’t a typical candidate. Sure, I have done lots of things I’m proud of, but I didn’t have an amazing GPA or publications in prestigious academic conferences.&lt;/p&gt;
&lt;p&gt;It felt like a very long shot, so you can imagine my excitement when I received the letters of acceptance, about a week ago. I will remember that moment forever. I was watching Breaking Bad, feeling miserable over a breakup that happened only a few hours earlier. About a minute into the episode (s05e09), I saw an email notification titled “Your application to MIT EECS”. My first thought was that there was some problem with my application. And then I read the first few lines:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear Michailia Verou:&lt;/p&gt;
&lt;p&gt;If you have not already heard from them, you will shortly receive a letter from the EECS department at MIT, informing you that you have been admitted to the graduate program in Computer Science at MIT next fall. Congratulations!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;WHAAAA? Was it a scam? But then, how did they have all my details? Holy mother of the Flying Spaghetti Monster, I got in!!! Soon thereafter, a letter from &lt;a href=&quot;http://www.csail.mit.edu/&quot;&gt;CSAIL&lt;/a&gt; followed (where I said I wanted to work, specifically in the &lt;a href=&quot;http://groups.csail.mit.edu/uid/&quot;&gt;UID&lt;/a&gt;), and then even more letters. I started calling everyone who knew I applied to share the news, though it proved quite hard to form sentences instead of uncontrollably screaming in joy. I was (and am!) so excited about the future, that it completely overshadows any other life problems (at least for the time being).&lt;/p&gt;
&lt;p&gt;Of course, my happiness is mixed with sheer terror. I keep worrying that I will be the dumbest person in the room, or that I don’t remember as much from my undergrad studies as the others will. I’m even terrified of meeting my future advisor(s) in case getting to know me better makes them wonder why I was accepted. But I try to remind myself about &lt;a href=&quot;http://en.wikipedia.org/wiki/Impostor_syndrome&quot;&gt;impostor syndrome&lt;/a&gt;, and from what I’ve read in forums &amp;amp; blogs, it seems that I’m not alone in having such fears.&lt;/p&gt;
&lt;p&gt;I held off blogging about it until I felt I was able to write something coherent, but I can’t wait to share my excitement any longer.&lt;/p&gt;
&lt;p&gt;To the future!&lt;/p&gt;
&lt;p&gt;To real life plot twists!&lt;/p&gt;
&lt;p&gt;To MIT!&lt;/p&gt;
&lt;p&gt;Boy, I’m thrilled. :D&lt;/p&gt;
</content>
  </entry><entry>
    <title>Dynamically generated SVG through SASS + A 3D animated RGB cube!</title>
    <link href="https://lea.verou.me/2014/04/dynamically-generated-svg-through-sass-a-3d-animated-rgb-cube/"/>
    <updated>2014-04-04T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2389</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://projects.verou.me/chroma-zone/rgb-cube.html&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2014/04/dynamically-generated-svg-through-sass-a-3d-animated-rgb-cube/images/cube-screenshot.png&quot; alt=&quot;Screenshot of the cube&quot; /&gt;&lt;/a&gt;Today, I was giving the opening keynote at &lt;a href=&quot;http://codemania.co.nz/&quot;&gt;Codemania&lt;/a&gt; in Auckland, New Zealand. It was a talk about color from a math/dev perspective. It went quite well, despite my complete lack of sleep. I mean that quite literally: I hadn’t slept all night. No, it wasn’t the jetlag or the nervousness that kept me up. It was my late minute decision to replace the &lt;a href=&quot;https://projects.verou.me/chroma-zone/img/rgb-cube.jpg&quot;&gt;static, low-res image of an RGB cube&lt;/a&gt; I was using until then with a &lt;strong&gt;&lt;a href=&quot;https://projects.verou.me/chroma-zone/rgb-cube.html&quot;&gt;3D cube generated with CSS and animated with CSS animations&lt;/a&gt;&lt;/strong&gt;. Next thing I knew, it was light outside and I had to start getting ready. However, I don’t regret literally losing sleep to make a slide that is only shown for 20 seconds at most. Not only it was super fun to develop, but also yielded a few things that I thought were interesting enough to blog about.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The most challenging part wasn’t actually the 3D cube.&lt;/strong&gt; This has been done tons of times before, it was probably the most common demo for CSS 3D transforms a couple of years ago. The only part of this that could be of interest is that mine only used 2 elements for the cube. This is a dabblet of the cube, without any RGB gradients on it:&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/9594360&quot; height=&quot;800&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;strong&gt;The challenging part was creating the gradients for the 6 sides.&lt;/strong&gt; These are not plain gradients, as you can see below:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2014/04/dynamically-generated-svg-through-sass-a-3d-animated-rgb-cube/images/gradients.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2014/04/dynamically-generated-svg-through-sass-a-3d-animated-rgb-cube/images/gradients.png&quot; alt=&quot;RGB cube sides&quot; /&gt;&lt;/a&gt;These are basically two linear gradients from left to right, with the topmost one being masked with a gradient from top to bottom. You can use &lt;a href=&quot;https://dabblet.com/gist/9201622&quot;&gt;CSS Masking to achieve this (for Chrome/Safari)&lt;/a&gt; and SVG Masks for Firefox, but this masks the whole element, which would hide the pseudo-elements needed for the sides. What I needed was masks applied to backgrounds only, not the whole element.&lt;/p&gt;
&lt;p&gt;It seemed obvious that the best idea would be to use SVG background images. For example, here is &lt;a href=&quot;https://dabblet.com/gist/9964928&quot;&gt;the SVG background needed for the top left one&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;200px&amp;quot; height=&amp;quot;200px&amp;quot;&amp;gt;

&amp;lt;linearGradient id=&amp;quot;yellow-white&amp;quot; x1=&amp;quot;0&amp;quot; x2=&amp;quot;0&amp;quot; y1=&amp;quot;0&amp;quot; y2=&amp;quot;1&amp;quot;&amp;gt;
	&amp;lt;stop stop-color=&amp;quot;yellow&amp;quot; /&amp;gt;
	&amp;lt;stop offset=&amp;quot;1&amp;quot; stop-color=&amp;quot;white&amp;quot; /&amp;gt;
&amp;lt;/linearGradient&amp;gt;
&amp;lt;linearGradient id=&amp;quot;magenta-red&amp;quot; x1=&amp;quot;0&amp;quot; x2=&amp;quot;0&amp;quot; y1=&amp;quot;0&amp;quot; y2=&amp;quot;1&amp;quot;&amp;gt;
	&amp;lt;stop stop-color=&amp;quot;red&amp;quot; /&amp;gt;
	&amp;lt;stop offset=&amp;quot;1&amp;quot; stop-color=&amp;quot;magenta&amp;quot; /&amp;gt;
&amp;lt;/linearGradient&amp;gt;
&amp;lt;linearGradient id=&amp;quot;gradient&amp;quot; x1=&amp;quot;0&amp;quot; x2=&amp;quot;1&amp;quot; y1=&amp;quot;0&amp;quot; y2=&amp;quot;0&amp;quot;&amp;gt;
	&amp;lt;stop stop-color=&amp;quot;white&amp;quot; /&amp;gt;
	&amp;lt;stop offset=&amp;quot;1&amp;quot; stop-color=&amp;quot;black&amp;quot; /&amp;gt;
&amp;lt;/linearGradient&amp;gt;
&amp;lt;mask id=&amp;quot;gradient-mask&amp;quot;&amp;gt;
	&amp;lt;rect width=&amp;quot;100%&amp;quot; height=&amp;quot;100%&amp;quot; fill=&amp;quot;url(#gradient)&amp;quot;/&amp;gt;
&amp;lt;/mask&amp;gt;

&amp;lt;rect width=&amp;quot;100%&amp;quot; height=&amp;quot;100%&amp;quot; fill=&amp;quot;url(#yellow-white)&amp;quot;/&amp;gt;
&amp;lt;rect width=&amp;quot;100%&amp;quot; height=&amp;quot;100%&amp;quot; fill=&amp;quot;url(#magenta-red)&amp;quot; mask=&amp;quot;url(#gradient-mask)&amp;quot;/&amp;gt;

&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, I didn’t want to have 6 separate SVG files, especially with this kind of repetition (cross-linking to reuse gradients and masks across different files is still fairly buggy in certain browsers). I wanted to be able to edit this straight from my CSS. And then it hit me: I was using SASS already. I could code SASS functions that generate SVG data URIs!&lt;/p&gt;
&lt;p&gt;Here’s the set of SVG generating SASS functions I ended up writing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@function inline-svg($content, $width: $side, $height: $side) {
	@return url(&#39;data:image/svg+xml,#{$content}&#39;);
}

@function svg-rect($fill, $width: &#39;100%&#39;, $height: $width, $x: &#39;0&#39;, $y: &#39;0&#39;) {
	@return unquote(&#39;&#39;);
}

@function svg-gradient($id, $color1, $color2, $x1: 0, $x2: 0, $y1: 0, $y2: 1) {
	@return unquote(&#39;

	&#39;);
}

@function svg-mask($id, $content) {
	@return unquote(&#39;#{$content}&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then I was able to generate each RGB plane with another function that made use of them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@function rgb-plane($c1, $c2, $c3, $c4) {
	@return inline-svg(
		svg-gradient(&#39;top&#39;, $c1, $c2) +
		svg-gradient(&#39;bottom&#39;, $c3, $c4) +
		svg-gradient(&#39;gradient&#39;, white, black, 0, 1, 0, 0) +
		svg-mask(&#39;gradient-mask&#39;, svg-rect(&#39;url(%23gradient)&#39;)) +
		svg-rect(&#39;url(%23bottom)&#39;) +
		svg-rect(&#39;url(%23top)&amp;quot; mask=&amp;quot;url(%23gradient-mask)&#39;)
	);
}

/* ... */

.cube {
	background: rgb-plane(blue, black, aqua, lime);

	&amp;amp;::before {
		background: rgb-plane(blue, fuchsia, aqua, white);
	}

	&amp;amp;::after {
		background: rgb-plane(fuchsia, red, blue, black);
	}
}

.cube .sides {
	background: rgb-plane(yellow, lime, red, black);

	&amp;amp;::before {
		background: rgb-plane(yellow, white, red, fuchsia);
	}

	&amp;amp;::after {
		background: rgb-plane(white, aqua, yellow, lime);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the same functions can be used for all sorts of SVG backgrounds and it’s very easy to add a new one. E.g. to make polygons:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@function svg-polygon($fill, $points) {
	@return unquote(&#39;&#39;);
}

@function svg-circle($fill, $r: &#39;50%&#39;, $cx: &#39;50%&#39;, $cy: &#39;50%&#39;) {
	@return unquote(&#39;&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see &lt;a href=&quot;https://projects.verou.me/chroma-zone/rgb-cube.scss&quot;&gt;the whole SCSS file here&lt;/a&gt; and &lt;a href=&quot;https://projects.verou.me/chroma-zone/rgb-cube.css&quot;&gt;its CSS output here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Keep in mind that IE9 and some older versions of other browsers have issues with unencoded SVG data URIs. Also, you still need to escape hashes (&lt;code&gt;%23&lt;/code&gt; instead of &lt;code&gt;#&lt;/code&gt;), otherwise Firefox fails.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Image comparison slider with pure CSS</title>
    <link href="https://lea.verou.me/2014/07/image-comparison-slider-with-pure-css/"/>
    <updated>2014-07-25T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2423</id>
    <content xml:lang="en" type="html">&lt;p&gt;As a few of you know, I have been spending a good part of this year writing a book for O’Reilly called “CSS Secrets” (&lt;a href=&quot;http://shop.oreilly.com/product/0636920031123.do&quot;&gt;preorder here!&lt;/a&gt;). I wanted to include a “secret” about the various uses of the &lt;code&gt;resize&lt;/code&gt; property, as it’s one of my favorite underdogs, since it rarely gets any love. However, just mentioning the typical use case of improving the UX of text fields didn’t feel like enough of a secret at all. The whole purpose of the book is to get authors to think outside the box about what’s possible with CSS, not to recite widely known applications of CSS features. So I started brainstorming: What else could we do with it?&lt;/p&gt;
&lt;p&gt;Then I remembered &lt;a href=&quot;http://demosthenes.info/blog/819/A-Before-And-After-Image-Comparison-Slide-Control-in-HTML5&quot;&gt;Dudley’s awesome Before/After image slider from a while ago&lt;/a&gt;. While I loved the result, the markup isn’t great and it requires scripting. Also, both images are CSS backgrounds, so for a screen reader, there are no images there. And then it dawned on me: What if I overlaid a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; on an image and made it horizontally resizable through the &lt;code&gt;resize&lt;/code&gt; property? I tried it, and as you can see below, it worked!&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/25fa1985bb9f1633c86e&quot; width=&quot;100%&quot; height=&quot;900&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;The good parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More semantic markup (2 images &amp;amp; 2 divs). If &lt;code&gt;object-fit&lt;/code&gt; was widely &lt;a href=&quot;http://caniuse.com/#feat=object-fit&quot;&gt;supported&lt;/a&gt;, it could even be just one div and two images.&lt;/li&gt;
&lt;li&gt;No JS&lt;/li&gt;
&lt;li&gt;Less CSS code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, few things come with no drawbacks. In this case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One big drawback is keyboard accessibility. Dudley’s demo uses a range input, so it’s keyboard accessible by design.&lt;/li&gt;
&lt;li&gt;You can only drag from the bottom right corners. In Dudley’s demo, you can click at any point in the slider. And yes, I did try to style ::webkit-resizer and increase its size so that at least it has smoother UX in Webkit. However, no matter what I tried, nothing seemed to work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, none of the two seems to work on mobile.&lt;/p&gt;
&lt;p&gt;It might not be perfect, but I thought it’s a pretty cool demo of what’s possible with the &lt;code&gt;resize&lt;/code&gt; property, as everybody seems to only use it in textareas and the like, but its potential is much bigger.&lt;/p&gt;
&lt;p&gt;And now if you’ll excuse me, I have a chapter to write ;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; It looks like &lt;a href=&quot;http://codepen.io/Kseso/pen/dyeBL/&quot;&gt;somebody figured out a similar solution&lt;/a&gt; a few months ago, which does manage to make the resizer full height, albeit with less semantic HTML and more flimsy CSS. The main idea is that you use a separate element for the resizing (in this case a textarea) with a height of 15px = the height of the resizer. Then, they apply a scaleY() transform to stretch that 15px to the height of the image. Pretty cool! Unfortunately, it requires hardcoding the image size in the CSS.&lt;/p&gt;
</content>
  </entry><entry>
    <title>An easy notation for grayscale colors</title>
    <link href="https://lea.verou.me/2014/07/an-easy-notation-for-grayscale-colors/"/>
    <updated>2014-07-27T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2436</id>
    <content xml:lang="en" type="html">&lt;p&gt;These days, there is &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-style/2014Jul/0432.html&quot;&gt;a lengthy discussion in the CSS WG about how to name a function that produces shades of gray&lt;/a&gt; (from white to black) with varying degrees of transparency, and we need your feedback about which name is easier to use.&lt;/p&gt;
&lt;p&gt;The current proposals are:&lt;/p&gt;
&lt;h3 id=&quot;1.-gray(lightness-%5B%2C-alpha%5D)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2014/07/an-easy-notation-for-grayscale-colors/#1.-gray(lightness-%5B%2C-alpha%5D)&quot;&gt;1. gray(lightness [, alpha])&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this proposal gray(0%) is black, gray(50%) is gray and gray(100%) is white. It also accepts numbers from 0-255 which correspond to rgb(x,x,x) values, so that gray(255) is white and gray(0) is black. It also accepts an &lt;strong&gt;optional second argument for alpha transparency&lt;/strong&gt;, so that gray(0, .5) would be equivalent to rgba(0,0,0,.5).&lt;/p&gt;
&lt;p&gt;This is the naming of the function in the current &lt;a href=&quot;http://dev.w3.org/csswg/css-color/#grays&quot;&gt;CSS Color Level 4 draft&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;2.-white(lightness-%5B%2C-alpha%5D)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2014/07/an-easy-notation-for-grayscale-colors/#2.-white(lightness-%5B%2C-alpha%5D)&quot;&gt;2. white(lightness [, alpha])&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Its arguments work in the same way as gray(), but it’s consistent with the expectation that function names that accept percentages give the “full effect” at 100%. gray(100%) sounds like a shade of gray, when it’s actually white. white(100%) is white, which might be more consistent with author expectations. Of course, this also accepts alpha transparency, like all the proposals listed here.&lt;/p&gt;
&lt;h3 id=&quot;3.-black(lightness-%5B%2C-alpha%5D)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2014/07/an-easy-notation-for-grayscale-colors/#3.-black(lightness-%5B%2C-alpha%5D)&quot;&gt;3. black(lightness [, alpha])&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;black() would work in the opposite way: black(0%) would be white, black(100%) would be black and black(50%,.5) would be semi-transparent gray. The idea is that people are familiar thinking that way from grayscale printing.&lt;/p&gt;
&lt;h3 id=&quot;4.-rgb()-with-one-argument-and-rgba()-with-two-arguments&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2014/07/an-easy-notation-for-grayscale-colors/#4.-rgb()-with-one-argument-and-rgba()-with-two-arguments&quot;&gt;4. rgb() with one argument and rgba() with two arguments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;rgb(x) would be a shorthand to rgb(x, x, x) and rgba(x, y) would be a shorthand to rgba(x, x, x, y). So, rgb(0) would be black and rgb(100%) or rgb(255) would be white. The benefit is that authors are already accustomed to using rgb() for colors, and this would just be a shortcut. However, note how you will need to change the function name to get a semi-transparent version of the color. Also, if in the future one needs to change the color to not be a shade of gray, a function name change is not needed.&lt;/p&gt;
&lt;p&gt;I’ve written &lt;a href=&quot;http://sassmeister.com/gist/20ac0049428ccfcbe8f1&quot;&gt;some SCSS to emulate these functions&lt;/a&gt; so you can play with them in your stylesheets and figure out which one is more intuitive. Unfortunately rgb(x)/rgba(x,a) cannot be polyfilled in that way, as that would overwrite the native rgb()/rgba() functions. Which might be an argument against them, as being able to polyfill through a preprocessor is quite a benefit for a new color format IMO.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://docs.google.com/forms/d/1pp3RY-A4MAs7b-gmqFx6bKn52_G_WLoPFkV0vueiWP4/viewform?usp=send_form&quot;&gt;vote here&lt;/a&gt;, but that’s mainly for easy vote counting. It’s strongly encouraged that you also leave a comment justifying your opinion, either here or in the list.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/forms/d/1pp3RY-A4MAs7b-gmqFx6bKn52_G_WLoPFkV0vueiWP4/viewform?usp=send_form&quot;&gt;Vote now!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also &lt;strong&gt;tl;dr&lt;/strong&gt; If you can’t be bothered to read the post and understand the proposals well, please, refrain from voting.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Awesomplete: 2KB autocomplete with zero dependencies</title>
    <link href="https://lea.verou.me/2015/02/awesomplete-2kb-autocomplete-with-zero-dependencies/"/>
    <updated>2015-02-19T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2474</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://projects.verou.me/awesomplete&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2015/02/awesomplete-2kb-autocomplete-with-zero-dependencies/images/awesomplete-300x248.png&quot; alt=&quot;awesomplete&quot; /&gt;&lt;/a&gt;Sorry for the lack of posts for the past 7 (!) months, I’ve been super busy working on &lt;a href=&quot;http://shop.oreilly.com/product/0636920031123.do&quot;&gt;my book&lt;/a&gt;, which up to a certain point, I couldn’t even imagine finishing, but I’m finally there! I’ve basically tried to cram all the CSS wisdom I’ve accumulated over the years in it :P (which is partly why it took so long, I kept remembering more things that just *had* to be in it. Its page count on the O’Reilly website had to be updated 3 times, from 250 to 300 to 350 and it looks like the final is gonna be closer to 400 pages) and it’s gonna be super awesome (&lt;a href=&quot;http://shop.oreilly.com/product/0636920031123.do&quot;&gt;preorder here!&lt;/a&gt;) :D . I have been posting a few CSS tricks now and then on &lt;a href=&quot;http://twitter.com/leaverou&quot;&gt;my twitter account&lt;/a&gt;, but haven’t found any time to write a proper blog post.&lt;/p&gt;
&lt;p&gt;Anyhow, despite being super busy with MIT (which btw is amazing, challenging in a good way, and full of fantastic people. So glad to be here!) and the book, I recently needed an autocomplete widget for something. Surprisingly, I don’t think I ever had needed to choose one in the past. I’ve worked with apps that had it, but in those cases it was already there.&lt;/p&gt;
&lt;p&gt;At first, I didn’t fret. Finally, a chance to use the &lt;a href=&quot;http://blog.teamtreehouse.com/creating-autocomplete-dropdowns-datalist-element&quot;&gt;HTML5 &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;&lt;/a&gt;, so exciting! However, the more I played with it, the more my excitement was dying a slow death, taking my open web standards dreams and hopes along with it. Not only it’s incredibly inconsistent across browsers (e.g. Chrome matches only from the start, Firefox anywhere!), it’s also not hackable or customizable in any way. Not even if I got my hands dirty and used proprietary CSS, I still couldn’t do anything as simple as changing how the matching happens, styling the dropdown or highlighting the matching text!&lt;/p&gt;
&lt;p&gt;So, with a heavy heart, I decided to use a script. However, when I looked into it, everything seemed super bloated for my needs and anything with half decent usability required jQuery, which results in even more bloat.&lt;/p&gt;
&lt;p&gt;So, I did what every crazy person with a severe case of &lt;a href=&quot;http://en.wikipedia.org/wiki/Not_invented_here&quot;&gt;NIH Syndrome&lt;/a&gt; would: &lt;strong&gt;I wrote one&lt;/strong&gt;. It was super fun, and I don’t regret it, although now I’m even more pressed for time to meet my real deadlines. I wrote it primarily for myself, so even if nobody else uses it, ho hum, it was more fun than alternative ways to take a break. However, it’s my duty to put it on Github, in case someone else wants it and in case the community wants to take it into its loving, caring hands and pull request the hell out of it.&lt;/p&gt;
&lt;p&gt;To be honest, I think it’s both pretty and pretty useful and even though it won’t suit complex needs out of the box, it’s pretty hackable/extensible. I even wrote quite a bit of &lt;a href=&quot;https://projects.verou.me/awesomplete/&quot;&gt;documentation&lt;/a&gt; at some point this week when I was too sleepy to work and not sufficiently sleepy to sleep — because apparently that’s what was missing from my life: even more technical writing.&lt;/p&gt;
&lt;p&gt;I saved the best for last: It’s so lightweight you might end up chasing it around if there’s a lot of wind when you download it. It’s currently &lt;strong&gt;a little under 1.5KB&lt;/strong&gt; minified &amp;amp; gzipped (the website says 2KB because it will probably grow with commits and I don’t want to have to remember to update it all the time), with &lt;strong&gt;zero dependencies&lt;/strong&gt;! :D&lt;/p&gt;
&lt;p&gt;And it’s even been verified to work in &lt;strong&gt;IE9 (sorta), IE10+, Chrome, Firefox, Safari 5+, Mobile Safari&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.verou.me/awesomplete&quot;&gt;’Nuff said. Get it now!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS: If you’re about to leave a comment on how it’s not called “&lt;em&gt;autocomplete&lt;/em&gt;”, but “&lt;em&gt;typeahead&lt;/em&gt;”, please go &lt;a href=&quot;http://tirania.org/blog/archive/2011/Feb-17.html&quot;&gt;choke on a bucket of cocks&lt;/a&gt; instead. :P&lt;/p&gt;
</content>
  </entry><entry>
    <title>jQuery considered harmful</title>
    <link href="https://lea.verou.me/2015/04/jquery-considered-harmful/"/>
    <updated>2015-04-19T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2511</id>
    <content xml:lang="en" type="html">&lt;p&gt;Heh, I always wanted to do one of those “X considered harmful” posts*. :D&lt;/p&gt;
&lt;p&gt;Before I start, let me say that I think &lt;strong&gt;jQuery has helped tremendously to move the Web forward&lt;/strong&gt;. It gave developers power to do things that were previously unthinkable, and pushed the browser manufacturers to implement these things natively (without jQuery we probably wouldn’t have &lt;code&gt;document.querySelectorAll&lt;/code&gt; now). And jQuery is still needed for those that cannot depend on the goodies we have today and have to support relics of the past like IE8 or worse.&lt;/p&gt;
&lt;p&gt;However, as much as I feel for these poor souls, they are the minority. There are tons of developers that don’t need to support old browsers with a tiny market share. And let’s not forget those who aren’t even Web professionals: Students and researchers not only don’t need to support old browsers, but can often get by just supporting a single browser! You would expect that everyone in academia would be having tons of fun using all the modern goodies of the Open Web Platform, right? And yet, I haven’t seen jQuery being so prominent anywhere else as much as it is in academia. Why? Because this is what they know, and they really don’t have the time or interest to follow the news on the Open Web Platform. They don’t know what they need jQuery for, so they just use jQuery anyway. However, being able to do these things natively now is not the only reason I’d rather avoid jQuery.&lt;/p&gt;
&lt;h3 id=&quot;yes%2C-you-probably-don%E2%80%99t-really-need-it%E2%80%A6&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2015/04/jquery-considered-harmful/#yes%2C-you-probably-don%E2%80%99t-really-need-it%E2%80%A6&quot;&gt;Yes, you probably don’t really need it…&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m certainly not the first one to point out how much of jQuery usage is about things you can do natively, so I won’t spend time repeating what others have written. Just visit the following and dive in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://youmightnotneedjquery.com/&quot;&gt;You might not need jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.garstasio.com/you-dont-need-jquery/&quot;&gt;You don’t need jQuery!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/do-you-really-need-jquery/&quot;&gt;Do you really need jQuery?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tutorialzine.com/2014/06/10-tips-for-writing-javascript-without-jquery/&quot;&gt;10 tips for writing JavaScript without jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…and lots more. Just try &lt;a href=&quot;https://www.google.com/search?q=you+don%27t+need+jquery&quot;&gt;googling “you don’t need jQuery”&lt;/a&gt; and you will find plenty.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will also not spend time talking about &lt;strong&gt;file size&lt;/strong&gt; or how much &lt;strong&gt;faster&lt;/strong&gt; native methods are. These have been talked about before. Today, I want to make a point that is not frequently talked about…&lt;/p&gt;
&lt;h3 id=&quot;%E2%80%A6but-that%E2%80%99s-not-even-the-biggest-reason-not-to-use-it-today&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2015/04/jquery-considered-harmful/#%E2%80%A6but-that%E2%80%99s-not-even-the-biggest-reason-not-to-use-it-today&quot;&gt;…but that’s not even the biggest reason not to use it today&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To avoid extending the native element prototypes, jQuery uses &lt;strong&gt;its own wrapper objects&lt;/strong&gt;. Extending native objects in the past was a huge no-no, not only due to potential collisions, but also due to memory leaks in old IE. So, what is returned when you run &lt;code&gt;$(&amp;quot;div&amp;quot;)&lt;/code&gt; is not a reference to an element, or a NodeList, it’s a jQuery object. This means that a jQuery object has completely different methods available to it than a reference to a DOM element, an array with elements or any type of NodeList. However, these native objects come up all the time in real code — as much as jQuery tries to abstract them away, you always have to deal with them, even if it’s just wrapping them in $(). For example, the context when a callback is called via jQuery’s .bind() method is a reference to an HTML element, not a jQuery collection. Not to mention that often you use code from multiple sources — some of them assume jQuery, some don’t. Therefore, you always end up with &lt;strong&gt;code that mixes jQuery objects, native elements and NodeLists&lt;/strong&gt;. And this is where the hell begins.&lt;/p&gt;
&lt;p&gt;If the developer has followed a naming convention for which variables contain jQuery objects (prepending the variable names with a dollar sign is the common one I believe) and which contain native elements, this is less of a problem (humans often end up forgetting to follow such conventions, but let’s assume a perfect world here). However, in most cases no such convention is followed, which results in the code being incredibly hard to understand by anyone unfamiliar with it. Every edit entails a lot of trial and error now (“Oh, it’s not a jQuery object, I have to wrap it with &lt;code&gt;$()&lt;/code&gt;!” or “Oh, it’s not an element, I have to use [0] to get an element!”). To avoid such confusion, developers making edits often end up wrapping anything in &lt;code&gt;$()&lt;/code&gt; defensively, so throughout the code, the same variable will have gone through &lt;code&gt;$()&lt;/code&gt; multiple times. For the same reason, it also becomes especially hard to refactor jQuery out of said code. You are essentially &lt;strong&gt;locked in&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Even if naming conventions have been followed, you can’t just deal only with jQuery objects. You often need to use a native DOM method or call a function from a script that doesn’t depend on jQuery. Soon, conversions to and from jQuery objects are all over the place, cluttering your code.&lt;/p&gt;
&lt;p&gt;In addition, when you add code to said codebase, you usually end up wrapping every element or nodelist reference with &lt;code&gt;$()&lt;/code&gt; as well, because you don’t know what input you’re getting. So, not only you’re locked in, but &lt;strong&gt;all future code you write for the same codebase is also locked in&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Get any random script with a jQuery dependency that you didn’t write yourself and try to refactor it so that it doesn’t need jQuery. I dare you. You will see that your main issue will not be how to convert the functionality to use native APIs, but understanding what the hell is going on.&lt;/p&gt;
&lt;h3 id=&quot;a-pragmatic-path-to-js-nudity&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2015/04/jquery-considered-harmful/#a-pragmatic-path-to-js-nudity&quot;&gt;A pragmatic path to JS nudity&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sure, many libraries today require jQuery, and like I recently &lt;a href=&quot;https://twitter.com/leaverou/status/588504217410609152&quot;&gt;tweeted&lt;/a&gt;, avoiding it entirely can feel like you’re some sort of digital vegan. However, this doesn’t mean you have to use it yourself. Libraries can always be replaced in the future, when good non-jQuery alternatives become available.&lt;/p&gt;
&lt;p&gt;Also, most libraries are written in such a way that they do not require the $ variable to be aliased to jQuery. Just call &lt;a href=&quot;https://api.jquery.com/jquery.noconflict/&quot;&gt;jQuery.noConflict()&lt;/a&gt; to reclaim the $ variable and be able to assign it to whatever you see fit. For example, I often define these helper functions, inspired from the &lt;a href=&quot;https://developer.chrome.com/devtools/docs/commandline-api#selector&quot;&gt;Command Line API&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Returns first element that matches CSS selector {expr}.
// Querying can optionally be restricted to {container}’s descendants
function $(expr, container) {
	return typeof expr === &amp;quot;string&amp;quot;? (container || document).querySelector(expr) : expr || null;
}

// Returns all elements that match CSS selector {expr} as an array.
// Querying can optionally be restricted to {container}’s descendants
function $$(expr, container) {
	return [].slice.call((container || document).querySelectorAll(expr));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition, I think that having to type &lt;code&gt;jQuery&lt;/code&gt; instead of &lt;code&gt;$&lt;/code&gt; every time you use it somehow makes you think twice about superfluously using it without really needing to, but I could be wrong :)&lt;/p&gt;
&lt;p&gt;Also, if you actually &lt;strong&gt;like&lt;/strong&gt; the jQuery API, but want to avoid the bloat, consider using &lt;a href=&quot;http://zeptojs.com/&quot;&gt;Zepto&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;* I thought it was brutally obvious that the title was tongue-in-cheek, but hey, it’s the Internet, and nothing is obvious. So there: The title is tongue-in-cheek and I’m very well aware of &lt;a href=&quot;http://meyerweb.com/eric/comment/chech.html&quot;&gt;Eric’s classic essay against such titles&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Idea: Extending native DOM prototypes without collisions</title>
    <link href="https://lea.verou.me/2015/04/idea-extending-native-dom-prototypes-without-collisions/"/>
    <updated>2015-04-20T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2517</id>
    <content xml:lang="en" type="html">&lt;p&gt;As I pointed out in &lt;a href=&quot;http://lea.verou.me/2015/04/jquery-considered-harmful/&quot;&gt;yesterday’s blog post&lt;/a&gt;, one of the reasons why I don’t like using jQuery is its wrapper objects. For jQuery, this was a wise decision: Back in 2006 when it was first developed, IE releases had a pretty icky &lt;strong&gt;memory leak bug&lt;/strong&gt; that could be easily triggered when one added properties to elements. Oh, and we also didn’t have access to element prototypes on IE back then, so we had to add these properties manually on every element. &lt;a href=&quot;http://prototypejs.org/&quot;&gt;Prototype.js&lt;/a&gt; attempted to go that route and the result was such a mess that they decided to change their decision in Prototype 2.0 and go with wrapper objects too. There were even &lt;a href=&quot;http://perfectionkills.com/whats-wrong-with-extending-the-dom/&quot;&gt;long essays being written back then about how much of a monumentally bad idea it was to extend DOM elements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first IE release that exposed element prototypes was IE8: We got access to Node.prototype, Element.prototype and a few more. Some were mutable, some were not. On IE9, we got the full bunch, including HTMLElement.prototype and its descendants, such as HTMLParagraphElement. The memory leak bugs were mitigated in IE8 and fixed in IE9. However, we still don’t extend native DOM elements, and for good reason: collisions are still a very real risk. No library wants to add a bunch of methods on elements, it’s just bad form. It’s like being invited in someone’s house and defecating all over the floor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But what if we could add methods to elements without the chance of collisions?&lt;/strong&gt; (well, technically, by minimizing said chance). We could only add &lt;strong&gt;one property&lt;/strong&gt; to Element.prototype, and then hang all our methods on that. E.g. if our library was called yolo and had two methods, foo() and bar(), calls to it would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var element = document.querySelector(&amp;quot;.someclass&amp;quot;);
element.yolo.foo();
element.yolo.bar();
// or you can even chain, if you return the element in each of them!
element.yolo.foo().yolo.bar();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sure, it’s more awkward than wrapper objects, but the benefit of using native DOM elements is worth it if you ask me. Of course, YMMV.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It’s basically exactly the same thing we do with globals&lt;/strong&gt;: We all know that adding tons of global variables is bad practice, so every library adds one global and hangs everything off of that.&lt;/p&gt;
&lt;p&gt;However, if we try to implement something like this in the naïve way, we will find that it’s kind of hard to reference the element used from our namespaced functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Element.prototype.yolo = {
	foo: function () {
		console.log(this);
	},

	bar: function () { /* ... */ }
};

someElement.yolo.foo(); // Object {foo: function, bar: function}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happened here? &lt;code&gt;this&lt;/code&gt; inside any of these functions refers to the object that they are called on, not the element that object is hanging on! We need to be a bit more clever to get around this issue.&lt;/p&gt;
&lt;p&gt;Keep in mind that &lt;code&gt;this&lt;/code&gt; in the object inside &lt;code&gt;yolo&lt;/code&gt; &lt;em&gt;would&lt;/em&gt; have access to the element we’re trying to hang these methods off of. But we’re not running any code there, so we’re not taking advantage of that. If only we could get a reference to that object’s context! However, running a function (e.g. &lt;code&gt;element.yolo().foo()&lt;/code&gt;) would spoil our nice API.&lt;/p&gt;
&lt;p&gt;Wait a second. We can run code on properties, via ES5 accessors! We could do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object.defineProperty(Element.prototype, &amp;quot;yolo&amp;quot;, {
	get: function () {
		return {
			element: this,
			foo: function() {
				console.log(this.element);
			},

			bar: function() { /* ... */ }
		}
	},
	configurable: true,
	writeable: false
});

someElement.yolo.foo(); // It works! (Logs our actual element)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works, but there is a rather annoying issue here: We are &lt;strong&gt;generating this object and redefining our functions every single time this property is called.&lt;/strong&gt; This is a rather bad idea for performance. Ideally, we want to &lt;strong&gt;generate this object once&lt;/strong&gt;, and then return the generated object. We also don’t want every element to have its own completely separate instance of the functions we defined, we want to define these functions on a prototype, and use the wonderful JS inheritance for them, so that our library is also dynamically &lt;strong&gt;extensible&lt;/strong&gt;. Luckily, there is a way to do all this too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var Yolo = function(element) {
	this.element = element;
};

Yolo.prototype = {
	foo: function() {
		console.log(this.element);
	},

	bar: function() { /* ... */ }
};

Object.defineProperty(Element.prototype, &amp;quot;yolo&amp;quot;, {
	get: function () {
		Object.defineProperty(this, &amp;quot;yolo&amp;quot;, {
			value: new Yolo(this)
		});

		return this.yolo;
	},
	configurable: true,
	writeable: false
});

someElement.yolo.foo(); // It works! (Logs our actual element)

// And it’s dynamically extensible too!
Yolo.prototype.baz = function(color) {
	this.element.style.background = color;
};

someElement.yolo.baz(&amp;quot;red&amp;quot;) // Our element gets a red background
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that in the above, &lt;strong&gt;the getter is only executed once&lt;/strong&gt;. After that, it overwrites the &lt;code&gt;yolo&lt;/code&gt; property with a static value: An instance of the &lt;code&gt;Yolo&lt;/code&gt; object. Since we’re using &lt;code&gt;Object.defineProperty()&lt;/code&gt; we also don’t run into the issue of breaking enumeration (&lt;code&gt;for..in&lt;/code&gt; loops), since these properties have &lt;code&gt;enumerable: false&lt;/code&gt; by default.&lt;/p&gt;
&lt;p&gt;There is still the wart that these methods need to use &lt;code&gt;this.element&lt;/code&gt; instead of &lt;code&gt;this&lt;/code&gt;. We could fix this by wrapping them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (let method in Yolo.prototype) {
	Yolo.prototype[method] = function(){
		var callback = Yolo.prototype[method];

		Yolo.prototype[method] = function () {
			var ret = callback.apply(this.element, arguments);

			// Return the element, for chainability!
			return ret === undefined? this.element : ret;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, now you can’t dynamically add methods to &lt;code&gt;Yolo.prototype&lt;/code&gt; and have them automatically work like the native Yolo methods in &lt;code&gt;element.yolo&lt;/code&gt;, so it kinda hurts extensibility (of course you could still add methods that use &lt;code&gt;this.element&lt;/code&gt; and they would work).&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;
</content>
  </entry><entry>
    <title>Conical gradients, today!</title>
    <link href="https://lea.verou.me/2015/06/conical-gradients-today/"/>
    <updated>2015-06-18T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2534</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2015/06/conical-gradients-today/images/hues.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2015/06/conical-gradients-today/images/hues.png&quot; alt=&quot;Screen Shot 2015-06-18 at 16.26.40&quot; /&gt;&lt;/a&gt;It’s no secret that I like conical gradients. In as early as 2011, I wrote &lt;a href=&quot;http://lea.verou.me/specs/conical-gradient/&quot;&gt;a draft for conical-gradient() in CSS&lt;/a&gt;, that &lt;a href=&quot;http://www.xanthir.com/blog/&quot;&gt;Tab&lt;/a&gt; later said helped him when he &lt;a href=&quot;http://www.w3.org/TR/css4-images/#conic-gradients&quot;&gt;added them in CSS Image Values Level 4&lt;/a&gt; in 2012. However, almost &lt;strong&gt;three years later, no progress has been made&lt;/strong&gt; in implementing them. Sure, the spec is still relatively incomplete, but that’s not the reason conical gradients have gotten no traction. &lt;strong&gt;Far more underspecified features have gotten experimental implementations in the past.&lt;/strong&gt; The reason conical gradients are still unimplemented, is because very few developers know they exist, so browsers see no demand.&lt;/p&gt;
&lt;p&gt;Another reason was that &lt;a href=&quot;http://cairographics.org/&quot;&gt;Cairo&lt;/a&gt;, the graphics library used in Chrome and Firefox had no way of drawing a conical gradient. However, this changed a while ago, when &lt;a href=&quot;http://libregraphicsworld.org/blog/entry/mesh-gradients-in-cairo-now-official&quot;&gt;they supported mesh gradients&lt;/a&gt;, of which conical gradients are a mere special case.&lt;/p&gt;
&lt;p&gt;Recently, I was giving a talk on creating pie charts with CSS on a few conferences, and yet again, I was reminded of how useful conical gradients can be. While every CSS or SVG solution is several lines of code with varying levels of hackiness, conical gradients can give us a pie chart with a straightforward, DRY, one liner. For example, this is how to create a pie chart that shows 40% in gold and 60% in #f06:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;padding: 5em; /* size */
background: conic-gradient(gold 40%, #f06 0);
border-radius: 50%; /* make it round */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2015/06/conical-gradients-today/images/Screen-Shot-2015-06-18-at-16.23.57-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2015/06/conical-gradients-today/images/Screen-Shot-2015-06-18-at-16.23.57-.png&quot; alt=&quot;Screen Shot 2015-06-18 at 16.23.57&quot; /&gt;&lt;/a&gt; So, I decided to take matters in my own hands. I wrote &lt;a href=&quot;https://projects.verou.me/conic-gradient/&quot;&gt;a polyfill&lt;/a&gt;, which I also used in my talk to demonstrate how awesome conical gradients can be and what cool things they can do. Today, during my &lt;a href=&quot;http://cssconf.com/&quot;&gt;CSSConf&lt;/a&gt; talk, I released it publicly.&lt;/p&gt;
&lt;p&gt;In addition, I mention to developers how important speaking up is for getting their favorite features implemented. &lt;strong&gt;Browsers prioritize which features to implement based on what developers ask for.&lt;/strong&gt; It’s a pity that so few of us realize how much of a say we collectively have in this. This is more obvious with Microsoft and &lt;a href=&quot;https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer&quot;&gt;their Uservoice forum&lt;/a&gt; where developers can vote on which features they want to see worked on, but pretty much every major browser works in a similar way. They monitor what developers request and what other browsers implement, and decide accordingly. The squeaky wheel will get the feature, so if you really want to see something implemented, &lt;strong&gt;speak up&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Since “speaking up” can be a bit vague (&lt;em&gt;“speak up where?”&lt;/em&gt; I can hear you asking), I also filed bug reports with all major browsers, that you can also find &lt;a href=&quot;https://projects.verou.me/conic-gradient/#ask&quot;&gt;in the polyfill page&lt;/a&gt;, so that you can comment or vote on them. That doesn’t mean that speaking up on blogs or social media is not useful though: That’s why browsers have devrel teams. The more noise we collectively make about the features we want, the more likely it is to be heard. However, the odds are higher if we all channel our voices to the venues browser developers follow and our voice is stronger and louder if we concentrate it in the same places instead of having many separate voices all over the place.&lt;/p&gt;
&lt;p&gt;Also, I’m using the term “noise” here a bit figuratively. While it’s valuable to make it clear that we are interested in a certain feature, it’s even more useful to say &lt;strong&gt;why&lt;/strong&gt;. Providing use cases will not only grab browsers’ attention more, but it will also convince other developers as well.&lt;/p&gt;
&lt;p&gt;So go ahead, play with conic gradients, and if you agree with me that they are fucking awesome and we need them natively on the Web, &lt;strong&gt;make noise&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.verou.me/conic-gradient/&quot;&gt;conic-gradient() polyfill&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Spot the unsubscribe (link)!</title>
    <link href="https://lea.verou.me/2015/07/spot-the-unsubscribe-link/"/>
    <updated>2015-07-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2541</id>
    <content xml:lang="en" type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2015/07/spot-the-unsubscribe-link/images/Screen-Shot-2015-07-28-at-19.39.34-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2015/07/spot-the-unsubscribe-link/images/Screen-Shot-2015-07-28-at-19.39.34--300x136.png&quot; alt=&quot;Screen Shot 2015-07-28 at 19.39.34&quot; /&gt;&lt;/a&gt;After getting fed up with too many “promotional” emails and newsletters with incredibly obscure unsubscribe links, I decided to make this tumblr to point out such examples of digital douchebaggery. This annoying dark pattern is so widespread that &lt;a href=&quot;http://www.businessinsider.com/google-obvious-unsubscribe-link-email-2014-2&quot;&gt;Google even added a feature to Gmail for making those unsubscribe links obvious&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Unsubscribe links are crucial to promotional emails. They are not just another menu item. They are not something that should be hidden in a blurb of tiny low contrast text. Unsubscribe links should be immediately obvious to anyone looking for them. You want people to be reading your email because they’re interested, not because they can‘t find the way out. Otherwise you are the digital equivalent of those annoying door-to-door salesmen who just won’t go away.&lt;/p&gt;
&lt;p&gt;— From my introductory post on &lt;a href=&quot;http://spottheunsubscribe.tumblr.com/post/124094024596/o-hai&quot;&gt;Spot the unsubscribe!&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On the spur of the moment, after yet another email newsletter with a hard to find Unsubscribe link, I decided to quickly put together a &lt;a href=&quot;http://spottheunsubscribe.tumblr.com/&quot;&gt;tumblog&lt;/a&gt; about this UX pet peeve of mine, called &lt;a href=&quot;http://spottheunsubscribe.tumblr.com/&quot;&gt;Spot the Unsubscribe!&lt;/a&gt;. In less than an hour, it was ready and had a few posts as well :)&lt;/p&gt;
&lt;p&gt;Hopefully if this bothers others as well, there will be &lt;a href=&quot;http://spottheunsubscribe.tumblr.com/submit&quot;&gt;submissions&lt;/a&gt;. Otherwise, new posts will be rather infrequent.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Stretchy: Form element autosizing, the way it should be</title>
    <link href="https://lea.verou.me/2015/07/stretchy-form-element-autosizing-the-way-it-should-be/"/>
    <updated>2015-07-26T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2544</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2015/07/stretchy-form-element-autosizing-the-way-it-should-be/images/Screen-Shot-2015-07-25-at-18.40.13-.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2015/07/stretchy-form-element-autosizing-the-way-it-should-be/images/Screen-Shot-2015-07-25-at-18.40.13--300x204.png&quot; alt=&quot;Screen Shot 2015-07-25 at 18.40.13&quot; /&gt;&lt;/a&gt;As you might be aware, &lt;a href=&quot;http://lea.verou.me/2014/02/im-going-to-mit/&quot;&gt;these days a good chunk of my time is spent working on research, at MIT&lt;/a&gt;. Although it’s still too early to talk about my research project, I can say that it’s related to the Web and it will be open source, both of which are pretty awesome (getting paid to work on cool open source stuff is the dream, right?).&lt;/p&gt;
&lt;p&gt;The one thing I &lt;em&gt;can&lt;/em&gt; mention about my project is that it involves a lot of editing of Web content. And since contentEditable is a mess, as you all know, I decided to use form controls styled like the content being edited. This meant that I needed a good script for form control autosizing, one that worked on multiple types of form controls (inputs, textareas, even select menus). In addition, I needed the script to smoothly work for newly added controls, without me having to couple the rest of my code with it and call API methods or fire custom events every time new controls were added anywhere. A quick look at the existing options quickly made it obvious that I had to write my own.&lt;/p&gt;
&lt;p&gt;After writing it, I realized this could be released entirely separately as it was a standalone utility. So &lt;a href=&quot;https://projects.verou.me/stretchy/&quot;&gt;Stretchy&lt;/a&gt; was born :) I made a quick page for it, fixed a few cross-browser bugs that needed fixing anyway, put it up on Github and here it is!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.verou.me/stretchy&quot;&gt;Enjoy!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS: You can also use it as a bookmarklet, to autosize form controls on an existing page, if a form is bothering you with its poor usability. You will find it in the footer.&lt;/p&gt;
</content>
  </entry><entry>
    <title>On the blindness of blind reviews</title>
    <link href="https://lea.verou.me/2015/08/on-the-blindness-of-blind-reviews/"/>
    <updated>2015-08-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2554</id>
    <content xml:lang="en" type="html">&lt;p&gt;Over the last couple of years, blind reviews have been popularized as the ultimate method for fair talk selection in industry conferences. While I don’t really submit proposals myself, I have served several times on the other side of the process, doing speaker selection in conference committees, and the more data points I collect, the more convinced I become that the blind selection process is fundamentally flawed.&lt;/p&gt;
&lt;p&gt;Blind reviews come from the world of academia. However, in academic conferences, you do not judge a talk by a 1-2 paragraph abstract, but by a 10+ page paper, so there’s way more to judge by. In addition, in academia the content of the research matters infinitely more than the quality of a talk. In industry conferences, selection committees in blind reviews have both &lt;strong&gt;way less data to use&lt;/strong&gt;, and a &lt;strong&gt;much harder task&lt;/strong&gt;, as they need to balance several factors (content, speaker skill, talk quality etc). It’s no surprise that the results end up being even more of a gamble.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blind reviews result in conservative talk selection.&lt;/strong&gt; More often than not, I remember me and my fellow committee members saying “Damn, this talk could be great with the right presenter, but that’s rare” and giving it a poor or average score. &lt;strong&gt;Few topics can make good talks regardless of the presenters.&lt;/strong&gt; Therefore, when there is little information on the speaker in the initial selection round, talk selection ends up being conservative, rejecting more challenging topics that need a skilled speaker to shine and sticking to safer choices.&lt;/p&gt;
&lt;p&gt;One of my most successful talks ever was “The humble border-radius” which was shortlisted for a .net award for Conference Talk of The Year 2014. &lt;strong&gt;It would never have passed any blind review.&lt;/strong&gt; There is no committee in their right mind that would have accepted a 45 minute talk about …border-radius. The conferences I presented it at invited me as a speaker, carte blanche, and trusted me to present on whatever I felt like. Judging by the reviews, they were not disappointed.&lt;/p&gt;
&lt;p&gt;In addition, all too many times I’ve seen great speakers get poor scores in blind reviews, not because their talks were not good, but because &lt;strong&gt;writing good abstracts is an entirely separate skill&lt;/strong&gt;. Blind reviews remove anything that could cause bias, but they do so by striping all personality away from a proposal. In addition, a good abstract for a blind review is not necessarily a good abstract in general. For example, blind reviews penalize more mysterious/teasy abstracts and tend to be skewed towards overly detailed ones, since it’s the only data the committee gets for these talks (bonus points here for CfS that have a separate field for more details to conf organizers).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“But what about newcomers to the conference circuit? What about bias elimination?”&lt;/strong&gt; one might ask. Both very valid concerns. I’m not saying any kind of anonymization is a bad idea. I’m saying that in their present form in industry conferences, blind reviews are flawed. For example, an initial round of blind reviews to pick good talks, without rejecting any at that stage, would probably solve these issues, without suffering from the flaws mentioned above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I do recognize that most people in these committees are doing their best to select fairly, and putting many hours of (usually volunteer) work in it. I’m not criticizing them, I’m criticizing the process. And yes, I recognize that it’s a process that has come out of very good intentions (eliminating bias). However, &lt;strong&gt;good intentions are not a guarantee for infallibility&lt;/strong&gt;.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Copying object properties, the robust way</title>
    <link href="https://lea.verou.me/2015/08/copying-properties-the-robust-way/"/>
    <updated>2015-08-16T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2558</id>
    <content xml:lang="en" type="html">&lt;p&gt;If, like me, you try to &lt;a href=&quot;http://lea.verou.me/2015/04/jquery-considered-harmful/&quot;&gt;avoid using heavy libraries when not needed&lt;/a&gt;, you must have definitely written a helper to copy properties from one object to another at some point. It’s needed so often that it’s just silly to write the same loops over and over again.&lt;/p&gt;
&lt;p&gt;These days, most of my time is spent working on &lt;a href=&quot;http://lea.verou.me/2014/02/im-going-to-mit/&quot;&gt;my research project at MIT&lt;/a&gt;, which I will hopefully reveal later this year. In that, I’m using a lightweight homegrown helper library, which I might release separately at some point as I think it has potential in its own right, for a number of reasons.&lt;/p&gt;
&lt;p&gt;Of course, it needed to have a simple &lt;code&gt;extend()&lt;/code&gt; method as well, to copy properties from one object to another. Let’s assume for the purposes of this article that we’re talking about shallow copying, that overwrites are allowed, and let’s omit &lt;code&gt;hasOwnProperty()&lt;/code&gt; checks to make code easier to read.&lt;/p&gt;
&lt;p&gt;It’s a simple task, right? Our first attempt might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$.extend = function (to, from) {
	for (var property in from) {
		to[property] = from[property];
	}

	return to;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works fine, until you try it on objects with accessors or other types of properties defined via &lt;code&gt;Object.defineProperty()&lt;/code&gt; or &lt;code&gt;get&lt;/code&gt;/&lt;code&gt;set&lt;/code&gt; keywords. What do you do then? Our next iteration could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$.extend = function (to, from) {
	for (var property in from) {
		Object.defineProperty(to, property, Object.getOwnPropertyDescriptor(from, property));
	}

	return to;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works much better, until it fails, and it can fail pretty epically. Try this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$.extend(document.body.style, {
	backgroundColor: &amp;quot;red&amp;quot;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both in Chrome and Firefox, the results are super weird. Even though reading &lt;code&gt;document.body.style.backgroundColor&lt;/code&gt; will return &lt;code&gt;&amp;quot;red&amp;quot;&lt;/code&gt;, no style will have actually been applied. In Firefox it even destroyed the native setter entirely and any future attempts to set &lt;code&gt;document.body.style.backgroundColor&lt;/code&gt; in the console did absolutely nothing.&lt;/p&gt;
&lt;p&gt;In contrast, the previous naïve approach worked fine for this. It’s clear that we need to somehow combine the two approaches, using Object.defineProperty() only when actually needed. But when is it actually not needed?&lt;/p&gt;
&lt;p&gt;One obvious case is if the descriptor is &lt;code&gt;undefined&lt;/code&gt; (such as with some native properties). Also, in simple properties, such as those in our object literal, the descriptor will be of the form &lt;code&gt;{value: somevalue, writable: true, enumerable: true, configurable: true}&lt;/code&gt;. So, the next obvious step would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$.extend = function (to, from) {
	var descriptor = Object.getOwnPropertyDescriptor(from, property);

	if (descriptor &amp;amp;&amp;amp; (!descriptor.writable || !descriptor.configurable || !descriptor.enumerable || descriptor.get || descriptor.set)) {
		Object.defineProperty(to, property, descriptor);
	}
	else {
		to[property] = from[property];
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works perfectly, but is a little clumsy. I’ve currently left it at that, but any suggestions for making it more elegant are welcome :)&lt;/p&gt;
&lt;p&gt;FWIW, I looked at &lt;a href=&quot;http://james.padolsey.com/jquery/#v=git&amp;amp;fn=jQuery.extend&quot;&gt;jQuery’s implementation of jQuery.extend()&lt;/a&gt; after this, and it seems it doesn’t even handle accessors at all, unless I missed something. Time for a pull request, perhaps…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; As MaxArt pointed out in the comments, there is a similar native method in ES6, &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt;. However, it does not deal with copying accessors, so does not deal with this problem either.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Introducing Bliss: A 3KB library for happier Vanilla JS</title>
    <link href="https://lea.verou.me/2015/12/introducing-bliss-a-3kb-library-for-happier-vanilla-js/"/>
    <updated>2015-12-04T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2570</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;http://blissfuljs.com/&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2015/12/introducing-bliss-a-3kb-library-for-happier-vanilla-js/images/Screen-Shot-2015-12-04-at-16.59.39-300x127.png&quot; alt=&quot;Screen Shot 2015-12-04 at 16.59.39&quot; /&gt;&lt;/a&gt;Anyone who follows this blog, my twitter, or my work probably is aware that &lt;a href=&quot;http://lea.verou.me/2015/04/jquery-considered-harmful/&quot;&gt;I’m not a huge fan of big libraries&lt;/a&gt;. I think wrapper objects are messy, and big libraries are overkill for smaller projects. On large projects, one uses frameworks like React or Angular anyway, not libraries.&lt;/p&gt;
&lt;p&gt;Anyone who writes &lt;a href=&quot;http://vanilla-js.com/&quot;&gt;Vanilla JS&lt;/a&gt; on a daily basis probably is aware that it can sometimes be, ahem, somewhat unpleasant to work with. Sure, the situation is orders of magnitude better than it was when I started. Back then, IE6 was the dominant browser and you needed a helper function to even add event listeners to an element (remember element.attachEvent?) or to get elements by a class!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2015/12/introducing-bliss-a-3kb-library-for-happier-vanilla-js/images/jasset-datepicker.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2015/12/introducing-bliss-a-3kb-library-for-happier-vanilla-js/images/jasset-datepicker-300x211.png&quot; alt=&quot;jasset-datepicker&quot; title=&quot;Ah, the memories!&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fun fact:&lt;/strong&gt; I learned JavaScript back then by writing my own library, called &lt;em&gt;jAsset&lt;/em&gt;. I had not heard of jQuery when I started it in 2007, so I had even coded my own selector engine! (Anyone remember &lt;em&gt;slickspeed&lt;/em&gt;?) jAssset had plenty of nice helper functions, its own UI library and a cool logo. I had even started to make a website for its UI components, seen on the right.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://shipitsquirrel.github.io/&quot;&gt;&lt;img src=&quot;http://shipitsquirrel.github.io/images/ship%20it%20squirrel.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;Sadly, &lt;em&gt;jAsset&lt;/em&gt; died the sad inevitable death of all unreleased projects: Without external feedback, I had nobody to hold me back from adding to its API every time I personally needed a helper function. And adding, and adding, and adding… Until it became 5000+ loc long and its benefit of being lightweight or comprehensible had completely vanished. It collapsed under its own weight before it even saw the light of day. I abandoned it and went through a few years of using jQuery as my preferred helper library. Eventually, my &lt;a href=&quot;http://lea.verou.me/2015/04/jquery-considered-harmful/&quot;&gt;distaste for wrapper objects&lt;/a&gt;, the constantly improving browser support for new APIs that made Vanilla JS more palatable, and the decline of overly conspicuous browser bugs led me to give it up.&lt;/p&gt;
&lt;p&gt;It was refreshing, and educational, but soon I came to realize that while Vanilla JS is orders of magnitude better than it was when I started, certain APIs are still quite unwieldy, which can be annoying if you use them often. For example, the Vanilla JS for creating an element, with other elements inside it, events and inline styles is so commonly needed, but also so verbose and &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;WET&lt;/a&gt;, it can make one suicidal.&lt;/p&gt;
&lt;p&gt;However, Vanilla JS does not mean “use no abstractions”. Programming is all about abstractions! The Vanilla JS movement, is about favoring speed, smaller abstractions and understanding of the Web Platform, over big libraries that we treat as a black box. It’s about using libraries to save time, not to skip learning.&lt;/p&gt;
&lt;p&gt;So, I used my own tiny helpers, on every project. They were small and easy to understand, instead of several KB of code aiming to fix browser bugs I will likely never encounter and let me create complex nested DOM structures with a single JSON-like object. Over time, their API solidified and improved. On larger projects it was a separate file which I had tentatively codenamed &lt;em&gt;Utopia&lt;/em&gt; (due to the lack of browser bug fixes and optimistic use of modern APIs). On smaller ones just a few helper methods (I could not live without at least my tiny 2 sloc $() and $$() helpers!). Here is a sample from my open source repos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/dabblet/blob/master/code/utopia.js&quot;&gt;dabblet.com/utopia.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/regexplained/blob/gh-pages/utopia.js&quot;&gt;regexplained/utopia.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/dpi/blob/gh-pages/utopia.js&quot;&gt;dpi.lv/utopia.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/css3test/blob/gh-pages/utopia.js&quot;&gt;css3test.com/utopia.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/awesomplete/blob/gh-pages/awesomplete.js#L296-L351&quot;&gt;awesomplete.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;$() and/or $$() helpers in:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/prefixfree/blob/gh-pages/prefixfree.js#L167-L169&quot;&gt;prefixfree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/csss/blob/gh-pages/slideshow.js#L10-L11&quot;&gt;CSSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/animatable/blob/gh-pages/index.js#L1-L2&quot;&gt;animatable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/contrast-ratio.js#L1-L7&quot;&gt;contrast-ratio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/cubic-bezier/blob/gh-pages/environment.js#L27-L28&quot;&gt;cubic-bezier.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/whathecolor/blob/gh-pages/whathecolor.js#L1-L7&quot;&gt;whathecolor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/corner-shape/blob/gh-pages/corner-shape.js#L1-L2&quot;&gt;corner-shape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LeaVerou/css-colors/blob/gh-pages/colors.js#L1-L2&quot;&gt;css-colors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice any recurring themes there? :)&lt;/p&gt;
&lt;p&gt;I never mentioned &lt;em&gt;Utopia.js&lt;/em&gt; anywhere, besides silently including it in my projects, so it went largely unnoticed. Sometimes people would look at it, ask me to release it, I’d promise them I would and then nothing. A few years ago, someone noticed it, liked it and &lt;a href=&quot;http://davidhiggins.me/utopia/&quot;&gt;documented it&lt;/a&gt; a bit (site is down now it seems). However, it was largely my little secret, hidden in public view.&lt;/p&gt;
&lt;p&gt;For the past half year, I’ve been working hard on my research project at MIT. It’s pretty awesome and is aimed at helping people who know HTML/ CSS but &lt;strong&gt;not&lt;/strong&gt; JS, achieve more with Web technologies (and that’s all I can say for now). It’s also written in JS, so I used &lt;em&gt;Utopia&lt;/em&gt; as a helper library, naturally. &lt;em&gt;Utopia&lt;/em&gt; evolved even more with this project, got renamed to &lt;em&gt;Bliss&lt;/em&gt; and got chainability via &lt;a href=&quot;http://lea.verou.me/2015/04/idea-extending-native-dom-prototypes-without-collisions/&quot;&gt;my idea about extending DOM prototypes without collisions&lt;/a&gt; (can be disabled and the property name is customizable).&lt;/p&gt;
&lt;p&gt;All this worked fine while I was the only person working on the project. Thankfully, I might get some help soon, and it might be rather inexperienced (the academia equivalent of interns). Help is very welcome, but it did raise the question: How will these people, who likely only know jQuery, work on the project? [1]&lt;/p&gt;
&lt;p&gt;The answer was that the time has come to polish, document and release &lt;a href=&quot;http://blissfuljs.com/&quot;&gt;Bliss&lt;/a&gt; to the world. My plan was to spend a weekend documenting it, but it ended up being a little over a week on and off, when procrastinating from other tasks I had to do. However, I’m very proud of the resulting docs, so much that I gifted myself &lt;a href=&quot;http://blissfuljs.com/&quot;&gt;a domain&lt;/a&gt; for it. They are fairly extensive (though some functions still need work) and has two things I always missed in other API docs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recommendations about what Vanilla JS to use instead when appropriate, instead of guiding people into using library methods even when Vanilla JS would have been perfectly sufficient.&lt;/li&gt;
&lt;li&gt;A “Show Implementation” button showing the implementation, so you can both learn, and judge whether it’s needed or not, instead of assuming that you should use it over Vanilla JS because it has magic pixie dust. This way, the docs also serve as a source viewer!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, enjoy &lt;a href=&quot;http://blissfuljs.com/&quot;&gt;Bliss&lt;/a&gt;. The helper library for people who don’t like helper libraries. :) In a way, it feels that a journey of 8 years, finally ends today. I hope the result makes you blissful too.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blissfuljs.com/&quot;&gt;blissfuljs.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Oh, and don’t forget to follow &lt;a href=&quot;http://twitter.com/blissfuljs&quot;&gt;@blissfuljs&lt;/a&gt; on twitter!&lt;/p&gt;
&lt;p&gt;[1]: Academia is often a little behind tech-wise, so &lt;strong&gt;everyone&lt;/strong&gt; uses jQuery here — hardly any exceptions. Even though browser support doesn’t usually even matter to research projects!&lt;/p&gt;
</content>
  </entry><entry>
    <title>My positive experience as a woman in tech</title>
    <link href="https://lea.verou.me/2015/12/my-positive-experience-as-a-woman-in-tech/"/>
    <updated>2015-12-17T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2590</id>
    <content xml:lang="en" type="html">&lt;p&gt;Women speaking up about the sexism they have experienced in tech is great for raising awareness about the issues. However, &lt;strong&gt;when no positive stories get out, the overall picture painted is bleak, which could scare even more women away&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Lucky for me, &lt;a href=&quot;http://lea.verou.me/2012/05/how-i-got-into-web-development-the-long-version/&quot;&gt;I fell in love with programming a decade before I even heard there is a sexism problem in tech&lt;/a&gt;. Had I read about it before, I might have decided to go for some other profession. Who wants to be fighting an uphill battle all her life?&lt;/p&gt;
&lt;p&gt;Thankfully, my experience has been quite different. Being in this industry has brought me nothing but happiness. Yes, there are several women who have had terrible experiences, and I’m in no way discounting them. They may even be the majority, though I am not aware of any statistics. However, there is also the other side. Those of us who have had incredibly positive experiences, and have always been treated with nothing but respect. That side’s stories need to be heard too, not silenced out of fear that we will become complacent and stop trying for more equality. Stories like mine should become the norm, not the exception.&lt;/p&gt;
&lt;p&gt;I’ve had a number of different roles in tech over the course of my life. I’ve been a student, a speaker &amp;amp; author, I’ve worked at &lt;a href=&quot;http://w3.org/&quot;&gt;W3C&lt;/a&gt;, I’ve started &amp;amp; maintain several successful open source projects and I’m &lt;a href=&quot;http://lea.verou.me/2014/02/im-going-to-mit/&quot;&gt;currently dabbling in Computer Science research&lt;/a&gt;. In none of these roles did I ever feel I was unfairly treated due to my gender. That is not because I’m oblivious to sexism. I tend to be very sensitive to seeing it, and I often notice even the smallest acts of sexism (“death by a thousand paper cuts”). I see a lot of sexism in society overall. However, inside this industry, my gender never seemed to matter much, except perhaps in positive ways.&lt;/p&gt;
&lt;p&gt;On &lt;a href=&quot;http://github.com/leaverou&quot;&gt;my open source repos&lt;/a&gt;, I have several contributors, the overwhelming majority of which, is male. I’ve never felt less respected due to my gender. I’ve never felt that my work was taken less seriously than male OSS developers. I’ve never felt my contributors would not listen to me. I’ve never felt my work was unfairly scrutinized. Even when I didn’t know something, or introduced a horrible bug, I’ve never been insulted or berated. The community has been nothing but friendly, helpful and respectful. If anything, I’ve sometimes wondered if my gender is the reason I hardly ever get any shit!&lt;/p&gt;
&lt;p&gt;On stage, I’ve never gotten any negative reactions. My talks always get excellent reviews, which have nothing to do with me being female. There is sometimes the odd complimentary tweet about my looks, but that’s not only exceedingly rare, but also always combined with a compliment about the actual talk content. My gender only affected my internal motivation: I often felt I &lt;strong&gt;had&lt;/strong&gt; to be good, otherwise I would be painting all female tech speakers in a negative light. But other people are not at fault for my own stereotype threat.&lt;/p&gt;
&lt;p&gt;My book, &lt;a href=&quot;http://www.amazon.com/CSS-Secrets-Solutions-Everyday-Problems/dp/1449372635/ref=cm_cr_pr_product_top?ie=UTF8&quot;&gt;CSS Secrets&lt;/a&gt;, has been as successful as an advanced CSS book could possibly aspire to be and got to an average of 5 stars on Amazon only a few months after its release. It’s steadily the 5th bestseller on CSS and was No 1 for a while shortly after publication. My gender did not seem to negatively affect any of that, even though there’s a picture of me in the french flap so there are no doubts about me being female (as if the name Lea wasn’t enough of a hint).&lt;/p&gt;
&lt;p&gt;As a student, I’ve never felt unfairly treated due to my gender by any of my professors, even the ones in Greece, a country that is not particularly famous for its gender equal society, to put it mildly.&lt;/p&gt;
&lt;p&gt;As a new researcher, I have no experience with publishing papers yet, so I cannot share any experiences on that. However, I’ve been treated with nothing but respect by both &lt;a href=&quot;https://en.wikipedia.org/wiki/David_Karger&quot;&gt;my advisor&lt;/a&gt; and colleagues. My opinion is always heard and valued and even when people don’t agree, I can debate it as long and as intensely as I want, without being seen as aggressive or “bossy”.&lt;/p&gt;
&lt;p&gt;I’ve worked at &lt;a href=&quot;http://w3.org/&quot;&gt;W3C&lt;/a&gt; and still participate as an Invited Expert in the CSS Working Group. In neither of these roles did my gender seem to matter in any way. I’ve always felt that my expertise and skillset were valued and my opinions heard. In fact, the most well-respected member of the CSS WG, is the only other woman in it: &lt;a href=&quot;http://fantasai.inkedblade.net/&quot;&gt;fantasai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, In all my years as a working professional, I’ve always negotiated any kind of remuneration, often hard. I’ve never lost an opportunity because of it, or been treated with negativity afterwards.&lt;/p&gt;
&lt;p&gt;On the flip side, sexism today is rarely overt. Given that hardly anybody over ten will flat out admit they think women are inferior (even to themselves), it’s often hard to tell when a certain behavior stems from sexist beliefs. If someone is a douchebag to you, are they doing it because you’re a woman, or because they’re douchebags? If someone is criticizing your work, are they doing it because they genuinely found something to criticize or because they’re negatively predisposed due to your gender? It’s impossible to know, especially since &lt;strong&gt;they don’t know either&lt;/strong&gt;! If you confront them on their sexism, they will deny all of it, and truly believe it. &lt;strong&gt;It takes a lot of introspection to see one’s internalized stereotypes.&lt;/strong&gt; Therefore, a lot of the time, you cannot be sure if you have experienced sexist behavior, and there is no way to find out for sure, since the perpetrator doesn’t know either. There are many false positives and false negatives there.&lt;/p&gt;
&lt;p&gt;Perhaps I don’t feel I have experienced much sexism because I prefer to err on the side of false negatives. Paraphrasing &lt;a href=&quot;https://en.wikipedia.org/wiki/Blackstone%27s_formulation&quot;&gt;Blackstone&lt;/a&gt;, I would rather not call out sexist behavior ten times, than wrongly accuse someone of it once. It might also have to do with my personality: I’m generally confident and can be very assertive. When somebody is being a jerk to me, I will not curl in a ball and question my life choices, I will reply to them in the same tone. However, those two alone cannot make the difference between a pit rampant with sexism and an egalitarian paradise. I think a lot of it is that we have genuinely made progress, and we should celebrate it with more women coming out with their positive experiences (it cannot just be me, right?).&lt;/p&gt;
&lt;p&gt;Ironically, one of the very few times I have experienced any sexism in the industry was when a dude was trying to be nice to me. I was in a speaker room at a conference in Las Vegas, frantically working on my slides, not participating in any of the conversations around me. At some point, one of the guys said “fuck” in a conversation, then turned and apologized to me. Irritated about the sudden interruption, I lifted my head and looked around. &lt;strong&gt;I noticed for the first time that day that I was the only woman in the room.&lt;/strong&gt; &lt;strong&gt;His effort to be courteous made me feel that I was different, the odd one out&lt;/strong&gt;, the one we must be careful around and treat like a fragile flower. To this day, I regret being too startled to reply &lt;em&gt;“Eh, I don’t give a fuck”&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Introducing Multirange: A tiny polyfill for HTML5.1 two-handle sliders</title>
    <link href="https://lea.verou.me/2016/05/introducing-multirange-a-tiny-polyfill-for-html5-two-handle-sliders/"/>
    <updated>2016-05-31T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2621</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2016/05/introducing-multirange-a-tiny-polyfill-for-html5-two-handle-sliders/images/multirange.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2016/05/introducing-multirange-a-tiny-polyfill-for-html5-two-handle-sliders/images/multirange-300x206.png&quot; alt=&quot;multirange&quot; /&gt;&lt;/a&gt;As part of my preparation for &lt;a href=&quot;http://cssday.nl/2016/programme#lea-verou&quot;&gt;my talk at CSSDay HTML Special&lt;/a&gt;, I was perusing the most recent HTML specs (&lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;WHATWG Living Standard&lt;/a&gt;, &lt;a href=&quot;https://www.w3.org/TR/html51/&quot;&gt;W3C HTML 5.1&lt;/a&gt;) to see what undiscovered gems lay there. It turns out that HTML sliders have a lot of cool features specced that aren’t very well implemented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ticks that snap via the &lt;code&gt;list&lt;/code&gt; attribute and the &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; element. This is fairly decently implemented, except labelled ticks, which is not supported anywhere.&lt;/li&gt;
&lt;li&gt;Vertical sliders when height &amp;gt; width, implemented nowhere (instead, browsers employ proprietary ways for making sliders vertical: An &lt;code&gt;orient=vertical&lt;/code&gt; attribute in Gecko, &lt;code&gt;-webkit-appearance: slider-vertical;&lt;/code&gt; in WebKit/Blink and &lt;code&gt;writing-mode: bt-lr;&lt;/code&gt; in IE/Edge). Good ol’ rotate transforms work too, but have the usual problems, such as layout not being affected by the transform.&lt;/li&gt;
&lt;li&gt;Two-handle sliders for ranges, via the &lt;code&gt;multiple&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I made a quick &lt;a href=&quot;https://dabblet.com/gist/0b79583e6e9c4e5e52aec5d682ac71d2&quot;&gt;testcase&lt;/a&gt; for all three, and to my disappointment (but not to my surprise), support was extremely poor. I was most excited about the last one, since I’ve been wanting range sliders in HTML for a long time. Sadly, there are no implementations. But hey, what if I could create a polyfill by cleverly overlaying two sliders? Would it be possible? I started &lt;a href=&quot;http://jsbin.com/risiki/edit?html,css,js,output&quot;&gt;experimenting in JSBin&lt;/a&gt; last night, just for the lolz, then soon realized this could actually work and &lt;a href=&quot;https://github.com/leaverou/multirange&quot;&gt;started a GitHub repo&lt;/a&gt;. Since CSS variables are now supported almost everywhere, I’ve had a lot of fun using them. Sure, I could get broader support without them, but the code is much simpler, more elegant and customizable now. I also originally started with a &lt;a href=&quot;http://blissfuljs.com/&quot;&gt;Bliss&lt;/a&gt; dependency, but realized it wasn’t worth it for such a tiny script.&lt;/p&gt;
&lt;p&gt;So, enjoy, and contribute!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.verou.me/multirange/&quot;&gt;Multirange&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Markapp: A list of HTML libraries</title>
    <link href="https://lea.verou.me/2016/08/markapp-a-list-of-html-libraries/"/>
    <updated>2016-08-26T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2649</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2016/08/markapp-a-list-of-html-libraries/images/Screen-Shot-2016-08-26-at-17.09.24.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2016/08/markapp-a-list-of-html-libraries/images/Screen-Shot-2016-08-26-at-17.09.24.png&quot; alt=&quot;Screen Shot 2016-08-26 at 17.09.24&quot; /&gt;&lt;/a&gt;I have often lamented how many JavaScript developers don’t realize that a large percentage of HTML &amp;amp; CSS authors are not comfortable writing JS, and struggle to use their libraries.&lt;/p&gt;
&lt;p&gt;To encourage libraries with HTML APIs, i.e. libraries that can be used without writing a line of JS, I made a website to list and promote them: &lt;a href=&quot;https://projects.verou.me/markapp&quot;&gt;MarkApp&lt;/a&gt;. The list is currently quite short, so I’m counting on you to &lt;a href=&quot;https://github.com/LeaVerou/markapp&quot;&gt;expand it&lt;/a&gt;. Seen any libraries with good HTML APIs? Add them!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Autoprefixing, with CSS variables!</title>
    <link href="https://lea.verou.me/2016/09/autoprefixing-with-css-variables/"/>
    <updated>2016-09-07T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2655</id>
    <content xml:lang="en" type="html">&lt;p&gt;Recently, when I was making the minisite for &lt;a href=&quot;http://markapp.io/&quot;&gt;markapp.io&lt;/a&gt;, I realized a neat trick one can do with CSS variables, precisely due to their dynamic nature. Let’s say you want to use a property that has multiple versions: an unprefixed one and one or more prefixed ones. In this example we are going to use &lt;code&gt;clip-path&lt;/code&gt;, which &lt;a href=&quot;http://caniuse.com/#feat=css-clip-path&quot;&gt;currently&lt;/a&gt; needs both an unprefixed version and a &lt;code&gt;-webkit-&lt;/code&gt; prefixed one, however the technique works for any property and any number of prefixes or different property names, as long as the value is the same across all variations of the property name.&lt;/p&gt;
&lt;p&gt;The first part is to define a &lt;code&gt;--clip-path&lt;/code&gt; property on every element with a value of initial. This prevents the property from being inherited every time it’s used, and since the &lt;code&gt;*&lt;/code&gt; has zero specificity, any declaration that uses &lt;code&gt;--clip-path&lt;/code&gt; can override it. Then you define all variations of the property name with &lt;code&gt;var(--clip-path)&lt;/code&gt; as their value:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* {
	--clip-path: initial;
	-webkit-clip-path: var(--clip-path);
	clip-path: var(--clip-path);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, every time we need clip-path, we use --clip-path instead and it just works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;header {
	--clip-path: polygon(0% 0%, 100% 0%, 100% calc(100% - 2.5em), 0% 100%);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even &lt;code&gt;!important&lt;/code&gt; should work, because &lt;a href=&quot;https://www.w3.org/TR/css-variables/#syntax&quot;&gt;it affects the cascading of CSS variables&lt;/a&gt;. Furthermore, if for some reason you want to explicitly set &lt;code&gt;-webkit-clip-path&lt;/code&gt;, you can do that too, again because * has zero specificity. The main downside to this is that it limits browser support to the intersection of the support for the feature you are using and support for CSS Variables. However, &lt;a href=&quot;http://caniuse.com/#feat=css-variables&quot;&gt;all browsers except Edge support CSS variables&lt;/a&gt;, and &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/status/csscustompropertiesakacssvariables/&quot;&gt;Edge is working on it&lt;/a&gt;. I can’t see any other downsides to it (except having to use a different property name obvs), but if you do, let me know in the comments!&lt;/p&gt;
&lt;p&gt;I think there’s still a lot to be discovered about cool uses of CSS variables. I wonder if there exists a variation of this technique to produce custom longhands, e.g. breaking &lt;code&gt;box-shadow&lt;/code&gt; into &lt;code&gt;--box-shadow-x&lt;/code&gt;, &lt;code&gt;--box-shadow-y&lt;/code&gt; etc, but I can’t think of anything yet. Can you? ;)&lt;/p&gt;
</content>
  </entry><entry>
    <title>URL rewriting with Github Pages</title>
    <link href="https://lea.verou.me/2016/11/url-rewriting-with-github-pages/"/>
    <updated>2016-11-26T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2668</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2016/11/url-rewriting-with-github-pages/images/redirect.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2016/11/url-rewriting-with-github-pages/images/redirect-300x167.png&quot; alt=&quot;redirect&quot; /&gt;&lt;/a&gt;I adore &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;. I use them for everything I can, and try to avoid server-side code like the plague, exactly so that I can use them. The convenience of pushing to a repo and having the changes immediately reflected on the website with no commit hooks or any additional setup, is awesome. The free price tag is even more awesome. So, when the time came to publish &lt;a href=&quot;https://www.amazon.com/CSS-Secrets-Solutions-Everyday-Problems/dp/1449372635/&quot;&gt;my book&lt;/a&gt;, naturally, I wanted the companion website to be on Github Pages.&lt;/p&gt;
&lt;p&gt;There was only one small problem: I wanted nice URLs, like &lt;a href=&quot;http://play.csssecrets.io/pie-animated&quot;&gt;http://play.csssecrets.io/pie-animated&lt;/a&gt;, which would redirect to demos on &lt;a href=&quot;https://dabblet.com/&quot;&gt;dabblet.com&lt;/a&gt;. Any sane person would have likely bitten the bullet and used some kind of server-side language. However, I’m not a particularly sane person :D&lt;/p&gt;
&lt;p&gt;Turns out &lt;a href=&quot;https://help.github.com/articles/creating-a-custom-404-page-for-your-github-pages-site/&quot;&gt;Github uses some URL rewriting of its own on Github Pages&lt;/a&gt;: If you provide a 404.html, any URL that doesn’t exist will be handled by that. Wait a second, is that basically how we do nice URLs on the server anyway? We can do the same in Github Pages, by just running JS inside 404.html!&lt;/p&gt;
&lt;p&gt;So, I created &lt;a href=&quot;https://github.com/LeaVerou/play.csssecrets.io/blob/gh-pages/secrets.json&quot;&gt;a JSON file&lt;/a&gt; with all demo ids and their dabblet URLs, a &lt;a href=&quot;https://github.com/LeaVerou/play.csssecrets.io/blob/gh-pages/404.html&quot;&gt;404.html&lt;/a&gt; that shows either a redirection or an error (JS decides which one) and &lt;a href=&quot;https://github.com/LeaVerou/play.csssecrets.io/blob/gh-pages/redirect.js&quot;&gt;a tiny bit of Vanilla JS&lt;/a&gt; that reads the current URL, fetches the JSON file, and redirects to the right dabblet. Here it is, without the helpers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;(function(){

document.body.className = &#39;redirecting&#39;;

var slug = location.pathname.slice(1);

xhr({
	src: &#39;secrets.json&#39;,
	onsuccess: function () {
		var slugs = JSON.parse(this.responseText);

		var hash = slugs[slug];

		if (hash) {
			// Redirect
			var url = hash.indexOf(&#39;http&#39;) == 0? hash : &#39;https://dabblet.com/gist/&#39; + hash;
			$(&#39;section.redirecting &amp;gt; p&#39;).innerHTML = &#39;Redirecting to &amp;lt;a href=&amp;quot;&#39; + url + &#39;&amp;quot;&amp;gt;&#39; + url + &#39;&amp;lt;/a&amp;gt;…&#39;;
			location.href = url;
		}
		else {
			document.body.className = &#39;error not-found&#39;;
		}
	},
	onerror: function () {
		document.body.className = &#39;error json&#39;;
	}
});

})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all! You can imagine using the same trick to redirect to other HTML pages in the same Github Pages site, have proper URLs for a single page site, and all sorts of things! Is it a hack? Of course. But when did that ever stop us? :D&lt;/p&gt;
</content>
  </entry><entry>
    <title>Resolve Promises externally with this one weird trick</title>
    <link href="https://lea.verou.me/2016/12/resolve-promises-externally-with-this-one-weird-trick/"/>
    <updated>2016-12-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2675</id>
    <content xml:lang="en" type="html">&lt;p&gt;Those of us who use promises heavily, have often wished there was a &lt;code&gt;Promise.prototype.resolve()&lt;/code&gt; method, that would force an existing Promise to resolve. However, for architectural reasons (throw safety), there is no such thing and probably never will be. Therefore, a Promise can only resolve or reject by calling the respective methods in its constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var promise = new Promise((resolve, reject) =&amp;gt; {
	if (something) {
		resolve();
	}
	else {
		reject();
	}
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, often it is not desirable to put your entire code inside a Promise constructor so you could resolve or reject it at any point. In my latest case today, I wanted a Promise that resolved when a tree was created, so that third-party components could defer code execution until the tree was ready. However, given that plugins could be running on any hook, that meant wrapping a ton of code with the Promise constructor, which was obviously a no-go. I had come across this problem before and usually gave up and created a Promise around all the necessary code. However, this time my aversion to what this would produce got me to think even harder. What could I do to call &lt;code&gt;resolve()&lt;/code&gt; asynchronously from outside the Promise?&lt;/p&gt;
&lt;p&gt;A custom event? Nah, too slow for my purposes, why involve the DOM when it’s not needed?&lt;/p&gt;
&lt;p&gt;Another Promise? Nah, that just transfers the problem.&lt;/p&gt;
&lt;p&gt;An setInterval to repeatedly check if the tree is created? OMG, I can’t believe you just thought that Lea, ewwww, gross!&lt;/p&gt;
&lt;p&gt;Getters and setters? Hmmm, maybe that could work! If the setter is inside the Promise constructor, then I can resolve the Promise by just setting a property!&lt;/p&gt;
&lt;p&gt;My first iteration looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.treeBuilt = new Promise((resolve, reject) =&amp;gt; {
	Object.defineProperty(this, &amp;quot;_treeBuilt&amp;quot;, {
		set: value =&amp;gt; {
			if (value) {
				resolve();
			}
		}
	});
});

// Many, many lines below…

this._treeBuilt = true;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, it really bothered me that I had to define 2 properties when I only needed one. I could of course do some cleanup and delete them after the promise is resolved, but the fact that at some point in time these useless properties existed will still haunt me, and I’m sure the more OCD-prone of you know exactly what I mean. Can I do it with just one property? Turns out I can!&lt;/p&gt;
&lt;p&gt;The main idea is realizing that the getter and the setter could be doing completely unrelated tasks. In this case, setting the property would resolve the promise and reading its value would return the promise:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var setter;
var promise = new Promise((resolve, reject) =&amp;gt; {
	setter = value =&amp;gt; {
		if (value) {
			resolve();
		}
	};
});

Object.defineProperty(this, &amp;quot;treeBuilt&amp;quot;, {
	set: setter,
	get: () =&amp;gt; promise
});

// Many, many lines below…

this.treeBuilt = true;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For better performance, once the promise is resolved you could even delete the dynamic property and replace it with a normal property that just points to the promise, but be careful because in that case, any future attempts to resolve the promise by setting the property will make you lose your reference to it!&lt;/p&gt;
&lt;p&gt;I still think the code looks a bit ugly, so if you can think a more elegant solution, I’m all ears (well, eyes really)!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href=&quot;https://twitter.com/joseph_silber/status/809176159858655234&quot;&gt;Joseph Silber gave an interesting solution on twitter&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function defer() {
	var deferred = {
		promise: null,
		resolve: null,
		reject: null
	};

	deferred.promise = new Promise((resolve, reject) =&amp;gt; {
		deferred.resolve = resolve;
		deferred.reject = reject;
	});

	return deferred;
}

this.treeBuilt = defer();

// Many, many lines below…

this.treeBuilt.resolve();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I love that this is reusable, and calling &lt;code&gt;resolve()&lt;/code&gt; makes a lot more sense than setting something to true. However, I didn’t like that it involved a separate object (deferred) and that people using the treeBuilt property would not be able to call .then() directly on it, so I simplified it a bit to only use one Promise object:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function defer() {
	var res, rej;

	var promise = new Promise((resolve, reject) =&amp;gt; {
		res = resolve;
		rej = reject;
	});

	promise.resolve = res;
	promise.reject = rej;

	return promise;
}

this.treeBuilt = defer();

// Many, many lines below…

this.treeBuilt.resolve();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, something I like!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Duoload: Simplest website load comparison tool, ever</title>
    <link href="https://lea.verou.me/2017/02/duoload-simplest-website-load-comparison-tool-ever/"/>
    <updated>2017-02-03T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2689</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2017/02/duoload-simplest-website-load-comparison-tool-ever/images/Screen-Shot-2017-02-02-at-23.49.02.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2017/02/duoload-simplest-website-load-comparison-tool-ever/images/Screen-Shot-2017-02-02-at-23.49.02-300x190.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;Today I needed a quick tool to compare the loading progression (not just loading time, but also incremental rendering) of two websites, one remote and one in my localhost. Just have them side by side and see how they load relative to each other. Maybe even record the result on video and study it afterwards. That’s all. No special features, no analysis, no stats.&lt;/p&gt;
&lt;p&gt;So I did what I always do when I need help finding a tool, I asked Twitter:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeaVerou/status/827327249305178113&quot;&gt;https://twitter.com/LeaVerou/status/827327249305178113&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Most suggested complicated tools, some non-free and most unlikely to work on local URLs. I thought damn, what I need is a very simple thing! I could code this in 5 minutes! So I did and &lt;a href=&quot;http://duoload.verou.me/&quot;&gt;here it is&lt;/a&gt;, in case someone else finds it useful! The (minuscule amount of) code is of course on &lt;a href=&quot;https://github.com/LeaVerou/duoload&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://duoload.verou.me/&quot; class=&quot;cta&quot;&gt;Duoload&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course it goes without saying that this is probably a bit inaccurate. Do not use it for mission-critical performance comparisons.&lt;/p&gt;
&lt;p&gt;Credits for the name &lt;a href=&quot;http://duoload.verou.me/&quot;&gt;Duoload&lt;/a&gt; to &lt;a href=&quot;http://svgees.us/&quot;&gt;Chris Lilley&lt;/a&gt; who came up with it in the 1 minute deadline I gave him :P&lt;/p&gt;
</content>
  </entry><entry>
    <title>HTML APIs: What they are and how to design a good one</title>
    <link href="https://lea.verou.me/2017/02/html-apis-what-they-are-and-how-to-design-a-good-one/"/>
    <updated>2017-02-16T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2702</id>
    <content xml:lang="en" type="html">&lt;p&gt;I’m a strong believer in lowering the barrier of what it takes to create rich, interactive experiences and improving the user experience of programming. I wrote &lt;a href=&quot;https://www.smashingmagazine.com/2017/02/designing-html-apis/&quot;&gt;an article over at Smashing Magazine&lt;/a&gt; aimed at JavaScript library developers that want their libraries to be usable via HTML (i.e. without writing any JavaScript). Sounds interesting? &lt;a href=&quot;https://www.smashingmagazine.com/2017/02/designing-html-apis/&quot;&gt;Read it here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Introducing Mavo: Create web apps entirely by writing HTML!</title>
    <link href="https://lea.verou.me/2017/05/introducing-mavo-create-web-apps-entirely-by-writing-html/"/>
    <updated>2017-05-16T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2705</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;img src=&quot;http://mavo.io/logo.svg&quot; alt=&quot;&quot; /&gt;Today &lt;a href=&quot;https://www.smashingmagazine.com/2017/05/introducing-mavo/&quot;&gt;I finally released&lt;/a&gt; the project I’ve been working on for the last two years at &lt;a href=&quot;http://csail.mit.edu/&quot;&gt;MIT CSAIL&lt;/a&gt;: An HTML-based language for creating (many kinds of) web applications without programming or a server backend. It’s named Mavo after my late mother (&lt;strong&gt;Ma&lt;/strong&gt;ria &lt;strong&gt;V&lt;/strong&gt;er&lt;strong&gt;o&lt;/strong&gt;u), and is &lt;a href=&quot;https://github.com/mavoweb/mavo&quot;&gt;Open Source&lt;/a&gt; of course (yes, getting paid to work on open source is exactly as fun as it sounds).&lt;/p&gt;
&lt;p&gt;It was the scariest release of my life, and have been postponing it for months. I kept feeling Mavo was not quite there yet, maybe I should add this one feature first, oh and this other one, oh and we can’t release without this one, surely! Eventually I realized that what I was doing had more to do with postponing the anxiety and less to do with Mavo reaching a stage where it can be released. After all, “if you’re not at least a bit embarrassed by what you release, you waited too long”, right?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://shipitsquirrel.github.io/&quot;&gt;&lt;img src=&quot;https://shipitsquirrel.github.io/images/ship%20it%20squirrel.png&quot; alt=&quot;The infamous Ship It Squrrel&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, there it is, I hope you find it useful. Read the &lt;a href=&quot;https://www.smashingmagazine.com/2017/05/introducing-mavo/&quot;&gt;post on Smashing Magazine&lt;/a&gt; or just head straight to &lt;a href=&quot;http://mavo.io/&quot;&gt;mavo.io&lt;/a&gt;, read the &lt;a href=&quot;http://mavo.io/docs/primer&quot;&gt;docs&lt;/a&gt;, and play with the &lt;a href=&quot;http://mavo.io/demos&quot;&gt;demos&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;And do let me know what you make with it, no matter how small and trivial you may think it is, I would love to see it!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Different remote and local resource URLs, with Service Workers!</title>
    <link href="https://lea.verou.me/2017/10/different-remote-and-local-resource-urls-with-service-workers/"/>
    <updated>2017-10-30T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2735</id>
    <content xml:lang="en" type="html">&lt;p&gt;I often run into this issue where I want a different URL remotely and a different one locally so I can test my local changes to a library. Sure, relative URLs work a lot of the time, but are often not an option. Developing &lt;a href=&quot;http://lea.verou.me/2017/05/introducing-mavo-create-web-apps-entirely-by-writing-html/&quot;&gt;Mavo&lt;/a&gt; is yet another example of this: since Mavo is in a separate repo from &lt;a href=&quot;https://mavo.io/&quot;&gt;mavo.io&lt;/a&gt; (its website) as well as &lt;a href=&quot;https://test.mavo.io/&quot;&gt;test.mavo.io&lt;/a&gt; (the testsuite), I can’t just have relative URLs to it that also work remotely. I’ve been encountering this problem way too frequently pretty much since I started in web development. In this post, will describe all solutions and workarounds I’ve used over time for this, including the one I’m currently using for Mavo: Service Workers!&lt;/p&gt;
&lt;h3 id=&quot;the-manual-one&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2017/10/different-remote-and-local-resource-urls-with-service-workers/#the-manual-one&quot;&gt;The manual one&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Probably the first solution everyone tries is doing it manually: every time you need to test, you just change the URL to a relative, local one and try to remember to change it back before committing. I still use this in some cases, since us developers are a lazy bunch. Usually I have both and use my editor’s (un)commenting shortcut for enabling one or the other:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;script src=&amp;quot;https://get.mavo.io/mavo.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!--&amp;lt;script src=&amp;quot;../mavo/dist/mavo.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, as you might imagine, this approach has several problems, the worst of which is that more than once I forgot and committed with the active script being the local one, which resulted in the remote website totally breaking. Also, it’s clunky, especially when it’s two resources whose URLs you need to change.&lt;/p&gt;
&lt;h3 id=&quot;the-js-one&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2017/10/different-remote-and-local-resource-urls-with-service-workers/#the-js-one&quot;&gt;The JS one&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This idea uses a bit of JS to load the remote URL when the local one fails to load.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;script src=&amp;quot;http://localhost:8000/mavo/dist/mavo.js&amp;quot; onerror=&amp;quot;this.src=&#39;https://get.mavo.io/mavo.js&#39;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works, and doesn’t introduce any cognitive overhead for the developer, but the obvious drawback is that it slows things down for the server since a request needs to be sent and fail before the real resource can be loaded. Slowing things down for the local case might be acceptable, even though undesirable, but slowing things down on the remote website for the sake of debugging is completely unacceptable. Furthermore, this exposes the debugging URLs in the HTML source, which gives me a bit of a knee jerk reaction.&lt;/p&gt;
&lt;p&gt;A variation of this approach that doesn’t have the performance problem is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;script&amp;gt;
{
 let host = location.hostname == &amp;quot;localhost&amp;quot;? &#39;http://localhost:8000/dist&#39; : &#39;https://get.mavo.io&#39;;
 document.write(`&amp;lt;script src=&amp;quot;${host}/mavo.js&amp;quot;&amp;gt;&amp;lt;/scr` + `ipt&amp;gt;`);
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works fine, but it’s very clunky, especially if you have to do this multiple times (e.g. on multiple testing files or demos).&lt;/p&gt;
&lt;h3 id=&quot;the-build-tools-one&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2017/10/different-remote-and-local-resource-urls-with-service-workers/#the-build-tools-one&quot;&gt;The build tools one&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The solution I was following up to a few months ago was to use gulp to copy over the files needed, and then link to my local copies via a relative URL. I would also have a gulp.watch() that monitors changes to the original files and copies them over again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;gulp.task(&amp;quot;copy&amp;quot;, function() {
	gulp.src([&amp;quot;../mavo/dist/**/*&amp;quot;])
		.pipe(gulp.dest(&amp;quot;mavo&amp;quot;));
});

gulp.task(&amp;quot;watch&amp;quot;, function() {
	gulp.watch([&amp;quot;../mavo/dist/*&amp;quot;], [&amp;quot;copy&amp;quot;]);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This worked but I had to remember to run &lt;code&gt;gulp watch&lt;/code&gt; every time I started working on each project. Often I forgot, which was a huge source of confusion as to why my changes had no effect. Also, it meant I had copies of Mavo lying around on every repo that uses it and had to manually update them by running &lt;code&gt;gulp&lt;/code&gt;, which was suboptimal.&lt;/p&gt;
&lt;h3 id=&quot;the-service-worker-one&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2017/10/different-remote-and-local-resource-urls-with-service-workers/#the-service-worker-one&quot;&gt;The Service Worker one&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In April, after being fed up with having to deal with this problem for over a decade, I posted &lt;a href=&quot;https://twitter.com/LeaVerou/status/857030863292436480&quot;&gt;a tweet&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeaVerou/status/857030863292436480?ref_src=twsrc%5Etfw&quot;&gt;https://twitter.com/LeaVerou/status/857030863292436480?ref_src=twsrc^tfw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/MylesBorins&quot;&gt;@MylesBorins&lt;/a&gt; replied (though his tweet seems to have disappeared) and suggested that perhaps Service Workers could help. In case you’ve been hiding under a rock for the past couple of years, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;Service Workers&lt;/a&gt; are a new(ish) API that allows you to intercept requests from your website to the network and do whatever you want with them. They are mostly promoted for creating good offline experiences, though they can do a lot more.&lt;/p&gt;
&lt;p&gt;I was looking for an excuse to dabble in Service Workers for a while, and this was a great one. Furthermore, browser support doesn’t really matter in this case because the Service Worker is only used locally.&lt;/p&gt;
&lt;p&gt;The code I ended up with looks like this in a small script called &lt;code&gt;sitewide.js&lt;/code&gt;, which, as you may imagine, is used sitewide:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(function() {

if (location.hostname !== &amp;quot;localhost&amp;quot;) {
	return;
}

if (!self.document) {
	// We&#39;re in a service worker! Oh man, we’re living in the future! ??
	self.addEventListener(&amp;quot;fetch&amp;quot;, function(evt) {
		var url = evt.request.url;

		if (url.indexOf(&amp;quot;get.mavo.io/mavo.&amp;quot;) &amp;gt; -1 || url.indexOf(&amp;quot;dev.mavo.io/dist/mavo.&amp;quot;) &amp;gt; -1) {
			var newURL = url.replace(/.+?(get|dev)&#92;.mavo&#92;.io&#92;/(dist&#92;/)?/, &amp;quot;http://localhost:8000/dist/&amp;quot;) + &amp;quot;?&amp;quot; + Date.now();

			var response = fetch(new Request(newURL), evt.request)
				.then(r =&amp;gt; r.status &amp;lt; 400? r : Promise.reject())
				// if that fails, return original request
				.catch(err =&amp;gt; fetch(evt.request));

			evt.respondWith(response);
		}
	});

	return;
}

if (&amp;quot;serviceWorker&amp;quot; in navigator) {
	// Register this script as a service worker
	addEventListener(&amp;quot;load&amp;quot;, function() {
		navigator.serviceWorker.register(&amp;quot;sitewide.js&amp;quot;);
	});
}


})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far, this has worked more nicely than any of the aforementioned solutions and allows me to just use the normal remote URLs in my HTML. However, it’s not without its own caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service Workers are only activated on a cached pageload, so the first one uses the remote URL. This is almost never a problem locally anyway though, so I’m not concerned about it much.&lt;/li&gt;
&lt;li&gt;The same origin restriction that service workers have is fairly annoying. So, I have to copy the service worker script on every repo I want to use this on, I cannot just link to it.&lt;/li&gt;
&lt;li&gt;It needs to be explained to new contributors since most aren’t familiar with Service Workers and how they work at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently the URLs for both local and remote are baked into the code, but it’s easy to imagine a mini-library that takes care of it as long as you include the local URL as a parameter (e.g. &lt;code&gt;https://get.mavo.io/mavo.js?local=http://localhost:8000/dist/mavo.js&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;other-solutions&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2017/10/different-remote-and-local-resource-urls-with-service-workers/#other-solutions&quot;&gt;Other solutions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Solutions I didn’t test (but you may want to) include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.htaccess&lt;/code&gt; redirect based on domain, suggested by &lt;a href=&quot;https://twitter.com/codepo8&quot;&gt;@codepo8&lt;/a&gt;. I don’t use Apache locally, so that’s of no use to me.&lt;/li&gt;
&lt;li&gt;Symbolic links, suggested by &lt;a href=&quot;https://twitter.com/aleschmidx&quot;&gt;@aleschmidx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;User scripts (e.g. Greasemonkey), suggested by &lt;a href=&quot;https://twitter.com/WebManWlkg&quot;&gt;@WebManWlkg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Modifying the hosts file, suggested by &lt;a href=&quot;https://twitter.com/LukeBrowell&quot;&gt;@LukeBrowell&lt;/a&gt; (that works if you don’t need access to the remote URL at all)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Is there any other solution? What do you do?&lt;/p&gt;
</content>
  </entry><entry>
    <title>Free Intro to Web Development slides (with demos)</title>
    <link href="https://lea.verou.me/2018/02/free-intro-to-web-development-slides-with-demos/"/>
    <updated>2018-02-20T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2750</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://projects.verou.me/talks/intro/&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2018/02/free-intro-to-web-development-slides-with-demos/images/Screen-Shot-2018-02-19-at-22.57.12-300x211.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;This semester I’m teaching &lt;a href=&quot;http://web.mit.edu/6.813/www/sp18/&quot;&gt;6.813 User Interface Design and Implementation at MIT&lt;/a&gt;, as an instructor.&lt;/p&gt;
&lt;p&gt;Many of the assignments of this course include Web development and the course included two 2-hour labs to introduce students to these technologies. Since I’m involved this year, I decided to make new labs from scratch and increase the number of labs from 2 to 3. Even so, trying to decide what to include and what not to from the entirety of web development in only 6 hours was really hard, and I still feel I failed to include important bits.&lt;/p&gt;
&lt;p&gt;Since many people asked me for the slides on Twitter, I decided to share them. &lt;a href=&quot;https://projects.verou.me/talks/intro/&quot;&gt;You will find my slides here&lt;/a&gt; and &lt;a href=&quot;http://web.mit.edu/6.813/www/sp18/labs/&quot;&gt;an outline of what is covered is here&lt;/a&gt;. These slides were also the supporting material the students had on their own laptops and often they had to do exercises in them.&lt;/p&gt;
&lt;p&gt;The audience for these slides is &lt;strong&gt;beginners in Web development but technical otherwise&lt;/strong&gt; — people who understand OOP, trees, data structures and have experience in at least one C-like programming language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some demos will not make sense as they were live coded&lt;/strong&gt;, but I included notes (top right or bottom left corner) about what was explained in each part.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use the arrow keys to navigate.&lt;/strong&gt; It is also quite big, so do not open this on a phone or on a data plan.&lt;/p&gt;
&lt;p&gt;If the “Open in new Tab” button opens a tab which then closes immediately, &lt;strong&gt;disable Adblock&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;From some quick testing, they seem to work in Firefox and Safari, but in class we were using an updated version of &lt;strong&gt;Chrome&lt;/strong&gt; (since we were talking about developer tools, we needed to all have the same UI), so that’s the browser I’d recommend since they were tested much more there.&lt;/p&gt;
&lt;p&gt;I’m sharing them as-is in case someone else finds them useful. &lt;strong&gt;Please do not bug me if they don’t work in your setup&lt;/strong&gt;, or if you do not find them useful or whatever**.** If they don’t tickle your fancy, move on. I cannot provide any support or fixes. If you want to help fix the issue, you can &lt;a href=&quot;https://github.com/leaverou/talks&quot;&gt;submit a pull request&lt;/a&gt;, but be warned: most of the code was written under extreme time pressure (I had to produce this 6 times as fast as I usually need to make talks), so is not my finest moment.&lt;/p&gt;
&lt;p&gt;If you want to use them to teach other people that’s fine as long as it’s a &lt;strong&gt;non-profit&lt;/strong&gt; event.&lt;/p&gt;
&lt;p&gt;[gallery columns=“2” size=“medium” ids=“2756,2757,2755,2754”]&lt;/p&gt;
</content>
  </entry><entry>
    <title>Quicker Storify export</title>
    <link href="https://lea.verou.me/2018/04/quicker-storify-export/"/>
    <updated>2018-04-27T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2770</id>
    <content xml:lang="en" type="html">&lt;p&gt;If you’ve used &lt;a href=&quot;http://storify.com/&quot;&gt;Storify&lt;/a&gt;, you probably know by now it’s closing down soon. They have an &lt;a href=&quot;https://storify.com/faq-eol&quot;&gt;FAQ&lt;/a&gt; up to help people with the transition which explains that to export your content you need to…&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Log in to Storify at &lt;a href=&quot;https://www.storify.com/&quot;&gt;www.storify.com.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mouse over the story that contains content you would like to export and select “View.”&lt;/li&gt;
&lt;li&gt;Click on the ellipses icon and select “Export.”&lt;/li&gt;
&lt;li&gt;Choose your preferred format for download.&lt;/li&gt;
&lt;li&gt;To save your content and linked assets in HTML, select - File &amp;gt; Save as &amp;gt; Web Page, Complete. To export your content to PDF, select Export to HTML &amp;gt; File &amp;gt; Print &amp;gt; Save as PDF.&lt;/li&gt;
&lt;li&gt;Repeat the process for each story whose content you would like to preserve.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;So I started doing that. I wasn’t sure if JSON or HTML would be more useful to me, so I was exporting both. It was painful. Each export required 3 page loads, and they were slow. After 5 stories, I started wondering if there’s a quicker way. I’m a programmer after all, my job is to automate things. However, I also didn’t want to spend too long on that, since I only had 40 stories, so the effort should definitely not be longer than it would have taken to manually export the remaining 35 stories.&lt;/p&gt;
&lt;p&gt;I noticed that the HTML and JSON URLs for each story could actually be recreated by using the slug of the Story URL:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://storify.com/LeaVerou/**css-variables-var-subtitle-cssconf-asia**.html&quot;&gt;https://storify.com/LeaVerou/**css-variables-var-subtitle-cssconf-asia**.html&lt;/a&gt;
&lt;a href=&quot;https://api.storify.com/v1/stories/LeaVerou/**css-variables-var-subtitle-cssconf-asia&quot;&gt;https://api.storify.com/v1/stories/LeaVerou/**css-variables-var-subtitle-cssconf-asia&lt;/a&gt;**&lt;/p&gt;
&lt;p&gt;The bold part is the only thing that changes. I tried that with a different slug and it worked just fine. Bingo! So I could write a quick console script to get all these URLs and open them in separate tabs and then all I have to do is go through each tab and hit Cmd + S to save. It’s not perfect, but it took minutes to write and saved A LOT of time.&lt;/p&gt;
&lt;p&gt;Following is the script I wrote. Go to your profile page, click “Show more” and scroll until all your stories are visible, then paste it into the console. You will probably need to do it twice: once to disable popup blocking because the browser rightfully freaks out when you try to open this many tabs from script, and once to actually open all of them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var slugs = [... new Set($$(&amp;quot;.story-tile&amp;quot;).map(e =&amp;gt; e.dataset.path))]
slugs.forEach(s =&amp;gt; { open(`https://api.storify.com/v1/stories/${s}`); open(`https://storify.com/${s}.html`) })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gets a list of all &lt;strong&gt;unique&lt;/strong&gt; (hence the &lt;code&gt;[...new Set(array)]&lt;/code&gt;) slugs and opens both the JSON and HTML export URLs in new tabs. Then you can go through each tab and save.&lt;/p&gt;
&lt;p&gt;You will notice that the browser becomes REALLY SLOW when you open this many tabs (in my case 41 stories × 2 tabs each = 82 tabs!) so you may want to do it in steps, by using array.slice(). Also, if you don’t want to save the HTML version, the whole process becomes much faster, the HTML pages took AGES to load and kept freezing the browser.&lt;/p&gt;
&lt;p&gt;Hope this helps!&lt;/p&gt;
&lt;p&gt;PS: If you’re content with your data being held hostage by a different company, you could also use &lt;a href=&quot;http://www.wakelet.com/storify&quot;&gt;this tool by Wakelet&lt;/a&gt;. I’ve done that too, but I also wanted to own my data as well.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Responsive tables, revisited</title>
    <link href="https://lea.verou.me/2018/05/responsive-tables-revisited/"/>
    <updated>2018-05-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2794</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/2018/05/responsive-tables-revisited/images/Screen-Shot-2018-05-14-at-17.54.45-copy.png&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2018/05/responsive-tables-revisited/images/Screen-Shot-2018-05-14-at-17.54.45-copy-1024x595.png&quot; alt=&quot;Screenshot showing a table with 3 rows turning into 3 sets of key-value pairs&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/responsive-data-tables/&quot;&gt;Many people have explored responsive tables&lt;/a&gt;. The usual idea is turning the table into key-value pairs so that cells become rows and there are only 2 columns total, which fit in any screen. However, this means table headers need to now be repeated for every row. The current ways to do that are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Duplicating content in CSS or via a data-* attribute, using generated content to insert it before every row.&lt;/li&gt;
&lt;li&gt;Using a definition list which naturally has duplicated &lt;code&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;s, displaying it as a table in larger screens.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few techniques that go in an entirely different direction are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hiding non-essential columns in smaller screens&lt;/li&gt;
&lt;li&gt;Showing a thumbnail of the table instead, and display the full table on click&lt;/li&gt;
&lt;li&gt;Displaying a graph in smaller screens (e.g. a pie chart)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think the key-value display is probably best because it works for any kind of table, and provides the same information. So I wondered, is there any way to create it without duplicating content either in the markup or in the CSS? After a bit of thinking, I came up with two ways, each with their own pros and cons.&lt;/p&gt;
&lt;p&gt;Both techniques are very similar: They set table elements to display: block; so that they behave like normal elements and duplicate the &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt; contents in two different ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using text-shadow and creating one shadow for each row&lt;/li&gt;
&lt;li&gt;Using the element() function to duplicate the entire thead, styles and all.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each method has its own pros and cons, but the following pros and cons apply to both:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Works with normal table markup&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cons:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;All but the first set of headers are unselectable (since neither shadows nor element()-generated images are real text). However, keep in mind that the techniques based on generated content also have this problem — and for all rows. Also, that the markup screen readers see is the same as a normal table. However, it’s still a pretty serious flaw and makes this a hack. I’m looking forward to seeing more viable solutions.&lt;/li&gt;
&lt;li&gt;Only works if none of the table cells wrap, since it depends on table cells being aligned with their headers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;using-text-shadow-to-copy-text-to-other-rows&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2018/05/responsive-tables-revisited/#using-text-shadow-to-copy-text-to-other-rows&quot;&gt;Using text-shadow to copy text to other rows&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Additional Pros:&lt;/strong&gt; Works in every browser&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Additional Cons:&lt;/strong&gt; Max Number of rows needs to be hardcoded in the CSS, since each row needs another text shadow on &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;. However, you can specify more shadows than needed, since overflow: hidden on the table prevents extra ones from showing up. Also, number of columns needs to be specified in the CSS (the &lt;code&gt;--cols&lt;/code&gt; variable).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://dabblet.com/gist/969a4aa9d53bf6893d72acd422b2e9a8&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/969a4aa9d53bf6893d72acd422b2e9a8&quot; width=&quot;100%&quot; height=&quot;500px&quot;&gt;&lt;/iframe&gt;
&lt;h3 id=&quot;using-element()-to-copy-the-entire-%3Cthead%3E-to-other-rows&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2018/05/responsive-tables-revisited/#using-element()-to-copy-the-entire-%3Cthead%3E-to-other-rows&quot;&gt;Using element() to copy the entire &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt; to other rows&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Additional Cons:&lt;/strong&gt; &lt;code&gt;element()&lt;/code&gt; is currently only supported in Firefox :(&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://dabblet.com/gist/9bce82d186095d4d9b19a469085e9cb3&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/9bce82d186095d4d9b19a469085e9cb3&quot; width=&quot;100%&quot; height=&quot;500px&quot;&gt;&lt;/iframe&gt;
</content>
  </entry><entry>
    <title>Never forget type=&quot;button&quot; on generated buttons!</title>
    <link href="https://lea.verou.me/2018/05/never-forget-typebutton-on-generated-buttons/"/>
    <updated>2018-05-19T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2801</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgflip.com/2am9er.jpg&quot; alt=&quot;&quot; /&gt; I just dealt with one of the weirdest bugs and thought you may find it amusing too.&lt;/p&gt;
&lt;p&gt;In one of my slides for my upcoming talk “Even More CSS Secrets”, I had a &lt;a href=&quot;https://mavo.io/&quot;&gt;Mavo&lt;/a&gt; app on a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, and the app included a collection to quickly create a UI to manage pairs of values for something I wanted to calculate in one of my live demos. A Mavo collection is a repeatable HTML element with affordances to add items, delete items, move items etc. Many of these affordances are implemented via &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements generated by Mavo.&lt;/p&gt;
&lt;p&gt;Normally, hitting Enter inside a text field within a collection adds a new item, as one would expect. However, I noticed that when I hit Enter inside any item, not only no item was added, but an item was being &lt;strong&gt;deleted&lt;/strong&gt;, with the usual “Item deleted [Undo]” UI and everything!&lt;/p&gt;
&lt;p&gt;At first I thought it was a bug with the part of Mavo code that adds items on Enter and deletes empty items on backspace, so I commented that out. Nope, still happening. I was already very puzzled, since I couldn’t remember any other part of the codebase that deletes items in response to keyboard events.&lt;/p&gt;
&lt;p&gt;So, I added breakpoints on the &lt;code&gt;delete(item)&lt;/code&gt; method of &lt;code&gt;Mavo.Collection&lt;/code&gt; to inspect the call stack and see how execution got there. Turned out, it got there via a normal …&lt;code&gt;click&lt;/code&gt; event on the actual delete button! What fresh hell was this? I never clicked any delete button!&lt;/p&gt;
&lt;p&gt;And then it dawned on me: &lt;strong&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element&quot;&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements with no &lt;code&gt;type&lt;/code&gt; attribute set are submit buttons by default&lt;/a&gt;!&lt;/strong&gt; Quote from spec: &lt;em&gt;The missing value default and invalid value default are the Submit Button state.&lt;/em&gt;. This makes no difference in most cases, &lt;strong&gt;UNLESS&lt;/strong&gt; you’re inside a form. The delete button of the first item had been turned into the de facto default submit button just because it was the first button in that form and it had no type!&lt;/p&gt;
&lt;p&gt;I also remembered that &lt;strong&gt;regardless of how you submit a form (e.g. by hitting Enter on a single-line text field) it also fires a click event on the default submit button&lt;/strong&gt;, because people often listen to that instead of the form’s submit event. Ironically, I was cancelling the form’s submit event in my code, but it still generated that fake click event, making it even harder to track down as no form submission was actually happening.&lt;/p&gt;
&lt;p&gt;The solution was of course to &lt;a href=&quot;https://github.com/mavoweb/mavo/commit/9c1e6fcd31a52bc10f1f08f4d1ebf47eac72ac3b&quot;&gt;go through every part of the Mavo code that generates buttons and add type=“button” to them&lt;/a&gt;. I would recommend this to everyone who is writing libraries that will operate in unfamiliar HTML code. Most of the time a type-less &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; will work just fine, but when it doesn’t, things get &lt;em&gt;really weird&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Easy Dynamic Regular Expressions with Tagged Template Literals and Proxies</title>
    <link href="https://lea.verou.me/2018/06/easy-dynamic-regular-expressions-with-tagged-template-literals-and-proxies/"/>
    <updated>2018-06-04T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2817</id>
    <content xml:lang="en" type="html">&lt;p&gt;If you use regular expressions a lot, you probably also create them from existing strings that you first need to escape in case they contain special characters that need to be matched literally, like &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt;. Usually, a helper function is defined (hopefully this will soon change as &lt;a href=&quot;https://github.com/benjamingr/RegExp.escape/&quot;&gt;RegExp.escape()&lt;/a&gt; is coming!) that basically looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var escapeRegExp = s =&amp;gt; s.replace(/[-&#92;/&#92;&#92;^$*+?.()|[&#92;]{}]/g, &amp;quot;&#92;&#92;$&amp;amp;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then regexps are created by escaping the static strings and concatenating them with the rest of the regex like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var regex = RegExp(escapeRegExp(start) + &#39;([&#92;&#92;S&#92;&#92;s]+?)&#39; + escapeRegExp(end), &amp;quot;gi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or, with ES6 template literals, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var regex = RegExp(`${escapeRegExp(start)}([&#92;&#92;S&#92;&#92;s]+?)${escapeRegExp(end)}`, &amp;quot;gi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(In case you were wondering, this regex is taken directly from the &lt;a href=&quot;https://github.com/mavoweb/mavo/blob/master/src/expression.js#L48&quot;&gt;Mavo source code&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Isn’t this horribly verbose? What if we could define a regex with just a template literal (&lt;code&gt;`${start}([&#92;&#92;S&#92;&#92;s]+?)${end}`&lt;/code&gt; for the regex above) and it just worked? Well, it turns out we can! If you haven’t seen &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates&quot;&gt;tagged template literals&lt;/a&gt; before, I suggest you click that MDN link and read up. Basically, you can prepend an ES6 template literal with a reference to a function and the function accepts the static parts of the string and the dynamic parts separately, allowing you to operate on them!&lt;/p&gt;
&lt;p&gt;So, what if we defined such a function that returns a RegExp object and escapes the dynamic parts? Let’s try to do that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var regexp = (strings, ...values) =&amp;gt; {
	return RegExp(strings[0] + values.map((v, i) =&amp;gt; escapeRegExp(v) + strings[i+1]).join(&amp;quot;&amp;quot;))
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can try it in the console:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;gt; regexp`^${&#39;/*&#39;}([&#92;&#92;S&#92;&#92;s]+?)${&#39;*/&#39;}`;
&amp;lt; /^&#92;/&#92;*([&#92;S&#92;s]+?)&#92;*&#92;//
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;won%E2%80%99t-somebody%2C-please%2C-think-of-the-flags%3F!&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2018/06/easy-dynamic-regular-expressions-with-tagged-template-literals-and-proxies/#won%E2%80%99t-somebody%2C-please%2C-think-of-the-flags%3F!&quot;&gt;Won’t somebody, please, think of the flags?!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is all fine and dandy, but how do we specify flags? Note that the original regexp had flags (“gi”). The tagged template syntax doesn’t really allow us to pass in any additional parameters. However, thanks to functions being first-class objects in JS, we can have a function that takes the flags in as parameters and returns a function that generates regexps with the right flags:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var regexp = flags =&amp;gt; {
	return (strings, ...values) =&amp;gt; {
		var pattern = strings[0] + values.map((v, i) =&amp;gt; escapeRegExp(v) + strings[i+1]).join(&amp;quot;&amp;quot;)
		return RegExp(pattern, flags);
	}
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can try it in the console:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;gt; regexp(&amp;quot;gi&amp;quot;)`^${&#39;/*&#39;}([&#92;&#92;S&#92;&#92;s]+?)${&#39;*/&#39;}`;
&amp;lt; /^&#92;/&#92;*([&#92;S&#92;s]+?)&#92;*&#92;//gi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works nice, but now even if we don’t want any flags, we can’t use the nice simple syntax we had earlier, we need to include a pair of empty parens:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;gt; regexp()`^${&#39;/*&#39;}([&#92;&#92;S&#92;&#92;s]+?)${&#39;*/&#39;}`;
&amp;lt; /^&#92;/&#92;*([&#92;S&#92;s]+?)&#92;*&#92;//
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can we have our cake and eat it too? Can we have the short parenthesis-less syntax when we have no flags, and still be able to specify flags? Of course! We can check the arguments we have and either return a function, or call the function. If our function is used as a tag, the first argument will be an array (&lt;a href=&quot;http://lea.verou.me/2018/06/easy-dynamic-regular-expressions-with-tagged-template-literals-and-proxies/#comment-3930513790&quot;&gt;thanks Roman!&lt;/a&gt;). If we’re expecting it to return a function, the first argument would be a string: the flags. So, let’s try this approach!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var regexp = (...args) =&amp;gt; {
	var ret = (flags, strings, ...values) =&amp;gt; {
		var pattern = strings[0] + values.map((v, i) =&amp;gt; escapeRegExp(v) + strings[i+1]).join(&amp;quot;&amp;quot;);
		return RegExp(pattern, flags);
	};

	if (Array.isArray(args[0])) {
		// Used as a template tag
		return ret(&amp;quot;&amp;quot;, ...args);
	}

	return ret.bind(undefined, args[0]);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can try it in the console and verify that both syntaxes work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;gt; regexp(&amp;quot;gi&amp;quot;)`^${&#39;/*&#39;}([&#92;&#92;S&#92;&#92;s]+?)${&#39;*/&#39;}`;
&amp;lt; /^&#92;/&#92;*([&#92;S&#92;s]+?)&#92;*&#92;//gi
regexp`^${&#39;/*&#39;}([&#92;&#92;S&#92;&#92;s]+?)${&#39;*/&#39;}`;
&amp;lt; /^&#92;/&#92;*([&#92;S&#92;s]+?)&#92;*&#92;//
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;even-nicer-syntax%2C-with-proxies!&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2018/06/easy-dynamic-regular-expressions-with-tagged-template-literals-and-proxies/#even-nicer-syntax%2C-with-proxies!&quot;&gt;Even nicer syntax, with proxies!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Is there a better way? If this is not super critical for performance, we could use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;proxies&lt;/a&gt; to return the right function with a template tag like &lt;code&gt;regexp.gi&lt;/code&gt;, no parentheses or quotes needed and the code is actually shorter too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var _regexp = (flags, strings, ...values) =&amp;gt; {
	var pattern = strings[0] + values.map((v, i) =&amp;gt; escapeRegExp(v) + strings[i+1]).join(&amp;quot;&amp;quot;);
	return RegExp(pattern, flags);
};
var regexp = new Proxy(_regexp.bind(undefined, &amp;quot;&amp;quot;), {
	get: (t, property) =&amp;gt; _regexp.bind(undefined, property)
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can try it in the console, both with and without flags!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;gt; regexp.gi`^${&#39;/*&#39;}([&#92;&#92;S&#92;&#92;s]+?)${&#39;*/&#39;}`;
&amp;lt; /^&#92;/&#92;*([&#92;S&#92;s]+?)&#92;*&#92;//gi
&amp;gt; regexp`^${&#39;/*&#39;}([&#92;&#92;S&#92;&#92;s]+?)${&#39;*/&#39;}`;
&amp;lt; /^&#92;/&#92;*([&#92;S&#92;s]+?)&#92;*&#92;//
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s some beauty right there! ?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PS: If you liked this, take a look at &lt;a href=&quot;http://2ality.com/2017/07/re-template-tag.html&quot;&gt;this mini-library&lt;/a&gt; by Dr. Axel Rauschmayer that uses a similar idea and turns it into a library that does more than just escaping strings (different syntax for flags though, they become part of the template string, like in PHP)&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Refresh CSS Bookmarklet v2</title>
    <link href="https://lea.verou.me/2018/09/refresh-css-bookmarklet-v2/"/>
    <updated>2018-09-18T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2838</id>
    <content xml:lang="en" type="html">&lt;p&gt;Almost 11 years ago, &lt;a href=&quot;https://www.paulirish.com/2008/how-to-iterate-quickly-when-debugging-css/&quot;&gt;Paul Irish posted this brilliant bookmarklet&lt;/a&gt; to refresh all stylesheets on the current page. Despite the amount of tools, plugins, servers to live reload that have been released over the years, I’ve always kept coming back to it. It’s incredibly elegant in its simplicity. It works everywhere: locally or remotely, on any domain and protocol. No need to set up anything, no need to alter my process in any way, no need to use a specific local server or tool. It quietly just accepts your preferences and workflow instead of trying to change them. Sure, it doesn’t automatically detect changes and reload, but in most cases, I don’t want it to.&lt;/p&gt;
&lt;p&gt;I’ve been using this almost daily for a decade and there’s always been one thing that bothered me: It doesn’t work with iframes. If the stylesheet you’re editing is inside an iframe, tough luck. If you can open the frame in a new tab, that works, but often that’s nontrivial (e.g. the frame is dynamically generated). After dealing with this issue today once more, I thought “this is just a few lines of JS, why not fix it?”.&lt;/p&gt;
&lt;p&gt;The first step was to get Paul’s code in a readable format, since the bookmarklet is heavily minified:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function() {
	var links = document.getElementsByTagName(&#39;link&#39;);
	for (var i = 0; i &amp;lt; links.length; i++) {
		var link = links[i];
		if (link.rel.toLowerCase().match(/stylesheet/) &amp;amp;&amp;amp; link.href) {
			var href = link.href.replace(/(&amp;amp;|%5C?)forceReload=&#92;d+/, &#39;&#39;);
			link.href = href + (href.match(/&#92;?/) ? &#39;&amp;amp;&#39; : &#39;?&#39;) + &#39;forceReload=&#39; + (new Date().valueOf())
		}
	}
})()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once I did that, it became obvious to me that this could be shortened a lot; the last 10 years have been wonderful for JS evolution!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(()=&amp;gt;{
	for (let link of Array.from(document.querySelectorAll(&amp;quot;link[rel=stylesheet][href]&amp;quot;))) {
		var href = new URL(link.href, location);
		href.searchParams.set(&amp;quot;forceReload&amp;quot;, Date.now());
		link.href = href;
	}
})()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sure, this reduces browser support a bit (most notably it excludes IE11), but since this is a local development tool, that’s not such a big problem.&lt;/p&gt;
&lt;p&gt;Now, let’s extend this to support iframes as well:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
	let $$ = (selector, root = document) =&amp;gt; Array.from(root.querySelectorAll(selector));

	let refresh = (document) =&amp;gt; {
		for (let link of $$(&amp;quot;link[rel=stylesheet][href]&amp;quot;, document)) {
			let href = new URL(link.href);
			href.searchParams.set(&amp;quot;forceReload&amp;quot;, Date.now());
			link.href = href;
		}

		for (let iframe of $$(&amp;quot;iframe&amp;quot;, document)) {
			iframe.contentDocument &amp;amp;&amp;amp; refresh(iframe.contentDocument);
		}
	}

	refresh();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it! Do keep in mind that this will not work with cross-origin iframes, but then again, you probably don’t expect it to in that case.&lt;/p&gt;
&lt;p&gt;Now all we need to do to turn it into a bookmarklet is to prepend it with &lt;code&gt;javascript:&lt;/code&gt; and minify the code. Here you go:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;javascript:{let e=(e,t=document)=&gt;Array.from(t.querySelectorAll(e)),t=r=&gt;{for(let t of e(&#39;link[rel=stylesheet][href]&#39;,r)){let e=new URL(t.href);e.searchParams.set(&#39;forceReload&#39;,Date.now()),t.href=e}for(let o of e(&#39;iframe&#39;,r))o.contentDocument&amp;&amp;t(o.contentDocument)};t()}&quot;&gt;🔄 CSS v2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hope this is useful to someone else as well :) Any improvements are always welcome!&lt;/p&gt;
&lt;h4 id=&quot;credits&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2018/09/refresh-css-bookmarklet-v2/#credits&quot;&gt;Credits&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Paul Irish, for the original bookmarklet&lt;/li&gt;
&lt;li&gt;Maurício Kishi, for making the iframe traversal recursive (&lt;a href=&quot;http://lea.verou.me/2018/09/refresh-css-bookmarklet-v2/#comment-4102700684&quot;&gt;comment&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry><entry>
    <title>ReferenceError: x is not defined?</title>
    <link href="https://lea.verou.me/2018/12/referenceerror-x-is-not-defined/"/>
    <updated>2018-12-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2863</id>
    <content xml:lang="en" type="html">&lt;p&gt;Today for a bit of code I was writing, I needed to be able to distinguish “x is not defined” &lt;code&gt;ReferenceError&lt;/code&gt;s from any other error within a &lt;code&gt;try...catch&lt;/code&gt; block and handle them differently.&lt;/p&gt;
&lt;p&gt;Now I know what you’re thinking. Trying to figure out exactly what kind of error you have programmatically is a well-known fool’s errand. If you express a desire to engage in such a risky endeavor, any JS veteran in sight will shake their head in remembrance of their early days, but have the wisdom to refrain from trying to convince you otherwise; they know that failing will teach you what it taught them when they were young and foolish enough to attempt such a thing.&lt;/p&gt;
&lt;p&gt;Despite writing JS for 13 years, today I was feeling adventurous. “But what if, just this once, I could get it to work? It’s a pretty standard error message! What if I tested in so many browsers that I would be confident I’ve covered all cases?”&lt;/p&gt;
&lt;p&gt;I made &lt;a href=&quot;https://codepen.io/leaverou/pen/aPdGeN?editors=0110#0&quot;&gt;a simple page on my server that just prints out the error message&lt;/a&gt; written in a way that would maximize older browser coverage. Armed with that, I started visiting every browser in my &lt;a href=&quot;https://browserstack.com/&quot;&gt;BrowserStack&lt;/a&gt; account. Here are my findings for anyone interested:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chrome (all versions, including mobile): &lt;code&gt;x is not defined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Firefox (all versions, including mobile): &lt;code&gt;x is not defined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Safari 4-12 : &lt;code&gt;Can&#39;t find variable: x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edge (16 - 18): &lt;code&gt;&#39;x&#39; is not defined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edge 15: &lt;code&gt;&#39;x&#39; is undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;IE6-11 and Windows Phone IE: &lt;code&gt;&#39;x&#39; is undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;UC Browser (all versions): &lt;code&gt;x is not defined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Samsung browser (all versions): &lt;code&gt;x is not defined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Opera Mini and Pre-Chromium Opera: &lt;code&gt;Undefined variable: x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if you, dear reader, are wise enough to never try and detect this error, I thought you may find the variety (or lack thereof) above interesting.&lt;/p&gt;
&lt;p&gt;I also did a little bit of testing with a different UI language (I picked Greek), but it didn’t seem to localize the error messages. If you’re using a different UI language, please open the page above and if the message is not in English, let me know!&lt;/p&gt;
&lt;p&gt;In the end, I decided to go ahead with it, and time will tell if it was foolish to do so. For anyone wishing to also dabble in such dangerous waters, this was my checking code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (e instanceof ReferenceError
    &amp;amp;&amp;amp; /is (not |un)defined$|^(Can&#39;t find|Undefined) variable/.test(e.message)) {
    // do stuff
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Found any cases I missed? Or perhaps you found a different &lt;code&gt;ReferenceError&lt;/code&gt; that would erroneously match the regex above? Let me know in the comments!&lt;/p&gt;
&lt;p&gt;One thing that’s important to note is that even if the code above is bulletproof for today’s browser landscape, &lt;strong&gt;the more developers that do things like this, the harder it is for browser makers to improve these error messages&lt;/strong&gt;. However, until there’s a better way to do this, pointing fingers at developers for wanting to do perfectly reasonable things, is not the solution. &lt;strong&gt;This is why HTTP has status codes&lt;/strong&gt;, so we don’t have to string match on the text. Imagine having to string match “Not Found” to figure out if a request was found or not! Similarly, many other technologies have error codes, so that different types of errors can be distinguished without resulting to flimsy string matching. I’m hoping that one day JS will also have a better way to distinguish errors more precisely than the general error categories of today, and we’ll look back to posts like this with a nostalgic smile, being so glad we don’t have to do crap like this ever again.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Utility: Convert SVG path to all-relative or all-absolute commands</title>
    <link href="https://lea.verou.me/2019/05/utility-convert-svg-path-to-all-relative-or-all-absolute-commands/"/>
    <updated>2019-05-06T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2895</id>
    <content xml:lang="en" type="html">&lt;p&gt;I like hand-editing my SVGs. Often I will create an initial version in Illustrator, and then export and continue with hand editing. Not only is it a bit of a meditative experience and it satisfies my obsessive-compulsive tendencies to clean up the code, it has actual practical benefits when you need to make certain changes or introduce animation. Some things are easier to do in a GUI, and others are easier to do in code, and I like having the flexibility to pick which one fits my use case best.&lt;/p&gt;
&lt;p&gt;However, there was always a thing that was a PITA: modifying paths. Usually if I need anything more complicated than just moving them, I’d do it in Illustrator, but even moving them can be painful if they are not all relative (and no, I don’t like introducing pointless transforms for things that should really be in the &lt;code&gt;d&lt;/code&gt; attribute).&lt;/p&gt;
&lt;p&gt;For example, this was today’s result of trying to move an exported “a” glyph from &lt;a href=&quot;https://fonts.google.com/specimen/Raleway&quot;&gt;Raleway Bold&lt;/a&gt; by modifying its first &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#MoveTo_path_commands&quot;&gt;M&lt;/a&gt; command:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2019/05/utility-convert-svg-path-to-all-relative-or-all-absolute-commands/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Trying to move a path by changing its first M command when not all of its commands are relative.&lt;/p&gt;
&lt;p&gt;This happened because even though &lt;em&gt;most&lt;/em&gt; commands were exported as relative, several were not and I had not noticed. I have no idea why some commands were exported as absolute, it seems kind of random.&lt;/p&gt;
&lt;p&gt;When all commands are relative, moving a path is as simple as manipulating its initial &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#MoveTo_path_commands&quot;&gt;M command&lt;/a&gt; and the rest just adapts, because &lt;strong&gt;that’s the whole point of relative commands&lt;/strong&gt;. Same with manipulating every other part of the path, the rest of it just adapts. It’s beautiful. I honestly have no idea why anybody would favor absolute commands. And yet, googling “convert SVG path to relative” yields &lt;a href=&quot;https://stackoverflow.com/questions/14179333/convert-svg-path-to-relative-commands&quot;&gt;one result&lt;/a&gt;, whereas there are plenty of results about converting paths to absolute. No idea why that’s even desirable, ever (?).&lt;/p&gt;
&lt;p&gt;I remembered I had come across that result before. Thankfully, there’s also a &lt;a href=&quot;https://jsfiddle.net/MC53K/&quot;&gt;fiddle&lt;/a&gt; to go with it, which I had used in the past to convert my path. I love it, it uses this library called &lt;a href=&quot;http://snapsvg.io/&quot;&gt;Snap.svg&lt;/a&gt; which supports converting paths to relative as a &lt;em&gt;just-add-water&lt;/em&gt; &lt;a href=&quot;http://snapsvg.io/docs/#Snap.path.toRelative&quot;&gt;utility method&lt;/a&gt;. However, that fiddle is a quick demo to answer a StackOverflow question, so the UI is not super pleasant to use (there is no UI: you just manipulate the path in the SVG and wait for the fiddle to run). This time around, I needed to convert multiple paths, so I needed a more efficient UI.&lt;/p&gt;
&lt;p&gt;So I created &lt;a href=&quot;https://codepen.io/leaverou/full/RmwzKv&quot;&gt;this demo&lt;/a&gt; which is also based on Snap.svg, but has a slightly more efficient UI. You just paste your path in a textarea and it both displays it and instantly converts it to all-relative and all-absolute paths (also using Snap.svg). It also displays both your original path and the two converted ones, so you can make sure they still look the same. It even follows a pending-delete pattern so you can just focus on the output textarea and hit Cmd-C in one fell swoop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2019/05/utility-convert-svg-path-to-all-relative-or-all-absolute-commands/images/image-1-1024x238.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I wasn’t sure about posting this or just tweeting it (it literally took less than 30 minutes — including this blog post — and I tend to only post small things like that on &lt;a href=&quot;https://twitter.com/leaverou&quot;&gt;my twitter&lt;/a&gt;), but I thought it might be useful to others googling the same thing, so I may as well post it here for posterity. Enjoy!&lt;/p&gt;
&lt;iframe src=&quot;https://codepen.io/leaverou/full/RmwzKv&quot; width=&quot;100%&quot; height=&quot;600&quot; style=&quot;border: none&quot;&gt;&lt;/iframe&gt;
</content>
  </entry><entry>
    <title>Issue closing stats for any repo</title>
    <link href="https://lea.verou.me/2019/12/issue-closing-stats-for-any-repo/"/>
    <updated>2019-12-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2902</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;tl;dr:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;If you just want to quickly get stats for a repo, you can find the app&lt;/em&gt; &lt;a href=&quot;https://projects.verou.me/issue-closing/&quot;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. The rest of this post explains how it’s built with Mavo HTML, CSS, and 0 lines of JS.&lt;/em&gt; Or, if you’d prefer, you can just View Source — it’s all there!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2019/12/issue-closing-stats-for-any-repo/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The finished app we’re going to make, find it at &lt;a href=&quot;https://projects.verou.me/issue-closing&quot;&gt;https://projects.verou.me/issue-closing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One of the cool things about &lt;a href=&quot;https://mavo.io/&quot;&gt;Mavo&lt;/a&gt; is how it enables one to quickly build apps that utilize the Github API. At some point I wanted to compute stats about how quickly (or rather, slowly…) Github issues are closed in the &lt;a href=&quot;https://github.com/mavoweb/mavo&quot;&gt;Mavo repo&lt;/a&gt;. And what better way to build this than a Mavo app? It was fairly easy to build a prototype for that.&lt;/p&gt;
&lt;h2 id=&quot;displaying-a-list-of-the-last-100-closed-issues-and-the-time-it-took-to-close-them&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2019/12/issue-closing-stats-for-any-repo/#displaying-a-list-of-the-last-100-closed-issues-and-the-time-it-took-to-close-them&quot;&gt;Displaying a list of the last 100 closed issues and the time it took to close them&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To render the last 100 closed issues in the Mavo app, I first looked up &lt;a href=&quot;https://developer.github.com/v3/issues/#list-issues-for-a-repository&quot;&gt;the appropriate API call in Github’s API documentation&lt;/a&gt;, then used it in the &lt;code&gt;mv-source&lt;/code&gt; attribute on the &lt;em&gt;Mavo root&lt;/em&gt;, i.e. the element with &lt;code&gt;mv-app&lt;/code&gt; that encompasses everything in my app:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div mv-app=&amp;quot;issueClosing&amp;quot;
     mv-source=&amp;quot;https://api.github.com/repos/mavoweb/mavo/issues?state=closed&amp;amp;sort=updated&amp;amp;per_page=100&amp;quot;
     mv-mode=&amp;quot;read&amp;quot;&amp;gt;
	&amp;lt;!-- app here --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, I displayed a list of these issues with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div mv-multiple property=&amp;quot;issue&amp;quot;&amp;gt;
	&amp;lt;a class=&amp;quot;issue-number&amp;quot; href=&amp;quot;https://github.com/mavoweb/mavo/issues/[number]&amp;quot; title=&amp;quot;[title]&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;#[number]&amp;lt;/a&amp;gt;
	took [closed_at - created_at] ms
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;leaverou&quot; data-slug-hash=&quot;qBEaoPL&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Step 1 - Issue Closing App Tutorial&quot;&gt;&lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/leaverou/pen/qBEaoPL&quot;&gt;Step 1 - Issue Closing App Tutorial&lt;/a&gt; by Lea Verou (&lt;a href=&quot;https://codepen.io/leaverou&quot;&gt;@leaverou&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;This would work, but the way it displays results is not very user friendly (e.g. &lt;em&gt;“#542 took 149627000 ms”&lt;/em&gt;). We need to display the result in a more readable way.&lt;/p&gt;
&lt;p&gt;We can use the &lt;a href=&quot;https://mavo.io/docs/functions/#duration&quot;&gt;&lt;code&gt;duration()&lt;/code&gt;&lt;/a&gt; function to display a readable duration such as “1 day”:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div mv-multiple property=&amp;quot;issue&amp;quot;&amp;gt;
	&amp;lt;a class=&amp;quot;issue-number&amp;quot; href=&amp;quot;https://github.com/mavoweb/mavo/issues/[number]&amp;quot; title=&amp;quot;[title]&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;#[number]&amp;lt;/a&amp;gt;
	took [duration(closed_at - created_at)]
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;leaverou&quot; data-slug-hash=&quot;bGbBQwg&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Step 2 - Issue Closing App Tutorial&quot;&gt;&lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/leaverou/pen/bGbBQwg&quot;&gt;Step 2 - Issue Closing App Tutorial&lt;/a&gt; by Lea Verou (&lt;a href=&quot;https://codepen.io/leaverou&quot;&gt;@leaverou&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;displaying-aggregate-statistics&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2019/12/issue-closing-stats-for-any-repo/#displaying-aggregate-statistics&quot;&gt;Displaying aggregate statistics&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;However, a list of issues is not very easy to process. What’s the overall picture? Does this repo close issues fast or not? Time for some statistics! We want to calculate average, median, minimum and maximum issue closing time. To calculate these statistics, we need to use the times we have displayed in the previous step.&lt;/p&gt;
&lt;p&gt;First, we need to give our calculation a name, so we can refer to its value in expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span property=&amp;quot;timeToClose&amp;quot;&amp;gt;[duration(closed_at - created_at)]&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, as it currently stands, the value of this property is text (e.g. “1 day”, “2 months” etc). We cannot compute averages and medians on text! We need the property value to be a number. We can hide the actual raw value in an attribute and use the nicely formatted value as the visible content of the element, like so (we use the &lt;code&gt;content&lt;/code&gt; attribute here but you can use any, e.g. a &lt;code&gt;data-*&lt;/code&gt; attribute would work just as well):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span property=&amp;quot;timeToClose&amp;quot; mv-attribute=&amp;quot;content&amp;quot; content=&amp;quot;[closed_at - created_at]&amp;quot;&amp;gt;[duration(timeToClose)]&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: There is&lt;/em&gt; &lt;a href=&quot;https://github.com/mavoweb/mavo/issues/444&quot;&gt;&lt;em&gt;a data formatting feature in the works&lt;/em&gt;&lt;/a&gt; &lt;em&gt;which would simplify this kind of thing by allowing you to separate the raw value and its presentation without having to use separate attributes for them.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We can also add a class to color it red, green, or black depending on whether the time is longer than a month, shorter than a day, or in-between respectively:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span property=&amp;quot;timeToClose&amp;quot; mv-attribute=&amp;quot;content&amp;quot; content=&amp;quot;[closed_at - created_at]&amp;quot; class=&amp;quot;[if(timeToClose &amp;gt; month(), &#39;long&#39;, if (timeToClose &amp;lt; day(), &#39;short&#39;))]&amp;quot;&amp;gt;[duration(timeToClose)]&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, on to calculate our statistics! We take advantage of the fact that &lt;code&gt;timeToClose&lt;/code&gt; outside the &lt;code&gt;issue&lt;/code&gt; collection gives us &lt;strong&gt;all&lt;/strong&gt; the times, so we can compute aggregates on them. Therefore, the stats we want to calculate are simply &lt;code&gt;average(timeToClose)&lt;/code&gt;, &lt;code&gt;median(timeToClose)&lt;/code&gt;, &lt;code&gt;min(timeToclose)&lt;/code&gt;, and &lt;code&gt;max(timeToClose)&lt;/code&gt;. We put all these in a definition list:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;dl&amp;gt;
	&amp;lt;dt&amp;gt;Median&amp;lt;/dt&amp;gt;
	&amp;lt;dd&amp;gt;[duration(median(timeToClose))]&amp;lt;/dd&amp;gt;
	&amp;lt;dt&amp;gt;Average&amp;lt;/dt&amp;gt;
	&amp;lt;dd&amp;gt;[duration(average(timeToClose))]&amp;lt;/dd&amp;gt;
	&amp;lt;dt&amp;gt;Slowest&amp;lt;/dt&amp;gt;
	&amp;lt;dd&amp;gt;[duration(max(timeToClose))]&amp;lt;/dd&amp;gt;
	&amp;lt;dt&amp;gt;Fastest&amp;lt;/dt&amp;gt;
	&amp;lt;dd&amp;gt;[duration(min(timeToClose))]&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;leaverou&quot; data-slug-hash=&quot;jONVQrw&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Step 3 - Issue Closing App Tutorial&quot;&gt;&lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/leaverou/pen/jONVQrw/&quot;&gt;Step 3 - Issue Closing App Tutorial&lt;/a&gt; by Lea Verou (&lt;a href=&quot;https://codepen.io/leaverou&quot;&gt;@leaverou&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;making-repo-a-variable&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2019/12/issue-closing-stats-for-any-repo/#making-repo-a-variable&quot;&gt;Making repo a variable&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that all the functionality of my app was in place, I realized this could be useful for more repos as well. Why not make the repo a property that can be changed? So I added an input for specifying the repo: &lt;code&gt;&amp;lt;input property=&amp;quot;repo&amp;quot; mv-default=&amp;quot;mavoweb/mavo&amp;quot;&amp;gt;&lt;/code&gt; and then replaced &lt;code&gt;mavoweb/mavo&lt;/code&gt; with &lt;code&gt;[repo]&lt;/code&gt; everywhere else, i.e. &lt;code&gt;mv-source&lt;/code&gt; became &lt;code&gt;https://api.github.com/repos/[repo]/issues?state=closed&amp;amp;sort=updated&amp;amp;per_page=100&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;avoid-reload-on-every-keystroke&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2019/12/issue-closing-stats-for-any-repo/#avoid-reload-on-every-keystroke&quot;&gt;Avoid reload on every keystroke&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This worked, but since Mavo properties are reactive, it kept trying to reload data with every single keystroke, which was annoying and wasteful. Therefore, I needed to do a bit more work so that there is a definite &lt;em&gt;action&lt;/em&gt; that submits the change. Enter &lt;a href=&quot;https://mavo.io/docs/actions&quot;&gt;Mavo Actions&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I created two properties: &lt;code&gt;repo&lt;/code&gt; for the actual repo and &lt;code&gt;repoInput&lt;/code&gt; for the input. &lt;code&gt;repoInput&lt;/code&gt; still changes on every keystroke, but it’s &lt;code&gt;repo&lt;/code&gt; that is actually being used in the app. I wrapped the input with a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; and added an action on the form that does this (&lt;code&gt;mv-action=&amp;quot;set(repo, repoInput)&amp;quot;&lt;/code&gt;). I also added a submit button. Since Mavo actions on forms are triggered when the form is submitted, it doesn’t matter if I press Enter on the input, or click the Submit button, both work.&lt;/p&gt;
&lt;h2 id=&quot;setting-the-repo-via-a-url-parameter&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2019/12/issue-closing-stats-for-any-repo/#setting-the-repo-via-a-url-parameter&quot;&gt;Setting the repo via a URL parameter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Eventually I also wanted to be able to set the repo from the URL, so I also added a hidden &lt;code&gt;repoDefault&lt;/code&gt; property: &lt;code&gt;&amp;lt;meta property=&amp;quot;repoDefault&amp;quot; content=&amp;quot;[url(&#39;repo&#39;) or &#39;mavoweb/mavo&#39;]&amp;quot;&amp;gt;&lt;/code&gt;, and then changed the hardcoded &lt;code&gt;mv-default=&amp;quot;mavoweb/mavo&amp;quot;&lt;/code&gt; to &lt;code&gt;mv-default=&amp;quot;[repoDefault]&amp;quot;&lt;/code&gt; on both the &lt;code&gt;repo&lt;/code&gt; and the &lt;code&gt;repoInput&lt;/code&gt; properties. That way one can link to stats for a specific repo, e.g. &lt;a href=&quot;https://projects.verou.me/issue-closing/?repo=prismjs/prism&quot;&gt;https://projects.verou.me/issue-closing/?repo=prismjs/prism&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Why a &lt;code&gt;repoDefault&lt;/code&gt; property and not just &lt;code&gt;mv-default=&amp;quot;[url(&#39;repo&#39;) or &#39;mavoweb/mavo&#39;]&lt;/code&gt;? Just keeping things &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;DRY&lt;/a&gt; and avoiding having to repeat the same expression twice.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;leaverou&quot; data-slug-hash=&quot;bGbBGXM&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Step 5 - Issue Closing App Tutorial&quot;&gt;&lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/leaverou/pen/bGbBGXM/&quot;&gt;Step 5 - Issue Closing App Tutorial&lt;/a&gt; by Lea Verou (&lt;a href=&quot;https://codepen.io/leaverou&quot;&gt;@leaverou&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;filtering-by-label&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2019/12/issue-closing-stats-for-any-repo/#filtering-by-label&quot;&gt;Filtering by label&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At some point I wondered: What would the issue closing times be if we only counted bugs? What if we only counted enhancements? Surely these would be different: When looking at issue closing times for a repo, one primarily cares about how fast bugs are fixed, not how quickly every random feature suggestion is implemented. Wouldn’t it be cool to also have a label filter?&lt;/p&gt;
&lt;p&gt;For that, I added a series of radio buttons:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;Show:
&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; property=&amp;quot;labels&amp;quot; name=&amp;quot;labels&amp;quot; checked value=&amp;quot;&amp;quot;&amp;gt; All&amp;lt;/label&amp;gt;
&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;labels&amp;quot; value=&amp;quot;bug&amp;quot;&amp;gt; Bugs only&amp;lt;/label&amp;gt;
&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;labels&amp;quot; value=&amp;quot;enhancement&amp;quot;&amp;gt; Enhancements only&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, I modified &lt;code&gt;mv-source&lt;/code&gt; to also use this value in its API call: &lt;code&gt;mv-source=&amp;quot;https://api.github.com/repos/[repo]/issues?state=closed&amp;amp;sort=updated&amp;amp;labels=[labels]&amp;amp;per_page=100&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that when turning radio buttons into a Mavo property you only use the &lt;code&gt;property&lt;/code&gt; attribute on the first one. This is important because Mavo has special handling when you use the &lt;code&gt;property&lt;/code&gt; attribute with the same name multiple times in the same group, which we don’t want here. You can add the &lt;code&gt;property&lt;/code&gt; attribute on any of the radio buttons, it doesn’t have to be the first. Just make sure it’s only one of them.&lt;/p&gt;
&lt;p&gt;Then I became greedy: Why not also allow filtering by custom labels too? So I added another radio with an input:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;Show:
&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; property=&amp;quot;labels&amp;quot; name=&amp;quot;labels&amp;quot; checked value=&amp;quot;&amp;quot;&amp;gt; All&amp;lt;/label&amp;gt;
&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;labels&amp;quot; value=&amp;quot;bug&amp;quot;&amp;gt; Bugs only&amp;lt;/label&amp;gt;
&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;labels&amp;quot; value=&amp;quot;enhancement&amp;quot;&amp;gt; Enhancements only&amp;lt;/label&amp;gt;
&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;labels&amp;quot; value=&amp;quot;[customLabel]&amp;quot;&amp;gt; Label &amp;lt;input property=&amp;quot;customLabel&amp;quot;&amp;gt;&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that since this is a text field, when the last value is selected, we’d have the same problem as we did with the repo input: Every keystroke would fire a new request. We can solve this in the same way as we solved it for the &lt;code&gt;repo&lt;/code&gt; property, by having an intermediate property and only setting &lt;code&gt;labels&lt;/code&gt; when the form is actually submitted:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;Show:
&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; property=&amp;quot;labelFilter&amp;quot; name=&amp;quot;labels&amp;quot; checked value=&amp;quot;&amp;quot;&amp;gt; All&amp;lt;/label&amp;gt;
&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;labels&amp;quot; value=&amp;quot;bug&amp;quot;&amp;gt; Bugs only&amp;lt;/label&amp;gt;
&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;labels&amp;quot; value=&amp;quot;enhancement&amp;quot;&amp;gt; Enhancements only&amp;lt;/label&amp;gt;
&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;labels&amp;quot; value=&amp;quot;[customLabel]&amp;quot;&amp;gt; Label &amp;lt;input property=&amp;quot;customLabel&amp;quot;&amp;gt;&amp;lt;/label&amp;gt;
&amp;lt;meta property=&amp;quot;labels&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;adding-label-autocomplete&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2019/12/issue-closing-stats-for-any-repo/#adding-label-autocomplete&quot;&gt;Adding label autocomplete&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since we now allow filtering by a custom label, wouldn’t it be cool to allow autocomplete too? HTML allows us to offer autocomplete in our forms via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist&quot;&gt;&lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;&lt;/a&gt; and we can use Mavo to populate the contents!&lt;/p&gt;
&lt;p&gt;First, we add a &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; and link it with our custom label input, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;labels&amp;quot; value=&amp;quot;[customLabel]&amp;quot;&amp;gt; Label &amp;lt;input property=&amp;quot;customLabel&amp;quot; list=&amp;quot;label-suggestions&amp;quot;&amp;gt;&amp;lt;/label&amp;gt;
&amp;lt;datalist id=&amp;quot;label-suggestions&amp;quot;&amp;gt;
&amp;lt;/datalist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Currently, our suggestion list is empty. How do we populate it with the labels that have actually been used in this repo? Looking at the &lt;a href=&quot;https://developer.github.com/v3/issues/#response-1&quot;&gt;API documentation&lt;/a&gt;, we see that each returned issue has a &lt;code&gt;labels&lt;/code&gt; field with its labels as an object, and each of these objects has a &lt;code&gt;name&lt;/code&gt; field with the textual label. This means that if we use &lt;code&gt;issue.labels.name&lt;/code&gt; in Mavo outside of the issues collection, we get a list with &lt;strong&gt;all&lt;/strong&gt; of these values, which we can then use to populate our &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; by passing it on to &lt;a href=&quot;https://mavo.io/docs/expressions/#mv-value&quot;&gt;&lt;code&gt;mv-value&lt;/code&gt;&lt;/a&gt; which allows us to create dynamic collections:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;labels&amp;quot; value=&amp;quot;[customLabel]&amp;quot;&amp;gt; Label &amp;lt;input property=&amp;quot;customLabel&amp;quot; list=&amp;quot;label-suggestions&amp;quot;&amp;gt;&amp;lt;/label&amp;gt;
&amp;lt;datalist id=&amp;quot;label-suggestions&amp;quot;&amp;gt;
	&amp;lt;option mv-multiple mv-value=&amp;quot;unique(issue.labels.name)&amp;quot;&amp;gt;&amp;lt;/option&amp;gt;
&amp;lt;/datalist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we also used &lt;a href=&quot;https://mavo.io/docs/functions/#unique&quot;&gt;&lt;code&gt;unique()&lt;/code&gt;&lt;/a&gt; to eliminate duplicates, since otherwise each label would appear as many times as it is used.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;leaverou&quot; data-slug-hash=&quot;QWLGWXV&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Issue Closing App - Tutorial Step 6&quot;&gt;&lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/leaverou/pen/QWLGWXV/&quot;&gt;Issue Closing App - Tutorial Step 6&lt;/a&gt; by Lea Verou (&lt;a href=&quot;https://codepen.io/leaverou&quot;&gt;@leaverou&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;adding-a-visual-summary-graphic&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2019/12/issue-closing-stats-for-any-repo/#adding-a-visual-summary-graphic&quot;&gt;Adding a visual summary graphic&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we got the functionality down, we can be a little playful and add some visual flourish. How about a bar chart that summarizes the proportion of long vs short vs normal closing times? We start by setting the CSS variables we are going to need for our graphic, i.e. the number of issues in each category:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;summary style=&amp;quot;--short: [count(timeToClose &amp;lt; day())]; --long: [count(timeToClose &amp;gt; month())]; --total: [count(issue)];&amp;quot;&amp;gt;
	Based on [count(issue)] most recently updated issues
&amp;lt;/summary&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we draw our graphic:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;summary::before {
	content: &amp;quot;&amp;quot;;
	position: fixed;
	bottom: 0;
	left: 0;
	right: 0;
	z-index: 1;
	height: 5px;
	background: linear-gradient(to right, var(--short-color) calc(var(--short, 0) / var(--total) * 100%), hsl(220, 10%, 75%) 0, hsl(220, 10%, 75%) calc(100% - var(--long, 0) / var(--total) * 100%), var(--long-color) 0) bottom / auto 100% no-repeat border-box;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, wouldn’t it be cool to also show a small pie chart next to the heading, if conic gradients are supported so we can draw it? The color stops would be the same, so we define a &lt;code&gt;--summary-stops&lt;/code&gt; variable on &lt;code&gt;summary&lt;/code&gt;, so we can reuse them across both gradients:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;summary {
	--summary-stops: var(--short-color) calc(var(--short, 0) / var(--total) * 100%), hsl(220, 10%, 75%) 0, hsl(220, 10%, 75%) calc(100% - var(--long, 0) / var(--total) * 100%), var(--long-color) 0;
}

	summary::before {
		content: &amp;quot;&amp;quot;;
		position: fixed;
		bottom: 0;
		left: 0;
		right: 0;
		z-index: 1;
		height: 5px;
		background: linear-gradient(to right, var(--summary-stops)) bottom / auto 100% no-repeat border-box;
	}

	@supports (background: conic-gradient(red, red)) {
		summary::after {
			content: &amp;quot;&amp;quot;;
			display: inline-block;
			vertical-align: middle;
			width: 1.2em;
			height: 1.2em;
			margin-left: .3em;
			border-radius: 50%;
			background: conic-gradient(var(--summary-stops));
		}
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;471&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;leaverou&quot; data-slug-hash=&quot;QWLGWzx&quot; style=&quot;height: 471px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Issue Closing App - Tutorial Step 7&quot;&gt;&lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/leaverou/pen/QWLGWzx/&quot;&gt;Issue Closing App - Tutorial Step 7&lt;/a&gt; by Lea Verou (&lt;a href=&quot;https://codepen.io/leaverou&quot;&gt;@leaverou&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
</content>
  </entry><entry>
    <title>LCH colors in CSS: what, why, and how?</title>
    <link href="https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/"/>
    <updated>2020-04-04T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2934</id>
    <content xml:lang="en" type="html">&lt;p&gt;I was always interested in color science. In 2014, I gave a talk about CSS Color 4 at various conferences around the world called &lt;em&gt;&lt;a href=&quot;https://www.youtube.com/results?search_query=the+chroma+zone+lea+verou&amp;amp;page=&amp;amp;utm_source=opensearch&quot;&gt;“The Chroma Zone”&lt;/a&gt;&lt;/em&gt;. Even before that, in 2009, I wrote a color picker that used a hidden Java applet to support ICC color profiles to do CMYK properly, a first on the Web at the time (to my knowledge). I never released it, but it sparked &lt;a href=&quot;http://lea.verou.me/2009/03/100-cyan-in-cmyk-is-not-rgb0255255/&quot;&gt;this angry rant&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Color is also how I originally met my now husband, Chris Lilley: In my first CSS WG meeting in 2012, he approached me to ask a question about CSS and Greek, and once he introduced himself I said &lt;em&gt;“You’re Chris Lilley, the color expert?!? I have &lt;strong&gt;questions&lt;/strong&gt; for you!”&lt;/em&gt;. I later discovered that he had done even more cool things (he was a co-author of PNG and started SVG 🤯), but at the time, I only knew of him as “the W3C color expert”, that’s how much into color I was &lt;em&gt;(I got my color questions answered much later, in 2015 that we actually got together)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;My interest in color science was renewed in 2019, after I became co-editor of &lt;a href=&quot;http://drafts.csswg.org/css-color-5&quot;&gt;CSS Color 5&lt;/a&gt;, with the goal of fleshing out &lt;a href=&quot;https://drafts.csswg.org/css-color-5/#relative-colors&quot;&gt;my color modification proposal&lt;/a&gt;, which aims to allow arbitrary tweaking of color channels to create color variations, and combine it with &lt;a href=&quot;https://drafts.csswg.org/css-color-5/#coloradjust&quot;&gt;Una’s color modification proposal&lt;/a&gt;. LCH colors in CSS is something I’m very excited about, and I strongly believe designers would be &lt;strong&gt;outraged&lt;/strong&gt; we don’t have them yet if they knew more about them.&lt;/p&gt;
&lt;h2 id=&quot;what-is-lch%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/#what-is-lch%3F&quot;&gt;What is LCH?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/css-color-4/#specifying-lab-lch&quot;&gt;CSS Color 4 defines lch() colors&lt;/a&gt;, among other things, and as of recently, all major browsers have started implementing them or are seriously considering it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=205675&quot;&gt;Safari is already implementing&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=1026287&quot;&gt;Chrome is about to&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;and &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1352757&quot;&gt;Firefox is discussing it&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LCH is a color space that has several advantages over the RGB/HSL colors we’re familiar with in CSS. In fact, I’d go as far as to call it a &lt;strong&gt;game-changer&lt;/strong&gt;, and here’s why.&lt;/p&gt;
&lt;h3 id=&quot;1.-we-actually-get-access-to-about-50%25-more-colors.&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/#1.-we-actually-get-access-to-about-50%25-more-colors.&quot;&gt;1. &lt;strong&gt;We actually get access to about 50% more colors.&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is huge. Currently, every CSS color we can specify, is &lt;a href=&quot;https://www.w3.org/TR/css-color-3/#rgb-color&quot;&gt;defined&lt;/a&gt; to be in the &lt;a href=&quot;https://en.wikipedia.org/wiki/SRGB&quot;&gt;sRGB color space&lt;/a&gt;. This was more than sufficient a few years ago, since all but professional monitors had gamuts smaller than sRGB. However, that’s not true any more. Today, the gamut (range of possible colors displayed) of most monitors is closer to &lt;a href=&quot;https://en.wikipedia.org/wiki/DCI-P3&quot;&gt;P3&lt;/a&gt;, which has a &lt;a href=&quot;https://twitter.com/svgeesus/status/1220029106248716288&quot;&gt;50% larger volume than sRGB&lt;/a&gt;. CSS right now &lt;strong&gt;cannot access these colors at all&lt;/strong&gt;. Let me repeat: &lt;strong&gt;We have no access to one third of the colors in most modern monitors.&lt;/strong&gt; And these are not just any colors, but the &lt;strong&gt;most vivid colors the screen can display&lt;/strong&gt;. Our websites are washed out because monitor hardware evolved faster than CSS specs and browser implementations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/images/srgb-vs-p3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Gamut volume of sRGB vs P3&lt;/p&gt;
&lt;h3 id=&quot;2.-lch-(and-lab)-is-perceptually-uniform&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/#2.-lch-(and-lab)-is-perceptually-uniform&quot;&gt;2. LCH (and Lab) is perceptually uniform&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In LCH, the same numerical change in coordinates produces the same perceptual color difference. This property of a color space is called “perceptual uniformity”. RGB or HSL are not perceptually uniform. A very illustrative &lt;a href=&quot;https://dabblet.com/gist/48ce387697106b845127d5cef5247a19&quot;&gt;example&lt;/a&gt; is the following [&lt;a href=&quot;https://www.boronine.com/2012/03/26/Color-Spaces-for-Human-Beings/?fbclid=IwAR0ztieCugTlncQH6FB7fqtr1NKaQjuAgwc5YzA75NPbLwH3Z5w1FBsdQQw&quot;&gt;example source&lt;/a&gt;]:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dabblet.com/gist/48ce387697106b845127d5cef5247a19&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/images/image-3.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both the colors in the first row, as well as the colors in the second row, only differ by 20 degrees in hue. Is the perceptual difference between them equal?&lt;/p&gt;
&lt;h3 id=&quot;3.-lch-lightness-actually-means-something&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/#3.-lch-lightness-actually-means-something&quot;&gt;3. LCH lightness actually means something&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In HSL, lightness is meaningless. Colors can have the same lightness value, with wildly different perceptual lightness. My favorite examples are yellow and blue. Believe it or not, both have the same HSL lightness!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dabblet.com/gist/a6eb208ae80780c55b443ddcd4ce842f&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/images/image-4.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both of these colors have a lightness of 50%, but they are most certainly not equally light. What does HSL lightness actually mean then?&lt;/p&gt;
&lt;p&gt;You might argue that at least lightness means something for constant hue and saturation, i.e. for adjustments within the same color. It is true that we do get a lighter color if we increase the HSL lightness and a darker one if we decrease it, but it’s not necessarily the same color:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/images/image-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Both of these have the same hue and saturation, but do they really look like darker and lighter variants of the same color?&lt;/p&gt;
&lt;p&gt;With LCH, any colors with the same lightness are equally perceptually light, and any colors with the same chroma are equally perceptually saturated.&lt;/p&gt;
&lt;h2 id=&quot;how-does-lch-work%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/#how-does-lch-work%3F&quot;&gt;How does LCH work?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;LCH stands for “Lightness Chroma Hue”. The parameters loosely correspond to HSL’s, however there are a few crucial differences:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The hue angles don’t fully correspond to HSL’s hues.&lt;/strong&gt; E.g. 0 is not red, but more of a magenta and 180 is not turquoise but more of a bluish green, and is exactly complementary.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/images/image-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Note how these colors, while wildly different in hue, perceptually have the same lightness.&lt;/p&gt;
&lt;p&gt;In HSL, saturation is a neat 0-100 percentage, since it’s a simple transformation of RGB into polar coordinates. In LCH however, &lt;strong&gt;Chroma is theoretically unbounded&lt;/strong&gt;. LCH (like Lab) is designed to be able to represent the entire spectrum of human vision, and not all of these colors can be displayed by a screen, even a P3 screen. Not only is the maximum chroma different depending on screen gamut, it’s actually different per color.&lt;/p&gt;
&lt;p&gt;This may be better understood with an example. For simplicity, assume you have a screen whose gamut exactly matches the sRGB color space (for comparison, the screen of a 2013 MacBook Air was about 60% of sRGB, although most modern screens are about 150% of sRGB, as discussed above). For L=50 H=180 (the cyan above), the maximum Chroma is only 35! For L=50 H=0 (the magenta above), Chroma can go up to 77 without exceeding the boundaries of sRGB. For L=50 H=320 (the purple above), it can go up to 108!&lt;/p&gt;
&lt;p&gt;While the lack of boundaries can be somewhat unsettling &lt;em&gt;(in people and in color spaces)&lt;/em&gt;, don’t worry: if you specify a color that is not displayable in a given monitor, it will be scaled down so that it becomes visible while preserving its essence. After all, that’s not new: before monitors got gamuts wider than sRGB, this is what was happening with regular CSS colors when they were displayed in monitors with gamuts smaller than sRGB.&lt;/p&gt;
&lt;h2 id=&quot;an-lch-color-picker&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/#an-lch-color-picker&quot;&gt;An LCH color picker&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully, you are now somewhat excited about LCH, but how to visualize it?&lt;/p&gt;
&lt;p&gt;I actually made this a while ago, primarily to help me, &lt;a href=&quot;https://twitter.com/svgeesus&quot;&gt;Chris&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/argyleink&quot;&gt;Adam&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/una&quot;&gt;Una&lt;/a&gt; in wrapping our heads around LCH sufficiently to edit &lt;a href=&quot;https://drafts.csswg.org/css-color-5/&quot;&gt;CSS Color 5&lt;/a&gt;. It’s different to know the theory, and it’s different to be able to play with sliders and see the result. I even bought a domain, &lt;a href=&quot;https://css.land/&quot;&gt;css.land&lt;/a&gt;, to host similar demos eventually. We used it a fair bit, and Chris got me to add a few features too, but I never really posted about it, so it was only accessible to us, and anybody that noticed &lt;a href=&quot;https://github.com/LeaVerou/css.land/&quot;&gt;its Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://css.land/lch&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/images/image-1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Why not just use an existing LCH color picker?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The conversion code for this is written by Chris, and he was confident the math is at least intended to be correct (i.e. if it’s wrong it’s a bug in the code, not a gap in understanding)&lt;/li&gt;
&lt;li&gt;The Chroma is not 0-100 like in some color pickers we found&lt;/li&gt;
&lt;li&gt;We wanted to allow inputting arbitrary CSS colors (the “Import…” button above)&lt;/li&gt;
&lt;li&gt;We wanted to allow inputting decimals (the sliders only do integers, but the black number inputs allow any number)&lt;/li&gt;
&lt;li&gt;I wanted to be able to store colors, and see how they interpolate.&lt;/li&gt;
&lt;li&gt;We wanted to be able to see whether the LCH color was within sRGB, P3, (or Rec.2020, an even larger color space).&lt;/li&gt;
&lt;li&gt;We wanted alpha&lt;/li&gt;
&lt;li&gt;And lastly, because it’s fun! Especially since it’s implemented with &lt;a href=&quot;https://mavo.io/&quot;&gt;Mavo&lt;/a&gt; (and a little bit of JS, this is not a pure Mavo HTML demo).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recently, Chris posted it in a &lt;a href=&quot;https://github.com/whatwg/html/issues/3400?#issuecomment-607976086&quot;&gt;whatwg/html issue thread&lt;/a&gt; and many people discovered it, so it nudged me to post about it, so, here it is: &lt;a href=&quot;https://css.land/lch&quot;&gt;css.land/lch&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;faq&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Based on the questions I got after I posted this article, I should clarify a few common misconceptions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“You said that these colors are not implemented yet, but I see them in your article”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All of the colors displayed in this article are within the sRGB gamut, exactly because we can’t display those outside it yet. sRGB is a color space, not a syntax. E.g. &lt;code&gt;rgb(255 0 0)&lt;/code&gt; and &lt;code&gt;lch(54.292% 106.839 40.853)&lt;/code&gt; specify the same color.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“How does the LCH picker display colors outside sRGB?”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It doesn’t. Neither does any other on the Web (to my knowledge). The color picker is implemented with web technologies, and therefore suffers from the same issues. It has to scale them down to display something similar, that is within sRGB (it used to just clip the RGB components to 0-100%, but thanks to &lt;a href=&quot;https://github.com/LeaVerou/css.land/pull/3&quot;&gt;this PR&lt;/a&gt; from Tab it now uses a far superior algorithm: it just reduces the Chroma until the color is within sRGB). &lt;strong&gt;This is why increasing the Chroma doesn’t produce a brighter color beyond a certain point: because that color cannot be displayed with CSS right now.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“I’ve noticed that Firefox displays more vivid colors than Chrome and Safari, is that related?”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Firefox does not implement the spec that restricts CSS colors to sRGB. Instead, it just throws the raw RGB coordinates on the screen, so e.g. &lt;code&gt;rgb(100% 0% 0%)&lt;/code&gt; is the brightest red your screen can display. While this may seem like a superior solution, it’s incredibly inconsistent: specifying a color is approximate at best, since every screen displays it differently. By restricting CSS colors to a known color space (sRGB) we gained device independence. LCH and Lab are also device independent as they are based on actual measured color.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about color(display-p3 r g b)? Safari supports that since 2017!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was notified of this after I posted this article. I was aware Safari was implementing this syntax a while ago, but somehow missed that they shipped it. In fact, WebKit published &lt;a href=&quot;https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/&quot;&gt;an article about this syntax&lt;/a&gt; last month! How exciting!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;color(colorspaceid params)&lt;/code&gt; is another syntax added by &lt;a href=&quot;https://www.w3.org/TR/css-color-4/#color-function&quot;&gt;CSS Color 4&lt;/a&gt; and is the swiss army knife of color management in CSS: in its full glory it allows specifying an ICC color profile and colors from it (e.g. you want real CMYK colors on a webpage? You want Pantone? With color profiles, you can do that too!). It also supports some predefined color spaces, of which &lt;code&gt;display-p3&lt;/code&gt; is one. So, for example, &lt;code&gt;color(display-p3 0 1 0)&lt;/code&gt; gives us the brightest green in the P3 color space. You can use &lt;a href=&quot;https://dabblet.com/gist/f491f94dba0af1dfccffa24c46e770e5&quot;&gt;this test case&lt;/a&gt; to test support: you’ll see red if &lt;code&gt;color()&lt;/code&gt; is not supported and bright green if it is.&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/f491f94dba0af1dfccffa24c46e770e5&quot; style=&quot;width: 100%; height: 400px;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Exciting as it may be (and I should tweak the color picker to use it when available!), do note that it only addresses the first issue I mentioned: getting to all gamut colors. However, since it’s RGB-based, it still suffers from the other issues of RGB. It is not perceptually uniform, and is difficult to create variants (lighter or darker, more or less vivid etc) by tweaking its parameters.&lt;/p&gt;
&lt;p&gt;Furthermore, it’s a short-term solution. It works now, because screens that can display a wider gamut than P3 are rare. Once hardware advances again, &lt;code&gt;color(display-p3 ...)&lt;/code&gt; will have the same problem as sRGB colors have today. LCH and Lab are device independent, and can represent the entire gamut of human vision so they will work regardless of how hardware advances.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How does LCH relate to the Lab color space that I know from Photoshop and other applications?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;LCH is the same color space as Lab, just viewed differently! Take a look at the following diagram that I made for my students:&lt;/p&gt;
&lt;p&gt;&lt;object data=&quot;https://designftw.mit.edu/lectures/color/img/lab.svg&quot; type=&quot;image/svg+xml&quot;&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;The L in Lab and LCH is exactly the same (perceptual Lightness). For a given lightness L, in Lab, a color has cartesian coordinates (L, a, b) and polar coordinates (L, C, H). Chroma is just the length of the line from 0 to point (a, b) and Hue is the angle of that ray. Therefore, the formulae to convert Lab to LCH are trivial one liners: C is sqrt(a² + b²) and H is atan(b/a) (with different handling if a = 0). atan() is just the reverse of tan(), i.e. tan(H) = b/a.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Today&#39;s Javascript, from an outsider&#39;s perspective</title>
    <link href="https://lea.verou.me/2020/05/todays-javascript-from-an-outsiders-perspective/"/>
    <updated>2020-05-25T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=2969</id>
    <content xml:lang="en" type="html">&lt;p&gt;Today I tried to help a friend who is a great computer scientist, but not a JS person use a JS module he found on Github. Since for the past 6 years my day job is doing usability research &amp;amp; teaching at MIT, I couldn’t help but cringe at the slog that this was. Lo and behold, a pile of unnecessary error conditions, cryptic errors, and lack of proper feedback. And I don’t feel I did a good job communicating the frustration he went through in the one hour or so until he gave up.&lt;/p&gt;
&lt;p&gt;It went a bit like this…&lt;/p&gt;
&lt;p&gt;Note: N_ames of packages and people have been changed to protect their identity. I’ve also omitted a few issues he faced that were too specific to the package at hand. Some of the errors are reconstructed from memory, so let me know if I got anything wrong!_&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;John:&lt;/strong&gt; Hey, I want to try out this algorithm I found on Github, it says to use &lt;code&gt;import functionName from packageName&lt;/code&gt; and then call &lt;code&gt;functionName(arguments)&lt;/code&gt;. Seems simple enough! I don’t really need a UI, so I’m gonna use Node!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lea:&lt;/strong&gt; Sure, Node seems appropriate for this!&lt;/p&gt;
&lt;p&gt;John &lt;em&gt;runs &lt;code&gt;npm install packageName --save&lt;/code&gt; as recommended by the package’s README&lt;/em&gt;
John &lt;em&gt;runs &lt;code&gt;node index.js&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Node:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Warning: To load an ES module, set “type”: “module” in the package.json or use the .mjs extension.
SyntaxError: Cannot use import statement outside a module&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;John:&lt;/strong&gt; But I don’t have a package.json…
&lt;strong&gt;Lea:&lt;/strong&gt; Run &lt;code&gt;npm init&lt;/code&gt;, it will generate it for you!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;John runs &lt;code&gt;npm init&lt;/code&gt;, goes through the wizard, adds &lt;code&gt;type: &amp;quot;module&amp;quot;&lt;/code&gt;&lt;/em&gt; manually to the generated package.json.
John &lt;em&gt;runs &lt;code&gt;node index.js&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Node:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SyntaxError: Cannot use import statement outside a module&lt;/p&gt;
&lt;p&gt;Oddly, the error was thrown from an internal module of the project this time. WAT?!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lea:&lt;/strong&gt; Ok, screw this, just run it in a browser, it’s an ES6 module and it’s just a pure JS algorithm that doesn’t use any Node APIs, it should work.&lt;/p&gt;
&lt;p&gt;John &lt;em&gt;makes a simple index.html with a &lt;code&gt;&amp;lt;script type=&amp;quot;module&amp;quot; src=&amp;quot;index.js&amp;quot;&amp;gt;&lt;/code&gt;&lt;/em&gt;
John &lt;em&gt;loads index.html in a browser&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Nothing in the console. Nada. Crickets. 🦗&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lea:&lt;/strong&gt; Oh, you need to adjust your module path to import packageName. Node does special stuff to resolve based on &lt;code&gt;node_modules&lt;/code&gt;, now you’re in a browser you need to specify an explicit path yourself.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;John looks, at his filesystem, but there was no node_modules directory.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lea:&lt;/strong&gt; Oh, you ran &lt;code&gt;npm install&lt;/code&gt; before you had a &lt;code&gt;package.json&lt;/code&gt;, that’s probably it! Try it again!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;John runs &lt;code&gt;npm install packageName --save&lt;/code&gt; again&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;John:&lt;/strong&gt; Oh yeah, there is a node_modules now!&lt;/p&gt;
&lt;p&gt;John &lt;em&gt;desperately looks in &lt;code&gt;node_modules&lt;/code&gt; to find the entry point&lt;/em&gt;
John &lt;em&gt;edits his index.js accordingly, reloads index.html&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Firefox:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Incorrect MIME type: text/html&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lea:&lt;/strong&gt; Oh, you’re in &lt;code&gt;file://&lt;/code&gt;! Dude, what are you doing these days without a localhost? Javascript is severely restricted in &lt;code&gt;file://&lt;/code&gt; today.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;John:&lt;/strong&gt; But why do I… ok fine, I’m going to start a localhost.&lt;/p&gt;
&lt;p&gt;John &lt;em&gt;starts localhost&lt;/em&gt;, visits his index.html under &lt;a href=&quot;http://localhost/&quot;&gt;http://localhost:80&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Firefox:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Incorrect MIME type: text/html&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;John:&lt;/strong&gt; Sigh. Do I need to configure my localhost to serve JS files with a &lt;code&gt;text/javascript&lt;/code&gt; MIME type?
&lt;strong&gt;Lea:&lt;/strong&gt; What? No! It knows this. Um… look at the Networks tab, I suspect it can’t find your module, so it’s returning an HTML page for the 404, then it complains because the MIME type of the error page is not &lt;code&gt;text/javascript&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Looks at node_modules again, corrects path. Turns out VS Code collapses folders with only 1 subfolder, which is why we hadn’t noticed&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;FWIW I do think this is a good usability improvement on VS Code’s behalf, it improves efficiency, but they need to make it more visible that this is what has happened.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Firefox:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SyntaxError: missing ) after formal parameters&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lea:&lt;/strong&gt; What? That’s coming from the package source, it’s not your fault. I don’t understand… can we look at this line?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;John clicks at line throwing the error&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lea:&lt;/strong&gt; Oh my goodness. This is not Javascript, it’s Typescript!! With a .js extension!!
&lt;strong&gt;John:&lt;/strong&gt; I just wanted to run one line of code to test this algorithm… 😭😭😭&lt;/p&gt;
&lt;p&gt;&lt;em&gt;John gives up&lt;/em&gt;. &lt;em&gt;Concludes never to touch Node, npm, or ES6 modules with a barge pole.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The End.&lt;/p&gt;
&lt;p&gt;Note that John is a computer scientist that knows a fair bit about the Web: He had Node &amp;amp; npm installed, he knew what MIME types are, he could start a localhost when needed. What hope do actual novices have?&lt;/p&gt;
</content>
  </entry><entry>
    <title>New decade, new theme</title>
    <link href="https://lea.verou.me/2020/06/new-decade-new-theme/"/>
    <updated>2020-06-03T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3000</id>
    <content xml:lang="en" type="html">&lt;p&gt;It has been &lt;a href=&quot;http://lea.verou.me/2011/01/yet-another-redesign/&quot;&gt;almost a decade since this blog last saw a redesign&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/06/new-decade-new-theme/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This blog’s theme 2011 - 2020. RIP!&lt;/p&gt;
&lt;p&gt;In these 9 years, my life changed dramatically. I &lt;a href=&quot;http://lea.verou.me/2012/08/lea-at-w3-org/&quot;&gt;joined&lt;/a&gt; and &lt;a href=&quot;http://lea.verou.me/2013/07/leaving-w3c/&quot;&gt;left W3C&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/CSS_Working_Group&quot;&gt;joined the CSS WG&lt;/a&gt;, &lt;a href=&quot;http://lea.verou.me/2014/02/im-going-to-mit/&quot;&gt;went to MIT for a PhD&lt;/a&gt;, &lt;a href=&quot;http://www.amazon.com/CSS-Secrets-Lea-Verou/dp/1449372635?tag=leaverou-20&quot;&gt;published a book&lt;/a&gt;, &lt;a href=&quot;https://www.facebook.com/leaverou/posts/10156857680266192&quot;&gt;got married&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/leaverou/status/1153045069286563841&quot;&gt;had a baby&lt;/a&gt;, among other things. I designed dozens of websites for dozens of projects, but this theme remained constant, with probably a hasty tweak here and there but nothing more than that. Even its mobile version was a few quick media queries to make it &lt;em&gt;palatable&lt;/em&gt; on mobile.&lt;/p&gt;
&lt;p&gt;To put this into perspective, when I designed that theme:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS gradients were still cutting edge&lt;/li&gt;
&lt;li&gt;We were still using browser prefixes all over the place&lt;/li&gt;
&lt;li&gt;RSS was still a thing that websites advertised&lt;/li&gt;
&lt;li&gt;Skeuomorphism was all the rage&lt;/li&gt;
&lt;li&gt;Websites were desktop first, and often desktop-only.&lt;/li&gt;
&lt;li&gt;Opera was a browser we tested in.&lt;/li&gt;
&lt;li&gt;IE8 was the latest IE version. It didn’t support SVG, gradients, border-radius, shadows, web fonts (except .eot), transforms, &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We were still hacking layout with floats, clearfix and &lt;code&gt;overflow: hidden&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Over the course of these years, I kept saying “I need to update my website’s theme”, but never got around to it, there was always something more high priority.&lt;/p&gt;
&lt;p&gt;The stroke that broke the camel’s back was this Monday. I came up with a nice CSS tip on another website I was working on, and realized I was hesitating to blog about it because &lt;em&gt;I was embarrassed&lt;/em&gt; at how my website looked. This is it, I thought. If it has gotten so bad that I avoid blogging because I don’t want people to be reminded of how old my website looks, I need to get my shit together and fix this, I told myself.&lt;/p&gt;
&lt;p&gt;My plan was to design something entirely from scratch, like I had done the previous time (the previous theme used a blank HTML5 starter theme as its only starting point). However, when I previewed the new Wordpress default (&lt;a href=&quot;https://wordpress.org/themes/twentytwenty/&quot;&gt;Twenty Twenty&lt;/a&gt;), I fell in love, especially with its typography: it used &lt;a href=&quot;https://rsms.me/inter/&quot;&gt;a very Helvetica-esque variable font&lt;/a&gt; as its heading typeface, and Hoefler Text for body text. 😍&lt;/p&gt;
&lt;p&gt;It would surely be very convenient to be able to adapt an existing theme, but on the other hand, isn’t it embarrassing to be known for CSS and use the default theme or something close to it?&lt;/p&gt;
&lt;p&gt;In the end, I kept the things I liked about it and it certainly still looks a lot like Twenty Twenty, but I think I’ve made enough tweaks that it’s also very &lt;em&gt;Lea&lt;/em&gt;. And of course there are animated conic gradients in it, because duh. 😂&lt;/p&gt;
&lt;p&gt;Do keep in mind that this is just a day’s work, so it will be rough around the edges and still very much a work in progress. Let me know about any issues you find in the comments!&lt;/p&gt;
&lt;p&gt;PS: Yes, yes, I will eventually get around to enforcing &lt;code&gt;https://&lt;/code&gt;!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Hybrid positioning with CSS variables and max()</title>
    <link href="https://lea.verou.me/2020/06/hybrid-positioning-with-css-variables-and-max/"/>
    <updated>2020-06-05T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3034</id>
    <content xml:lang="en" type="html">&lt;p&gt;Notice how the navigation on the left behaves wrt scrolling: It’s like absolute at first that becomes fixed once the header scrolls out of the viewport.&lt;/p&gt;
&lt;p&gt;One of my side projects these days is a color space agnostic color conversion &amp;amp; manipulation library, which I’m developing together with my husband, &lt;a href=&quot;https://svgees.us/&quot;&gt;Chris Lilley&lt;/a&gt; (you can see a sneak peek of its docs above). He brings his color science expertise to the table, and I bring my JS &amp;amp; API design experience, so it’s a great match and I’m really excited about it! (&lt;em&gt;if you’re serious about color and you’re building a tool or demo that would benefit from it contact me, we need as much early feedback on the API as we can get!&lt;/em&gt; )&lt;/p&gt;
&lt;p&gt;For the documentation, I wanted to have the page navigation on the side (when there is enough space), right under the header when scrolled all the way to the top, but I wanted it to scroll with the page (as if it was absolutely positioned) until the header is out of view, and then stay at the top for the rest of the scrolling (as if it used fixed positioning).&lt;/p&gt;
&lt;p&gt;It sounds very much like a case for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/position&quot;&gt;&lt;code&gt;position: sticky&lt;/code&gt;&lt;/a&gt;, doesn’t it? However, an element with &lt;code&gt;position: sticky&lt;/code&gt; behaves like it’s relatively positioned when it’s in view and like it’s using &lt;code&gt;position: fixed&lt;/code&gt; when its scrolled out of view but its container is still in view. What I wanted here was different. I basically wanted &lt;code&gt;position: absolute&lt;/code&gt; while the header was in view and &lt;code&gt;position: fixed&lt;/code&gt; after. Yes, there are ways I could have contorted &lt;code&gt;position: sticky&lt;/code&gt; to do what I wanted, but was there another solution?&lt;/p&gt;
&lt;p&gt;In the past, we’d just go straight to JS, slap &lt;code&gt;position: absolute&lt;/code&gt; on our element, calculate the offset in a &lt;code&gt;scroll&lt;/code&gt; event listener and set a &lt;code&gt;top&lt;/code&gt; CSS property on our element. However, this is flimsy and violates separation of concerns, as we now need to modify Javascript to change styling. Pass!&lt;/p&gt;
&lt;p&gt;What if instead we had access to the scroll offset in CSS? Would that be sufficient to solve our use case? Let’s find out!&lt;/p&gt;
&lt;p&gt;As I pointed out in my &lt;a href=&quot;https://increment.com/frontend/a-users-guide-to-css-variables/&quot;&gt;Increment article about CSS Variables&lt;/a&gt; last month, and in &lt;a href=&quot;https://www.youtube.com/results?search_query=lea+verou+%22css+variables%22&quot;&gt;my CSS Variables series of talks a few years ago&lt;/a&gt;, we can use JS to set &amp;amp; update CSS variables on the root that describe pure data (mouse position, input values, scroll offset etc), and then use them as-needed throughout our CSS, reaching near-perfect separation of concerns for many common cases. In this case, we write 3 lines of JS to set a &lt;code&gt;--scrolltop&lt;/code&gt; variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let root = document.documentElement;
document.addEventListener(&amp;quot;scroll&amp;quot;, evt =&amp;gt; {
	root.style.setProperty(&amp;quot;--scrolltop&amp;quot;, root.scrollTop);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we can position our navigation absolutely, and subtract &lt;code&gt;var(--scrolltop)&lt;/code&gt; to offset any scroll (&lt;code&gt;11rem&lt;/code&gt; is our header height):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#toc {
	position: fixed;
	top: calc(11rem - var(--scrolltop) * 1px);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works up to a certain point, but once scrolltop exceeds the height of the header, &lt;code&gt;top&lt;/code&gt; becomes negative and our navigation starts drifting off screen:&lt;/p&gt;
&lt;p&gt;Just subtracting &lt;code&gt;--scrolltop&lt;/code&gt; essentially implements absolute positioning with &lt;code&gt;position: fixed&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’ve basically re-implemented absolute positioning with &lt;code&gt;position: fixed&lt;/code&gt;, which is not very useful! What we &lt;em&gt;really&lt;/em&gt; want is to cap the result of the calculation to &lt;code&gt;0&lt;/code&gt; so that our navigation always remains visible. Wouldn’t it be great if there was a &lt;code&gt;max-top&lt;/code&gt; attribute, just like &lt;code&gt;max-width&lt;/code&gt; so that we could do this?&lt;/p&gt;
&lt;p&gt;One thought might be to change the JS and use &lt;code&gt;Math.max()&lt;/code&gt; to cap &lt;code&gt;--scrolltop&lt;/code&gt; to a specific number that corresponds to our header height. However, while this would work for this particular case, it means that &lt;code&gt;--scrolltop&lt;/code&gt; cannot be used generically anymore, because it’s tailored to our specific use case and does not correspond to the actual scroll offset. Also, this encodes more about styling in the JS than is ideal, since the clamping we need is presentation-related — if our style was different, we may not need it anymore. But how can we do this without resorting to JS?&lt;/p&gt;
&lt;p&gt;Thankfully, we recently got implementations for probably the one feature I was pining for the most in CSS, for years: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/min&quot;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/clamp&quot;&gt;&lt;code&gt;clamp()&lt;/code&gt;&lt;/a&gt; functions, which bring the power of min/max constraints to any CSS property! And even for &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;, they are strictly more powerful than &lt;code&gt;min/max-*&lt;/code&gt; because you can have any number of minimums and maximums, whereas the &lt;code&gt;min/max-*&lt;/code&gt; properties limit you to only one.&lt;/p&gt;
&lt;p&gt;While &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max#Browser_compatibility&quot;&gt;brower compatibility is actually pretty good&lt;/a&gt;, we can’t just use it with no fallback, since this is one of the features where lack of support can be destructive. We will provide a fallback in our base style and use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@supports&quot;&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/a&gt; to conditonally override it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#toc {
	position: fixed;
	top: 11em;
}

@supports (top: max(1em, 1px)) {
	#toc {
		top: max(0em, 11rem - var(--scrolltop) * 1px);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aaand that was it, this gives us the result we wanted!&lt;/p&gt;
&lt;p&gt;And because &lt;code&gt;--scrolltop&lt;/code&gt; is sufficiently generic, we can re-use it anywhere in our CSS where we need access to the scroll offset. I’ve actually used exactly the scame &lt;code&gt;--scrolltop&lt;/code&gt; setting JS code in my blog, to keep the gradient centerpoint on my logo while maintaining a &lt;code&gt;fixed&lt;/code&gt; background attachment, so that various elements can use the same background and having it appear continuous, i.e. not affected by their own background positioning area:&lt;/p&gt;
&lt;p&gt;The website header and the post header are actually different element. The background appears continuous because it’s using &lt;code&gt;background-attachment: fixed&lt;/code&gt;, and the scrolltop variable is used to emulate &lt;code&gt;background-attachment: scroll&lt;/code&gt; while still using the viewport as the background positioning area for both backgrounds.&lt;/p&gt;
&lt;h3 id=&quot;appendix%3A-why-didn%E2%80%99t-we-just-use-the-cascade%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/hybrid-positioning-with-css-variables-and-max/#appendix%3A-why-didn%E2%80%99t-we-just-use-the-cascade%3F&quot;&gt;Appendix: Why didn’t we just use the cascade?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You might wonder, why do we even need &lt;code&gt;@supports&lt;/code&gt;? Why not use the cascade, like we’ve always done to provide fallbacks for values without sufficiently universal support? I.e., why not just do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#toc {
	position: fixed;
	top: 11em;
	top: max(0em, 11rem - var(--scrolltop) * 1px);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason is that when you use CSS variables, this does not work as expected. The browser doesn’t know if your property value is valid until the variable is resolved, and by then it has already processed the cascade and has thrown away any potential fallbacks.&lt;/p&gt;
&lt;p&gt;So, what would happen if we went this route and &lt;code&gt;max()&lt;/code&gt; was not supported? Once the browser realizes that the second value is invalid due to using an unknown function, it will make the property &lt;em&gt;&lt;a href=&quot;https://www.w3.org/TR/css-variables-1/#invalid-at-computed-value-time&quot;&gt;invalid at computed value time&lt;/a&gt;&lt;/em&gt;, which essentially equates to the &lt;code&gt;initial&lt;/code&gt; keyword, and for the &lt;code&gt;top&lt;/code&gt; property, the initial value is &lt;code&gt;0&lt;/code&gt;. This would mean your navigation would overlap the header when scrolled close to the top, which is &lt;em&gt;terrible&lt;/em&gt;!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Refactoring optional chaining into a large codebase: lessons learned</title>
    <link href="https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/"/>
    <updated>2020-06-18T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3054</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://coink.wang/refactoring-optional-chaining-into-a-large-codebase-lessons-learned-chinese.html&quot;&gt;Chinese translation by Coink Wang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://memegenerator.net/img/instances/400x/80477833/refactor-all-the-things.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining&quot;&gt;optional chaining&lt;/a&gt; is supported &lt;a href=&quot;https://caniuse.com/#feat=mdn-javascript_operators_optional_chaining&quot;&gt;across the board&lt;/a&gt;, I decided to finally refactor &lt;a href=&quot;https://mavo.io/&quot;&gt;Mavo&lt;/a&gt; to use it (yes, yes, we do provide a transpiled version as well for older browsers, settle down). This is a moment I have been waiting for a long time, as I think optional chaining is the single most substantial JS syntax improvement since arrow functions and template strings. Yes, I think it’s more significant than async/await, just because of the mere frequency of code it improves. Property access is literally &lt;em&gt;everywhere&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First off, what is &lt;em&gt;optional chaining&lt;/em&gt;, in case you haven’t heard of it before?&lt;/p&gt;
&lt;p&gt;You know how you can’t just do &lt;code&gt;foo.bar.baz()&lt;/code&gt; without checking if &lt;code&gt;foo&lt;/code&gt; exists, and then if &lt;code&gt;foo.bar&lt;/code&gt; exists, and then if &lt;code&gt;foo.bar.baz&lt;/code&gt; exists because you’ll get an error? So you have to do something awkward like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (foo &amp;amp;&amp;amp; foo.bar &amp;amp;&amp;amp; foo.bar.baz) {
	foo.bar.baz();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or even:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo &amp;amp;&amp;amp; foo.bar &amp;amp;&amp;amp; foo.bar.baz &amp;amp;&amp;amp; foo.bar.baz();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some even &lt;a href=&quot;https://medium.com/@ismail9k/use-javascript-optional-chaining-today-f0b1d080b3c6&quot;&gt;contort object destructuring to help with this&lt;/a&gt;. With optional chaining, you can just do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo?.bar?.baz?.()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It supports normal property access, brackets (&lt;code&gt;foo?.[bar]&lt;/code&gt;), and even function invocation (&lt;code&gt;foo?.()&lt;/code&gt;). Sweet, right??&lt;/p&gt;
&lt;p&gt;Yes, &lt;em&gt;mostly.&lt;/em&gt; Indeed, there is SO MUCH code that can be simplified with it, it’s incredible. But there are a few caveats.&lt;/p&gt;
&lt;h2 id=&quot;patterns-to-search-for&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#patterns-to-search-for&quot;&gt;Patterns to search for&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Suppose you decided to go ahead and refactor your code as well. What to look for?&lt;/p&gt;
&lt;p&gt;There is of course the obvious &lt;code&gt;foo &amp;amp;&amp;amp; foo.bar&lt;/code&gt; that becomes &lt;code&gt;foo?.bar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is also the conditional version of it, that we described in the beginning of this article, which uses &lt;code&gt;if()&lt;/code&gt; for some or all of the checks in the chain.&lt;/p&gt;
&lt;p&gt;There are also a few more patterns.&lt;/p&gt;
&lt;h3 id=&quot;ternary&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#ternary&quot;&gt;Ternary&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;foo? foo.bar : defaultValue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which can now be written as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo?.bar || defaultValue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or, using the other awesome new operator, the &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator&quot;&gt;nullish coalescing operator&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo?.bar ?? defaultValue
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;array-checking&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#array-checking&quot;&gt;Array checking&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;if (foo.length &amp;gt; 3) {
	foo[2]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which now becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo?.[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this is no substitute for a real array check, like the one done by &lt;code&gt;Array.isArray(foo)&lt;/code&gt;. Do not go about replacing proper array checking with duck typing because it’s shorter. We stopped doing that over &lt;a href=&quot;http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/&quot;&gt;a decade ago&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;regex-match&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#regex-match&quot;&gt;Regex match&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Forget about things like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let match = &amp;quot;#C0FFEE&amp;quot;.match(/#([A-Z]+)/i);
let hex = match &amp;amp;&amp;amp; match[1];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or even things like that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let hex = (&amp;quot;#C0FFEE&amp;quot;.match(/#([A-Z]+)/i) || [,])[1];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it’s just:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let hex = &amp;quot;#C0FFEE&amp;quot;.match(/#([A-Z]+)/i)?.[1];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In our case, I was able to even remove two utility functions and replace their invocations with this.&lt;/p&gt;
&lt;h3 id=&quot;feature-detection&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#feature-detection&quot;&gt;Feature detection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In simple cases, feature detection can be replaced by &lt;code&gt;?.&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (element.prepend) element.prepend(otherElement);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;element.prepend?.(otherElement);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;don%E2%80%99t-overdo-it&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#don%E2%80%99t-overdo-it&quot;&gt;Don’t overdo it&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While it may be tempting to convert code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (foo) {
	something(foo.bar);
	somethingElse(foo.baz);
	andOneLastThing(foo.yolo);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;something(foo?.bar);
somethingElse(foo?.baz);
andOneLastThing(foo?.yolo);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Don’t&lt;/em&gt;. You’re essentially having the JS runtime check &lt;code&gt;foo&lt;/code&gt; three times instead of one. You may argue these things don’t matter much anymore performance-wise, but it’s the same repetition for the human reading your code: they have to mentally process the check for &lt;code&gt;foo&lt;/code&gt; three times instead of one. And if they need to add another statement using property access on &lt;code&gt;foo&lt;/code&gt;, they need to add yet another check, instead of just using the conditional that’s already there.&lt;/p&gt;
&lt;h2 id=&quot;caveats&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#caveats&quot;&gt;Caveats&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;you-still-need-to-check-before-assignment&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#you-still-need-to-check-before-assignment&quot;&gt;You still need to check before assignment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You may be tempted to convert things like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (foo &amp;amp;&amp;amp; foo.bar) {
	foo.bar.baz = someValue;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo?.bar?.baz = someValue;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, that’s not possible and will error. This was an actual snippet from our codebase:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (this.bar &amp;amp;&amp;amp; this.bar.edit) {
	this.bar.edit.textContent = this._(&amp;quot;edit&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which I happily refactored to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (this.bar?.edit) {
	this.bar.edit.textContent = this._(&amp;quot;edit&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All good so far, this works nicely. But then I thought, wait a second… do I need the conditional at all? Maybe I can just do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.bar?.edit?.textContent = this._(&amp;quot;edit&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nope. &lt;code&gt;Uncaught SyntaxError: Invalid left-hand side in assignment&lt;/code&gt;. Can’t do that. You still need the conditional. I literally kept doing this, and I’m glad I had ESLint in my editor to warn me about it without having to actually run the code.&lt;/p&gt;
&lt;h3 id=&quot;it%E2%80%99s-very-easy-to-put-the-%3F.-in-the-wrong-place-or-forget-some-%3F.&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#it%E2%80%99s-very-easy-to-put-the-%3F.-in-the-wrong-place-or-forget-some-%3F.&quot;&gt;It’s very easy to put the ?. in the wrong place or forget some ?.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Note that if you’re refactoring a long chain with optional chaining, you often need to insert multiple &lt;code&gt;?.&lt;/code&gt; after the first one, for every member access that may or may not exist, otherwise you will get errors once the optional chaining returns undefined.&lt;/p&gt;
&lt;p&gt;Or, sometimes you may &lt;em&gt;think&lt;/em&gt; you do, because you put the &lt;code&gt;?.&lt;/code&gt; in the wrong place.&lt;/p&gt;
&lt;p&gt;Take the following real example. I originally refactored this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.children[index]? this.children[index].element : this.marker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;into this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.children?.[index].element ?? this.marker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then got a &lt;code&gt;TypeError: Cannot read property &#39;element&#39; of undefined&lt;/code&gt;. Oops! Then I fixed it by adding an additional &lt;code&gt;?.&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.children?.[index]?.element ?? this.marker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works, but is superfluous, as pointed out in the comments. I just needed to &lt;em&gt;move&lt;/em&gt; the &lt;code&gt;?.&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.children.[index]?.element ?? this.marker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;a href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#comment-4963612068&quot;&gt;as pointed out in the comments&lt;/a&gt; be careful about replacing array length checks with optional access to the index. This might be bad for performance, because out-of-bounds access on an array is de-optimizing the code in V8 (as it has to check the prototype chain for such a property too, not only decide that there is no such index in the array).&lt;/p&gt;
&lt;h3 id=&quot;it-can-introduce-bugs-if-you%E2%80%99re-not-careful&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#it-can-introduce-bugs-if-you%E2%80%99re-not-careful&quot;&gt;It can introduce bugs if you’re not careful&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If, like me, you go on a refactoring spree, it’s easy after a certain point to just introduce optional chaining in places where it actually ends up &lt;em&gt;changing what your code does&lt;/em&gt; and introducing subtle bugs.&lt;/p&gt;
&lt;h4 id=&quot;null-vs-undefined&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#null-vs-undefined&quot;&gt;null vs undefined&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Possibly the most common pattern is replacing &lt;code&gt;foo &amp;amp;&amp;amp; foo.bar&lt;/code&gt; with &lt;code&gt;foo?.bar&lt;/code&gt;. While in most cases these work equivalently, this is not true for every case. When &lt;code&gt;foo&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the former returns &lt;code&gt;null&lt;/code&gt;, whereas the latter returns &lt;code&gt;undefined&lt;/code&gt;. This can cause bugs to creep up in cases where the distinction matters and is probably the most common way to introduce bugs with this type of refactoring.&lt;/p&gt;
&lt;h4 id=&quot;equality-checks&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#equality-checks&quot;&gt;Equality checks&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Be careful about converting code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (foo &amp;amp;&amp;amp; bar &amp;amp;&amp;amp; foo.prop1 === bar.prop2) { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (foo?.prop1 === bar?.prop2) { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the first case, the condition will not be true, unless &lt;em&gt;both&lt;/em&gt; &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; are truthy. However, in the second case, if &lt;em&gt;both&lt;/em&gt; &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; are nullish, the conditional will be true, because both operands will return &lt;code&gt;undefined&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;The same bug can creep in even if the second operand doesn’t include any optional chaining, as long as it could be &lt;code&gt;undefined&lt;/code&gt; you can get unintended matches.&lt;/p&gt;
&lt;h4 id=&quot;operator-precedence-slips&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#operator-precedence-slips&quot;&gt;Operator precedence slips&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;One thing to look out for is that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence&quot;&gt;optional chaining has higher precedence than &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/a&gt;. This becomes particularly significant when you replace an expression using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; that also involves equality checks, since the (in)equality operators are sandwiched between &lt;code&gt;?.&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, having lower precedence than the former and higher than the latter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (foo &amp;amp;&amp;amp; foo.bar === baz) { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is compared with &lt;code&gt;baz&lt;/code&gt; here? &lt;code&gt;foo.bar&lt;/code&gt; or &lt;code&gt;foo &amp;amp;&amp;amp; foo.bar&lt;/code&gt;? Since &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; has lower precedence than &lt;code&gt;===&lt;/code&gt;, it’s as if we had written:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (foo &amp;amp;&amp;amp; (foo.bar === baz)) { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the conditional cannot ever be executed if &lt;code&gt;foo&lt;/code&gt; is falsy. However, once we refactor it to use optional chaining, it is now as if we were comparing (&lt;code&gt;foo &amp;amp;&amp;amp; foo.bar&lt;/code&gt;) to &lt;code&gt;baz&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (foo?.bar === baz) { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An obvious case where the different semantics affect execution is when &lt;code&gt;baz&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;. In that case, we can enter the conditional when &lt;code&gt;foo&lt;/code&gt; is nullish, since then optional chaining will return &lt;code&gt;undefined&lt;/code&gt;, which is basically the case we described above. In most other cases this doesn’t make a big difference. It can however be pretty bad when instead of an equality operator, you have an &lt;em&gt;inequality&lt;/em&gt; operator, which still has the same precedence. Compare this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (foo &amp;amp;&amp;amp; foo.bar !== baz) { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (foo?.bar !== baz) { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we are going to enter the conditional every time &lt;code&gt;foo&lt;/code&gt; is nullish, as long as &lt;code&gt;baz&lt;/code&gt; is not &lt;code&gt;undefined&lt;/code&gt;! The difference is not noticeable in an edge case anymore, but in the average case! 😱&lt;/p&gt;
&lt;h4 id=&quot;return-statements&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#return-statements&quot;&gt;Return statements&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Rather obvious after you think about it, but it’s easy to forget return statements in the heat of the moment. You cannot replace things like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (foo &amp;amp;&amp;amp; foo.bar) {
	return foo.bar();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return foo?.bar?.();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the first case, you return conditionally, whereas in the second case you return always. This will not introduce any issues if the conditional is the last statement in your function, but it will change the control flow if it’s not.&lt;/p&gt;
&lt;h4 id=&quot;sometimes%2C-it-can-fix-bugs-too!&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#sometimes%2C-it-can-fix-bugs-too!&quot;&gt;Sometimes, it can fix bugs too!&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Take a look at this code I encountered during my refactoring:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * Get the current value of a CSS property on an element
 */
getStyle: (element, property) =&amp;gt; {
	if (element) {
		var value = getComputedStyle(element).getPropertyValue(property);

		if (value) {
			return value.trim();
		}
	}
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can you spot the bug? If &lt;code&gt;value&lt;/code&gt; is an empty string (and given the context, it could very well be), the function will return &lt;code&gt;undefined&lt;/code&gt;, because an empty string is falsy! Rewriting it to use optional chaining fixes this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (element) {
	var value = getComputedStyle(element).getPropertyValue(property);

	return value?.trim();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if &lt;code&gt;value&lt;/code&gt; is the empty string, it will still return an empty string and it will only return &lt;code&gt;undefined&lt;/code&gt; when &lt;code&gt;value&lt;/code&gt; is nullish.&lt;/p&gt;
&lt;h4 id=&quot;finding-usages-becomes-trickier&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#finding-usages-becomes-trickier&quot;&gt;Finding usages becomes trickier&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This was pointed out by Razvan Caliman on Twitter:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/razvancaliman/status/1273638529399230464&quot;&gt;https://twitter.com/razvancaliman/status/1273638529399230464&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;bottom-line&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#bottom-line&quot;&gt;Bottom line&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the end, this refactor made Mavo about 2KB lighter and saved 37 lines of code. It did however make the transpiled version 79 lines and 9KB (!) heavier.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mavoweb/mavo/commit/a8fb2e1f8c478aa7110aaf13ade57a40825ec71e&quot;&gt;Here is the relevant commit&lt;/a&gt;, for your perusal. I tried my best to exercise restraint and not introduce any unrelated refactoring in this commit, so that the diff is chock-full of optional chaining examples. It has 104 additions and 141 deletions, so I’d wager it has about 100 examples of optional chaining in practice. Hope it’s helpful!&lt;/p&gt;
</content>
  </entry><entry>
    <title>The Cicada Principle, revisited with CSS variables</title>
    <link href="https://lea.verou.me/2020/07/the-cicada-principle-revisited-with-css-variables/"/>
    <updated>2020-07-07T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3066</id>
    <content xml:lang="en" type="html">&lt;p&gt;Many of today’s web crafters were not writing CSS at the time Alex Walker’s landmark article &lt;a href=&quot;https://www.sitepoint.com/the-cicada-principle-and-why-it-matters-to-web-designers/&quot;&gt;The Cicada Principle and Why it Matters to Web Designers&lt;/a&gt; was published in 2011. Last I heard of it was in 2016, when it was &lt;a href=&quot;https://css-tricks.com/cicada-principle-css/&quot;&gt;used in conjunction with blend modes&lt;/a&gt; to pseudo-randomize backgrounds even further.&lt;/p&gt;
&lt;p&gt;So what &lt;em&gt;is&lt;/em&gt; the Cicada Principle and how does it relate to web design in a nutshell? It boils down to: when using repeating elements (tiled backgrounds, different effects on multiple elements etc), using prime numbers for the size of the repeating unit maximizes the &lt;em&gt;appearance&lt;/em&gt; of organic randomness. Note that this only works when the parameters you set are independent.&lt;/p&gt;
&lt;p&gt;When I &lt;a href=&quot;https://lea.verou.me/2020/06/new-decade-new-theme/&quot;&gt;recently redesigned my blog&lt;/a&gt;, I ended up using a variation of the Cicada principle to pseudo-randomize the angles of code snippets. I didn’t think much of it until I saw &lt;a href=&quot;https://twitter.com/StuRobson/status/1273904521132072960&quot;&gt;this tweet&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/StuRobson/status/1273904521132072960&quot;&gt;https://twitter.com/StuRobson/status/1273904521132072960&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This made me think: hey, maybe I should actually write a blog post about the technique. After all, the technique itself is useful for way more than angles on code snippets.&lt;/p&gt;
&lt;p&gt;The main idea is simple: You write your main rule using CSS variables, and then use &lt;code&gt;:nth-of-*()&lt;/code&gt; rules to set these variables to something different every N items. If you use enough variables, and choose your Ns for them to be prime numbers, you reach a good appearance of pseudo-randomness with relatively small Ns.&lt;/p&gt;
&lt;p&gt;In the case of code samples, I only have two different top cuts (going up or going down) and two different bottom cuts (same), which produce 2*2 = 4 different shapes. Since I only had four shapes, I wanted to maximize the pseudo-randomness of their order. A first attempt looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pre {
	clip-path: polygon(var(--clip-top), var(--clip-bottom));
	--clip-top: 0 0, 100% 2em;
	--clip-bottom: 100% calc(100% - 1.5em), 0 100%;
}

pre:nth-of-type(odd) {
	--clip-top: 0 2em, 100% 0;
}

pre:nth-of-type(3n + 1) {
	--clip-bottom: 100% 100%, 0 calc(100% - 1.5em);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, the exact sequence of shapes repeats every 2 * 3 = 6 code snippets. Also, the alternative &lt;code&gt;--clip-bottom&lt;/code&gt; doesn’t really get the same visibility as the others, being present only 33.333% of the time. However, if we just add one more selector:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pre {
	clip-path: polygon(var(--clip-top), var(--clip-bottom));
	--clip-top: 0 0, 100% 2em;
	--clip-bottom: 100% calc(100% - 1.5em), 0 100%;
}

pre:nth-of-type(odd) {
	--clip-top: 0 2em, 100% 0;
}

pre:nth-of-type(3n + 1),
pre:nth-of-type(5n + 1) {
	--clip-bottom: 100% 100%, 0 calc(100% - 1.5em);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the exact same sequence of shapes repeats every 2 * 3 * 5 = 30 code snippets, probably way more than I will have in any article. And it’s more fair to the alternate &lt;code&gt;--clip-bottom&lt;/code&gt;, which now gets 1/3 + 1/5 - 1/15 = 46.67%, which is almost as much as the alternate &lt;code&gt;--clip-top&lt;/code&gt; gets!&lt;/p&gt;
&lt;p&gt;You can explore this effect in &lt;a href=&quot;https://codepen.io/leaverou/pen/8541bfd3a42551f8845d668f29596ef9?editors=1100&quot;&gt;this codepen&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/8541bfd3a42551f8845d668f29596ef9?editors=1100&quot;&gt;https://codepen.io/leaverou/pen/8541bfd3a42551f8845d668f29596ef9?editors=1100&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or, to better explore how different CSS creates different pseudo-randomness, you can use &lt;a href=&quot;https://codepen.io/leaverou/pen/NWxaPVx&quot;&gt;this content-less version&lt;/a&gt; with three variations:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/NWxaPVx&quot;&gt;https://codepen.io/leaverou/pen/NWxaPVx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course, the illusion of randomness is much better with more shapes, e.g. if &lt;a href=&quot;https://codepen.io/leaverou/pen/dyGmbJJ?editors=1100&quot;&gt;we introduce a third type of edge&lt;/a&gt; we get 3 * 3 = 9 possible shapes:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/dyGmbJJ?editors=1100&quot;&gt;https://codepen.io/leaverou/pen/dyGmbJJ?editors=1100&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also used primes 7 and 11, so that the sequence repeats every 77 items. In general, the larger primes you use, the better the illusion of randomness, but you need to include more selectors, which can get tedious.&lt;/p&gt;
&lt;h2 id=&quot;other-examples&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/07/the-cicada-principle-revisited-with-css-variables/#other-examples&quot;&gt;Other examples&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So this got me thinking: What else would this technique be cool on? Especially if we include more values as well, we can pseudo-randomize the result itself better, and not just the order of only 4 different results.&lt;/p&gt;
&lt;p&gt;So I did a few experiments.&lt;/p&gt;
&lt;h4 id=&quot;pseudo-randomized-color-swatches&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/07/the-cicada-principle-revisited-with-css-variables/#pseudo-randomized-color-swatches&quot;&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/RwrLPer&quot;&gt;Pseudo-randomized color swatches&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/NWxXQKX&quot;&gt;https://codepen.io/leaverou/pen/NWxXQKX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pseudo-randomized color swatches, with variables for hue, saturation, and lightness.&lt;/p&gt;
&lt;p&gt;And &lt;a href=&quot;https://codepen.io/leaverou/pen/RwrLPer&quot;&gt;an alternative version&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/RwrLPer&quot;&gt;https://codepen.io/leaverou/pen/RwrLPer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Which one looks more random? Why do you think that is?&lt;/p&gt;
&lt;h4 id=&quot;pseudo-randomized-border-radius&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/07/the-cicada-principle-revisited-with-css-variables/#pseudo-randomized-border-radius&quot;&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/ZEQXOrd&quot;&gt;Pseudo-randomized border-radius&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Admittedly, this one can be done with just longhands, but since I realized this after I had already made it, I figured eh, I may as well include it 🤷🏽‍♀️&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/ZEQXOrd&quot;&gt;https://codepen.io/leaverou/pen/ZEQXOrd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is also really cool when &lt;a href=&quot;https://codepen.io/leaverou/pen/oNbGzeE&quot;&gt;combined with pseudo-random colors&lt;/a&gt; (just hue this time):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/oNbGzeE&quot;&gt;https://codepen.io/leaverou/pen/oNbGzeE&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;pseudo-randomized-snowfall&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/07/the-cicada-principle-revisited-with-css-variables/#pseudo-randomized-snowfall&quot;&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/YzwrWvV?editors=1100&quot;&gt;Pseudo-randomized snowfall&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Lots of things here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/translate&quot;&gt;translate&lt;/a&gt; and transform together to animate them separately without resorting to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CSS/RegisterProperty&quot;&gt;CSS.registerPropery()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pseudo-randomized horizontal offset, animation-delay, font-size&lt;/li&gt;
&lt;li&gt;Technically we don’t need CSS variables to pseudo-randomize &lt;code&gt;font-size&lt;/code&gt;, we can just set the property itself. However, variables enable us to pseudo-randomize it via a multiplier, in order to decouple the base font size from the pseudo-randomness, so we can edit them independently. And then we can use the same multiplier in &lt;code&gt;animation-duration&lt;/code&gt; to make smaller snowflakes fall slower!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/YzwrWvV?editors=1100&quot;&gt;https://codepen.io/leaverou/pen/YzwrWvV?editors=1100&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;conclusions&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/07/the-cicada-principle-revisited-with-css-variables/#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In general, the larger the primes you use, the better the illusion of randomness. With smaller primes, you will get more variation, but less appearance of randomness.&lt;/p&gt;
&lt;p&gt;There are two main ways to use primes to create the illusion of randomness with &lt;code&gt;:nth-child()&lt;/code&gt; selectors:&lt;/p&gt;
&lt;p&gt;The first way is to set each trait on &lt;code&gt;:nth-child(pn + b)&lt;/code&gt; where p is a prime that increases with each value and b is constant for each trait, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:nth-child(3n + 1)  { property1: value11; }
:nth-child(5n + 1)  { property1: value12; }
:nth-child(7n + 1)  { property1: value13; }
:nth-child(11n + 1) { property1: value14; }
...
:nth-child(3n + 2)  { property2: value21; }
:nth-child(5n + 2)  { property2: value22; }
:nth-child(7n + 2)  { property2: value23; }
:nth-child(11n + 2) { property2: value24; }
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The benefit of this approach is that you can have as few or as many values as you like. The drawback is that because primes are sparse, and become sparser as we go, you will have a lot of “holes” where your base value is applied.&lt;/p&gt;
&lt;p&gt;The second way (which is more on par with the original Cicada principle) is to set each trait on &lt;code&gt;:nth-child(pn + b)&lt;/code&gt; where p is constant per trait, and b increases with each value:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:nth-child(5n + 1) { property1: value11; }
:nth-child(5n + 2) { property1: value12; }
:nth-child(5n + 3) { property1: value13; }
:nth-child(5n + 4) { property1: value14; }
...
:nth-child(7n + 1) { property2: value21; }
:nth-child(7n + 2) { property2: value22; }
:nth-child(7n + 3) { property2: value23; }
:nth-child(7n + 4) { property2: value24; }
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates a better overall impression of randomness (especially if you order the values in a pseudo-random way too) without “holes”, but is more tedious, as you need as many values as the prime you’re using.&lt;/p&gt;
&lt;p&gt;What other cool examples can you think of?&lt;/p&gt;
</content>
  </entry><entry>
    <title>Releasing MaVoice: A free app to vote on repo issues</title>
    <link href="https://lea.verou.me/2020/07/releasing-mavoice-a-free-app-to-vote-on-repo-issues/"/>
    <updated>2020-07-11T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3081</id>
    <content xml:lang="en" type="html">&lt;p&gt;First off, some news: &lt;a href=&quot;https://github.com/HTTPArchive/almanac.httparchive.org/issues/898&quot;&gt;I agreed to be this year’s CSS content lead for the Web Almanac&lt;/a&gt;! One of the first things to do is to flesh out what statistics we should study to answer the question &lt;em&gt;“What is the state of CSS in 2020?”&lt;/em&gt;. You can see &lt;a href=&quot;https://almanac.httparchive.org/en/2019/css&quot;&gt;last year’s chapter&lt;/a&gt; to get an idea of what kind of statistics could help answer that question.&lt;/p&gt;
&lt;p&gt;Of course, my first thought was &lt;em&gt;“We should involve the community! People might have great ideas of statistics we could study!”&lt;/em&gt;. But what should we use to vote on ideas and make them rise to the top?&lt;/p&gt;
&lt;p&gt;I wanted to use &lt;a href=&quot;https://github.com/LeaVerou/css-almanac&quot;&gt;a repo&lt;/a&gt; to manage all this, since I like all the conveniences for managing issues. However, there is not much on Github for voting. You can add 👍 reactions, but not sort by them, and voting itself is tedious: you need to open the comment, click on the reaction, then go back to the list of issues, rinse and repeat. Ideally, I wanted something like UserVoice™️, which lets you vote with one click, and sorts proposals by votes.&lt;/p&gt;
&lt;p&gt;And then it dawned on me: I’ll just build a &lt;a href=&quot;https://mavo.io/&quot;&gt;Mavo&lt;/a&gt; app on top of the repo issues, that displays them as proposals to be voted on and sorts by 👍 reactions, UserVoice™️-style but without the UserVoice™️ price tag. 😎 In fact, I had started such a Mavo app a couple years ago, and never finished or released it. So, I just dug it up and resurrected it from its ashes! It’s — quite fittingly I think — called &lt;em&gt;MaVoice&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.verou.me/mavoice&quot;&gt;&lt;img src=&quot;https://lea.verou.me/2020/07/releasing-mavoice-a-free-app-to-vote-on-repo-issues/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can set it to any repo via the &lt;code&gt;repo&lt;/code&gt; URL parameter, and any label via the &lt;code&gt;labels&lt;/code&gt; URL param&lt;/strong&gt; (defaults to &lt;code&gt;enhancement&lt;/code&gt;) &lt;strong&gt;to create a customized URL for any repo you want in seconds!&lt;/strong&gt; For example, here’s the URL for the css-almanac repo, which only displays issues with the label “proposed stat”: &lt;a href=&quot;https://projects.verou.me/mavoice/?repo=leaverou/css-almanac&amp;amp;labels=proposed%20stat&quot;&gt;https://projects.verou.me/mavoice/?repo=leaverou/css-almanac&amp;amp;labels=proposed%20stat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While this did need some custom JS, unlike other Mavo apps which need none, I’m still pretty happy I could spin up this kind of app with &lt;a href=&quot;https://github.com/LeaVerou/mavoice/blob/master/mavoice.js&quot;&gt;&amp;lt; 100 lines of JS&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;Yes, it’s still rough around the edges, and I’m sure you can find many things that could be improved, but it does the job for now, and PRs are always welcome 🤷🏽‍♀️&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The main caveat if you decide to use this for your own repo&lt;/strong&gt;: Because (to my knowledge) Github API still does not provide a way to sort issues by 👍 reactions, or even reactions in general (in either the v3 REST API, or the GraphQL API), issues are instead requested sorted by comment count, and are &lt;a href=&quot;https://github.com/LeaVerou/mavoice/blob/master/mavoice.js#L42&quot;&gt;sorted by 👍 reactions client-side, right before render&lt;/a&gt;. Due to API limitations, &lt;a href=&quot;https://github.com/LeaVerou/mavoice/blob/master/index.html#L14&quot;&gt;this API call&lt;/a&gt; &lt;a href=&quot;https://developer.github.com/v3/#pagination&quot;&gt;can only fetch the top 100 results&lt;/a&gt;. This means that if you have more than 100 issues to display (i.e. more than 100 open issues with the given label), it could potentially be inaccurate, especially if you have issues with many reactions and few comments.&lt;/p&gt;
&lt;p&gt;Another caveat is that &lt;strong&gt;because this is basically reactions on Github issues, there is no limit on how many issues someone can vote on&lt;/strong&gt;. In theory, if they’re a bad actor (or just overexcited), they can just vote on everything. But I suppose that’s an intrinsic problem with using reactions to vote for things, having a UI for it just reveals the existing issue, it doesn’t create it.&lt;/p&gt;
&lt;p&gt;Hope you enjoy, and don’t forget to &lt;a href=&quot;https://projects.verou.me/mavoice/?repo=leaverou/css-almanac&amp;amp;labels=proposed%20stat&quot;&gt;vote on which CSS stats we should study&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Import non-ESM libraries in ES Modules, with client-side vanilla JS</title>
    <link href="https://lea.verou.me/2020/07/import-non-esm-libraries-in-es-modules-with-client-side-vanilla-js/"/>
    <updated>2020-07-20T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3092</id>
    <content xml:lang="en" type="html">&lt;p&gt;In case you haven’t heard, &lt;a href=&quot;https://caniuse.com/#search=modules&quot;&gt;ECMAScript modules (ESM) are now supported everywhere&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;While I do have &lt;a href=&quot;https://lea.verou.me/2020/07/import-non-esm-libraries-in-es-modules-with-client-side-vanilla-js/#gripes&quot;&gt;some gripes with them&lt;/a&gt;, it’s too late for any of these things to change, so I’m embracing the good parts and have cautiously started using them in new projects. I do quite like that I can just use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;&lt;code&gt;import&lt;/code&gt; statements and dynamic &lt;code&gt;import()&lt;/code&gt;&lt;/a&gt; for dependencies with URLs right from my JS, without module loaders, extra &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags in my HTML, or hacks with dynamic &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags and &lt;code&gt;load&lt;/code&gt; events (in fact, &lt;a href=&quot;https://blissfuljs.com/docs.html#fn-include&quot;&gt;Bliss has had a helper for this very thing&lt;/a&gt; that I’ve used extensively in older projects). I love that I don’t need any libraries for this, and I can use it client-side, anywhere, even in my codepens.&lt;/p&gt;
&lt;p&gt;Once you start using ESM, you realize that most libraries out there are not written in ESM, nor do they include ESM builds. Many are still using globals, and those that target Node.js use CommonJS (CJS). What can we do in that case? Unfortunately, ES Modules are not really designed with any import &lt;em&gt;(pun intended)&lt;/em&gt; mechanism for these syntaxes, but, there are some strategies we could employ.&lt;/p&gt;
&lt;h2 id=&quot;libraries-using-globals&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/07/import-non-esm-libraries-in-es-modules-with-client-side-vanilla-js/#libraries-using-globals&quot;&gt;Libraries using globals&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Technically, a JS file can be parsed as a module even with no imports or exports.&lt;/strong&gt; Therefore, almost any library that uses globals can be fair game, it can just be imported as a module with no exports! How do we do that?&lt;/p&gt;
&lt;p&gt;While you may not see this syntax a lot, you don’t actually need to name anything in the &lt;code&gt;import&lt;/code&gt; statement. There is a syntax to import a module entirely for its side effects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;quot;url/to/library.js&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This syntax works fine for libraries that use globals, since declaring a global is essentially a side effect, and all modules share the same global scope. For this to work, the imported library needs to satisfy the following conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It should declare the global as a property on &lt;code&gt;window&lt;/code&gt; (or &lt;code&gt;self&lt;/code&gt;), not via &lt;code&gt;var Foo&lt;/code&gt; or &lt;code&gt;this&lt;/code&gt;. In modules top-level variables are local to the module scope, and &lt;code&gt;this&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, so the last two ways would not work.&lt;/li&gt;
&lt;li&gt;Its code should not violate &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;strict mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The URL is either same-origin or CORS-enabled. While &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; can run cross-origin resources, &lt;code&gt;import&lt;/code&gt; sadly cannot.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, you are running a library as a module that was never written with the intention to be run as a module. Many are written in a way that also works in a module context, but not all. &lt;a href=&quot;https://exploringjs.com/es6/ch_modules.html#_browsers-scripts-versus-modules&quot;&gt;ExploringJS has an excellent summary of the differences between the two&lt;/a&gt;. For example, here is &lt;a href=&quot;https://codepen.io/leaverou/pen/dyGQXOo?editors=0011&quot;&gt;a trivial codepen loading jQuery&lt;/a&gt; via this method.&lt;/p&gt;
&lt;h2 id=&quot;libraries-using-cjs-without-dependencies&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/07/import-non-esm-libraries-in-es-modules-with-client-side-vanilla-js/#libraries-using-cjs-without-dependencies&quot;&gt;Libraries using CJS without dependencies&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I dealt with this today, and it’s what prompted this post. I was trying to play around with &lt;a href=&quot;https://github.com/reworkcss/css&quot;&gt;Rework CSS&lt;/a&gt;, a CSS parser used by the &lt;a href=&quot;https://httparchive.org/&quot;&gt;HTTPArchive&lt;/a&gt; for analyzing CSS in the wild. However, all its code and documentation assumes Node.js. If I could avoid it, I’d really rather not have to make a Node.js app to try this out, or have to dive in module loaders to be able to require CJS modules in the browser. Was there anything I could do to just run this in a codepen, no strings attached?&lt;/p&gt;
&lt;p&gt;After a little googling, I found &lt;a href=&quot;https://github.com/reworkcss/css/issues/117&quot;&gt;this issue&lt;/a&gt;. So there was a JS file I could import and get all the parser functionality. Except …there was one little problem. When you look &lt;a href=&quot;https://cdn.jsdelivr.net/gh/reworkcss/css@latest/lib/parse/index.js&quot;&gt;at the source&lt;/a&gt;, it uses &lt;code&gt;module.exports&lt;/code&gt;. If you just &lt;code&gt;import&lt;/code&gt; that file, you predictably get an error that &lt;code&gt;module&lt;/code&gt; is not defined, not to mention there are no ESM exports.&lt;/p&gt;
&lt;p&gt;My first thought was to stub &lt;code&gt;module&lt;/code&gt; as a global variable, import this as a module, and then read &lt;code&gt;module.exports&lt;/code&gt; and give it a proper name:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window.module = {};
import &amp;quot;https://cdn.jsdelivr.net/gh/reworkcss/css@latest/lib/parse/index.js&amp;quot;;
console.log(module.exports);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, I was still getting the error that &lt;code&gt;module&lt;/code&gt; was not defined. How was that possible?! They all share the same global context!! &lt;em&gt;*pulls hair out*&lt;/em&gt; After some debugging, it dawned on me: &lt;a href=&quot;https://exploringjs.com/es6/ch_modules.html#_imports-are-hoisted&quot;&gt;static &lt;code&gt;import&lt;/code&gt; statements are hoisted&lt;/a&gt;; the “module” was getting executed before the code that imports it and stubs &lt;code&gt;module&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Dynamic imports to the rescue! &lt;code&gt;import()&lt;/code&gt; is executed exactly where it’s called, and returns a promise. So this actually works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window.module = {};
import(&amp;quot;https://cdn.jsdelivr.net/gh/reworkcss/css@latest/lib/parse/index.js&amp;quot;).then(_ =&amp;gt; {
	console.log(module.exports);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could even turn it into a wee function, which I cheekily called &lt;code&gt;require()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;async function require(path) {
	let _module = window.module;
	window.module = {};
	await import(path);
	let exports = module.exports;
	window.module = _module; // restore global
	return exports;
}

(async () =&amp;gt; { // top-level await cannot come soon enough…

let parse = await require(&amp;quot;https://cdn.jsdelivr.net/gh/reworkcss/css@latest/lib/parse/index.js&amp;quot;);
console.log(parse(&amp;quot;body { color: red }&amp;quot;));

})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can fiddle with this code in a &lt;a href=&quot;https://codepen.io/leaverou/pen/jOWQMzN?editors=0011&quot;&gt;live pen here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Do note that this technique will only work if the module you’re importing doesn’t import other CJS modules. If it does, you’d need a more elaborate &lt;code&gt;require()&lt;/code&gt; function, which is left as an exercise for the reader. Also, just like the previous technique, the code needs to comply with strict mode and not be cross-origin.&lt;/p&gt;
&lt;p&gt;A similar technique can be used to load AMD modules via &lt;code&gt;import()&lt;/code&gt;, just stub &lt;code&gt;define()&lt;/code&gt; and you’re good to go.&lt;/p&gt;
&lt;p&gt;So, with this technique I was able to quickly whip up a &lt;a href=&quot;https://codepen.io/leaverou/pen/qBbQdGG&quot;&gt;ReworkCSS playground&lt;/a&gt;. You just edit the CSS in CodePen and see the resulting &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt;, and you can even fork it to share a specific AST with others! :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/qBbQdGG&quot;&gt;https://codepen.io/leaverou/pen/qBbQdGG&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;update%3A-cjs-with-static-imports&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/07/import-non-esm-libraries-in-es-modules-with-client-side-vanilla-js/#update%3A-cjs-with-static-imports&quot;&gt;Update: CJS with static imports&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After this article was posted, a clever hack was &lt;a href=&quot;https://twitter.com/justinfagnani/status/1285325206811107329&quot;&gt;pointed out to me on Twitter&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/justinfagnani/status/1285325206811107329&quot;&gt;https://twitter.com/justinfagnani/status/1285325206811107329&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While this works great if you can have multiple separate files, it doesn’t work when you’re e.g. quickly trying out a pen. Data URIs to the rescue! &lt;a href=&quot;https://codepen.io/leaverou/pen/XWXoEJq?editors=0010&quot;&gt;Turns out you can &lt;code&gt;import&lt;/code&gt; a module from a data URI&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;So let’s &lt;a href=&quot;https://codepen.io/leaverou/pen/xxZmWvx&quot;&gt;adapt our Rework example to use this&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/xxZmWvx&quot;&gt;https://codepen.io/leaverou/pen/xxZmWvx&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;addendum%3A-esm-gripes&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/07/import-non-esm-libraries-in-es-modules-with-client-side-vanilla-js/#addendum%3A-esm-gripes&quot;&gt;Addendum: ESM gripes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since I was bound to get questions about what my gripes are with ESM, I figured I should mention them pre-emptively.&lt;/p&gt;
&lt;p&gt;First off, a little context. Nearly all of the JS I write is for libraries. &lt;a href=&quot;https://github.com/leaverou&quot;&gt;I write libraries as a hobby&lt;/a&gt;, &lt;a href=&quot;https://mavo.io/&quot;&gt;I write libraries as my job&lt;/a&gt;, and sometimes &lt;a href=&quot;https://inspirejs.org/&quot;&gt;I write libraries to help me do my job&lt;/a&gt;. My job is usability (HCI) research (and specifically making programming easier), so I’m very sensitive to developer experience issues. I want my libraries to be usable not just by seasoned developers, but by novices too.&lt;/p&gt;
&lt;p&gt;ESM has not been designed with novices in mind. It evolved from the CJS/UMD/AMD ecosystem, in which most voices are seasoned developers.&lt;/p&gt;
&lt;p&gt;My main gripe with them, is how they expect full adoption, and settle for nothing less. There is no way to create a bundle of a library that can be used &lt;em&gt;both&lt;/em&gt; traditionally, with a global, or as an ES module. There is also no standard way to import older libraries, or libraries using other module patterns (yes, this very post is about doing that, but essentially these are hacks, and there should be a better way). I understand the benefits of static analysis for imports and exports, but I wish there was a dynamic alternative to &lt;code&gt;export&lt;/code&gt;, analogous to the dynamic &lt;code&gt;import()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In terms of migrating to ESM, I also dislike how opinionated they are: strict mode is great, but forcing it doesn’t help people trying to migrate older codebases. Restricting them to cross-origin is also a pain, using &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;s from other domains made it possible to quickly experiment with various libraries, and I would love for that to be true for modules too.&lt;/p&gt;
&lt;p&gt;But overall, I’m excited that JS now natively supports a module mechanism, and I expect any library I release in the future to utilize it.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Introspecting CSS via the CSS OM: Get supported properties, shorthands, longhands</title>
    <link href="https://lea.verou.me/2020/07/introspecting-css-via-the-css-om-getting-supported-properties-shorthands-longhands/"/>
    <updated>2020-07-27T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3109</id>
    <content xml:lang="en" type="html">&lt;p&gt;For &lt;a href=&quot;https://github.com/LeaVerou/css-almanac/issues/10&quot;&gt;some of the statistics&lt;/a&gt; we are going to study for this year’s Web Almanac we may end up needing a list of CSS shorthands and their longhands. Now this is typically done by &lt;a href=&quot;https://github.com/LeaVerou/prefixfree/blob/gh-pages/prefixfree.js#L298&quot;&gt;maintaining a data structure by hand&lt;/a&gt; or &lt;a href=&quot;https://github.com/LeaVerou/prefixfree/blob/gh-pages/prefixfree.js#L298&quot;&gt;guessing based on property name structure&lt;/a&gt;. But I knew that if we were going to do it by hand, it’s very easy to miss a few of the less popular ones, and the naming rule where shorthands are a prefix of their longhands &lt;a href=&quot;https://lists.w3.org/Archives/Public/www-style/2012Apr/0155.html&quot;&gt;has failed to get standardized&lt;/a&gt; and now has even more exceptions than it used to. And even if we do an incredibly thorough job, next year the data structure will be inaccurate, because CSS and its implementations evolve fast. The browser knows what the shorthands are, surely we should be able to get the information from it …right? Then we could use it directly if this is a client-side library, or in the case of the Almanac, where code needs to be fast because it will run on millions of websites, paste the precomputed result into whatever script we run.&lt;/p&gt;
&lt;p&gt;There are essentially two steps for this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get a list of all CSS properties&lt;/li&gt;
&lt;li&gt;Figure out how to test if a given property is a shorthand and how to get its longhands if so.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I decided to tell this story in the inverse order. In my exploration, I first focused on figuring out shorthands (2), because I had coded getting a list of properties many times before, but since (1) is useful in its own right (and probably in more use cases), I felt it makes more sense to examine that first.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; I’m using &lt;code&gt;document.body&lt;/code&gt; instead of a dummy element in these examples, because I like to experiment in &lt;code&gt;about:blank&lt;/code&gt;, and it’s just there and because this way you can just copy stuff to the console and try it wherever, even right here while reading this post. However, if you use this as part of code that runs on a real website, it goes without saying that you should create and test things on a dummy element instead!&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;getting-a-list-of-all-css-properties-from-the-browser&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/07/introspecting-css-via-the-css-om-getting-supported-properties-shorthands-longhands/#getting-a-list-of-all-css-properties-from-the-browser&quot;&gt;Getting a list of all CSS properties from the browser&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In Chrome and Safari, this is as simple as &lt;code&gt;Object.getOwnPropertyNames(document.body.style)&lt;/code&gt;. However, in Firefox, this doesn’t work. Why is that? To understand this (and how to work around it), we need to dig a bit deeper.&lt;/p&gt;
&lt;p&gt;In Chrome and Safari, &lt;code&gt;element.style&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration&quot;&gt;&lt;code&gt;CSSStyleDeclaration&lt;/code&gt;&lt;/a&gt; instance. In Firefox however, it is a &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties&quot;&gt;&lt;code&gt;CSS2Properties&lt;/code&gt;&lt;/a&gt; instance, which inherits from &lt;code&gt;CSSStyleDeclaration&lt;/code&gt;. &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties&quot;&gt;&lt;code&gt;CSS2Properties&lt;/code&gt;&lt;/a&gt; is an older interface, defined in &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties&quot;&gt;the DOM 2 Specification&lt;/a&gt;, which is now obsolete. In the &lt;a href=&quot;https://drafts.csswg.org/cssom/#the-cssstyledeclaration-interface&quot;&gt;current relevant specification&lt;/a&gt;, &lt;code&gt;CSS2Properties&lt;/code&gt; is gone, and has been merged with &lt;code&gt;CSSStyleDeclaration&lt;/code&gt;. However, &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1290786&quot;&gt;Firefox hasn’t caught up yet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/07/introspecting-css-via-the-css-om-getting-supported-properties-shorthands-longhands/images/image-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Firefox on the left, Safari on the right. Chrome behaves like Safari.&lt;/p&gt;
&lt;p&gt;Since the properties are on &lt;code&gt;CSSStyleDeclaration&lt;/code&gt;, they are not own properties of &lt;code&gt;element.style&lt;/code&gt;, so &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; fails to return them. However, we can extract the &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; instance by using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto&quot;&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf&quot;&gt;Object.getPrototypeOf()&lt;/a&gt;, and then &lt;code&gt;Object.getOwnPropertyNames(Object.getPrototypeOf(document.body.style))&lt;/code&gt; gives us what we want!&lt;/p&gt;
&lt;p&gt;So we can combine the two to get a list of properties regardless of browser:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let properties = Object.getOwnPropertyNames(
	style.hasOwnProperty(&amp;quot;background&amp;quot;)?
	style : style.__proto__
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then, we just drop non-properties, and de-camelCase:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;properties = properties.filter(p =&amp;gt; style[p] === &amp;quot;&amp;quot;) // drop functions etc
	.map(prop =&amp;gt; { // de-camelCase
		prop = prop.replace(/[A-Z]/g, function($0) { return &#39;-&#39; + $0.toLowerCase() });

		if (prop.indexOf(&amp;quot;webkit-&amp;quot;) &amp;gt; -1) {
			prop = &amp;quot;-&amp;quot; + prop;
		}

		return prop;
	});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see a &lt;a href=&quot;https://codepen.io/leaverou/pen/eYJodjb?editors=0010&quot;&gt;codepen with the result here&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/eYJodjb?editors=0010&quot;&gt;https://codepen.io/leaverou/pen/eYJodjb?editors=0010&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;testing-if-a-property-is-a-shorthand-and-getting-a-list-of-longhands&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/07/introspecting-css-via-the-css-om-getting-supported-properties-shorthands-longhands/#testing-if-a-property-is-a-shorthand-and-getting-a-list-of-longhands&quot;&gt;Testing if a property is a shorthand and getting a list of longhands&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The main things to note are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you set a shorthand on an element’s inline style, you are essentially setting all its longhands.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.style&lt;/code&gt; is actually array-like, with numerical properties and &lt;code&gt;.length&lt;/code&gt; that gives you the number of properties set on it. This means you can use the spread operator on it:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; document.body.style.background = &amp;quot;red&amp;quot;;
&amp;gt; [...document.body.style]
&amp;lt; [
	&amp;quot;background-image&amp;quot;,
	&amp;quot;background-position-x&amp;quot;,
	&amp;quot;background-position-y&amp;quot;,
	&amp;quot;background-size&amp;quot;,
	&amp;quot;background-repeat-x&amp;quot;,
	&amp;quot;background-repeat-y&amp;quot;,
	&amp;quot;background-attachment&amp;quot;,
	&amp;quot;background-origin&amp;quot;,
	&amp;quot;background-clip&amp;quot;,
	&amp;quot;background-color&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interestingly, &lt;code&gt;document.body.style.cssText&lt;/code&gt; serializes to &lt;code&gt;background: red&lt;/code&gt; and not all the longhands.&lt;/p&gt;
&lt;p&gt;There is one exception: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/all&quot;&gt;The &lt;code&gt;all&lt;/code&gt; property&lt;/a&gt;. In Chrome, it does not quite behave as a shorthand:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; document.body.style.all = &amp;quot;inherit&amp;quot;;
&amp;gt; [...document.body.style]
&amp;lt; [&amp;quot;all&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whereas in Safari and Firefox, it actually returns every single property &lt;em&gt;that is not a shorthand&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/07/introspecting-css-via-the-css-om-getting-supported-properties-shorthands-longhands/images/image-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Firefox and Safari expand &lt;code&gt;all&lt;/code&gt; to literally all non-shorthand properties.&lt;/p&gt;
&lt;p&gt;While this is interesting from a trivia point of view, it doesn’t actually matter for our use case, since we don’t typically care about &lt;code&gt;all&lt;/code&gt; when constructing a list of shorthands, and if we do we can always add or remove it manually.&lt;/p&gt;
&lt;p&gt;So, to recap, we can easily get the longhands of a given shorthand:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function getLonghands(property) {
	let style = document.body.style;
	style[property] = &amp;quot;inherit&amp;quot;; // a value that works in every property
	let ret = [...style];
	style.cssText = &amp;quot;&amp;quot;; // clean up
	return ret;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;putting-the-pieces-together&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/07/introspecting-css-via-the-css-om-getting-supported-properties-shorthands-longhands/#putting-the-pieces-together&quot;&gt;Putting the pieces together&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can see how all the pieces fit together (and the output!) in &lt;a href=&quot;https://codepen.io/leaverou/pen/gOPEJxz?editors=0010&quot;&gt;this codepen&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/leaverou/pen/gOPEJxz?editors=0010&quot;&gt;https://codepen.io/leaverou/pen/gOPEJxz?editors=0010&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How many of these shorthands did you already know?&lt;/p&gt;
</content>
  </entry><entry>
    <title>Parsel: A tiny, permissive CSS selector parser</title>
    <link href="https://lea.verou.me/2020/09/parsel-a-tiny-permissive-css-selector-parser/"/>
    <updated>2020-09-07T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3126</id>
    <content xml:lang="en" type="html">&lt;p&gt;I’ve &lt;a href=&quot;https://lea.verou.me/tags/web-almanac/&quot;&gt;posted before about my work for the Web Almanac&lt;/a&gt; this year. To make it easier to calculate the stats about CSS selectors, we looked to use an existing selector parser, but most were too big and/or had dependencies or didn’t account for all selectors we wanted to parse, and we’d need to write our own walk and specificity methods anyway. So I did what I usually do in these cases: I wrote my own!&lt;/p&gt;
&lt;p&gt;You can find it &lt;a href=&quot;https://projects.verou.me/parsel/&quot;&gt;here&lt;/a&gt;: &lt;a href=&quot;https://projects.verou.me/parsel/&quot;&gt;https://projects.verou.me/parsel/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/09/parsel-a-tiny-permissive-css-selector-parser/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It not only parses CSS selectors, but also includes methods to walk the AST produced, as well as calculate specificity as an array and convert it to a number for easy comparison.&lt;/p&gt;
&lt;p&gt;It is one of my first libraries released as an ES module, and there are instructions about both using it as a module, and as a global, for those who would rather not deal with ES modules yet, because convenient as ESM are, I wouldn’t want to exclude those less familiar with modern JS.&lt;/p&gt;
&lt;p&gt;Please try it out and report any bugs! We plan to use it for Almanac stats in the next few days, so if you can spot bugs sooner rather than later, you can help that volunteer effort. I’m primarily interested in &lt;strong&gt;(realistic) valid selectors that are parsed incorrectly&lt;/strong&gt;. I’m aware there are many invalid selectors that are parsed weirdly, but that’s not a focus (hence the “permissive” aspect, there are many invalid selectors it won’t throw on, and that’s by design to keep the code small, the logic simple, and the functionality future-proof).&lt;/p&gt;
&lt;h3 id=&quot;how-it-works&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/09/parsel-a-tiny-permissive-css-selector-parser/#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you’re just interested in using this selector parser, read no further. This section is about how the parser works, for those interested in this kind of thing. :)&lt;/p&gt;
&lt;p&gt;I &lt;a href=&quot;https://github.com/LeaVerou/parsel/blob/master/parsel_aborted.js&quot;&gt;first started by writing a typical parser, with character-by-character gobbling and different modes&lt;/a&gt;, with code somewhat inspired by my familiarity with &lt;a href=&quot;https://ericsmekens.github.io/jsep/&quot;&gt;jsep&lt;/a&gt;. I quickly realized that was a more fragile approach for what I wanted to do, and would result in a much larger module. I also missed the ease and flexibility of doing things with regexes.&lt;/p&gt;
&lt;p&gt;However, since CSS selectors include strings and parens that can be nested, parsing them with regexes is a fool’s errand. &lt;em&gt;Nested structures are not &lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_language&quot;&gt;regular languages&lt;/a&gt;&lt;/em&gt; as my CS friends know. You cannot use a regex to find the closing parenthesis that corresponds to an opening parenthesis, since you can have other nested parens inside it. And it gets even more complex when there are other tokens that can nest, such as strings or comments. What if you have an opening paren that contains a string with a closing paren, like e.g. &lt;code&gt;(&amp;quot;foo)&amp;quot;)&lt;/code&gt;? A regex would match the closing paren inside the string. In fact, parsing the language of nested parens (strings like &lt;code&gt;(()(()))&lt;/code&gt;) with regexes is one of the typical (futile) exercises in a compilers course. Students struggle to do it because it’s an impossible task, and learn the hard way that not everything can be parsed with regexes.&lt;/p&gt;
&lt;p&gt;Unlike a typical programming language with lots of nested structures however, the language of CSS selectors is more limited. There are only two nested structures: strings and parens, and they only appear in specific types of selectors (namely attribute selectors, pseudo-classes and pseudo-elements). Once we get those out of the way, everything else can be easily parsed by regexes. So I decided to go with a hybrid approach: The selector is first looked at character-by-character, to extract strings and parens. We only extract top-level parens, since anything inside them can be parsed separately (when it’s a selector), or not at all. The strings are replaced by a single character, as many times as the length of the string, so that any character offsets do not change, and the strings themselves are stored in a stack. Same with parens.&lt;/p&gt;
&lt;p&gt;After that point, this modified selector language is a regular language that can be parsed with regexes. To do so, I follow an approach inspired by the early days of &lt;a href=&quot;https://prismjs.com/&quot;&gt;Prism&lt;/a&gt;: An &lt;a href=&quot;https://github.com/LeaVerou/parsel/blob/master/parsel.js#L1-L10&quot;&gt;object literal of tokens&lt;/a&gt; in the order they should be matched in, and &lt;a href=&quot;https://github.com/LeaVerou/parsel/blob/master/parsel.js#L49&quot;&gt;a function that tokenizes a string by iteratively matching tokens from an object literal&lt;/a&gt;. In fact, this function was taken from an early version of Prism and modified.&lt;/p&gt;
&lt;p&gt;After we have the list of tokens as a flat array, we can restore strings and parens, and then nest them appropriately to create an AST.&lt;/p&gt;
&lt;p&gt;Also note that the token regexes use the new-ish &lt;a href=&quot;https://2ality.com/2017/05/regexp-named-capture-groups.html&quot;&gt;named capture groups&lt;/a&gt; feature in ES2018, since it’s now &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Browser_compatibility&quot;&gt;supported pretty widely&lt;/a&gt; in terms of market share. For wider support, you can transpile :)&lt;/p&gt;
</content>
  </entry><entry>
    <title>Developer priorities throughout their career</title>
    <link href="https://lea.verou.me/2020/09/developer-priorities-throughout-their-career/"/>
    <updated>2020-09-16T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3134</id>
    <content xml:lang="en" type="html">&lt;p&gt;I made this chart in the amazing &lt;a href=&quot;https://excalidraw.com/&quot;&gt;Excalidraw&lt;/a&gt; about two weeks ago:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/09/developer-priorities-throughout-their-career/images/image-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It only took me 10 minutes! Shortly after, my laptop broke down into repeated kernel panics, and it spent about 10 days in service (I was in a remote place when it broke, so it took some time to get it to service). Yesterday, I was finally reunited with it, turned it on, launched Chrome, and saw it again. It gave me a smile, and I realized I never got to post it, so I &lt;a href=&quot;https://twitter.com/LeaVerou/status/1306001020636540934&quot;&gt;tweeted this&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeaVerou/status/1306001020636540934&quot;&gt;https://twitter.com/LeaVerou/status/1306001020636540934&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The tweet kinda blew up! It seems many, &lt;em&gt;many&lt;/em&gt; developers identify with it. A few also disagreed with it, especially with the “Does it actually work?” line. So I figured I should write a bit about the rationale behind it. I originally &lt;a href=&quot;https://twitter.com/LeaVerou/status/1306207138931445761&quot;&gt;wrote it in a tweet&lt;/a&gt;, but then I realized I should probably post it in a less transient medium, that is more well suited to longer text.&lt;/p&gt;
&lt;p&gt;When somebody starts coding, getting the code to work is already difficult enough, so there is no space for other priorities. Learning to formalize one’s thought to the degree a computer demands, and then serialize this thinking with an unforgiving syntax, is &lt;em&gt;hard&lt;/em&gt;. Writing code that works is THE priority, and whether it’s good code is not even a consideration.&lt;/p&gt;
&lt;p&gt;For more experienced programmers, whether it works is ephemeral: today it works, tomorrow a commit causes a regression, the day after another commit fixes it (yes, even with TDD. No testsuite gets close to 100% coverage). Whereas readability &amp;amp; maintainability do not fluctuate much. If they are not prioritized from the beginning, they are much harder to accomplish when you already have a large codebase full of technical debt.&lt;/p&gt;
&lt;p&gt;Code written by experienced programmers that doesn’t work, can often be fixed with hours or days of debugging. A nontrivial codebase that is not readable can take months or years to rewrite. So one tends to gravitate towards prioritizing what is easier to fix.&lt;/p&gt;
&lt;h3 id=&quot;the-%E2%80%9Cpeak-of-drought%E2%80%9D-and-other-over-abstractions&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/09/developer-priorities-throughout-their-career/#the-%E2%80%9Cpeak-of-drought%E2%80%9D-and-other-over-abstractions&quot;&gt;The “peak of drought” and other over-abstractions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Many developers identified with the &lt;em&gt;“peak of drought”&lt;/em&gt;. Indeed, like other aspects of maintainability, DRY is not even a concern at first. At some point, a programmer learns about the importance of DRY and gradually begins abstracting away duplication. However, you &lt;em&gt;can&lt;/em&gt; have too much of a good thing: soon the need to abstract away any duplication becomes all consuming and leads to absurd, awkward abstractions which actually get in the way and produce needless couplings, often to avoid duplicating very little code, once. In my own &lt;em&gt;“peak of drought”&lt;/em&gt; (which lasted far longer than the graph above suggests), I’ve written many useless functions, with parameters that make no sense, just to avoid duplicating a few lines of code once.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.to/jeroendedauw/the-fallacy-of-dry&quot;&gt;Many&lt;/a&gt; &lt;a href=&quot;https://dev.to/wuz/stop-trying-to-be-so-dry-instead-write-everything-twice-wet-5g33&quot;&gt;articles&lt;/a&gt; &lt;a href=&quot;https://medium.com/better-programming/when-dry-doesnt-work-go-wet-6befda0444bf&quot;&gt;have&lt;/a&gt; &lt;a href=&quot;http://joelabrahamsson.com/the-dry-obsession/&quot;&gt;been&lt;/a&gt; written about this phenomenon, so I’m not going to repeat their arguments here. As a programmer accumulates even more experience, they start seeing the downsides of over-abstraction and over-normalization and start favoring a more moderate approach which prioritizes readability over DRY when they are at odds.&lt;/p&gt;
&lt;p&gt;A similar thing happens with &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;design patterns&lt;/a&gt; too. At some point, a few years in, a developer reads a book or takes a course about design patterns. Soon thereafter, their code becomes so littered with design patterns that it is practically incomprehensible. &lt;em&gt;“When all you have is a hammer, everything looks like a nail”&lt;/em&gt;. I have a feeling that Java and Java-like languages are particularly accommodating to this ailment, so this phenomenon tends to proliferate in their codebases. At some point, the developer has to go back to their past code, and they realize themselves that it is unreadable. Eventually, they learn to use design patterns when they are actually useful, and favor readability over design patterns when the two are at odds.&lt;/p&gt;
&lt;p&gt;What aspects of your coding practice have changed over the years? How has your perspective shifted? What mistakes of the past did you eventually realize?&lt;/p&gt;
</content>
  </entry><entry>
    <title>The failed promise of Web Components</title>
    <link href="https://lea.verou.me/2020/09/the-failed-promise-of-web-components/"/>
    <updated>2020-09-24T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3147</id>
    <content xml:lang="en" type="html">&lt;p&gt;Web Components had so much potential to empower HTML to do more, and make web development more accessible to non-programmers and easier for programmers. Remember how exciting it was every time we got new shiny HTML elements that actually &lt;em&gt;do stuff&lt;/em&gt;? Remember how exciting it was to be able to do sliders, color pickers, dialogs, disclosure widgets straight in the HTML, without having to include any widget libraries?&lt;/p&gt;
&lt;p&gt;The promise of Web Components was that we’d get this convenience, but for a much wider range of HTML elements, developed much faster, as nobody needs to wait for the full spec + implementation process. We’d just include a script, and boom, we have more elements at our disposal!&lt;/p&gt;
&lt;p&gt;Or, that was the idea. Somewhere along the way, the space got flooded by JS frameworks aficionados, who revel in complex APIs, overengineered build processes and dependency graphs that look like the roots of a banyan tree.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://live.staticflickr.com/2025/32441377780_e3acf6de12_b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;This is what the roots of a Banyan tree look like. &lt;a href=&quot;https://www.flickr.com/photos/79721788@N00/32441377780/&quot;&gt;Photo by David Stanley on Flickr (CC-BY)&lt;/a&gt;.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Perusing the components on &lt;a href=&quot;https://www.webcomponents.org/&quot;&gt;webcomponents.org&lt;/a&gt; fills me with anxiety, and I’m perfectly comfortable writing JS — I write JS for a living! What hope do those who can’t write JS have? Using a custom element from the directory often needs to be preceded by a ritual of npm flugelhorn, import clownshoes, build quux, all completely unapologetically because “here is my truckload of dependencies, yeah, what”. Many steps are even omitted, likely because they are “obvious”. Often, you wade through the maze only to find the component doesn’t work anymore, or is not fit for your purpose.&lt;/p&gt;
&lt;p&gt;Besides setup, the main problem is that HTML is not treated with the appropriate respect in the design of these components. They are not designed as closely as possible to standard HTML elements, but &lt;em&gt;expect&lt;/em&gt; JS to be written for them to do anything. HTML is simply treated as a shorthand, or worse, as merely a marker to indicate where the element goes in the DOM, with all parameters passed in via JS. I recall &lt;a href=&quot;https://adactio.com/articles/12839#webcomponents&quot;&gt;a wonderful talk by Jeremy Keith&lt;/a&gt; a few years ago about this very phenomenon, where he discussed &lt;a href=&quot;https://shop.polymer-project.org/&quot;&gt;this e-shop Web components demo by Google&lt;/a&gt;, which is the poster child of this practice. These are the entire contents of its &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body&amp;gt;
	&amp;lt;shop-app unresolved=&amp;quot;&amp;quot;&amp;gt;SHOP&amp;lt;/shop-app&amp;gt;
	&amp;lt;script src=&amp;quot;node_assets/@webcomponents/webcomponentsjs/webcomponents-loader.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script type=&amp;quot;module&amp;quot; src=&amp;quot;src/shop-app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script&amp;gt;window.performance&amp;amp;&amp;amp;performance.mark&amp;amp;&amp;amp;performance.mark(&amp;quot;index.html&amp;quot;);&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If this is how Google is leading the way, how can we hope for contributors to design components that follow established HTML conventions?&lt;/p&gt;
&lt;p&gt;Jeremy criticized this practice from the aspect of backwards compatibility: when JS is broken or not enabled, or the browser doesn’t support Web Components, the entire website is blank. While this is indeed a serious concern, my primary concern is one of &lt;strong&gt;usability&lt;/strong&gt;: &lt;strong&gt;HTML is a lower barrier to entry language&lt;/strong&gt;. Far more people can write HTML than JS. Even for those who do eventually write JS, it often comes after spending years writing HTML &amp;amp; CSS.&lt;/p&gt;
&lt;p&gt;If components are designed in a way that requires JS, this excludes thousands of people from using them. And even for those who &lt;em&gt;can&lt;/em&gt; write JS, HTML is often easier: you don’t see many people rolling their own sliders or using JS-based ones once &lt;code&gt;&amp;lt;input type=&amp;quot;range&amp;quot;&amp;gt;&lt;/code&gt; became widely supported, right?&lt;/p&gt;
&lt;p&gt;Even when JS is unavoidable, it’s not black and white. A well designed HTML element can reduce the amount and complexity of JS needed to a minimum. Think of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog&quot;&gt;&lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt;&lt;/a&gt; element: it usually does require *some* JS, but it’s usually rather simple JS. Similarly, the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element is perfectly usable just by writing HTML, and has a comprehensive JS API for anyone who wants to do fancy custom things.&lt;/p&gt;
&lt;p&gt;The other day I was looking for a simple, dependency free, tabs component. You know, the canonical example of something that is easy to do with Web Components, the example 50% of tutorials mention. I didn’t even care what it looked like, it was for a testing interface. I just wanted something that is small and works like a normal HTML element. Yet, it proved so hard I ended up writing my own!&lt;/p&gt;
&lt;h3 id=&quot;can-we-fix-this%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/09/the-failed-promise-of-web-components/#can-we-fix-this%3F&quot;&gt;Can we fix this?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m not sure if this is a design issue, or a documentation issue. Perhaps for many of these web components, there are easier ways to use them. Perhaps there are vanilla web components out there that I just can’t find. Perhaps I’m looking in the wrong place and there is another directory somewhere with different goals and a different target audience.&lt;/p&gt;
&lt;p&gt;But if not, and if I’m not alone in feeling this way, we need a directory of web components with strict inclusion criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Plug and play.&lt;/strong&gt; No dependencies, no setup beyond including one &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. If a dependency is absolutely &lt;em&gt;needed&lt;/em&gt; (e.g. in a map component it doesn’t make sense to draw your own maps), the component loads it automatically if it’s not already loaded.&lt;/li&gt;
&lt;li&gt;Syntax and API follows &lt;a href=&quot;https://www.smashingmagazine.com/2017/02/designing-html-apis/&quot;&gt;&lt;strong&gt;conventions established by built-in HTML elements&lt;/strong&gt;&lt;/a&gt; and anything that &lt;em&gt;can&lt;/em&gt; be done without the component user writing JS, &lt;em&gt;is&lt;/em&gt; doable without JS, per &lt;a href=&quot;https://www.w3.org/2001/tag/doc/leastPower.html&quot;&gt;the W3C principle of least power&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessible by default&lt;/strong&gt; via sensible ARIA defaults, just like normal HTML elements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Themable&lt;/strong&gt; via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/::part&quot;&gt;&lt;code&gt;::part()&lt;/code&gt;&lt;/a&gt;, selective inheritance and custom properties. Very minimal style by default. Normal CSS properties should just “work” to the the extent possible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Only one component of a given type&lt;/strong&gt; in the directory, that is &lt;strong&gt;flexible&lt;/strong&gt; and &lt;strong&gt;extensible&lt;/strong&gt; and continuously iterated on and improved by the community. Not 30 different sliders and 15 different tabs that users have to wade through. No branding, no silos of “component libraries”. Only elements that are designed as closely as possible to what a browser would implement in every way the current technology allows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would be up for working on this if others feel the same way, since that is not a project for one person to tackle. &lt;em&gt;Who’s with me?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Wow this post blew up! Thank you all for your interest in participating in a potential future effort. I’m currently talking to stakeholders of some of the existing efforts to see if there are any potential collaborations before I go off and create a new one. &lt;a href=&quot;https://twitter.com/leaverou&quot;&gt;Follow me on Twitter to hear about the outcome&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry><entry>
    <title>The -​-var: ; hack to toggle multiple values with one custom property</title>
    <link href="https://lea.verou.me/2020/10/the-var-space-hack-to-toggle-multiple-values-with-one-custom-property/"/>
    <updated>2020-10-12T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3162</id>
    <content xml:lang="en" type="html">&lt;p&gt;What if I told you you could use a single property value to turn multiple different values on and off across multiple different properties and even across multiple CSS rules?&lt;/p&gt;
&lt;p&gt;What if I told you you could turn this flat button into a glossy skeuomorphic button by just tweaking one custom property &lt;code&gt;--is-raised&lt;/code&gt;, and that would set its border, background image, box and text shadows in one fell swoop?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/10/the-var-space-hack-to-toggle-multiple-values-with-one-custom-property/images/image-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/055d4c1d9590250d6633bdf63e37f9ca&quot; style=&quot;border: 0; width: 100%; min-height: 500px&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;em&gt;How&lt;/em&gt;, you may ask?&lt;/p&gt;
&lt;p&gt;The crux of this technique is this: There are two custom property values that work almost everywhere there is a &lt;code&gt;var()&lt;/code&gt; call with a fallback.&lt;/p&gt;
&lt;p&gt;The more obvious one that you probably already know is the &lt;code&gt;initial&lt;/code&gt; value, which makes the property just apply its fallback. So, in the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;background: var(--foo, linear-gradient(white, transparent)) hsl(220 10% 50%);
border: 1px solid var(--foo, rgb(0 0 0 / .1));
color: rgb(0 0 0 var(--foo, / .8));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can set &lt;code&gt;--foo&lt;/code&gt; to &lt;code&gt;initial&lt;/code&gt; to enable these “fallbacks” and append these values to the property value, adding a gradient, setting a border-color, and making the text color translucent in one go. But what to do when we want to turn these values &lt;em&gt;off&lt;/em&gt;? Any non-initial value for &lt;code&gt;--foo&lt;/code&gt; (that doesn’t create cycles) should work. But is there one that works in all three declarations?&lt;/p&gt;
&lt;p&gt;It turns out there &lt;em&gt;is&lt;/em&gt; another value that works everywhere, in every property a &lt;code&gt;var()&lt;/code&gt; reference is present, and you’d likely never guess what it is (unless you have watched any of my CSS variable talks and have a good memory for passing mentions of things).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Intrigued?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It’s whitespace! &lt;strong&gt;Whitespace is significant in a custom property.&lt;/strong&gt; When you write something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--foo: ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt; an invalid declaration. This is a declaration where the value of &lt;code&gt;--foo&lt;/code&gt; is literally one space character. However, whitespace is valid in every CSS property value, everywhere a &lt;code&gt;var()&lt;/code&gt; is allowed, and does not affect its computed value in any way. So, we can just set our property to one space (or even a comment) and not affect any other value present in the declaration. E.g. this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--foo: ;
background: var(--foo, linear-gradient(white, transparent)) hsl(220 10% 50%);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces the same result as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;background: hsl(220 10% 50%);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can take advantage of this to essentially turn &lt;code&gt;var()&lt;/code&gt; into a single-clause &lt;code&gt;if()&lt;/code&gt; function and conditionally append values based on a single custom property.&lt;/p&gt;
&lt;p&gt;As a proof of concept, here is the two button demo refactored using this approach:&lt;/p&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/4524674b9b8c49d88808b10f1d9ce3ec&quot; style=&quot;border: 0; width: 100%; min-height: 500px&quot;&gt;&lt;/iframe&gt;
&lt;h3 id=&quot;limitations&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/10/the-var-space-hack-to-toggle-multiple-values-with-one-custom-property/#limitations&quot;&gt;Limitations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I originally envisioned this as a building block for a technique &lt;em&gt;horrible hack&lt;/em&gt; to enable “mixins” in the browser, since &lt;a href=&quot;https://www.xanthir.com/b4o00&quot;&gt;@apply is now defunct&lt;/a&gt;. However, the big limitation is that this only works for appending values to existing values — or setting a property to either a whole value or &lt;code&gt;initial&lt;/code&gt;. There is no way to say “the background should be red if &lt;code&gt;--foo&lt;/code&gt; is set and white otherwise”. Some such conditionals can be emulated with clever use of appending, but not most.&lt;/p&gt;
&lt;p&gt;And of course there’s a certain readability issue: &lt;code&gt;--foo: ;&lt;/code&gt; looks like a mistake and &lt;code&gt;--foo: initial&lt;/code&gt; looks pretty weird, unless you’re aware of this technique. However, that can easily be solved with comments. Or even constants:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root {
	--ON: initial;
	--OFF: ;
}

button {
	--is-raised: var(--OFF);
	/* ... */
}

#foo {
	--is-raised: var(--ON);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also do note that eventually we will get a proper &lt;code&gt;if()&lt;/code&gt; and won’t need such horrible hacks to emulate it, discussions are already underway [&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/5009&quot;&gt;w3c/csswg-drafts#5009&lt;/a&gt; &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/4731&quot;&gt;w3c/csswg-drafts#4731&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;So what do you think? Horrible hack, useful technique, or both? 😀&lt;/p&gt;
&lt;h2 id=&quot;prior-art&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/10/the-var-space-hack-to-toggle-multiple-values-with-one-custom-property/#prior-art&quot;&gt;Prior art&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Turns out this was independently discovered by two people before me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, &lt;a href=&quot;https://twitter.com/anatudor/status/1284160219963170816&quot;&gt;the brilliant Ana Tudor circa 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Then &lt;a href=&quot;https://github.com/propjockey/css-sweeper#css-is-a-programming-language-thanks-to-the-space-toggle-trick&quot;&gt;James0x57 in April 2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And it was called “space toggle hack” in case you want to google it!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Simple pie charts with fallback, today</title>
    <link href="https://lea.verou.me/2020/11/simple-pie-charts-with-fallback-today/"/>
    <updated>2020-11-12T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3178</id>
    <content xml:lang="en" type="html">&lt;p&gt;Five years ago, I had written &lt;a href=&quot;https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/&quot;&gt;this extensive Smashing Magazine article&lt;/a&gt; detailing multiple different methods for creating simple pie charts, either with clever use of transforms and pseudo-elements, or with SVG &lt;code&gt;stroke-dasharray&lt;/code&gt;. In the end, I mentioned creating pie charts with conic gradients, as a future technique. It was actually a writeup of &lt;a href=&quot;https://www.youtube.com/results?search_query=verou+missing+slice&amp;amp;page&amp;amp;utm_source=opensearch&quot;&gt;my “The Missing Slice” talk&lt;/a&gt;, and an excerpt of my &lt;a href=&quot;http://www.amazon.com/CSS-Secrets-Lea-Verou/dp/1449372635?tag=leaverou-20&quot;&gt;CSS Secrets book&lt;/a&gt;, which had just been published.&lt;/p&gt;
&lt;p&gt;I was reminded of this article today by someone on Twitter:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/sam%5C_kent%5C_/status/1326805431390531584&quot;&gt;https://twitter.com/sam&#92;_kent&#92;_/status/1326805431390531584&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I suggested conic gradients, since they are &lt;a href=&quot;https://caniuse.com/css-conic-gradients&quot;&gt;now supported in &amp;gt;87% of users’ browsers&lt;/a&gt;, but he needed to support IE11. He suggested using &lt;a href=&quot;https://projects.verou.me/conic-gradient/&quot;&gt;my polyfill&lt;/a&gt; from back then, but this is not a very good idea today.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/fcorradini/status/1326880827825905665&quot;&gt;https://twitter.com/fcorradini/status/1326880827825905665&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Indeed, unless you &lt;em&gt;really&lt;/em&gt; need to display conic gradients, even I would not recommend using the polyfill on a production facing site. It requires &lt;a href=&quot;https://projects.verou.me/prefixfree/&quot;&gt;-prefix-free&lt;/a&gt;, which re-fetches (albeit from cache) your entire CSS and sticks it in a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element, with no sourcemaps since those were not a thing back when -prefix-free was written. If you’re already using -prefix-free, the polyfill is great, but if not, it’s way too heavy a dependency.&lt;/p&gt;
&lt;h3 id=&quot;pie-charts-with-fallback-(modern-browsers)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/11/simple-pie-charts-with-fallback-today/#pie-charts-with-fallback-(modern-browsers)&quot;&gt;Pie charts with fallback (modern browsers)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Instead, what I would recommend is graceful degradation, i.e. to use the same color stops, but in a linear gradient.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;@supports&lt;/code&gt; and have quite an elaborate progress bar fallback. For example, take a look at this 40% pie chart:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.pie {
	height: 20px;
	background: linear-gradient(to right, deeppink 40%, transparent 0);
	background-color: gold;
}

@supports (background: conic-gradient(white, black)) {
	.pie {
		width: 200px; height: 200px;
		background-image: conic-gradient(deeppink 40%, transparent 0);
		border-radius: 50%;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&quot;https://dabblet.com/gist/9a05fd9dad59b6c0edfb99d49a7a4426&quot; style=&quot;border: 0; width: 100%; height: 500px;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;This is what it looks like in Firefox 82 (conic gradients are scheduled to ship unflagged in Firefox 83) or IE11:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/11/simple-pie-charts-with-fallback-today/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Note that because &lt;code&gt;@supports&lt;/code&gt; is only used for the pie and not the fallback, the lack of IE11 support for it doesn’t affect us one iota.&lt;/p&gt;
&lt;p&gt;If relatively modern browsers are all we care about, we could even use CSS variables for the percentage and the color stops, to avoid duplication, and to be able to set the percentage from the markup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;pie&amp;quot; style=&amp;quot;--p: 40%&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.pie {
	height: 20px;
	--stops: deeppink var(--p, 0%), transparent 0;
	background: linear-gradient(to right, var(--stops));
	background-color: gold;
}

@supports (background: conic-gradient(white, black)) {
	.pie {
		width: 200px; height: 200px;
		background-image: conic-gradient(var(--stops));
		border-radius: 50%;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use a similar approach for 3 or more segments, or for a vertical bar.&lt;/p&gt;
&lt;p&gt;One issue with this approach is that our layout needs to work well with two charts of completely different proportions. To avoid that, we could just use a square:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.pie {
	width: 200px;
	height: 200px;
	background: linear-gradient(to right, deeppink 40%, transparent 0) gold;
}

@supports (background: conic-gradient(white, black)) {
	.pie {
		background-image: conic-gradient(deeppink 40%, transparent 0);
		border-radius: 50%;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which produces this in IE11:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/11/simple-pie-charts-with-fallback-today/images/image-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Granted, a square progress bar is not the same, but it can still convey the same relationship and is easier to design a layout around it since it always has the same aspect ratio.&lt;/p&gt;
&lt;h3 id=&quot;why-not-use-radial-gradients%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/11/simple-pie-charts-with-fallback-today/#why-not-use-radial-gradients%3F&quot;&gt;Why not use radial gradients?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You might be wondering, why not just use a radial gradient, which could use the same dimensions and rounding. Something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/11/simple-pie-charts-with-fallback-today/images/image-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;There are two problems with this. The first one may be obvious: Horizontal or vertical bars are common for showing the proportional difference between two amounts, albeit less good than a pie chart because it’s harder to compare with 50% at a glance (&lt;em&gt;yes Tufte, pie charts can be better for some things!&lt;/em&gt;). Such circular graphs are very uncommon. And for good reason: Drawn naively (e.g. in our case if the radius of the pink circle is 40% of the radius of the yellow circle), their areas do not have the relative relationship we want to depict.&lt;/p&gt;
&lt;p&gt;Why is that? Let &lt;em&gt;r&lt;/em&gt; be the radius of the yellow circle. As we know from middle school, the area of the entire circle is π_r_², so the area of the yellow ring is π_r_² - (area of pink circle). The area of the pink circle is π(0.4_r_)² = 0.16π_r_². Therefore, the area of the yellow ring is π_r_² - 0.16π_r_² = 0.84π_r_² and their relative ratio is 0.16π_r_² / 0.84π_r_² = 0.16 / 0.84 ≅ 0.19 which is a far cry from the 40/60 (≅ 0.67) we were looking for!&lt;/p&gt;
&lt;p&gt;Instead, if we wanted to draw a similar visualization to depict the correct relationship, we need to start from the ratio and work our way backwards. Let &lt;em&gt;r&lt;/em&gt; be the radius of the yellow circle and &lt;em&gt;kr&lt;/em&gt; the radius of the pink circle. Their ratio is π(&lt;em&gt;kr&lt;/em&gt;)² / (π_r_² - π(&lt;em&gt;kr&lt;/em&gt;)²) = 4/6 ⇒
_k_² / (1 - _k_²) = 4/6 ⇒
(1 - _k_²) / _k_² = 6/4 ⇒
1/_k_² - 1 = 6/4 ⇒
1/_k_² = 10/4 ⇒
k = 2 / sqrt(10) ≅ .632
Therefore, the radius of the pink circle should be around 63.2% of the radius of the yellow circle, and a more correct chart would look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/11/simple-pie-charts-with-fallback-today/images/image-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In the general case where the pink circle is depicting the percentage &lt;em&gt;p&lt;/em&gt;, we’d want the radius of the pink circle to be sqrt(1 / &lt;em&gt;p&lt;/em&gt;) the size of the yellow circle. That’s a fair bit of calculations that we can’t yet automate (though &lt;a href=&quot;https://www.w3.org/TR/css-values/#exponent-funcs&quot;&gt;&lt;code&gt;sqrt()&lt;/code&gt; is coming&lt;/a&gt;!). Moral of the story: use a bar as your fallback!&lt;/p&gt;
</content>
  </entry><entry>
    <title>The case for Weak Dependencies in JS</title>
    <link href="https://lea.verou.me/2020/11/the-case-for-weak-dependencies-in-js/"/>
    <updated>2020-11-19T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3199</id>
    <content xml:lang="en" type="html">&lt;p&gt;Earlier today, I was briefly entertaining the idea of writing a library to wrap and enhance querySelectorAll in certain ways. I thought I’d rather not introduce a &lt;a href=&quot;http://projects.verou.me/parsel/&quot;&gt;Parsel&lt;/a&gt; dependency out of the box, but only use it to parse selectors properly when it’s available, and use more crude regex when it’s not (which would cover most use cases for what I wanted to do).&lt;/p&gt;
&lt;p&gt;In the olden days, where every library introduced a global, I could just do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (window.Parsel) {
	let ast = Parsel.parse();
	// rewrite selector properly, with AST
}
else {
	// crude regex replace
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, with ESM, there doesn’t seem to be a way to detect whether a module is imported, without actually importing it yourself.&lt;/p&gt;
&lt;p&gt;I &lt;a href=&quot;https://twitter.com/LeaVerou/status/1329389035249422336&quot;&gt;tweeted&lt;/a&gt; about this…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeaVerou/status/1329389035249422336&quot;&gt;https://twitter.com/LeaVerou/status/1329389035249422336&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I thought this was a common paradigm, and everyone would understand why this was useful. However, I was surprised to find that most people were baffled about my use case. Most of them thought I was either talking about conditional imports, or error recovery after failed imports.&lt;/p&gt;
&lt;p&gt;I suspect it might be because my primary perspective for writing JS is that of a library author, where I do not control the host environment, whereas for most developers, their primary perspective is that of writing JS for a specific app or website.&lt;/p&gt;
&lt;p&gt;After &lt;a href=&quot;https://twitter.com/LeaVerou/status/1329389035249422336&quot;&gt;Kyle Simpson asked me to elaborate&lt;/a&gt; about the use case, I figured a blog post was in order.&lt;/p&gt;
&lt;p&gt;The use case is essentially &lt;strong&gt;progressive enhancement&lt;/strong&gt; (in fact, I toyed with the idea of titling this blog post &lt;em&gt;&lt;strong&gt;“Progressively Enhanced JS”&lt;/strong&gt;&lt;/em&gt;). If library X is loaded already by other code, do a more elaborate thing and cover all the edge cases, otherwise do a more basic thing. It’s for dependencies that are not really &lt;strong&gt;depend&lt;/strong&gt;encies, but more like &lt;strong&gt;nice-to-haves&lt;/strong&gt;.
We often see modules that do things really well, but use a ton of dependencies and add a lot of weight, even to the simplest of projects, because they need to cater to all the edge cases that we may not care about. We also see modules that are dependency free, but that’s because lots of things are implemented more crudely, or certain features are not there.&lt;/p&gt;
&lt;p&gt;This paradigm gives you the best of both worlds: &lt;strong&gt;Dependency free&lt;/strong&gt; (or low dependency) modules, that can use what’s available to improve how they do things with &lt;strong&gt;zero additional impact&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Using this paradigm, the &lt;strong&gt;size of these dependencies is not a concern&lt;/strong&gt;, because they are &lt;strong&gt;optional peer dependencies&lt;/strong&gt;, so one can pick the best library for the job without being affected by bundle size. Or even use multiple! One does not even need to pick one dependency for each thing, they can support bigger, more complete libraries when they’re available and fall back to micro-libraries when they are not.&lt;/p&gt;
&lt;p&gt;Some examples besides the one in the first paragraph:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Markdown to HTML converter that also syntax highlights blocks of code if &lt;a href=&quot;https://prismjs.com/&quot;&gt;Prism&lt;/a&gt; is present. Or it could even support multiple different highlighters!&lt;/li&gt;
&lt;li&gt;A code editor that uses &lt;a href=&quot;https://projects.verou.me/incrementable&quot;&gt;Incrementable&lt;/a&gt; to make numbers incrementable via arrow keys, if it’s present&lt;/li&gt;
&lt;li&gt;A templating library that also uses &lt;a href=&quot;https://bevacqua.github.io/dragula/&quot;&gt;Dragula&lt;/a&gt; to make items rearrangable via drag &amp;amp; drop, if present&lt;/li&gt;
&lt;li&gt;A testing framework that uses &lt;a href=&quot;https://atomiks.github.io/tippyjs/&quot;&gt;Tippy&lt;/a&gt; for nice informational popups, when it’s available&lt;/li&gt;
&lt;li&gt;A code editor that shows code size (in KB) if a library to measure that is included. Same editor can also show gzipped code size if a gzip library is included.&lt;/li&gt;
&lt;li&gt;A UI library that uses a custom element if it’s available or the closest native one when it’s not (e.g. a fancy date picker vs &lt;code&gt;&amp;lt;input type=&amp;quot;date&amp;quot;&amp;gt;&lt;/code&gt; ) when it isn’t. Or &lt;a href=&quot;https://projects.verou.me/awesomplete/&quot;&gt;Awesomplete&lt;/a&gt; for autocomplete when it’s available, and fall back to a simple &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; when it isn’t.&lt;/li&gt;
&lt;li&gt;Code that uses a date formatting library when one is already loaded, and falls back to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; when it’s not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This pattern can even be &lt;strong&gt;combined with conditional loading&lt;/strong&gt;: e.g. we check for all known syntax highlighters and load Prism if none are present.&lt;/p&gt;
&lt;p&gt;To recap, some of the &lt;strong&gt;main benefits&lt;/strong&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Performance:&lt;/strong&gt; If you’re loading modules over the network HTTP requests are expensive. If you’re pre-bundling it increases bundle size. Even if code size is not a concern, runtime performance is affected if you take the slow but always correct path when you don’t need it and a more crude approach would satisfice.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Choice:&lt;/strong&gt; Instead of picking one library for the thing you need, you can support multiple. E.g. multiple syntax highlighters, multiple Markdown parsers etc. If a library is always needed to do the thing you want, you can load it conditionally, if none of the ones you support are loaded already.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;are-weak-dependencies-an-antipattern%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/11/the-case-for-weak-dependencies-in-js/#are-weak-dependencies-an-antipattern%3F&quot;&gt;Are weak dependencies an antipattern?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since this article was posted, some of the feedback I got was along the lines of &lt;em&gt;“Weak dependencies are an antipattern because they are unpredictable. What if you have included a library but don’t want another library to use it? You should instead use parameters to explicitly provide references to these libraries.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are several counterpoints to make here.&lt;/p&gt;
&lt;p&gt;First, if weak dependencies are used well, they are only used to &lt;em&gt;enhance&lt;/em&gt; the default/basic behavior, so it’s highly unlikely that you’d want to turn that off and fall back to the default behavior.&lt;/p&gt;
&lt;p&gt;Second, weak dependencies and parameter injection are not mutually exclusive. They can work together and complement each other, so that the weak dependencies provide sensible defaults that the parameters can then tweak further (or disable altogether). &lt;em&gt;Only&lt;/em&gt; having parameter injection imposes a high upfront cognitive cost for using the library (see &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Convention_over_configuration&quot;&gt;Convention over Configuration&lt;/a&gt;&lt;/em&gt;). &lt;strong&gt;Good APIs make simple things easy and complex things possible.&lt;/strong&gt; The common case is that if you’ve loaded e.g. a syntax highlighter, you’d want to use it to syntax highlight, and if you’ve loaded a parser, you’d prefer it over parsing with regexes. The obscure edge cases where you wouldn’t want to highlight or you want to provide a different parser can still be possible via parameters, but should not be the only way.&lt;/p&gt;
&lt;p&gt;Third, the end user-developer may not even be aware of all the libraries that are being loaded, so they may already have a library loaded for a certain task but not know about it. The weak dependencies pattern operates directly on which modules are loaded so it doesn’t suffer from this problem.&lt;/p&gt;
&lt;h2 id=&quot;how-could-this-work-with-esm%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/11/the-case-for-weak-dependencies-in-js/#how-could-this-work-with-esm%3F&quot;&gt;How could this work with ESM?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some people (mostly fellow library authors) *did* understand what I was talking about, and expressed some ideas about how this would work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Idea 1:&lt;/strong&gt; A global module loaded cache could be a low-level way to implement this, and something CJS supports out of the box apparently.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/WebReflection/status/1329396560694796290&quot;&gt;https://twitter.com/WebReflection/status/1329396560694796290&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Idea 2:&lt;/strong&gt; A global registry where modules can register themselves on, either with an identifier, or a SHA hash
&lt;strong&gt;Idea 3:&lt;/strong&gt; An &lt;code&gt;import.whenDefined(moduleURL)&lt;/code&gt; promise, though that makes it difficult to deal with the module not being present at all, which is the whole point.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/WebReflection/status/1329420308491677696&quot;&gt;https://twitter.com/WebReflection/status/1329420308491677696&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jcampbell%5C_05/status/1329413956474187777&quot;&gt;https://twitter.com/jcampbell&#92;_05/status/1329413956474187777&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Idea 4:&lt;/strong&gt; Monitoring &lt;code&gt;&amp;lt;link rel=&amp;quot;modulepreload&amp;quot;&amp;gt;&lt;/code&gt;. The problem is that not all modules are loaded this way.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/getify/status/1329407281797222401&quot;&gt;https://twitter.com/getify/status/1329407281797222401&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Idea 5:&lt;/strong&gt; I was thinking of a function like &lt;code&gt;import()&lt;/code&gt; that resolves with the module (same as a regular dynamic import) only when the module is already loaded, or rejects when it’s not (which can be caught). In fact, it could even use the same functional notation, with a second argument, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import(&amp;quot;https://cool-library&amp;quot;, {weak: true});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nearly all of these proposals suffer from one of the following problems.&lt;/p&gt;
&lt;p&gt;Those that are &lt;strong&gt;URL based&lt;/strong&gt; mean that only modules loaded from the same URL would be recognized. The same library loaded over a CDN vs locally would not be recognized as the same library.&lt;/p&gt;
&lt;p&gt;One way around this is to expose a list of URLs, like the first idea, and allow to listen for changes to it. Then these URLs can be inspected and those which &lt;em&gt;&lt;strong&gt;might&lt;/strong&gt;&lt;/em&gt; belong to the module we are looking for can be further inspected by dynamically importing and inspecting their exports (importing already imported modules is a pretty cheap operation, the browser does de-duplicate the request).&lt;/p&gt;
&lt;p&gt;Those that are &lt;strong&gt;identifier based&lt;/strong&gt;, depend on the module to register itself with an identifier, so only modules that want to be exposed, will be. This is the closest to the old global situation, but would suffer in the transitional period until most modules use it. And of course, there is the potential for clashes. Though the API could take care of that, by essentially using a hashtable and adding all modules that register themselves with the same identifier under the same “bucket”. Code reading the registry would then be responsible for filtering.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Position Statement for the 2020 W3C TAG Election</title>
    <link href="https://lea.verou.me/2020/11/tag/"/>
    <updated>2020-11-30T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3216</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href=&quot;https://www.w3.org/blog/news/archives/8846&quot;&gt;I got elected!!&lt;/a&gt; Thank you so much to every W3C member organization who voted for me. 🙏🏼 Now on to making the Web better, alongside fellow TAG members!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Context:&lt;/strong&gt; I’m running for one of the four open seats in this year’s W3C TAG &lt;a href=&quot;https://www.w3.org/2020/12/07-tag-nominations&quot;&gt;election&lt;/a&gt;. The W3C Technical Architecture Group (TAG) is the Working Group that ensures that Web Platform technologies are usable and follow consistent design principles, whether they are created inside or outside W3C. It advocates for the needs of everyone who uses the Web and everyone who works on the Web. If you work for a company that is a &lt;a href=&quot;https://www.w3.org/Consortium/Member/List&quot;&gt;W3C Member&lt;/a&gt;, please consider encouraging your AC rep to vote for me! My candidate statement follows.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hi, I’m &lt;a href=&quot;https://lea.verou.me/&quot;&gt;Lea Verou&lt;/a&gt;. Equally at home in Web development, the standards process, and programming language design, I bring a rarely-found cross-disciplinary understanding of the full stack of front-end development.&lt;/p&gt;
&lt;p&gt;I have a thorough and fundamental understanding of all the core technologies of the Web Platform: HTML, CSS, JS, DOM, and SVG. I bring the experience and perspective of having worked as a web designer &amp;amp; developer in the trenches — not in large corporate systems, but on smaller, independent projects for clients, the type of projects that form the majority of the Web. I have started &lt;a href=&quot;https://github.com/leaverou/&quot;&gt;many&lt;/a&gt; open source projects, used on millions of websites, large and small. &lt;a href=&quot;https://hacks.mozilla.org/2014/07/event-listeners-popup-media-sidebar-cubic-bezier-editor-more-firefox-developer-tools-episode-33/#content-main:~:text=This%20feature%20used%20open%20source%20code%20from%20Lea%20Verou%E2%80%99s%20cubic%2Dbezier.com&quot;&gt;Some&lt;/a&gt; of my work has been incorporated in browser dev tools, and some has helped push CSS implementations forwards.&lt;/p&gt;
&lt;p&gt;However, unlike most web developers, I am experienced in working within W3C, both as a longtime &lt;a href=&quot;https://www.w3.org/groups/wg/css/participants&quot;&gt;member of the CSS Working Group&lt;/a&gt;, as well as a W3C Staff alumnus. This experience has given me a fuller grasp of Web technology development: not just the authoring side, but also the needs and constraints of implementation teams, the kinds of problems that tend to show up in our work, and the design principles we apply. I understand in practice how the standards process at W3C addresses the problems and weighs up the necessary compromises — from high-level design changes to minute details — to create successful standards for the Web.&lt;/p&gt;
&lt;p&gt;I have spent over six years doing PhD research at MIT on the intersection of programming language design and human-computer interaction. &lt;a href=&quot;https://lea.verou.me/publications/#research&quot;&gt;My research&lt;/a&gt; has been published in top-tier peer-reviewed academic venues.  My strong usability background gives me the ability to identify API design pitfalls early on in the design process.&lt;/p&gt;
&lt;p&gt;In addition, I have been teaching web technologies for over a decade, both to professional web developers, through my &lt;a href=&quot;https://lea.verou.me/speaking&quot;&gt;numerous talks, workshops&lt;/a&gt;, and bestselling &lt;a href=&quot;https://lea.verou.me/publications/#books&quot;&gt;book&lt;/a&gt;, and as an &lt;a href=&quot;http://web.mit.edu/6.813/www/sp18/&quot;&gt;instructor&lt;/a&gt; and &lt;a href=&quot;https://designftw.mit.edu/&quot;&gt;course co-creator for MIT&lt;/a&gt;. This experience helps me to easily identify aspects of API design that can make a technology difficult to learn and conceptualize.&lt;/p&gt;
&lt;p&gt;If elected, I will work with the rest of the TAG to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure that web technologies are not only powerful, but also learnable and approachable, with a smooth ease-of-use to complexity curve.&lt;/li&gt;
&lt;li&gt;Ensure that where possible, commonly needed functionality is available through approachable declarative HTML or CSS syntax and not solely through JS APIs.&lt;/li&gt;
&lt;li&gt;Work towards making the Web platform more extensible, to allow experienced developers to encapsulate complexity and make it available to novice authors, empowering the latter to create compelling content. Steps have been made in this direction with Web Components and the Houdini specifications, but there are still many gaps that need to be addressed.&lt;/li&gt;
&lt;li&gt;Record design principles that are often implicit knowledge in standards groups, passed on but never recorded. Explicit design principles help us keep technologies internally consistent, but also assist library developers who want to design APIs that are consistent with the Web Platform and feel like a natural extension of it. A great start has been made with the initial drafts of the &lt;a href=&quot;https://w3ctag.github.io/design-principles/&quot;&gt;Design Principles document&lt;/a&gt;, but there is still a lot to be done.&lt;/li&gt;
&lt;li&gt;Guide those seeking TAG review, some of whom may be new to the standards process, to improve their specifications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having worn all these hats, I can understand and empathize with the needs of designers and developers, authors and implementers, practitioners and academics, putting me in a unique position to help ensure the Web Platform remains consistent, usable, and inclusive.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I would like to thank &lt;a href=&quot;https://openjsf.org/&quot;&gt;Open JS Foundation&lt;/a&gt; and &lt;a href=&quot;https://bocoup.com/&quot;&gt;Bocoup&lt;/a&gt; for graciously funding my TAG-related travel, in the event that I am elected.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;selected-endorsements&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/11/tag/#selected-endorsements&quot;&gt;Selected endorsements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tantek_%C3%87elik&quot;&gt;Tantek Çelik&lt;/a&gt;, Mozilla’s AC representative, longtime CSS WG member, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Tantek_%C3%87elik&quot;&gt;creator of many popular technologies&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have had the privilege of working with Lea in the CSS Working Group, and in the broader web development community for many years. Lea is an expert in the practical real-world-web technologies of the W3C, how they fit together, has put them into practice, has helped contribute to their evolution, directly in specs and in working groups. She’s also a passionate user &amp;amp; developer advocate, both of which I think are excellent for the TAG.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lists.w3.org/Archives/Member/w3c-ac-forum/2021JanMar/0015.html&quot;&gt;Source&lt;/a&gt;: &lt;a href=&quot;https://lists.w3.org/Archives/Member/w3c-ac-forum/2021JanMar/0015.html&quot;&gt;https://lists.w3.org/Archives/Member/w3c-ac-forum/2021JanMar/0015.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://florian.rivoal.net/&quot;&gt;Florian Rivoal&lt;/a&gt;, CSS WG Invited Expert and editor of &lt;a href=&quot;https://florian.rivoal.net/cv.html#publications&quot;&gt;several specifications&lt;/a&gt;, elected &lt;a href=&quot;https://www.w3.org/2002/ab/&quot;&gt;W3C AB member&lt;/a&gt;, ex-Opera:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/frivoal/status/1336857605063417856&quot;&gt;https://twitter.com/frivoal/status/1336857605063417856&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fantasai.inkedblade.net/&quot;&gt;Elika Etemad aka fantasai&lt;/a&gt;, prolific editor of dozens of W3C specifications, CSS WG member for over 16 years, and elected &lt;a href=&quot;https://www.w3.org/2002/ab/&quot;&gt;W3C AB member&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One TPAC long ago, several members of the TAG on a recruiting spree went around asking people to run for the TAG. I personally turned them down for multiple reasons (including that I’m only a very poor substitute for David Baron), but it occurred to me recently that there was a candidate that they do
need: Lea Verou.&lt;/p&gt;
&lt;p&gt;Lea is one of those elite developers whose technical expertise ranges across the entire Web platform. She doesn’t just use HTML, CSS, JS, and SVG, she pushes the boundaries of what they’re capable of. Meanwhile her authoring experience spans JS libraries to small site design to CSS+HTML print publications, giving her a personal appreciation of a wide variety of use cases.
Unlike most other developers in her class, however, Lea also brings her experience working within W3C as a longtime member of the CSS Working Group.&lt;/p&gt;
&lt;p&gt;I’ve seen firsthand that she is capable of participating at the deep and excruciatingly detailed level that we operate here, and that her attention is not just on the feature at hand but also the system and its usability and coherence as a whole. She knows how the standards process works, how use cases and implementation constraints drive our design decisions, and how participation in the arcane discussions at W3C can make a real difference in the future usability of the Web.&lt;/p&gt;
&lt;p&gt;I’m recommending her for the TAG because she’s able to bring a perspective that is needed and frequently missing from our technical discussions which so often revolve around implementers, and because elevating her to TAG would give her both the opportunity and the empowerment to bring that perspective to more of our Web technology development here at W3C and beyond.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lists.w3.org/Archives/Member/w3c-ac-forum/2020OctDec/0055.html&quot;&gt;Source&lt;/a&gt;: &lt;a href=&quot;https://lists.w3.org/Archives/Member/w3c-ac-forum/2020OctDec/0055.html&quot;&gt;https://lists.w3.org/Archives/Member/w3c-ac-forum/2020OctDec/0055.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.brucelawson.co.uk/&quot;&gt;Bruce Lawson&lt;/a&gt;, Opera alumni, world renowned accessibility expert, speaker, author:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/brucel/status/1336260046691438594&quot;&gt;https://twitter.com/brucel/status/1336260046691438594&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Brian Kardell, AC representative for both Open JS Foundation and Igalia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The OpenJS Foundation is very pleased to nominate and offer our support for Lea Verou to the W3C TAG. We believe that she brings a fresh perspective, diverse background and several kinds of insight that would be exceptionally useful in the TAG’s work.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/2020/12/07-tag-nominations#lv&quot;&gt;Source&lt;/a&gt;: &lt;a href=&quot;https://www.w3.org/2020/12/07-tag-nominations#lv&quot;&gt;https://www.w3.org/2020/12/07-tag-nominations#lv&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Lea Verou is another easy choice for me. Lea brings a really diverse background, set of perspectives and skills to the table. She’s worked for the W3C, she’s a great communicator to developers (this is definitely a great skill in TAG whose outreach is important), she’s worked with small teams, produced a number of popular libraries and helped drive some interesting standards. The OpenJS Foundation was pleased to nominate her, but Frontiers and several others were also supportive. Lea also deserves “high marks”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bkardell.com/blog/TAG-2021.html&quot;&gt;Source&lt;/a&gt;: &lt;a href=&quot;https://bkardell.com/blog/TAG-2021.html&quot;&gt;https://bkardell.com/blog/TAG-2021.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry><entry>
    <title>Writable getters</title>
    <link href="https://lea.verou.me/2020/12/writable-getters/"/>
    <updated>2020-12-23T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3246</id>
    <content xml:lang="en" type="html">&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2020/12/writable-getters/images/ouroboros.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;Setters removing themselves are reminiscent of &lt;a href=&quot;https://en.wikipedia.org/wiki/Ouroboros&quot;&gt;Ouroboros&lt;/a&gt;, the serpent eating its own tail, an ancient symbol. &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:The_serpent_Ouroboros,_from_Cyprianus,_18th_C_Wellcome_L0036620.jpg&quot;&gt;Media credit&lt;/a&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A pattern that has come up a few times in my code is the following: an object has a property which defaults to an expression based on its other properties &lt;em&gt;unless&lt;/em&gt; it’s explicitly set, in which case it functions like a normal property. Essentially, the expression functions as a default value.&lt;/p&gt;
&lt;p&gt;Some examples of use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An object where a default &lt;code&gt;id&lt;/code&gt; is generated from its &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;title&lt;/code&gt;, but can also have custom ids.&lt;/li&gt;
&lt;li&gt;An object with information about a human, where &lt;code&gt;name&lt;/code&gt; can be either specified explicitly or generated from &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; if not specified.&lt;/li&gt;
&lt;li&gt;An object with parameters for drawing an ellipse, where &lt;code&gt;ry&lt;/code&gt; defaults to &lt;code&gt;rx&lt;/code&gt; if not explicitly set.&lt;/li&gt;
&lt;li&gt;An object literal with date information, and a &lt;code&gt;readable&lt;/code&gt; property which formats the date, but can be overwritten with a custom human-readable format.&lt;/li&gt;
&lt;li&gt;An object representing parts of a Github URL (e.g. username, repo, branch) with an &lt;code&gt;apiCall&lt;/code&gt; property which can be either customized or generated from the parts &lt;em&gt;(this is actually the &lt;a href=&quot;https://github.com/mavoweb/mavo/pull/670#issuecomment-749585736&quot;&gt;example&lt;/a&gt; which prompted this blog post)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok, so now that I convinced you about the utility of this pattern, how do we implement it in JS?&lt;/p&gt;
&lt;p&gt;Our first attempt may look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let lea = {
	name: &amp;quot;Lea Verou&amp;quot;,
	get id() {
		return this.name.toLowerCase().replace(/&#92;W+/g, &amp;quot;-&amp;quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; We are going to use object literals in this post for simplicity, but the same logic applies to variations using &lt;code&gt;Object.create()&lt;/code&gt;, or a class &lt;code&gt;Person&lt;/code&gt; of which &lt;code&gt;lea&lt;/code&gt; is an instance.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Our first attempt doesn’t quite work as you might expect:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lea.id; // &amp;quot;lea-verou&amp;quot;
lea.id = &amp;quot;lv&amp;quot;;
lea.id; // Still &amp;quot;lea-verou&amp;quot;!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why does this happen? The reason is that the presence of the getter turns the property into an &lt;em&gt;accessor&lt;/em&gt;, and thus, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Description:~:text=Property%20descriptors%20present%20in%20objects%20come,two%20flavors%3B%20it%20cannot%20be%20both.&quot;&gt;it cannot also hold data&lt;/a&gt;. If it doesn’t have a setter, then simply nothing happens when it is set.&lt;/p&gt;
&lt;p&gt;However, we can have a setter that, when invoked, &lt;em&gt;deletes the accessor and replaces it with a data property&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let lea = {
	name: &amp;quot;Lea Verou&amp;quot;,
	get id() {
		return this.name.toLowerCase().replace(/&#92;W+/g, &amp;quot;-&amp;quot;);
	},
	set id(v) {
		delete this.id;
		return this.id = v;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;abstracting-the-pattern-into-a-helper&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/12/writable-getters/#abstracting-the-pattern-into-a-helper&quot;&gt;Abstracting the pattern into a helper&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If we find ourselves needing this pattern in more than one places in our codebase, we could abstract it into a helper:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function writableGetter(o, property, getter, options = {}) {
	Object.defineProperty(o, property, {
		get: getter,
		set (v) {
			delete this[property];
			return this[property] = v;
		},
		enumerable: true,
		configurable: true,
		...options
	});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we used &lt;code&gt;Object.defineProperty()&lt;/code&gt; here instead of the succinct &lt;code&gt;get&lt;/code&gt;/&lt;code&gt;set&lt;/code&gt; syntax. Not only is the former more convenient for augmenting pre-existing objects, but also it allows us to customize enumerability, while the latter just defaults to &lt;code&gt;enumerable: true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’d use the helper like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let lea = {name: &amp;quot;Lea Verou&amp;quot;};
writableGetter(lea, &amp;quot;id&amp;quot;, function() {
	return this.name.toLowerCase().replace(/&#92;W+/g, &amp;quot;-&amp;quot;);
}, {enumerable: false});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;overwriting-the-getter-with-a-different-getter&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/12/writable-getters/#overwriting-the-getter-with-a-different-getter&quot;&gt;Overwriting the getter with a &lt;em&gt;different&lt;/em&gt; getter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This works when we want to overwrite with a static value, but what if we want to overwrite with a &lt;em&gt;different&lt;/em&gt; getter? For example, consider the date use case: what if we want to maintain a single source of truth for the date components and only overwrite the format, as a function, so that when the date components change, the formatted date updates accordingly?&lt;/p&gt;
&lt;p&gt;If we are confident that setting the property to an actual function value wouldn’t make sense, we could handle that case specially, and create a new getter instead of a data property:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function writableGetter(o, property, getter, options = {}) {
	return Object.defineProperty(o, property, {
		get () {
			return getter.call(this);
		},
		set (v) {
			if (typeof v === &amp;quot;function&amp;quot;) {
				getter = v;
			}
			else {
				delete this[property];
				return this[property] = v;
			}
		},
		enumerable: true,
		configurable: true,
		...options
	});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do note that if we set the property to a static value, and try to set it to a function after that, it will just be a data property that creates a function, since we’ve deleted the accessor that handled functions specially. If that is a significant concern, we can maintain the accessor and just update the getter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function writableGetter(o, property, getter, options = {}) {
	return Object.defineProperty(o, property, {
		get () {
			return getter.call(this);
		},
		set (v) {
			if (typeof v === &amp;quot;function&amp;quot;) {
				getter = v;
			}
			else {
				getter = () =&amp;gt; v;
			}
		},
		enumerable: true,
		configurable: true,
		...options
	});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;improving-the-dx-of-our-helper&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/12/writable-getters/#improving-the-dx-of-our-helper&quot;&gt;Improving the DX of our helper&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While this was the most straightforward way to define a helper, it doesn’t &lt;em&gt;feel&lt;/em&gt; very natural to use. Our object definition is now scattered in multiple places, and readability is poor. This is often the case when we start implementing before designing a UI. In this case, writing the helper is the implementation, and its calling code is effectively the UI.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It’s always a good practice to start designing functions by writing a call to that function&lt;/strong&gt;, as if a tireless elf working for us had already written the implementation of our dreams.&lt;/p&gt;
&lt;p&gt;So how would we &lt;em&gt;prefer&lt;/em&gt; to write our object? I’d actually prefer to use the more readable &lt;code&gt;get()&lt;/code&gt; syntax, and have everything in one place, then somehow &lt;em&gt;convert&lt;/em&gt; that getter to a writable getter. Something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let lea = {
	name: &amp;quot;Lea Verou&amp;quot;,
	get id() {
		return this.name.toLowerCase().replace(/&#92;W+/g, &amp;quot;-&amp;quot;);
	}
}
makeGetterWritable(lea, &amp;quot;id&amp;quot;, {enumerable: true});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can we implement something like this? Of course. This is JS, we can do anything!&lt;/p&gt;
&lt;p&gt;The main idea is that we read back the descriptor our &lt;code&gt;get&lt;/code&gt; syntax created, fiddle with it, then stuff it back in as a new property:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function makeGetterWritable(o, property, options) {
	let d = Object.getOwnPropertyDescriptor(o, property);
	let getter = d.get;

	d.get = function() {
		return getter.call(this);
	};

	d.set = function(v) {
		if (typeof v === &amp;quot;function&amp;quot;) {
			getter = v;
		}
		else {
			delete this[property];
			return this[property] = v;
		}
	};

	// Apply any overrides, e.g. enumerable
	Object.assign(d, options);

	// Redefine the property with the new descriptor
	Object.defineProperty(o, property, d)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;other-mixed-data-accessor-properties&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2020/12/writable-getters/#other-mixed-data-accessor-properties&quot;&gt;Other mixed data-accessor properties&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While JS is very firm in its distinction of accessor properties and data properties, the reality is that we often need to combine the two in different ways, and conceptually it’s more of a &lt;em&gt;data-accessor spectrum&lt;/em&gt; than two distinct categories. Here are a few more examples where the boundary between data property and accessor property is somewhat …murky:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;“Live” data properties&lt;/em&gt;: properties which execute code to produce side effects when they are get or set, but still hold data like a regular data property. This can be faked by having a helper that creates a hidden data property. This idea is the core of &lt;a href=&quot;https://blissfuljs.com/docs#fn-live&quot;&gt;&lt;code&gt;Bliss.live()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Lazy evaluation&lt;/em&gt;: Properties which are evaluated when they are first read (via a getter), then replace themselves with a regular data property. If they are set before they are read, they function exactly like a writable getter. This idea is the core of &lt;a href=&quot;https://blissfuljs.com/docs#fn-lazy&quot;&gt;&lt;code&gt;Bliss.lazy()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#Smart_self-overwriting_lazy_getters&quot;&gt;MDN mentions this pattern&lt;/a&gt; too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please don’t actually implement id/slug generation with &lt;code&gt;name.toLowerCase().replace(/&#92;W+/g, &amp;quot;-&amp;quot;)&lt;/code&gt;. That’s very simplistic, to keep examples short. It privileges English/ASCII over other languages and writing systems, and thus, should be avoided.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Mass function overloading: why and how?</title>
    <link href="https://lea.verou.me/2021/02/mass-function-overloading-why-and-how/"/>
    <updated>2021-02-10T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3272</id>
    <content xml:lang="en" type="html">&lt;p&gt;One of the things I’ve been doing for the past few months (on and off—more off than on TBH) is rewriting &lt;a href=&quot;http://blissfuljs.com/&quot;&gt;Bliss&lt;/a&gt; to use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules&quot;&gt;ESM&lt;/a&gt; &lt;a href=&quot;https://lea.verou.me/2021/02/mass-function-overloading-why-and-how/#bliss-v2&quot;&gt;1&lt;/a&gt;. Since Bliss v1 was not using a modular architecture at all, this introduced some interesting challenges.
Bliss is essentially a collection of helper functions. Most of these functions have a number of different &lt;a href=&quot;https://en.wikipedia.org/wiki/Type_signature#Method_signature&quot;&gt;signatures&lt;/a&gt;, to allow for more compact, readable code. The functions can be used for single things (one element, one set of arguments) or they can operate &lt;em&gt;en masse&lt;/em&gt; (arrays of elements, object literals with multiple key-value pairs). As you might guess, this practice has been strongly inspired by the heavy use of &lt;a href=&quot;https://en.wikipedia.org/wiki/Function_overloading&quot;&gt;overloading&lt;/a&gt; in jQuery, which was one of the driving factors behind its huge success.&lt;/p&gt;
&lt;p&gt;For example, let’s take &lt;a href=&quot;https://blissfuljs.com/docs.html#fn-style&quot;&gt;&lt;code&gt;$.style()&lt;/code&gt;&lt;/a&gt;. It can be used to set a single CSS property, on a single element, being a rather thin abstraction over &lt;code&gt;element.style&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.style(element, &amp;quot;top&amp;quot;, rect.top);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can also be used to set a single CSS property on multiple elements:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.style($$(&amp;quot;.popup&amp;quot;), &amp;quot;top&amp;quot;, rect.top);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can also be used to set multiple properties on a single element:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.style(element, {
	top: rect.top,
	right: rect.right,
	bottom: rect.bottom,
	left: rect.left
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or to set multiple properties on multiple elements:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.style($$(&amp;quot;.popup&amp;quot;), {
	top: rect.top,
	right: rect.right,
	bottom: rect.bottom,
	left: rect.left
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m a strong believer in overloading for handling both aggregate operations, as well as singular data. Supporting only aggregate operations would mean that developers have to pointlessly wrap single values in object literals or arrays. E.g. if &lt;code&gt;$.style()&lt;/code&gt; only accepted arrays and object literals, our first example would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.style([element], {top: rect.top});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not the end of the world, but certainly annoying and error-prone. Developers would often try setting the pair as separate arguments because it’s more natural, remember it doesn’t work, then adjust their code.&lt;/p&gt;
&lt;p&gt;The opposite situation is much worse. If &lt;code&gt;$.style()&lt;/code&gt; only supported singular operations, our last example would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let values = {
	top: rect.top,
	right: rect.right,
	bottom: rect.bottom,
	left: rect.left
};
for (let element of $$(&amp;quot;.popup&amp;quot;)) {
	for (let property in values) {
		$.style(element, property, values[property]);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yikes! You don’t need a library for that! Just using &lt;code&gt;element.style&lt;/code&gt; and &lt;code&gt;Object.assign()&lt;/code&gt; would have actually fared better here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for (let element of $$(&amp;quot;.popup&amp;quot;)) {
	Object.assign(element.style, {
		top: rect.top,
		right: rect.right,
		bottom: rect.bottom,
		left: rect.left
	});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;$.style()&lt;/code&gt; is not unique here: any Bliss function that accepts a main target element (the function’s &lt;em&gt;subject&lt;/em&gt; as it’s called in the Bliss docs) also accepts arrays of elements. Similarly, any Bliss function that accepts key-value pairs as separate arguments, also accepts object literals with multiple of them.&lt;/p&gt;
&lt;p&gt;In talks about API Design, I have presented this pattern (and overloading in general) as an instance of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Robustness_principle&quot;&gt;Robustness principle&lt;/a&gt; in action: &lt;em&gt;“Be liberal in what you accept”&lt;/em&gt; is good practice for designing any user interface, and APIs are no exception. An analog in GUI design would be &lt;a href=&quot;https://uxdesign.cc/the-bulk-experience-7fcca8080f82&quot;&gt;bulk operations&lt;/a&gt;: imagine if e.g. you could only delete emails one by one?&lt;/p&gt;
&lt;p&gt;In JS, overloading is typically implemented by inspecting the types and number of a function’s arguments in the function, and branching accordingly. However, doing this individually on every function would get quite repetitive. Consider the following, &lt;em&gt;very&lt;/em&gt; simplified implementation of &lt;code&gt;$.style()&lt;/code&gt; with the overloading logic inlined:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;style(subject, ...args) {
	if (Array.isArray(subject)) {
		subject.forEach(e =&amp;gt; style(e, ...args));
	}
	else if ($.type(args[0]) === &amp;quot;object&amp;quot; &amp;amp;&amp;amp; args.length = 1) {
		for (let p in args[0]) {
			style(subject, p, args[0][p]);
		}
	}
	else {
		subject.style[args[0]] = args[1];
	}

	return subject;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the actual code of this function is only 1 line out of the 13 lines of code it contains. The other 12 are just boilerplate for overloading. What a nightmare for maintainability and readability!&lt;/p&gt;
&lt;p&gt;In Bliss v1, all functions were contained a single file, so they could be defined in their most singular version (one element, a single key-value pair as separate arguments etc), and the aggregate signatures could be automatically generated by looping over all defined functions and wrapping them accordingly.&lt;/p&gt;
&lt;p&gt;However, in Bliss v2, each function is defined in its own module, as a default export. There is also a module pulling them all together and adding them on &lt;code&gt;$&lt;/code&gt;, but people &lt;em&gt;should&lt;/em&gt; be able to do things like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import style from &amp;quot;https://v2.blissfuljs.com/src/dom/style.js&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And &lt;code&gt;style()&lt;/code&gt; would need to support its full functionality, not be some cut down version allowing only single elements and one property-value pair. What use would that be?&lt;/p&gt;
&lt;p&gt;This means that the overloading needs to happen in the module defining each function. It cannot happen via a loop in the &lt;code&gt;index.js&lt;/code&gt; module. How can we do this and still keep our code maintainable, short, and easy to change? I explored several alternatives.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(We are not going to discuss the implementation of &lt;code&gt;overload()&lt;/code&gt; in each case below, but if you’re interested in the current one, it’s &lt;a href=&quot;https://github.com/LeaVerou/bliss/blob/v2/src/overload.js&quot;&gt;on Github&lt;/a&gt;. Do note that just like everything in Bliss v2, it’s subject to heavy change before release)&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;option-1%3A-inside-each-function&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/02/mass-function-overloading-why-and-how/#option-1%3A-inside-each-function&quot;&gt;Option 1: Inside each function&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;export default function style(subject, ...args) {
	return overload(subject, args, (element, property, value) =&amp;gt; {
		element.style[property] = value;
	})
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this at first seems like the most natural way to abstract the inlined code we previously had, it’s the most verbose and hard to read. Furthermore, it adds extra code that needs to be executed every time the function is called and needs us to pass the current execution context through. It’s far better to go with a solution that takes the singular function as input, and gives you a modified function that just works. That’s what the next two options use.&lt;/p&gt;
&lt;h4 id=&quot;option-2%3A-wrap-with-overload()&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/02/mass-function-overloading-why-and-how/#option-2%3A-wrap-with-overload()&quot;&gt;Option 2: Wrap with overload()&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;export default overload(function style(element, property, value) {
	element.style[property] = value;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;option-3%3A-overload-at-export&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/02/mass-function-overloading-why-and-how/#option-3%3A-overload-at-export&quot;&gt;Option 3: Overload at export&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;function style(element, property, value) {
	element.style[property] = value;
}

export default overload(style);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Options 2 and 3 are very similar. I was originally inclined to go with 2 to avoid typing the function name twice, but I eventually concluded that it made the code harder to read, so I went with option 3: Declaring the function, then overloading it &amp;amp; exporting it.&lt;/p&gt;
&lt;p&gt;I wasn’t super happy with any of these options. Something inside me protested the idea of having to include even a line of boilerplate in every single module, and almost every Bliss function depending on another module. However, in the large scheme of things, I think this boilerplate is as minimal as it gets, and certainly beats the alternatives.&lt;/p&gt;
&lt;p&gt;Have you had to perform a transform on a number of different modules in your code? How did you abstract it away?&lt;/p&gt;
&lt;p&gt;1 You can see the rewrite progress in the &lt;a href=&quot;https://github.com/LeaVerou/bliss/tree/v2&quot;&gt;v2 branch on Github&lt;/a&gt;, and even use &lt;a href=&quot;https://v2.blissfuljs.com/&quot;&gt;v2.blissfuljs.com&lt;/a&gt; to import modules from and experiment. Note that at the time of writing, all of the progress is in the code, the docs and tests are still all about v1.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Dark mode in 5 minutes, with inverted lightness variables</title>
    <link href="https://lea.verou.me/2021/03/inverted-lightness-variables/"/>
    <updated>2021-03-30T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3293</id>
    <content xml:lang="en" type="html">&lt;p&gt;By now, you probably know that you can use custom properties for individual color components, to avoid repeating the same color coordinates multiple times throughout your theme. You may even know that you can use the same variable for multiple components, e.g. HSL hue and lightness:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
	--primary-hs: 250 30%;
}

h1 {
	color: hsl(var(--primary-hs) 30%);
}

article {
	background: hsl(var(--primary-hs) 90%);
}

article h2 {
	background: hsl(var(--primary-hs) 40%);
	color: white;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a &lt;a href=&quot;https://codepen.io/leaverou/pen/QWdjpEL&quot;&gt;very simple page designed with this technque&lt;/a&gt;:&lt;/p&gt;
&lt;iframe id=&quot;cp_embed_QWdjpEL&quot; src=&quot;https://codepen.io/anon/embed/QWdjpEL?height=500&amp;amp;theme-id=1&amp;amp;slug-hash=QWdjpEL&amp;amp;default-tab=result&quot; height=&quot;500&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; allowpaymentrequest=&quot;&quot; name=&quot;CodePen Embed QWdjpEL&quot; title=&quot;CodePen Embed QWdjpEL&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width:100%;overflow:hidden&quot;&gt;CodePen Embed Fallback&lt;/iframe&gt;
&lt;p&gt;Unlike preprocessor variables, you could even locally override the variable, &lt;a href=&quot;https://codepen.io/leaverou/pen/rNjOypm&quot;&gt;to have blocks with a different accent color&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root {
	--primary-hs: 250 30%;
	--secondary-hs: 190 40%;
}

article {
	background: hsl(var(--primary-hs) 90%);
}

article.alt {
	--primary-hs: var(--secondary-hs);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe id=&quot;cp_embed_rNjOypm&quot; src=&quot;https://codepen.io/anon/embed/rNjOypm?height=500&amp;amp;theme-id=1&amp;amp;slug-hash=rNjOypm&amp;amp;default-tab=result&quot; height=&quot;500&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; allowpaymentrequest=&quot;&quot; name=&quot;CodePen Embed rNjOypm&quot; title=&quot;CodePen Embed rNjOypm&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width:100%;overflow:hidden&quot;&gt;CodePen Embed Fallback&lt;/iframe&gt;
&lt;p&gt;This is all fine and dandy, until dark mode comes into play. The idea of using custom properties to make it easier to adapt a theme to dark mode is not new. However, &lt;a href=&quot;https://alxgbsn.co.uk/2019/02/08/blog-theming-css-variables/&quot;&gt;in&lt;/a&gt; &lt;a href=&quot;https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/&quot;&gt;every&lt;/a&gt; &lt;a href=&quot;https://dev.to/ananyaneogi/create-a-dark-light-mode-switch-with-css-variables-34l8&quot;&gt;article&lt;/a&gt; &lt;a href=&quot;https://css-irl.info/quick-and-easy-dark-mode-with-css-custom-properties/&quot;&gt;I&lt;/a&gt; &lt;a href=&quot;https://piccalil.li/tutorial/create-a-user-controlled-dark-or-light-mode&quot;&gt;have&lt;/a&gt; &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/css-theming-custom-properties&quot;&gt;seen&lt;/a&gt;, the strategy suggested is to create a bunch of custom properties, one for each color, and override them in a media query.&lt;/p&gt;
&lt;p&gt;This is a fine approach, and you’ll likely want to do that for at least part of your colors eventually. However, even in the most disciplined of designs, not every color is a CSS variable. You often have colors declared inline, especially grays (e.g. the footer color in our example). This means that adding a dark mode is taxing enough that you may put it off for later, especially on side projects.&lt;/p&gt;
&lt;p&gt;The trick I’m going to show you will make anyone who knows enough about color cringe (sorry Chris!) but it does help you create a dark mode that &lt;em&gt;works&lt;/em&gt; in minutes. It won’t be great, and you should eventually tweak it to create a proper dark mode (also &lt;a href=&quot;https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/&quot;&gt;dark mode is not just about swapping colors&lt;/a&gt;) but it’s better than nothing and can serve as a base.
The basic idea is to use custom properties for the &lt;em&gt;lightness&lt;/em&gt; of colors instead of the entire color. Then, in dark mode, you override these variables with &lt;code&gt;100% - lightness&lt;/code&gt;. This generally produces light colors for dark colors, medium colors for medium colors, and dark colors for light colors, and still allows you to define colors inline, instead of forcing you to use a variable for every single color. This is what the code would look like for our example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root {
	--primary-hs: 250 30%;
	--secondary-hs: 190 40%;

	--l-0: 0%;
	--l-30: 30%;
	--l-40: 40%;
	--l-50: 50%;
	--l-90: 90%;
	--l-100: 100%;
}

@media (prefers-color-scheme: dark) {
	:root {
		--l-0: 100%;
		--l-30: 70%;
		--l-40: 60%;
		--l-90: 10%;
		--l-100: 0%;
	}
}


body {
	background: hsl(0 0% var(--l-100));
	color: hsl(0 0% var(--l-0));
}

h1 {
	color: hsl(var(--primary-hs) var(--l-30));
}

article {
	background: hsl(var(--primary-hs) var(--l-90));
}

article h2 {
	background: hsl(var(--primary-hs) 40%);
	color: white;
}

footer {
	color: hsl(0 0% var(--l-40));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe id=&quot;cp_embed_eYgJyav&quot; src=&quot;https://codepen.io/anon/embed/eYgJyav?height=500&amp;amp;theme-id=1&amp;amp;slug-hash=eYgJyav&amp;amp;default-tab=result&quot; height=&quot;500&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; allowpaymentrequest=&quot;&quot; name=&quot;CodePen Embed eYgJyav&quot; title=&quot;CodePen Embed eYgJyav&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width:100%;overflow:hidden&quot;&gt;CodePen Embed Fallback&lt;/iframe&gt;
&lt;p&gt;The result looks like this in light &amp;amp; dark mode:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/images/hsl-normal.png&quot; alt=&quot;&quot; /&gt;
	&lt;img src=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/images/hsl-dm.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
	The light mode we designed and the auto-generated dark mode, side by side
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Note that here we indiscriminately replaced all lightnesses with lightness variables. In reality, we don’t need to be quite as sweeping. For example, the article titles would actually look better and would have better contrast if we just kept them the same:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/images/hsl-dm.png&quot; alt=&quot;&quot; /&gt;
	&lt;img src=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/images/hsl-dm-exception.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
&lt;p&gt;Comparison of dark mode with every lightness becoming a variable versus a more refined approach, where we make exceptions as needed (in this case the background and text colors for &lt;code&gt;article &amp;gt; h2&lt;/code&gt;).
&lt;/p&gt;&lt;/figcaption&gt;&lt;p&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;These are decisions that are easy to make while you go through your CSS replacing lightness percentages with variables and previewing the result.&lt;/p&gt;
&lt;h2 id=&quot;the-problem-with-hsl&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/#the-problem-with-hsl&quot;&gt;The problem with HSL&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But &lt;em&gt;why&lt;/em&gt; were the article headers easier to read with their original colors than with inverted lightness? The root cause is that HSL lightness does not actually correspond to what humans perceive as lightness, and the same lightness difference can produce vastly different perceptual differences.&lt;/p&gt;
&lt;p&gt;That is the big problem with this approach: it assumes that HSL lightness actually means something, but &lt;a href=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/#3-lch-lightness-actually-means-something&quot;&gt;as we’ve discussed before&lt;/a&gt;, it does not. Yellow and blue have the same HSL lightness (50%) for crying out loud! Also, you will notice that your dark colors have smaller differences between them than your light colors, because &lt;a href=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/#2-lch-and-lab-is-perceptually-uniform&quot;&gt;HSL is not perceptually uniform&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Does that mean the technique is not useful for anything other than a placeholder while we develop our &lt;em&gt;real&lt;/em&gt; dark mode, if that?&lt;/p&gt;
&lt;p&gt;Well, things are not &lt;em&gt;quite&lt;/em&gt; as grim.&lt;/p&gt;
&lt;p&gt;Soon enough, we will get &lt;a href=&quot;https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/&quot;&gt;LCH colors&lt;/a&gt; in the browser. The first browser implementation &lt;a href=&quot;https://webkit.org/blog/11548/release-notes-for-safari-technology-preview-120/#post-11548:~:text=Added%20support%20for%20lab()%2C%20lch()%2C%20and%20color(lab%20...)%20colors&quot;&gt;just recently shipped in Safari&lt;/a&gt; and there is activity in that space among the other browser vendors too.&lt;/p&gt;
&lt;p&gt;LCH is a much better color space for this technique, because its lightness actually means something, not just across different lightnesses of the same color, but across different hues and chromas.&lt;/p&gt;
&lt;p&gt;This next example needs Safari TP 120+ . Compare these two gradients, the top one showing various HSL colors all with lightness 50%, and the bottom various LCH colors, all with lightness 50%. You can even adjust the slider and try different lightnesses:&lt;/p&gt;
&lt;iframe id=&quot;cp_embed_xxgOZQR&quot; src=&quot;https://codepen.io/anon/embed/xxgOZQR?height=400&amp;amp;theme-id=1&amp;amp;slug-hash=xxgOZQR&amp;amp;default-tab=result&quot; height=&quot;400&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; allowpaymentrequest=&quot;&quot; name=&quot;CodePen Embed xxgOZQR&quot; title=&quot;CodePen Embed xxgOZQR&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width:100%;overflow:hidden&quot;&gt;CodePen Embed Fallback&lt;/iframe&gt;
&lt;p&gt;Here is a screenshot for those of you who don’t have access to Safari TP 120+:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Notice that in HSL, some colors (like yellow and cyan) are much lighter than others. In LCH, all colors at the same lightness are, well, the same lightness.&lt;/p&gt;
&lt;p&gt;Keep in mind that LCH chroma doesn’t really correspond to HSL lightness, so even though we’ve set it to the same number, it doesn’t correspond to the same thing.&lt;/p&gt;
&lt;p&gt;So, how would this technique work with LCH colors? Let’s try it out!&lt;/p&gt;
&lt;p&gt;I used &lt;a href=&quot;https://css.land/lch/&quot;&gt;this tool&lt;/a&gt; to convert the existing HSL colors to LCH, then tweaked the values manually a bit as the initially converted colors didn’t look nice across all LCH lightnesses (note that HSL colors with the same hue and saturation may have different hue and chromas in LCH. The opposite would defeat the point!). This is what this technique looks like with LCH colors instead (you will need Safari TP 120 or later to view this):&lt;/p&gt;
&lt;iframe id=&quot;cp_embed_df41d39c06f1b477bd00d57ce9c853ee&quot; src=&quot;https://codepen.io/anon/embed/df41d39c06f1b477bd00d57ce9c853ee?height=500&amp;amp;theme-id=1&amp;amp;slug-hash=df41d39c06f1b477bd00d57ce9c853ee&amp;amp;default-tab=result&quot; height=&quot;500&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; allowpaymentrequest=&quot;&quot; name=&quot;CodePen Embed df41d39c06f1b477bd00d57ce9c853ee&quot; title=&quot;CodePen Embed df41d39c06f1b477bd00d57ce9c853ee&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width:100%;overflow:hidden&quot;&gt;CodePen Embed Fallback&lt;/iframe&gt;
&lt;p&gt;And here is a screenshot:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/images/lch-normal.png&quot; alt=&quot;&quot; /&gt;
	&lt;img src=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/images/lch-dm.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
	Light mode and auto-generated dark mode via inverted lightness variables in LCH.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Not only does dark mode look a lot better, but even in light mode, our two alternate colors actually look more uniform since they have the same LCH lightness.&lt;/p&gt;
&lt;p&gt;Here is a comparison of the two dark modes:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/images/hsl-dm.png&quot; alt=&quot;&quot; /&gt;
	&lt;img src=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/images/lch-dm.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
	Light mode and auto-generated dark mode via inverted lightness variables in LCH.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Comparison of the two auto-generated dark modes, via HSL lightness on the left and LCH lightness on the right.&lt;/p&gt;
&lt;p&gt;Here you can see an animated comparison of them over each other:&lt;/p&gt;
&lt;figure class=&quot;image-comparison&quot;&gt;
	&lt;img src=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/images/hsl-dm.png&quot; alt=&quot;&quot; /&gt;
	&lt;img src=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/images/lch-dm.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Note that in reality, until LCH colors are reliably supported everywhere you’d need to provide a fallback via &lt;code&gt;@supports&lt;/code&gt;, but for brevity, I did not include one in this demo.&lt;/p&gt;
&lt;h2 id=&quot;automating-generation-of-lightness-variables&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/#automating-generation-of-lightness-variables&quot;&gt;Automating generation of lightness variables&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are using a preprocessor that supports loops, such as Sass, you can automate the generation of these variables, and make them even more granular, e.g. every 5%:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root {
    @for $i from 0 through 20 {
        --l-#{$i * 5}: #{$i * 5}%;
    }
}

@media (prefers-color-scheme: dark) {
    :root {
        @for $i from 0 through 20 {
            --l-#{$i * 5}: #{100 - $i * 5}%;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;can-we-make-lightness-variables-more-dry%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/03/inverted-lightness-variables/#can-we-make-lightness-variables-more-dry%3F&quot;&gt;Can we make lightness variables more DRY?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some of you may have disliked the repetition of values: we need to declare e.g. &lt;code&gt;--l-40&lt;/code&gt; as 40%, then set it to 60% in dark mode. Can’t we derive it somehow, by subtracting the value we already have from 100%?&lt;/p&gt;
&lt;p&gt;Those with experience in programming may try something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--l-40: calc(100% - var(--l-40));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this will not work. CSS is not an imperative language. It does not have steps of calculation, where variables have different values before and after each step. There is no such concept of time, all declarations that are currently applied, need to be true at once. It’s more similar to the reactive evaluation of spreadsheet formulas than to computation in JS and other popular programming languages (there are general purpose &lt;a href=&quot;https://en.wikipedia.org/wiki/Reactive_programming&quot;&gt;reactive programming&lt;/a&gt; languages, but they are less well known). Therefore, declarations like the one above are considered cycles: since &lt;code&gt;--l-40&lt;/code&gt; cannot refer to itself, this is an error, and &lt;a href=&quot;https://drafts.csswg.org/css-variables/#cycles&quot;&gt;&lt;code&gt;--l-40&lt;/code&gt; would be set to its initial value&lt;/a&gt; as an error recovery mechanism (since CSS cannot throw errors).&lt;/p&gt;
&lt;p&gt;So, is there a way to avoid declaring lightness variables twice, once for light mode and once for dark mode?&lt;/p&gt;
&lt;p&gt;There &lt;em&gt;is&lt;/em&gt;, but I wouldn’t recommend it. It makes the code more convoluted to read and comprehend, for little benefit. But for the sake of intellectual amusement, I’m going to describe it here.&lt;/p&gt;
&lt;p&gt;Instead of setting &lt;code&gt;--l-40&lt;/code&gt; to 40%, we are going to set it in terms of its &lt;em&gt;difference from 50%&lt;/em&gt;, i.e. &lt;code&gt;-10%&lt;/code&gt;. Then, &lt;code&gt;calc(50% + var(--l-40))&lt;/code&gt; gives us 40% and &lt;code&gt;calc(50% - var(--l-40))&lt;/code&gt; gives us 60%, the two values we need. We can therefore declare one variable that is &lt;code&gt;-1&lt;/code&gt; in dark mode and &lt;code&gt;1&lt;/code&gt; in light mode, and just multiply with that.&lt;/p&gt;
&lt;p&gt;Here is a subset of what our code would be like with this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root {
	--dm: 1;

	/* Example declaration: */
	--l-40: -10%;
}

@media (prefers-color-scheme: dark) {
	:root {
		--dm: -1;
	}
}

/* Example usage: */

footer {
	color: hsl(0 0% calc(50% + var(--dm) * var(--l-40));
	/* Ewww! */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And hopefully now you can see why I wouldn’t recommend this: it makes &lt;strong&gt;usage&lt;/strong&gt; much more complicated, to DRY up a few declarations that would only be specified once. It’s this kind of obsessive adherence to DRY that &lt;a href=&quot;https://lea.verou.me/2020/09/developer-priorities-throughout-their-career/&quot;&gt;programmers eventually realize is counterproductive&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Liked this article? Sign up for my &lt;a href=&quot;https://smashingconf.com/online-workshops/workshops/lea-verou&quot;&gt;Smashing Workshop on Dynamic CSS&lt;/a&gt; for more content like this!&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>82% of developers get this 3 line CSS quiz wrong</title>
    <link href="https://lea.verou.me/2021/05/82-of-developers-get-this-3-line-css-quiz-wrong/"/>
    <updated>2021-05-21T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3347</id>
    <content xml:lang="en" type="html">&lt;p&gt;(&lt;em&gt;I always wanted to do a clickbait title like this and when this chance came along I could not pass it up. 😅 Sorry!&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;While putting my ideas into slides for my &lt;a href=&quot;https://smashingconf.com/online-workshops/workshops/lea-verou&quot;&gt;Dynamic CSS workshop&lt;/a&gt; for next week, I was working on a slide explaining how the CSS wide keywords work with custom properties. &lt;code&gt;inherit&lt;/code&gt;, &lt;code&gt;initial&lt;/code&gt;, &lt;code&gt;unset&lt;/code&gt; I had used numerous times and knew well. But what about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/revert&quot;&gt;&lt;code&gt;revert&lt;/code&gt;&lt;/a&gt;? How did that work? I had an idea, but quickly coded up a demo to try it out.&lt;/p&gt;
&lt;p&gt;The code was:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root {
    --accent-color: skyblue;
}

div {
    --accent-color: revert;
    background: var(--accent-color, orange);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Phew, I was correct, but the amount of uncertainty I had before seeing the result tipped me that I might be on to something.&lt;/p&gt;
&lt;p&gt;Before you read on, take a moment to think about what you would vote. Warning: Spoilers ahead!&lt;/p&gt;
&lt;p&gt;🤔&lt;/p&gt;
&lt;p&gt;🤔&lt;/p&gt;
&lt;p&gt;🤔&lt;/p&gt;
&lt;p&gt;🤔
So I posted a quiz on Twitter:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeaVerou/status/1395379573190168576&quot;&gt;https://twitter.com/LeaVerou/status/1395379573190168576&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These were the results after the 24 hours it ran for:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2021/05/82-of-developers-get-this-3-line-css-quiz-wrong/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;orange&lt;/code&gt; was the clear winner, and the actual correct answer, &lt;code&gt;skyblue&lt;/code&gt; only got 18.1%, nearly the same as &lt;code&gt;transparent&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;If you got it wrong, you’re in &lt;strong&gt;very&lt;/strong&gt; good company: not only did 82% of poll respondents get it wrong as well, but even the editor of the &lt;a href=&quot;https://drafts.csswg.org/css-variables/&quot;&gt;CSS Variables spec&lt;/a&gt; and co-editor of &lt;a href=&quot;https://drafts.csswg.org/css-cascade/#default&quot;&gt;CSS Cascading and Inheritance&lt;/a&gt; (which defines &lt;code&gt;revert&lt;/code&gt;), &lt;a href=&quot;https://xanthir.com/&quot;&gt;Tab Atkins&lt;/a&gt;, told me privately that he got it wrong too: he voted for &lt;code&gt;orange&lt;/code&gt;! &lt;em&gt;(Yes, I did get his permission to mention this)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So what actually happens? Why do we get &lt;code&gt;skyblue&lt;/code&gt;? I will try to explain as best as I can.&lt;/p&gt;
&lt;p&gt;Let’s start by what &lt;code&gt;revert&lt;/code&gt; does: It reverts the cascaded value of the property from its current value to the value the property &lt;em&gt;would have had&lt;/em&gt; if no changes had been made by the current style origin to the current element.&lt;/p&gt;
&lt;p&gt;This means it cancels out any author styles, and resets back to whatever value the property would have from the user stylesheet and UA stylesheet. Assuming there is no &lt;code&gt;--accent-color&lt;/code&gt; declaration in the user stylesheet, and of course UA stylesheets don’t set custom properties, then that means the property doesn’t have a value.&lt;/p&gt;
&lt;p&gt;Since custom properties are inherited properties (unless they are &lt;a href=&quot;https://drafts.css-houdini.org/css-properties-values-api-1/#registered-custom-property&quot;&gt;registered&lt;/a&gt; with &lt;code&gt;inherits: false&lt;/code&gt;, but this one is not), this means the inherited value trickles in, which is — you guessed it — &lt;code&gt;skyblue&lt;/code&gt;. You can see for yourself in &lt;a href=&quot;https://codepen.io/leaverou/pen/zYZZpaY?editors=1100&quot;&gt;this codepen&lt;/a&gt;.&lt;/p&gt;
&lt;iframe id=&quot;cp_embed_zYZZpaY&quot; src=&quot;https://codepen.io/anon/embed/zYZZpaY?height=250&amp;amp;theme-id=1&amp;amp;slug-hash=zYZZpaY&amp;amp;default-tab=result&quot; height=&quot;250&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; allowpaymentrequest=&quot;&quot; name=&quot;CodePen Embed zYZZpaY&quot; title=&quot;CodePen Embed zYZZpaY&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width:100%;overflow:hidden&quot;&gt;CodePen Embed Fallback&lt;/iframe&gt;
&lt;p&gt;What if our property were registered as non-inheriting? Would it then be &lt;code&gt;orange&lt;/code&gt;? Nice try, but no. When we register a custom property, it is mandatory to provide an initial value. This means that the property always resolves to a value, even &lt;code&gt;--accent-color: initial&lt;/code&gt; does not trigger the fallback anymore. You can see this for yourself in &lt;a href=&quot;https://codepen.io/leaverou/pen/qBrrpKZ?editors=1100&quot;&gt;this codepen&lt;/a&gt; (&lt;a href=&quot;https://caniuse.com/mdn-css_at-rules_property&quot;&gt;Chrome only as of May 2021&lt;/a&gt;).&lt;/p&gt;
&lt;iframe id=&quot;cp_embed_qBrrpKZ&quot; src=&quot;https://codepen.io/anon/embed/qBrrpKZ?height=250&amp;amp;theme-id=1&amp;amp;slug-hash=qBrrpKZ&amp;amp;default-tab=result&quot; height=&quot;250&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; allowpaymentrequest=&quot;&quot; name=&quot;CodePen Embed qBrrpKZ&quot; title=&quot;CodePen Embed qBrrpKZ&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width:100%;overflow:hidden&quot;&gt;CodePen Embed Fallback&lt;/iframe&gt;
&lt;p&gt;&lt;em&gt;Liked this? Then you will love &lt;a href=&quot;https://smashingconf.com/online-workshops/workshops/lea-verou&quot;&gt;the workshop&lt;/a&gt;! There are &lt;a href=&quot;https://smashingconf.com/online-workshops/workshops/lea-verou&quot;&gt;still a few tickets left&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Is the current tab active?</title>
    <link href="https://lea.verou.me/2021/05/is-the-current-tab-active/"/>
    <updated>2021-05-24T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3357</id>
    <content xml:lang="en" type="html">&lt;p&gt;Today I ran into an interesting problem. Interesting because it’s one of those very straightforward, deceptively simple questions, that after a fair amount of digging, does not appear to have a definite answer (though I would love to be wrong!).&lt;/p&gt;
&lt;p&gt;The problem was to determine &lt;strong&gt;if the current tab is active&lt;/strong&gt;. Yes, as simple as that.&lt;/p&gt;
&lt;h2 id=&quot;why%3F-(i.e.-my-use-case)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/05/is-the-current-tab-active/#why%3F-(i.e.-my-use-case)&quot;&gt;Why? (i.e. my use case)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was working on my slide deck framework, &lt;a href=&quot;https://github.com/leaverou/inspire.js&quot;&gt;Inspire.js&lt;/a&gt;. There is a &lt;a href=&quot;https://github.com/LeaVerou/inspire.js/tree/master/plugins/presenter&quot;&gt;presenter mode plugin&lt;/a&gt;, which spawns a new window with your slides (“projector view”), whereas your current window becomes a “presenter view”, with open notes, preview of the next slide, optional progress indicator for time etc.&lt;/p&gt;
&lt;p&gt;However, this plugin was &lt;em&gt;not very good&lt;/em&gt;. The two windows are synced, but only if you use presenter view to navigate slides. If you use the projector view to advance slides, the syncing breaks. Why would you use the projector mode? Many reasons, e.g. to interact with a live demo, or even play a video. If you have a live demo heavy presentation, you may even want to mirror your screen and only ever interact with the projector mode, while having the presenter mode on a secondary screen, just to look at.&lt;/p&gt;
&lt;p&gt;The way the plugin worked was that every time the slide changed in the presenter view, it propagated the change in the projector view. To make the syncing bidirectional, it would be good to know if the current window is the active tab, and if so, propagate all slide navigation to the other one, regardless of which one is the projector view and which one is the presenter view.&lt;/p&gt;
&lt;p&gt;And this, my friends, is how I ended up in this rabbit hole.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Yes, there are other solutions to this particular problem. I could just always propagate regardless and have checks in place to avoid infinite loops. But that’s beside the point.)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-about-the-visibility-api%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/05/is-the-current-tab-active/#what-about-the-visibility-api%3F&quot;&gt;What about the Visibility API?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In most resources around the Web, people were rejoicing about how the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API&quot;&gt;Visibility API&lt;/a&gt; makes this problem trivial. “Just use &lt;code&gt;document.hidden&lt;/code&gt;!” people would gleefully recommend to others.&lt;/p&gt;
&lt;p&gt;Yes, the Visibility API is great, when you want to determine whether the current tab is &lt;em&gt;visible&lt;/em&gt;. That is &lt;strong&gt;not&lt;/strong&gt; the same as whether it is &lt;em&gt;active&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You may have two windows side by side, both visible, but only one of them is active. You may even have a window entirely obscuring another window, but you can still tab through to it and make it active. Active and visible are entirely orthogonal states, which are only loosely correlated.&lt;/p&gt;
&lt;p&gt;In my use case, given that both the projector view and presenter view would be visible at all times, this is a no-go that doesn’t even solve a subset of use cases.&lt;/p&gt;
&lt;h2 id=&quot;what-about-focus-and-blur-events-on-window%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/05/is-the-current-tab-active/#what-about-focus-and-blur-events-on-window%3F&quot;&gt;What about focus and blur events on window?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The other solution that was heavily recommended was using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/focus_event&quot;&gt;&lt;code&gt;focus&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/blur_event&quot;&gt;&lt;code&gt;blur&lt;/code&gt;&lt;/a&gt; events on &lt;code&gt;window&lt;/code&gt;. This does get us partway there. Indeed, when the current tab &lt;em&gt;becomes&lt;/em&gt; active, the &lt;code&gt;focus&lt;/code&gt; event fires. When another tab becomes active, the &lt;code&gt;blur&lt;/code&gt; event fires.&lt;/p&gt;
&lt;p&gt;Notice the emphasis on “becomes”. &lt;strong&gt;Events notify us about a state change, but they are no help for determining the &lt;em&gt;current state&lt;/em&gt;.&lt;/strong&gt; If we get a &lt;code&gt;focus&lt;/code&gt; or &lt;code&gt;blur&lt;/code&gt; event, we know whether our tab is active or not, but if we don’t get any, we simply don’t know. A tab can start off as active or not, and there is no way to tell.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;How can a tab possibly start off as inactive&lt;/em&gt;? One easy way to reproduce this is to hit Return on the address bar and immediately switch to another window. The tab you just loaded just starts off as inactive and no &lt;code&gt;blur&lt;/code&gt; event is ever fired.&lt;/p&gt;
&lt;h2 id=&quot;what-about-document.activeelement%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/05/is-the-current-tab-active/#what-about-document.activeelement%3F&quot;&gt;What about document.activeElement?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement&quot;&gt;&lt;code&gt;document.activeElement&lt;/code&gt;&lt;/a&gt; property will always return the currently focused element in a page. Can we use it to determine if a window currently has focus? Nope, cause that would be too easy.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;setTimeout(() =&amp;gt; console.log(document.activeElement), 2000)&lt;/code&gt; in the console and quickly switch windows. Return &amp;gt;2 seconds later and see what was logged. It’s the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element!&lt;/p&gt;
&lt;p&gt;Wait, maybe we can assume that if the currently focused element is a &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element then the current window is inactive? Nope, you get the same result in an active tab, if you simply haven’t focused anywhere.&lt;/p&gt;
&lt;h2 id=&quot;what-about-document.hasfocus()%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/05/is-the-current-tab-active/#what-about-document.hasfocus()%3F&quot;&gt;What about document.hasFocus()?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I discovered &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus&quot;&gt;&lt;code&gt;document.hasFocus()&lt;/code&gt;&lt;/a&gt; I thought that was the end of it. Surely, this is exactly what I need?!? &lt;a href=&quot;https://html.spec.whatwg.org/multipage/interaction.html#dom-document-hasfocus&quot;&gt;The spec&lt;/a&gt; made it sound so promising. I quickly switched to my &lt;a href=&quot;about:blank&quot;&gt;about:blank&lt;/a&gt; tab that I use for trying things out, and ran it in the console.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; document.hasFocus()
&amp;lt; false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;🤦🏽‍♀️🤦🏽‍♀️🤦🏽‍♀️&lt;/p&gt;
&lt;p&gt;Neeeext!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; &lt;code&gt;document.hasFocus()&lt;/code&gt; may be the solution after all! As &lt;a href=&quot;https://twitter.com/_AlK/status/1396800328088133633&quot;&gt;pointed&lt;/a&gt; &lt;a href=&quot;https://twitter.com/outofroutine/status/1396800341648318472&quot;&gt;out&lt;/a&gt; &lt;a href=&quot;https://twitter.com/jaffathecake/status/1396802975151054849&quot;&gt;to me&lt;/a&gt; on Twitter, the problem above was that unlike I did with &lt;code&gt;document.activeElement&lt;/code&gt;, I ran this synchronously in the console and it returned &lt;code&gt;false&lt;/code&gt; because the console as the active window. An asynchronous log while I make sure the actual window is focused would do the trick.&lt;/p&gt;
&lt;h2 id=&quot;the-anti-climactic-conclusion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/05/is-the-current-tab-active/#the-anti-climactic-conclusion&quot;&gt;The anti-climactic conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I left this section in because the moral is still valid for other cases, but it looks like &lt;code&gt;document.hasFocus()&lt;/code&gt; was the solution after all.&lt;/p&gt;
&lt;p&gt;If you’re expecting this to end with a revelation of an amazing API that I had originally missed and addresses this, you will be disappointed. If there is such a silver bullet, I did not find it. Maybe someone will point it out to me after publishing this blog post, in which case I will update it so that you don’t struggle like I did.&lt;/p&gt;
&lt;p&gt;But in my case, I simply gave up trying to find a general solution. Instead, I took advantage of the knowledge my code had in this specific situation: I knew what the other window was, and I primarily cared which one of the two (if any) had focus.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Track whether presenter or projector is the active window
addEventListener(&amp;quot;focus&amp;quot;, _ =&amp;gt; {
	Inspire.isActive = true;

	// If this window is focused, no other can be
	if (Inspire.projector) {
		Inspire.projector.Inspire.isActive = false;
	}
	else if (Inspire.presenter) {
		Inspire.presenter.Inspire.isActive = false;
	}
});

addEventListener(&amp;quot;blur&amp;quot;, _ =&amp;gt; {
	Inspire.isActive = false;

	// If this window is not focused,
	// we cannot make assumptions about which one is.
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given that the presenter view calls &lt;code&gt;window.focus()&lt;/code&gt; after opening the projector view, in practice this was pretty bulletproof.&lt;/p&gt;
&lt;p&gt;What’s the moral of this story?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sometimes simple questions do not have a good answer when it comes to the Web Platform&lt;/li&gt;
&lt;li&gt;If your code cannot answer the general question correctly in all cases, maybe it can answer a specific one that solves your particular problem, even if that leads to a less elegant solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s it folks.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Inherit ancestor font-size, for fun and profit</title>
    <link href="https://lea.verou.me/2021/06/inherit-ancestor-font-size-for-fun-and-profit/"/>
    <updated>2021-06-24T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3366</id>
    <content xml:lang="en" type="html">&lt;p&gt;If you’ve been writing CSS for any length of time, you’re probably familiar with the &lt;code&gt;em&lt;/code&gt; unit, and possibly the other &lt;a href=&quot;https://drafts.csswg.org/css-values/#font-relative-lengths&quot;&gt;type-relative units&lt;/a&gt;. We are going to refer to &lt;code&gt;em&lt;/code&gt; for the rest of this post, but anything described works for all type-relative units.&lt;/p&gt;
&lt;p&gt;As you well know, &lt;code&gt;em&lt;/code&gt; resolves to the current font size on all properties except &lt;code&gt;font-size&lt;/code&gt;, where it resolves to the &lt;em&gt;parent&lt;/em&gt; font size. It can be quite useful for making scalable components that adapt to their context size.&lt;/p&gt;
&lt;p&gt;However, I have often come across cases where you actually need to “circumvent” one level of this. Either you need to set &lt;code&gt;font-size&lt;/code&gt; to the grandparent font size instead of the parent one, or you need to set other properties to the parent font size, not the current one.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you’re already familiar with the problem and just want &lt;a href=&quot;https://lea.verou.me/2021/06/inherit-ancestor-font-size-for-fun-and-profit/#the-solution&quot;&gt;the solution&lt;/a&gt;, &lt;a href=&quot;https://lea.verou.me/2021/06/inherit-ancestor-font-size-for-fun-and-profit/#the-solution&quot;&gt;skip ahead&lt;/a&gt;. The next few paragraphs are for those thinking “but when would you ever need this?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, there are workarounds, and it’s just a matter of keeping DRY. For example, take a look at this speech bubble:&lt;/p&gt;
&lt;iframe id=&quot;cp_embed_dyvxGLo&quot; src=&quot;https://codepen.io/anon/embed/dyvxGLo?height=410&amp;amp;theme-id=1&amp;amp;slug-hash=dyvxGLo&amp;amp;default-tab=result&quot; height=&quot;410&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; allowpaymentrequest=&quot;&quot; name=&quot;CodePen Embed dyvxGLo&quot; title=&quot;CodePen Embed dyvxGLo&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width:100%;overflow:hidden&quot;&gt;CodePen Embed Fallback&lt;/iframe&gt;
&lt;p&gt;Note this in the CSS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* This needs to change every time the font-size changes: */
top: calc(100% + 1em / 2.5);
font-size: 250%;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that every time we change the font size we also need to adjust &lt;code&gt;top&lt;/code&gt;. And ok, when they’re both defined in the same rule we can just delegate this to a variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--m: 2.5;
top: calc(100% + 1em / var(--m));
font-size: calc(var(--m) * 100%);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, in the general case the font size may be defined elsewhere. For example, a third party author may want to override the emoji size, they shouldn’t also need to override anything else, our CSS should just adapt.&lt;/p&gt;
&lt;p&gt;In other cases, it is simply not possible to multiply and divide by a factor and restore the ancestor font size. Most notably, when the current (or parent) font-size is set to &lt;code&gt;0&lt;/code&gt; and we need to recover what it was one level up.&lt;/p&gt;
&lt;p&gt;I’ve come across many instances of this in the 16 years I’ve been writing CSS. Admittedly, there were way more use cases pre-Flexbox and friends, but it’s still useful, as we will see. In fact, it was the latest one that prompted this post.&lt;/p&gt;
&lt;p&gt;I needed to wrap &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements by a generic container for a library I’m working on. Let me stop you there, no, I could not just set classes on the options, I needed an actual container in the DOM.&lt;/p&gt;
&lt;p&gt;As you can see in &lt;a href=&quot;https://codepen.io/leaverou/pen/OJpexzE&quot;&gt;this pen&lt;/a&gt;, neither &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; nor custom elements work here: when included in the markup they are just discarded by the parser, and when inserted via script they are in the DOM, but the options they contain are not visible. The only &lt;a href=&quot;https://html.spec.whatwg.org/multipage/form-elements.html#the-select-element&quot;&gt;elements that work inside a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/a&gt; are: &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt;, and &lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#script-supporting-elements-2&quot;&gt;script-supporting elements&lt;/a&gt; (currently &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;). Except &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt;, none of the rest renders any contents and thus, is not fit for my use case. It had to be &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt;, sadly.&lt;/p&gt;
&lt;p&gt;However, using &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt;, even without a &lt;code&gt;label&lt;/code&gt; attribute inserts an ugly gap in the select menu, where the label would have gone (&lt;a href=&quot;https://codepen.io/leaverou/pen/vYxoGpZ&quot;&gt;pen&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2021/06/inherit-ancestor-font-size-for-fun-and-profit/images/image-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;(There were also gaps on the left of the labels, but we applied some CSS to remove them)&lt;/p&gt;
&lt;p&gt;There appears to be &lt;a href=&quot;https://www.google.com/search?q=remove+optgroup+label+site:stackoverflow.com&quot;&gt;no way to remove&lt;/a&gt; said gap.&lt;/p&gt;
&lt;p&gt;Ideally, this should be fixed on the user agent level: Browsers should not generate a label box when there is no label attribute. However, I needed a solution now, not in the far future. There was no pseudo-element for targeting the generated label. The only solution that worked was along these lines ([pen](optgroup:not([label]) {
display: contents;
font-size: 0;
}&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
optgroup:not([label])&gt; * {
	font-size: 13.333px;
})):
&lt;pre&gt;&lt;code&gt;optgroup:not([label]) {
	font-size: 0;
}

optgroup:not([label]) &amp;gt; * {
	font-size: 13.333px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The weird &lt;code&gt;13.333px&lt;/code&gt; value was taken directly from the Chrome UA stylesheet (as inspected). However, it is obviously flimsy, and will break any additional author styling. It would be far better if we could say “give me whatever &lt;code&gt;1em&lt;/code&gt; is on the grandparent”. Can we?&lt;/p&gt;
&lt;h2 id=&quot;the-solution&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/06/inherit-ancestor-font-size-for-fun-and-profit/#the-solution&quot;&gt;The solution&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What if we could use custom properties to solve this? Our first attempt might look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select {
	--em: 1em;
}

optgroup:not([label]) {
	font-size: 0;
}

optgroup:not([label]) &amp;gt; * {
	font-size: var(--em);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However this is &lt;a href=&quot;https://codepen.io/leaverou/pen/dyvxXyV&quot;&gt;horribly broken&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2021/06/inherit-ancestor-font-size-for-fun-and-profit/images/image-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;All the options have disappeared!!&lt;/p&gt;
&lt;p&gt;What on Earth happened here?!&lt;/p&gt;
&lt;p&gt;By default, custom properties are just containers for CSS tokens.When they inherit, they inherit as specified, with only any &lt;code&gt;var()&lt;/code&gt; references substituted and no other processing. This means that the &lt;code&gt;1em&lt;/code&gt; we specified inherits as the &lt;code&gt;1em&lt;/code&gt; &lt;em&gt;token&lt;/em&gt;, not as whatever absolute length it happens to resolve to on &lt;code&gt;select&lt;/code&gt;. It only becomes an absolute length at the point of usage, and this is whatever &lt;code&gt;1em&lt;/code&gt; would be there, i.e. &lt;code&gt;0&lt;/code&gt;. So all our options disappeared because we set their font size to &lt;code&gt;0&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;If only we could make &lt;code&gt;1em&lt;/code&gt; resolve to an actual absolute length at the point of declaration and inherit as that, just like native properties that accept lengths?&lt;/p&gt;
&lt;p&gt;Well, you’re in luck, because today we can!&lt;/p&gt;
&lt;p&gt;You may be familiar with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@property&quot;&gt;&lt;code&gt;@property&lt;/code&gt; rule&lt;/a&gt; as “the thing that allows us to animate custom properties”. However, it is useful for so much more than that.&lt;/p&gt;
&lt;p&gt;If we register our custom property as a &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;, this makes the &lt;code&gt;1em&lt;/code&gt; resolve on the element we specified it on, and inherit as an absolute length! &lt;a href=&quot;https://codepen.io/leaverou/pen/KKWOMMK&quot;&gt;Let’s try this&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@property --em {
	syntax: &amp;quot;&amp;lt;length&amp;gt;&amp;quot;;
	initial-value: 0;
	inherits: true;
}

select {
	--em: 1em;
}

optgroup:not([label]) {
	display: contents;
	font-size: 0;
}

optgroup:not([label]) &amp;gt; * {
	font-size: var(--em);
}

/* Remove Chrome gap */
:where(optgroup:not([label]) &amp;gt; option)::before {
	content: &amp;quot;&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe id=&quot;cp_embed_KKWOMMK&quot; src=&quot;https://codepen.io/anon/embed/KKWOMMK?height=250&amp;amp;theme-id=1&amp;amp;slug-hash=KKWOMMK&amp;amp;default-tab=css,result&quot; height=&quot;250&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; allowpaymentrequest=&quot;&quot; name=&quot;CodePen Embed KKWOMMK&quot; title=&quot;CodePen Embed KKWOMMK&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width:100%;overflow:hidden&quot;&gt;CodePen Embed Fallback&lt;/iframe&gt;
&lt;p&gt;And here is the same technique used for the speech bubble:&lt;/p&gt;
&lt;iframe id=&quot;cp_embed_XWMZewB&quot; src=&quot;https://codepen.io/anon/embed/XWMZewB?height=250&amp;amp;theme-id=1&amp;amp;slug-hash=XWMZewB&amp;amp;default-tab=result&quot; height=&quot;250&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; allowpaymentrequest=&quot;&quot; name=&quot;CodePen Embed XWMZewB&quot; title=&quot;CodePen Embed XWMZewB&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width:100%;overflow:hidden&quot;&gt;CodePen Embed Fallback&lt;/iframe&gt;
&lt;h2 id=&quot;fallback&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/06/inherit-ancestor-font-size-for-fun-and-profit/#fallback&quot;&gt;Fallback&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is all fine and dandy for the &lt;a href=&quot;https://caniuse.com/mdn-css_at-rules_property&quot;&gt;68% (as of June 2021) of users that are using a browser that supports &lt;code&gt;@property&lt;/code&gt;&lt;/a&gt;, but what happens in the remaining 32%? It’s not pretty:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2021/06/inherit-ancestor-font-size-for-fun-and-profit/images/image-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We get the default behavior of an unregistered property, and thus none of our options show up! This is &lt;em&gt;bad&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We should clearly either provide a fallback or conditionally apply these rules only in browsers that support &lt;code&gt;@property&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can easily detect &lt;code&gt;@property&lt;/code&gt; support in JS and add a class to our root element:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (window.CSSPropertyRule) {
	let root = document.documentElement;
	root.classList.add(&amp;quot;supports-atproperty&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can just use the descendant combinator:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root.supports-atproperty optgroup:not([label]) {
	font-size: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;css-only-fallback-for-%40property&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/06/inherit-ancestor-font-size-for-fun-and-profit/#css-only-fallback-for-%40property&quot;&gt;CSS-only fallback for @property&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the JS fallback works great, I couldn’t help but wonder if there’s a CSS only way.&lt;/p&gt;
&lt;p&gt;My first thought was to use &lt;code&gt;@supports&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@supports (--em: flugelhorn) {
	/* Does not support @property */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The theory was, if a browser supported any value to be assigned on a property registered as a &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;, surely it does not support property registration.&lt;/p&gt;
&lt;p&gt;It turns out, registered properties do not validate their syntax at parse time, and thus are always valid for &lt;code&gt;@supports&lt;/code&gt;. This is &lt;a href=&quot;https://drafts.css-houdini.org/css-properties-values-api-1/#parsing-custom-properties&quot;&gt;explained in the spec&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When parsing a page’s CSS, UAs commonly make a number of optimizations to help with both speed and memory.&lt;/p&gt;
&lt;p&gt;One of those optimizations is that they only store the properties that will actually have an effect; they throw away invalid properties, and if you write the same property multiple times in a single declaration block, all but the last valid one will be thrown away. (This is an important part of CSS’s error-recovery and forward-compatibility behavior.)&lt;/p&gt;
&lt;p&gt;This works fine if the syntax of a property never changes over the lifetime of a page. If a custom property is registered, however, it can change its syntax, so that a property that was previously invalid suddenly becomes valid.&lt;/p&gt;
&lt;p&gt;The only ways to handle this are to either store every declaration, even those that were initially invalid (increasing the memory cost of pages), or to re-parse the entire page’s CSS with the new syntax rules (increasing the processing cost of registering a custom property). Neither of these are very desirable.&lt;/p&gt;
&lt;p&gt;Further, UA-defined properties have their syntax determined by the version of the UA the user is viewing the page with; this is out of the page author’s control, which is the entire reason for CSS’s error-recovery behavior and the practice of writing multiple declarations for varying levels of support. A custom property, on the other hand, has its syntax controlled by the page author, according to whatever stylesheet or script they’ve included in the page; there’s no unpredictability to be managed. Throwing away syntax-violating custom properties would thus only be, at best, a convenience for the page author, not a necessity like for UA-defined properties.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok this is great, and totally makes sense, but what can we do? How can we provide a fallback?&lt;/p&gt;
&lt;p&gt;It turns out that there is a way, but brace yourself, as it’s quite hacky. I’m only going to describe it for entertainment purposes, but I think for real usage, the JS way is far more straightforward, and it’s the one I’ll be using myself.&lt;/p&gt;
&lt;p&gt;The main idea is to take advantage of the &lt;code&gt;var()&lt;/code&gt; fallback argument of a &lt;em&gt;second&lt;/em&gt; registered variable, that is registered as non-inheriting. We set it to the fallback value on an ancestor. If &lt;code&gt;@property&lt;/code&gt; is supported, then this property will not be defined on the element of interest, since it does not inherit. Any other properties referencing it will be &lt;a href=&quot;https://drafts.csswg.org/css-variables/#invalid-at-computed-value-time&quot;&gt;invalid at computed value time&lt;/a&gt;, and thus any &lt;code&gt;var()&lt;/code&gt; fallbacks will apply. If &lt;code&gt;@property&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; supported, the property will inherit as normal and thus using it becomes our fallback.&lt;/p&gt;
&lt;p&gt;Here is an &lt;a href=&quot;https://codepen.io/leaverou/pen/ExWqyzQ&quot;&gt;example&lt;/a&gt; with a simple green/red test to illustrate this concept:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@property --test {
	syntax: &amp;quot;*&amp;quot;;
	inherits: false;
}

html {
	--test: red;
}

body {
	background: var(--test, green);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe id=&quot;cp_embed_ExWqyzQ&quot; src=&quot;https://codepen.io/anon/embed/ExWqyzQ?height=250&amp;amp;theme-id=1&amp;amp;slug-hash=ExWqyzQ&amp;amp;default-tab=result&quot; height=&quot;250&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; allowpaymentrequest=&quot;&quot; name=&quot;CodePen Embed ExWqyzQ&quot; title=&quot;CodePen Embed ExWqyzQ&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width:100%;overflow:hidden&quot;&gt;CodePen Embed Fallback&lt;/iframe&gt;
&lt;p&gt;And here is how we can use the same concept to provide a fallback for the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@property --test {
	syntax: &amp;quot;*&amp;quot;;
	inherits: false;
}

select {
	--test: 1em; /* fallback */
	--em: 1em;
}

optgroup:not([label]) {
	font-size: var(--test, 0);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https://codepen.io/leaverou/pen/eYvqdYG&quot;&gt;finished demo&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Custom properties with defaults: 3+1 strategies</title>
    <link href="https://lea.verou.me/2021/10/custom-properties-with-defaults/"/>
    <updated>2021-10-15T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3384</id>
    <content xml:lang="en" type="html">&lt;p&gt;When developing customizable components, one often wants to expose various parameters of the styling as custom properties, and form a sort of &lt;em&gt;CSS API&lt;/em&gt;. This is still underutlized, but there are libraries, e.g. &lt;a href=&quot;https://shoelace.style/&quot;&gt;Shoelace&lt;/a&gt;, that already &lt;a href=&quot;https://shoelace.style/components/switch?id=css-custom-properties&quot;&gt;list&lt;/a&gt; &lt;a href=&quot;https://shoelace.style/components/progress-ring?id=css-custom-properties&quot;&gt;custom&lt;/a&gt; &lt;a href=&quot;https://shoelace.style/components/image-comparer?id=css-custom-properties&quot;&gt;properties&lt;/a&gt; alongside other parts of each component’s API (even &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/::part&quot;&gt;CSS parts&lt;/a&gt;!).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; I’m using “component” here broadly, as any reusable chunk of HTML/CSS/JS, not necessarily a web component or framework component. What we are going to discuss applies to reusable chunks of HTML just as much as it does to “proper” web components.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let’s suppose we are designing a certain button styling, that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2021/10/custom-properties-with-defaults/images/outlined-button.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We want to support a &lt;code&gt;--color&lt;/code&gt; custom property for creating color variations by setting multiple things internally:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.fancy-button {
	border: .1em solid var(--color);
	background: transparent;
	color: var(--color);
}

.fancy-button:hover {
	background: var(--color);
	color: white;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that with the code above, if no &lt;code&gt;--color&lt;/code&gt; is set, the three declarations using it will be &lt;a href=&quot;https://www.w3.org/TR/css-variables-1/#invalid-at-computed-value-time&quot;&gt;IACVT&lt;/a&gt; and thus we’ll get a nearly unstyled text-only button with no background on hover (&lt;code&gt;transparent&lt;/code&gt;), no border on hover, and the default black text color (&lt;code&gt;canvastext&lt;/code&gt; to be precise).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2021/10/custom-properties-with-defaults/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;That’s no good! IT’s important that we set defaults. However, using the fallback parameter for this gets tedious, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;WET&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.fancy-button {
	border: .1em solid var(--color, black);
	background: transparent;
	color: var(--color, black);
}

.fancy-button:hover {
	background: var(--color, black);
	color: white;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To avoid the repetition and still ensure &lt;code&gt;--color&lt;/code&gt; always has a value, many people do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.fancy-button {
	--color: black;
	border: .1em solid var(--color);
	background: transparent;
	color: var(--color);
}

.fancy-button:hover {
	background: var(--color);
	color: white;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this is not ideal for a number of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It means that people cannot take advantage of inheritance to set &lt;code&gt;--color&lt;/code&gt; on an ancestor.&lt;/li&gt;
&lt;li&gt;It means that people need to use specificity that overrides your own rules to set these properties. In this case this may only be &lt;code&gt;0,1,0&lt;/code&gt;, but if your selectors are complex, it could end up being quite annoying (and introduce tight couplings, because developers should not need to know what your selectors are).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you insist going that route, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:where&quot;&gt;&lt;code&gt;:where()&lt;/code&gt;&lt;/a&gt; can be a useful tool to reduce specificity of your selectors while having as fine grained selection criteria as you want. It’s also one of the features &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/1170&quot;&gt;I proposed&lt;/a&gt; for CSS, so I’m very proud that it’s now &lt;a href=&quot;https://caniuse.com/mdn-css_selectors_where&quot;&gt;supported everywhere&lt;/a&gt;. &lt;code&gt;:where()&lt;/code&gt; won’t solve the inheritance problem, but at least it will solve the specificity problem.&lt;/p&gt;
&lt;p&gt;What if we still use the fallback parameter and use a variable for the fallback?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.fancy-button {
	--color-initial: black;
	border: .1em solid var(--color, var(--color-initial));
	background: transparent;
	color: var(--color, var(--color-initial));
}

.fancy-button:hover {
	background: var(--color, var(--color-initial));
	color: white;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works, and it has the advantage that people could even &lt;em&gt;customize your default&lt;/em&gt; if they want to (though I cannot think of any use cases for that). But isn’t it so &lt;em&gt;horribly&lt;/em&gt; verbose? What else could we do?&lt;/p&gt;
&lt;p&gt;My preferred solution is what I call &lt;em&gt;pseudo-private custom properties&lt;/em&gt;. You use a different property internally than the one you expose, which is set to the one you expose plus the fallback:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.fancy-button {
	--_color: var(--color, black);
	border: .1em solid var(--_color);
	background: transparent;
	color: var(--_color);
}

.fancy-button:hover {
	background: var(--_color);
	color: white;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I tend to use the same name prepended with an underscore. Some people may flinch at the idea of private properties that aren’t really private, but I will remind you that we’ve done this in JS for over 20 years (we only got real &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields&quot;&gt;private properties&lt;/a&gt; fairly recently).&lt;/p&gt;
&lt;h2 id=&quot;bonus%3A-defaults-via-%40property-registration&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/10/custom-properties-with-defaults/#bonus%3A-defaults-via-%40property-registration&quot;&gt;Bonus: Defaults via @property registration&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If &lt;code&gt;@property&lt;/code&gt; is fair game (it’s &lt;a href=&quot;https://caniuse.com/mdn-css_at-rules_property&quot;&gt;only supported in Chromium&lt;/a&gt;, but these days that still makes it supported in 70% of users’ browsers — which is a bit sad, but that’s another discussion), you could also set defaults that way:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@property --color {
	syntax: &amp;quot;&amp;lt;color&amp;gt;&amp;quot;;
	inherits: true;
	initial-value: black;
}

.fancy-button {
	border: .1em solid var(--color);
	background: transparent;
	color: var(--color);
}

.fancy-button:hover {
	background: var(--color);
	color: white;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Registering your property has several benefits (e.g. it makes it animatable), but if you’re only registering it for the purposes of setting a default, this way has several drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Property registration is global. Your component’s custom properties may clash with the host page’s custom properties, which is not great. The consequences of this can be quite dire, because &lt;code&gt;@property&lt;/code&gt; fails silently, and the &lt;a href=&quot;https://codepen.io/leaverou/pen/JjyYgow&quot;&gt;last one wins&lt;/a&gt; so you may just get the initial value of the host page’s property. In this case, that could very likely be &lt;code&gt;transparent&lt;/code&gt;, with &lt;a href=&quot;https://codepen.io/leaverou/pen/JjyYgow&quot;&gt;terrible results&lt;/a&gt;. And if your declaration is last and you get your own registered property, that means the rest of the page will also get yours, with equally potentially terrible results.&lt;/li&gt;
&lt;li&gt;With this method you cannot set different initial values per declaration (although you usually don’t want to).&lt;/li&gt;
&lt;li&gt;Not all custom property &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@property/syntax&quot;&gt;syntaxes&lt;/a&gt; can be described via &lt;code&gt;@property&lt;/code&gt; yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;bonus%3A-customizable-single-checkbox-pure-css-switch&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/2021/10/custom-properties-with-defaults/#bonus%3A-customizable-single-checkbox-pure-css-switch&quot;&gt;Bonus: Customizable single-checkbox pure CSS switch&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just for the lulz, I made a switch (styling loosely inspired from &lt;a href=&quot;https://shoelace.style/components/switch&quot;&gt;Shoelace switch&lt;/a&gt;) that is just a regular &lt;code&gt;&amp;lt;input type=checkbox&amp;gt;&lt;/code&gt; with a pretty extensive custom property API:&lt;/p&gt;
&lt;iframe id=&quot;cp_embed_PoKPQYE&quot; src=&quot;https://codepen.io/anon/embed/PoKPQYE?height=450&amp;amp;theme-id=1&amp;amp;slug-hash=PoKPQYE&amp;amp;default-tab=css,result&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; allowpaymentrequest=&quot;&quot; name=&quot;CodePen Embed PoKPQYE&quot; title=&quot;CodePen Embed PoKPQYE&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width:100%;overflow:hidden&quot;&gt;CodePen Embed Fallback&lt;/iframe&gt;
&lt;p&gt;It is using the pseudo-private properties approach. Note how another bonus of this method is that there’s a little self-documentation right there about the component’s custom property API, even before any actual documentation is written.&lt;/p&gt;
&lt;p&gt;As an aside, things like this switch make me wish it was possible to create web components that subclass existing elements. There is an existing — somewhat awkward — solution with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is&quot;&gt;the &lt;code&gt;is&lt;/code&gt; attribute&lt;/a&gt;, but &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=182671&quot;&gt;Apple is blocking it&lt;/a&gt;. The alternative is to use a web component with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals&quot;&gt;ElementInternals&lt;/a&gt; to make it form-associated and accessible and mirror all checkbox methods and properties, but that is way too heavyweight, and prone to breakage in the future, as native checkboxes add more methods. There is also a &lt;a href=&quot;https://github.com/ungap/custom-elements#readme&quot;&gt;polyfill&lt;/a&gt;, but for a simple switch it may be a bit overkill. We really shouldn’t need to be painstakingly mirroring native elements to subclass them…&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Enjoyed this article and want to learn more? I do teach courses on unlocking the full potential of CSS custom properties. You can watch my &lt;a href=&quot;https://frontendmasters.com/workshops/css-variables/&quot;&gt;Frontend Masters Dynamic CSS course (currently in production)&lt;/a&gt;, or &lt;a href=&quot;https://smashingconf.com/online-workshops/workshops/lea-verou-nov/&quot;&gt;attend my upcoming Smashing workshop&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>On Yak Shaving and &lt;md-block&gt;, a new HTML element for Markdown</title>
    <link href="https://lea.verou.me/2021/11/on-yak-shaving-and-md-block-an-html-element-for-markdown/"/>
    <updated>2021-11-26T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3392</id>
    <content xml:lang="en" type="html">&lt;p&gt;This week has been &lt;a href=&quot;https://americanexpress.io/yak-shaving/&quot;&gt;Yak Shaving&lt;/a&gt; Galore. It went a bit like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I’ve been working on a web component that I need for the project I’m working on. More on that later, but let’s call it &lt;code&gt;&amp;lt;x-foo&amp;gt;&lt;/code&gt; for now.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Of course&lt;/em&gt; that needs to be developed as a separate reusable library and released as a separate open source project. No, this is not the titular component, this was only level 1 of my multi-level yak shaving… 🤦🏽‍♀️&lt;/li&gt;
&lt;li&gt;I wanted to showcase various usage examples of that component in its page, so I made another component for these demos: &lt;code&gt;&amp;lt;x-foo-live&amp;gt;&lt;/code&gt;. This demo component would have markup with editable parts on one side and the live rendering on the other side.&lt;/li&gt;
&lt;li&gt;I wanted the editable parts to autosize as you type. Hey, I’ve written a library for that in the past, it’s called &lt;a href=&quot;https://github.com/leaverou/stretchy/&quot;&gt;Stretchy&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;But Stretchy was not written in ESM, nor did it support Shadow DOM. I must rewrite Stretchy in ESM and support Shadow DOM first! Surely it won’t take more than a half hour, it’s a tiny library.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(It took more than a half hour)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Ok, now I have a nice lil’ module, but I also need to export IIFE as well, so that it’s compatible with Stretchy v1. Let’s switch to Rollup and npm scripts and ditch Gulp.&lt;/li&gt;
&lt;li&gt;Oh look, Stretchy’s CSS is still written in Sass, even though it doesn’t really need it now. Let’s rewrite it to use CSS variables, use PostCSS for nesting, and use &lt;code&gt;conic-gradient()&lt;/code&gt; instead of inline SVG data URIs.&lt;/li&gt;
&lt;li&gt;Ok, Stretchy v2 is ready, now I need to update its docs. Oooh, it doesn’t have a README? I should add one. But I don’t want to duplicate content between the page and the README. Hmmm, if only…&lt;/li&gt;
&lt;li&gt;I know! I’ll make a web component for rendering both inline and remote Markdown! I have an unfinished one lying around somewhere, surely it won’t take more than a couple hours to finish it?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(It took almost a day, two with docs, demos etc)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Done!&lt;/em&gt; Here it is! &lt;a href=&quot;https://md-block.verou.me/&quot;&gt;https://md-block.verou.m&lt;/a&gt;&lt;a href=&quot;https://md-block.verou.me/&quot;&gt;e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Great!&lt;/em&gt; Now I can update &lt;a href=&quot;https://stretchy.verou.me/&quot;&gt;Stretchy’s docs&lt;/a&gt; and &lt;a href=&quot;https://github.com/LeaVerou/stretchy/releases/tag/v2.0.0&quot;&gt;release its v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Great!&lt;/em&gt; Now I can use Stretchy in my &lt;code&gt;&amp;lt;x-foo-live&amp;gt;&lt;/code&gt; component demoing my &lt;code&gt;&amp;lt;x-foo&amp;gt;&lt;/code&gt; component and be back to only one level of yak shaving!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Wow, it’s already Friday afternoon?!&lt;/em&gt; 🤦🏽‍♀️😂&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hopefully you find &lt;a href=&quot;https://md-block.verou.me/&quot;&gt;&lt;md-block&gt;&lt;/md-block&gt;&lt;/a&gt; useful! Enjoy!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Releasing Color.js: A library that takes color seriously</title>
    <link href="https://lea.verou.me/2022/06/releasing-colorjs/"/>
    <updated>2022-06-29T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3463</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2022/06/releasing-colorjs/images/image-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Related: &lt;a href=&quot;https://svgees.us/blog/colorjs-release.html&quot;&gt;Chris’ blog post for the release of Color.js&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This post has been long overdue: &lt;a href=&quot;https://svgees.us/&quot;&gt;Chris&lt;/a&gt; and I started working on Color.js in 2020, over 2 years ago! It was shortly after I had finished the Color lecture &lt;a href=&quot;https://designftw.mit.edu/&quot;&gt;for the class I was teaching at MIT&lt;/a&gt; and I was appalled by the lack of color libraries that did the things I needed for the demos in my slides. I asked Chris, “Hey, what if we make a Color library? You will bring your Color Science knowledge and I will bring my JS and API design knowledge. Wouldn’t this be the coolest color library ever?”. There was also a fair bit of discussion in the CSS WG about a native Color object for the Web Platform, and we needed to play around with JS for a while before we could work on an API that would be baked into browsers.&lt;/p&gt;
&lt;p&gt;We had a prototype ready in a few months and presented it to the CSS WG. People loved it and some started using it despite it not being “officially” released. There was even a library that used Color.js as a dependency!&lt;/p&gt;
&lt;p&gt;Once we got some experience from this usage, we worked on a draft specification for a Color API for the Web. In July 2021 &lt;a href=&quot;https://github.com/w3c/css-houdini-drafts/issues/1047&quot;&gt;we presented it again in a CSS WG Color breakout&lt;/a&gt; and everyone agreed to &lt;a href=&quot;https://github.com/wicg/color-api&quot;&gt;incubate it in WICG, where it lives now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Why can’t we just standardize the API in Color.js?&lt;/strong&gt; While one is influenced by the other, a Web Platform API has different constraints and needs to follow more restricted design principles compared to a JS library, which can be more flexible. E.g. exotic properties (things like &lt;code&gt;color.lch.l&lt;/code&gt;) are very common in JS libraries, but are &lt;a href=&quot;https://github.com/w3ctag/design-principles/issues/16&quot;&gt;now considered an antipattern in Web Platform APIs&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Work on Color.js as well as the Color API continued, on and off as time permitted, but no release. There were always things to do and bugs to fix before more eyes would look at it. Because eyes &lt;em&gt;were&lt;/em&gt; looking at it anyway, we even slapped a big fat warning on the homepage:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2022/06/releasing-colorjs/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Eventually a few days ago, I discovered that the &lt;a href=&quot;https://www.npmjs.com/package/colorjs.io&quot;&gt;Color.js package we had published on npm&lt;/a&gt; somehow has over 6000 downloads per week, nearly all of them direct. I would not bat an eyelid at those numbers if we had released Color.js into the wild, but for a library we actively avoided mentioning to anyone outside of standards groups, it was rather odd.&lt;/p&gt;
&lt;p&gt;How did this happen? Maybe it was the &lt;a href=&quot;https://web.dev/shows/http-203/Uh95jZPTDfw/&quot;&gt;HTTP 203 episode that mentioned it in passing&lt;/a&gt;? Regardless, it gave us hope that it’s filling a very real need in the pretty crowded space of color manipulation libraries and it gave us a push to finally get it out there.&lt;/p&gt;
&lt;p&gt;So here we are, releasing &lt;a href=&quot;https://colorjs.io/&quot;&gt;Color.js&lt;/a&gt; into the wild. So what’s cool about it?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Completely color space agnostic, each &lt;code&gt;Color&lt;/code&gt; object just has a reference to a color space, a list of coordinates, and optionally an alpha.&lt;/li&gt;
&lt;li&gt;Supports a large variety of color spaces including all color spaces from &lt;a href=&quot;https://drafts.csswg.org/css-color-4/&quot;&gt;CSS Color 4&lt;/a&gt;, as well as the unofficial &lt;a href=&quot;https://drafts.csswg.org/css-color-hdr&quot;&gt;CSS Color HDR&lt;/a&gt; draft.&lt;/li&gt;
&lt;li&gt;Supports interpolation as defined in CSS Color 4&lt;/li&gt;
&lt;li&gt;Doesn’t skimp on color science: does actual gamut mapping instead of naïve clipping, and actual chromatic adaptation when converting between color spaces with different white points.&lt;/li&gt;
&lt;li&gt;Multiple DeltaE methods for calculating color difference (2000, CMC, 76, Jz, OK etc)&lt;/li&gt;
&lt;li&gt;The library itself is written to be very modular and ESM-first (with CJS and IIFE bundles) and provides a tree-shakeable API as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy: &lt;a href=&quot;https://colorjs.io/&quot;&gt;Color.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is also an entire (buggy, but usable) script in the website for realtime editable color demos that we call “Color Notebook”. It looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2022/06/releasing-colorjs/images/image-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2022/06/releasing-colorjs/images/image-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And you can &lt;a href=&quot;https://colorjs.io/notebook/&quot;&gt;create and share your own documents with live Color.js demos&lt;/a&gt;. You log in with GitHub and the app saves in GitHub Gists.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2022/06/releasing-colorjs/images/image-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Color spaces presently supported by Color.js&lt;/p&gt;
</content>
  </entry><entry>
    <title>Introducing Rety: live coding, without the stress</title>
    <link href="https://lea.verou.me/2022/07/rety/"/>
    <updated>2022-07-13T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3478</id>
    <content xml:lang="en" type="html">&lt;p&gt;I recently spoke at CSS Day in Amsterdam. It was only my second f2f talk after the pandemic. It went down really well, both in person, and recently that the video was released:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ZuZizqDF4q8&quot;&gt;https://www.youtube.com/watch?v=ZuZizqDF4q8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is a sample of tweets about it that made me particularly warm and fuzzy inside:
&lt;a href=&quot;https://twitter.com/CSSDayConf/status/1542778793219301376&quot;&gt;https://twitter.com/CSSDayConf/status/1542778793219301376&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jonpearse/status/1542490268322103296&quot;&gt;https://twitter.com/jonpearse/status/1542490268322103296&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/StuRobson/status/1542461048791384066&quot;&gt;https://twitter.com/StuRobson/status/1542461048791384066&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/vlh/status/1544483583544463361&quot;&gt;https://twitter.com/vlh/status/1544483583544463361&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/pawelgrzybek/status/1546861605824126980&quot;&gt;https://twitter.com/pawelgrzybek/status/1546861605824126980&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/parker%5C_codes/status/1547055116221497344&quot;&gt;https://twitter.com/parker&#92;_codes/status/1547055116221497344&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/polarbirke/status/1547202631315214338&quot;&gt;https://twitter.com/polarbirke/status/1547202631315214338&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/unistyler/status/1544619175796252672&quot;&gt;https://twitter.com/unistyler/status/1544619175796252672&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There’s &lt;a href=&quot;https://twitter.com/search?q=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DZuZizqDF4q8&quot;&gt;a lot more where these came from too&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was not just my second post-pandemic talk, but my first talk using &lt;em&gt;&lt;a href=&quot;https://rety.verou.me/&quot;&gt;Rety&lt;/a&gt;&lt;/em&gt;, which is what this post is about.&lt;/p&gt;
&lt;p&gt;As you may know, I love live coding as a teaching tool, and over the years &lt;a href=&quot;https://twitter.com/aarongarciah/status/844212506365235200&quot;&gt;it&lt;/a&gt; &lt;a href=&quot;https://twitter.com/gumnos/status/1118527972342935552&quot;&gt;has become&lt;/a&gt; &lt;a href=&quot;https://twitter.com/ChrisFerdinandi/status/1027343408187277312&quot;&gt;part&lt;/a&gt; &lt;a href=&quot;https://twitter.com/LinnOyenFarley/status/1011650208831287296&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;https://twitter.com/feross/status/928018779115724800&quot;&gt;my&lt;/a&gt; &lt;a href=&quot;https://twitter.com/HenriHelvetica/status/1011630698984361985&quot;&gt;trademark&lt;/a&gt; &lt;a href=&quot;https://twitter.com/johnallsopp/status/926417129070456832&quot;&gt;speaking&lt;/a&gt; &lt;a href=&quot;https://bradfrost.com/blog/post/on-speaking/#:~:text=Don%E2%80%99t%20live%20code%20%E2%80%93%20This%20applies%20to%20everyone%20except%20Lea%20Verou%2C%20who%20is%20an%20absolute%20beast&quot;&gt;style&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When combined with some kind of interactive preview, it allows the speaker to demonstrate not only the final state of a coding snippet, but also how you get there, and what the intermediate results are. &lt;strong&gt;Live coding is to programming what a blackboard is to math or physics.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But it does create a unique challenge: My live coded slides don’t make sense without me. This may be acceptable for a conference talk, which is usually recorded, but not in other contexts, such as teaching a university course, where all instructors need to be able to teach all lectures, and students need to be able to quickly refer to examples shown.&lt;/p&gt;
&lt;p&gt;Back in the fall of 2021, when we were preparing for the second iteration of our course, &lt;a href=&quot;https://designftw.mit.edu/&quot;&gt;Design for the Web: Languages and User Interfaces&lt;/a&gt;, this came up as a pressing issue. The current state of the course &lt;em&gt;required&lt;/em&gt; me to be there to teach my lectures, and this may well be the last year I teach it, since I’m finishing up my PhD soon.&lt;/p&gt;
&lt;p&gt;I didn’t want to completely remove live coding from my slides, as I truly believe it is the perfect implementation of the &lt;em&gt;“show, don’t tell”&lt;/em&gt; teaching adage for certain things, so I thought instead: what if I could &lt;em&gt;record&lt;/em&gt; my live coding, and make it replayable?&lt;/p&gt;
&lt;p&gt;Doing so manually seemed like cruel and unusual punishment. And thus, &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://rety.verou.me/&quot;&gt;Rety&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; was born (pronounced like the “rety” in “retype”).&lt;/p&gt;
&lt;p&gt;While originally the plan was for me to still live code, and have the &lt;em&gt;&lt;a href=&quot;https://rety.verou.me/&quot;&gt;Rety&lt;/a&gt;&lt;/em&gt; functionality there for students and future instructors, I ended up using it during my own lectures as well, as I concluded that a well crafted &lt;a href=&quot;https://rety.verou.me/#rety-actions&quot;&gt;Rety script&lt;/a&gt; was strictly superior to me doing the live coding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Same progressive development as a live demo&lt;/li&gt;
&lt;li&gt;It still affords unplanned demonstrations (e.g. to answer a question), since Rety still works with the same editors, and I could always pause it and take over if needed.&lt;/li&gt;
&lt;li&gt;I could record myself and edit the script to maximize education value and minimize typos, delays, fumbling etc.&lt;/li&gt;
&lt;li&gt;People can consume typed text far faster than people can type text. This is why most video tutorials speed up the typing. With Rety, typing speed is adjustable, and doesn’t need to match mine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After test driving it for our course the entire spring 2022 semester, it went through the ultimate test in June 2022: I used it for my &lt;a href=&quot;https://cssday.nl/2022&quot;&gt;CSSDay&lt;/a&gt; conference talk. You can &lt;a href=&quot;https://www.youtube.com/watch?v=ZuZizqDF4q8&quot;&gt;watch the talk here&lt;/a&gt; (first live demo at 7:15).&lt;/p&gt;
&lt;p&gt;Right now &lt;em&gt;&lt;a href=&quot;https://rety.verou.me/&quot;&gt;Rety&lt;/a&gt;&lt;/em&gt; is just a set of two classes: &lt;code&gt;Recorder&lt;/code&gt; and &lt;code&gt;Replayer&lt;/code&gt;, which are used entirely independently. The exact UI is left up to the Rety user. E.g. to use it in my slides, I integrated it with the Live Demo plugin of &lt;a href=&quot;https://inspirejs.org/&quot;&gt;Inspire.js&lt;/a&gt; (it is automatically included if a &lt;code&gt;&amp;lt;script class=&amp;quot;demo-script&amp;quot; type=&amp;quot;application/json&amp;quot;&amp;gt;&lt;/code&gt; is found in a live demo slide).&lt;/p&gt;
&lt;p&gt;The library could use more docs and &lt;em&gt;some&lt;/em&gt; tests and I have doubts about the API, but I figured I should release it it earlier rather than later (it’s already been sitting in a repo for 7 months). After all, what best time to release it than when the first Rety talk is &lt;a href=&quot;https://frontendfoc.us/issues/549&quot;&gt;still making the rounds&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;My vision is to ultimately evolve and standardize the &lt;a href=&quot;https://rety.verou.me/#actions&quot;&gt;Rety script&lt;/a&gt; format, so that it can be used to describe a coding interaction across a variety of tools. There are so many possibilities!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wouldn’t it be cool if CodePen and similar playgrounds supported embedding a &lt;em&gt;Rety&lt;/em&gt; script into a pen?&lt;/li&gt;
&lt;li&gt;What if you could store &lt;em&gt;Rety&lt;/em&gt; scripts in a repo and editors like VS Code recognized them and let you replay them?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy: &lt;a href=&quot;https://rety.verou.me/&quot;&gt;Rety&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>What is the best way to mark up an exclusive button group?</title>
    <link href="https://lea.verou.me/2022/07/button-group/"/>
    <updated>2022-07-14T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3484</id>
    <content xml:lang="en" type="html">&lt;p&gt;A few days ago I asked Twitter a seemingly simple question &lt;em&gt;(I meant &lt;code&gt;aria-pressed&lt;/code&gt;, not &lt;code&gt;aria-selected&lt;/code&gt; but Twitter doesn’t allow edits…)&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeaVerou/status/1545712667515654144&quot;&gt;https://twitter.com/LeaVerou/status/1545712667515654144&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For background, I was implementing a web component for an app I’m working on at work and I was getting into some pretty weird rabbit holes with my approach of generating radios and labels.&lt;/p&gt;
&lt;p&gt;Unsurprisingly, &lt;a href=&quot;https://twitter.com/heydonworks/status/1545713406187114496&quot;&gt;most&lt;/a&gt; &lt;a href=&quot;https://twitter.com/WebReflection/status/1545722200598233097&quot;&gt;people&lt;/a&gt; &lt;a href=&quot;https://twitter.com/gumnos/status/1545745858339250176&quot;&gt;thought&lt;/a&gt; &lt;a href=&quot;https://twitter.com/TimBrock_DtD/status/1545714402367885313&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://twitter.com/tolgamndl/status/1545714439000825856&quot;&gt;best&lt;/a&gt; &lt;a href=&quot;https://twitter.com/jorgepinon/status/1545743881169510401&quot;&gt;solution&lt;/a&gt; &lt;a href=&quot;https://twitter.com/dotstepan/status/1545729640731447298&quot;&gt;is&lt;/a&gt; &lt;a href=&quot;https://twitter.com/sunlix/status/1545747700427145216&quot;&gt;radio&lt;/a&gt; &lt;a href=&quot;https://twitter.com/gazjoy/status/1545754675395297280&quot;&gt;buttons&lt;/a&gt; &lt;a href=&quot;https://twitter.com/devongovett/status/1547593573448552450&quot;&gt;and&lt;/a&gt; &lt;a href=&quot;https://twitter.com/rmors_/status/1547568003520221186&quot;&gt;labels&lt;/a&gt;. After all, it works without CSS, right? Progressive enhancement and everything?&lt;/p&gt;
&lt;p&gt;That’s what I thought too. I had contorted my component to generate labels and radios in the Shadow DOM from buttons in the light DOM, which resulted in awkward code and awkward CSS, but I felt I was fighting the good fight and doing the best thing for accessibility.&lt;/p&gt;
&lt;p&gt;All this was challenged when the actual accessibility expert, &lt;a href=&quot;https://twitter.com/LeonieWatson&quot;&gt;Léonie Watson&lt;/a&gt; chimed in. For those of you who don’t know her, &lt;a href=&quot;https://tink.uk/about-leonie/&quot;&gt;she is pretty much &lt;em&gt;the&lt;/em&gt; expert&lt;/a&gt; when it comes to web accessibility and standards. She is also visually impaired herself, giving her a firsthand experience many other a11y aficionados lack. Her recommendation was contrary to what most others were saying:
&lt;a href=&quot;https://twitter.com/LeonieWatson/status/1545745436740313089&quot;&gt;https://twitter.com/LeonieWatson/status/1545745436740313089&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;She went on to make the point that if a design &lt;em&gt;looks&lt;/em&gt; like buttons, it should &lt;em&gt;act&lt;/em&gt; like buttons, otherwise there are mismatched expectations and poor UX for AT users:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeonieWatson/status/1545762058339319808&quot;&gt;https://twitter.com/LeonieWatson/status/1545762058339319808&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeonieWatson/status/1545757022645325824&quot;&gt;https://twitter.com/LeonieWatson/status/1545757022645325824&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case you were wondering if state would be equally noticeable with &lt;code&gt;aria-pressed&lt;/code&gt; and buttons, it is:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeonieWatson/status/1545763493412052992&quot;&gt;https://twitter.com/LeonieWatson/status/1545763493412052992&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And some advice on grouping:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeonieWatson/status/1545745923011117057&quot;&gt;https://twitter.com/LeonieWatson/status/1545745923011117057&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In theory doing this in Shadow DOM and/or using ElementInternals implicit roles should be fine, &lt;a href=&quot;https://twitter.com/LeonieWatson/status/1547544701036888065&quot;&gt;though in practice we’ve had some trouble with that&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today I posted &lt;a href=&quot;https://projects.verou.me/nudeforms/button-group/&quot;&gt;my attempt to implement what we’ve discussed in a &lt;code&gt;&amp;lt;button-group&amp;gt;&lt;/code&gt; component&lt;/a&gt;, which restarted the discussion.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2022/07/button-group/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Its &lt;a href=&quot;https://github.com/LeaVerou/nudeforms/tree/main/button-group&quot;&gt;implementation is right here&lt;/a&gt; if you want to improve it further! And make sure to &lt;a href=&quot;https://twitter.com/LeaVerou/status/1545712667515654144&quot;&gt;check out the actual Twitter thread&lt;/a&gt;, as there is a lot of good stuff I couldn’t include in this!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Léonie wrote a blog post too, &lt;a href=&quot;https://tink.uk/perceived-affordances-and-the-functionality-mismatch/&quot;&gt;Perceived affordances and the functionality mismatch&lt;/a&gt;&lt;/em&gt;. &lt;em&gt;It’s a great read.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Help design the State of CSS Survey 2022!</title>
    <link href="https://lea.verou.me/2022/07/help-design-the-state-of-css-survey-2022/"/>
    <updated>2022-07-28T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3493</id>
    <content xml:lang="en" type="html">&lt;p&gt;Since 2019, the annual &lt;a href=&quot;https://stateofcss.com/en-us/&quot;&gt;State of CSS survey&lt;/a&gt; has collected feedback from web developers from across the world to try and take the pulse of the CSS ecosystem, and it’s become a valuable resource not only for CSS developers, but also for browser vendors. This summer, one of my side projects is helping out with survey design and outreach for the &lt;a href=&quot;https://stateofcss.com/en-us/&quot;&gt;State of CSS survey&lt;/a&gt;, thanks to a generous Google &lt;a href=&quot;https://web.dev/ui-fund/&quot;&gt;UI fund&lt;/a&gt; grant.&lt;/p&gt;
&lt;p&gt;The target is for the survey to launch in mid September, and we are currently working on the outline. So far we have created a preliminary outline based on last year’s survey and early research. All our work happens is in the open, in &lt;a href=&quot;https://github.com/Devographics/Surveys&quot;&gt;this repo&lt;/a&gt;. Here are some of the &lt;a href=&quot;https://github.com/Devographics/Surveys/issues/1&quot;&gt;changes from last year’s survey&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Removed the Pre-processors category as it feels like there isn’t too much debate around that area.&lt;/li&gt;
&lt;li&gt;Got rid of “which browser do you primarily develop in?” question as we already ask which browsers people test in.&lt;/li&gt;
&lt;li&gt;Merged “Opinions” and “Environments” sections into new “Usage” section.&lt;/li&gt;
&lt;li&gt;Moved browsers question to “Other Tools”.&lt;/li&gt;
&lt;li&gt;New features:
&lt;ul&gt;
&lt;li&gt;currentcolor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color-mix()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Wide gamut colors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scroll-behavior&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scroll-padding&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-palette&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:focus-visible&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:has()&lt;/code&gt; pseudo-class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:where()&lt;/code&gt; pseudo-class&lt;/li&gt;
&lt;li&gt;Cascade Layers&lt;/li&gt;
&lt;li&gt;Houdini Paint API&lt;/li&gt;
&lt;li&gt;and there are &lt;a href=&quot;https://github.com/Devographics/Surveys/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc&quot;&gt;several others we are considering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are currently looking for feedback from the community, including suggesting CSS features to ask about, libraries and tools, or even new questions altogether.&lt;/p&gt;
&lt;p&gt;There are also &lt;a href=&quot;https://github.com/Devographics/Monorepo/issues/99&quot;&gt;some design issues&lt;/a&gt; to flesh out, you’re welcome to weigh in there too.&lt;/p&gt;
&lt;p&gt;If you want to quickly vote on which features are most important for you to make it into the survey, you can do that either via GitHub 👍🏼reactions, or &lt;a href=&quot;https://projects.verou.me/mavoice/?repo=devographics/surveys&amp;amp;labels=State%20of%20CSS%202022&quot;&gt;here&lt;/a&gt; (which uses GitHub reactions behind the scenes). Do note that reactions are only one metric among many we will use to consider items.&lt;/p&gt;
&lt;p&gt;The feedback period will be open until &lt;strong&gt;August 20&lt;/strong&gt;, then we will start working on launching the survey.&lt;/p&gt;
&lt;p&gt;Do note that &lt;strong&gt;browser makers are looking at this&lt;/strong&gt; and similar surveys to prioritize what to implement. This is why Google is sponsoring this project. So any effort you put into survey outline feedback, and on responding to the survey when it’s ready, could come back to you tenfold when your favorite CSS features get implemented faster!&lt;/p&gt;
</content>
  </entry><entry>
    <title>On ratings and meters</title>
    <link href="https://lea.verou.me/2022/08/on-ratings-and-meters/"/>
    <updated>2022-08-12T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3502</id>
    <content xml:lang="en" type="html">&lt;p&gt;I always thought that the semantically appropriate way to represent a rating (e.g. a star rating) is a &lt;code&gt;&amp;lt;meter&amp;gt;&lt;/code&gt; element. They essentially convey the same type of information, the star rating is just a different presentation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2022/08/on-ratings-and-meters/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;An example of a star rating widget, from Amazon&lt;/p&gt;
&lt;p&gt;However, trying to style a &lt;code&gt;&amp;lt;meter&amp;gt;&lt;/code&gt; element to look like a star rating is &lt;a href=&quot;https://codepen.io/leaverou/pen/WNErYON&quot;&gt;…tricky at best&lt;/a&gt;. Not to mention that this approach won’t even work in Shadow trees (unless you include the CSS in every single shadow tree).&lt;/p&gt;
&lt;p&gt;So, I set out to create a proper web component for star ratings. The first conundrum was, how does this relate to a &lt;code&gt;&amp;lt;meter&amp;gt;&lt;/code&gt; element?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Option 1: Should it extend &lt;code&gt;&amp;lt;meter&amp;gt;&lt;/code&gt; &lt;a href=&quot;https://webreflection.medium.com/extending-built-in-elements-9dce404b75b4&quot;&gt;using builtin extends&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Option 2: Should it use a web component with a &lt;code&gt;&amp;lt;meter&amp;gt;&lt;/code&gt; in Shadow DOM?&lt;/li&gt;
&lt;li&gt;Option 3: Should it be an entirely separate web component that just uses a &lt;code&gt;meter&lt;/code&gt; ARIA Role and related ARIA attributes?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is what the code would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Option 1 --&amp;gt;
&amp;lt;meter is=&amp;quot;meter-discrete&amp;quot; max=&amp;quot;5&amp;quot; value=&amp;quot;3.5&amp;quot;&amp;gt;&amp;lt;/meter&amp;gt;

&amp;lt;!-- Options 2 &amp;amp; 3 --&amp;gt;
&amp;lt;meter-discrete max=&amp;quot;5&amp;quot; value=&amp;quot;3.5&amp;quot;&amp;gt;&amp;lt;/meter-discrete&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=182671&quot;&gt;Safari has all but killed built-in extends&lt;/a&gt;, but there is &lt;a href=&quot;https://github.com/ungap/custom-elements#readme&quot;&gt;a very small polyfill&lt;/a&gt;, so I didn’t mind too much. I first decided to go with that, but it turns out &lt;a href=&quot;https://codepen.io/leaverou/pen/gOedNYv?editors=1111&quot;&gt;you can’t even mess with the Shadow DOM&lt;/a&gt; of the element you’re extending. You have no access to the existing Shadow DOM of the element, because it’s closed, and you cannot attach a new one. So there’s no way to add encapsulated styles, which was a strong requirement of my use case.&lt;/p&gt;
&lt;p&gt;I did some work on Option 2, but I quickly discovered that having an internal &lt;code&gt;&amp;lt;meter&amp;gt;&lt;/code&gt; that everything goes through was not worth it, and it was far easier to implement it myself, with appropriate implicit ARIA through &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals&quot;&gt;ElementInternals&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next dilemma was even more of a conundrum: A &lt;code&gt;&amp;lt;meter&amp;gt;&lt;/code&gt; is not editable by default, but for a rating widget, you need it to be editable at least sometimes (e.g. see &lt;a href=&quot;https://shoelace.style/components/rating&quot;&gt;Shoelace Rating&lt;/a&gt; for an example). &lt;strong&gt;There is no established convention in HTML for elements that are readonly by default, and editable only some of the time.&lt;/strong&gt; All editable elements we have are basically form controls that can &lt;em&gt;lose&lt;/em&gt; editability through the &lt;code&gt;readonly&lt;/code&gt; attribute. For anything else, I suppose there is &lt;code&gt;contentEditable&lt;/code&gt; but there is no way for web components to hook into it and expose custom editing UI that overrides the one generated by the browser.&lt;/p&gt;
&lt;p&gt;In the end what I ended up doing was creating two components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;&amp;lt;meter-discrete&amp;gt;&lt;/code&gt; component that is a discrete version of &lt;code&gt;&amp;lt;meter&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;&amp;lt;nd-rating&amp;gt;&lt;/code&gt; component that inherits from &lt;code&gt;&amp;lt;meter-discrete&amp;gt;&lt;/code&gt; but is editable (unless &lt;code&gt;readonly&lt;/code&gt; is specified)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m still unsure if this is the right way. There were a couple issues with it.&lt;/p&gt;
&lt;p&gt;The first problem was related to &lt;strong&gt;encapsulation&lt;/strong&gt;. I like to use a private &lt;code&gt;#internals&lt;/code&gt; property for an element’s &lt;code&gt;ElementInternals&lt;/code&gt; instance. However, &lt;code&gt;&amp;lt;nd-rating&amp;gt;&lt;/code&gt; needed to modify the internals of its parent, &lt;a href=&quot;https://css-tricks.com/creating-custom-form-controls-with-elementinternals/&quot;&gt;to add form association stuff&lt;/a&gt;, so I could not use a private property anymore, and you cannot attach a separate &lt;code&gt;ElementInternals&lt;/code&gt; object. I ended up &lt;a href=&quot;https://github.com/LeaVerou/nudeui/blob/main/meter-discrete/meter-discrete.js#L1&quot;&gt;going for a &lt;code&gt;Symbol&lt;/code&gt; property that the parent exports&lt;/a&gt;, but it still doesn’t feel like a great solution as it breaks encapsulation. Ideally JS needs &lt;a href=&quot;https://en.wikipedia.org/wiki/Access_modifiers&quot;&gt;protected class fields&lt;/a&gt;, but &lt;a href=&quot;https://github.com/tc39/proposal-class-fields/issues/86&quot;&gt;it doesn’t look like that’s happening anytime soon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The other problem was related to &lt;strong&gt;semantics&lt;/strong&gt;. Is it still semantically a &lt;code&gt;&amp;lt;meter&amp;gt;&lt;/code&gt; when it’s editable, or does it then become closer to a slider that you set by hovering instead of dragging? I decided to ignore that thought for now, but it does make me a little uneasy.&lt;/p&gt;
&lt;p&gt;Anyhow, you can find my experiments at &lt;a href=&quot;https://nudeui.com/&quot;&gt;nudeui.com&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nudeui.com/meter-discrete/&quot;&gt;&lt;code&gt;&amp;lt;meter-discrete&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nudeui.com/nd-rating/&quot;&gt;&lt;code&gt;&amp;lt;nd-rating&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;All NudeUI components are very much works in progress&lt;/strong&gt; and mainly my personal experiments, but if you feel like it, please report issues in &lt;a href=&quot;https://github.com/LeaVerou/nudeui/tree/main/&quot;&gt;the repo&lt;/a&gt;. I can’t promise I’ll get to them though!&lt;/p&gt;
</content>
  </entry><entry>
    <title>State of CSS 2022 now open!</title>
    <link href="https://lea.verou.me/2022/10/state-of-css-2022-now-open/"/>
    <updated>2022-10-03T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3511</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://survey.devographics.com/survey/state-of-css/2022?source=leaverou&quot; class=&quot;cta&quot;&gt;Take State of CSS 2022 survey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A while ago I posted a &lt;a href=&quot;https://lea.verou.me/2022/07/help-design-the-state-of-css-survey-2022/&quot;&gt;call for feedback to inform the design of the State of CSS 2022 survey&lt;/a&gt;. The response has been overwhelming and it was glorious. We got quite a lot of &lt;a href=&quot;https://github.com/Devographics/surveys/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc&quot;&gt;proposals&lt;/a&gt;, &lt;a href=&quot;https://github.com/Devographics/surveys/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc&quot;&gt;feedback&lt;/a&gt;, &lt;a href=&quot;https://projects.verou.me/mavoice/?repo=devographics/surveys&amp;amp;labels=State%20of%20CSS%202022&quot;&gt;votes&lt;/a&gt;. But that also meant we had to make some tough decisions about what gets in the survey and what doesn’t, otherwise we’d end up with a survey so long nobody would want to finish it!&lt;/p&gt;
&lt;p&gt;In the end we &lt;a href=&quot;https://github.com/orgs/Devographics/projects/1/views/1&quot;&gt;added questions about 15 new CSS features based on proposals in that repo, and decided against adding 9&lt;/a&gt;. Overall, there are 30 new CSS features the 2022 survey asks about. To make space for all of that, we also &lt;a href=&quot;https://github.com/Devographics/surveys/issues/37&quot;&gt;removed a few&lt;/a&gt; that were not really shining much light into what developers do anymore, and also &lt;a href=&quot;https://github.com/Devographics/surveys/issues/11&quot;&gt;a couple others that were not actually about CSS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, CSS features are not the only — or even the most important questions being asked.&lt;/p&gt;
&lt;p&gt;Last year, some of the freeform questions about pain points were particularly useful to browser vendors for prioritizing implementation and standards work, and we expect this to be true this year as well. We put considerable effort into &lt;a href=&quot;https://github.com/Devographics/surveys/issues/36&quot;&gt;redesigning these freeform questions to make them more intuitive&lt;/a&gt;, while maintaining their helpfulness for browser vendors:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2022/10/state-of-css-2022-now-open/images/image-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We hope the new wording makes it more clear that these are mutually exclusive, so that respondents do not feel they need to duplicate their answers.&lt;/p&gt;
&lt;p&gt;One of the new questions I’m excited about is this question to gauge whether the respondent spends more time writing JS or CSS:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2022/10/state-of-css-2022-now-open/images/image-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A focus of this year’s State of CSS survey is to reach a broader range of developers; a majority of respondents of past surveys has been JS developers who also write CSS, rather than developers that focus on CSS equally or even primarily. This is a natural consequence of this having been spun off the &lt;a href=&quot;https://stateofjs.com/en-us/&quot;&gt;State of JS survey&lt;/a&gt;. To truly see what the &lt;em&gt;State of CSS&lt;/em&gt; is in 2022, we need input from all types of developers, as developers with different focus have different needs and priorities. This question will allow us to evaluate how well we have reached this goal, and going forward, whether we are improving every year.&lt;/p&gt;
&lt;p&gt;Another thing I’m excited about in this year’s survey is the ability to add freeform comments to &lt;em&gt;any&lt;/em&gt; question.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2022/10/state-of-css-2022-now-open/images/comments.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Adding freeform comments to a question&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It’s often hard to tell what the background is behind each of the three answers: are people not using a given feature due to poor browser support, poor ergonomics, or some other reason? When people &lt;em&gt;do&lt;/em&gt; use a feature, was their experience good or bad? Would they use it again?&lt;/p&gt;
&lt;p&gt;We &lt;a href=&quot;https://github.com/Devographics/surveys/issues/41&quot;&gt;went back and forth&lt;/a&gt; &lt;a href=&quot;https://github.com/Devographics/Monorepo/issues/99&quot;&gt;many times&lt;/a&gt; about having a more structured followup question there, but in the end settled on a simple freeform field for this first iteration. Maybe next year it will be more structured, depending on how people use it this year.&lt;/p&gt;
&lt;p&gt;So, without further ado, the survey is finally open for responses:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://survey.devographics.com/survey/state-of-css/2022?source=leaverou&quot;&gt;Take State of CSS 2022 survey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This survey is not just for fun: &lt;strong&gt;the results actually inform what browsers prioritize for implementation&lt;/strong&gt;. So by spending a few minutes on a thoughtful and comprehensive response, you can actually make both your and other developers’ lives better! What are you waiting for?&lt;/p&gt;
</content>
  </entry><entry>
    <title>Position Statement for the 2022 W3C TAG Election</title>
    <link href="https://lea.verou.me/2022/11/tag-2/"/>
    <updated>2022-11-07T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3531</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href=&quot;https://www.w3.org/blog/news/archives/9787&quot;&gt;I got re-elected&lt;/a&gt;!! Thank you for trusting me once more with this huge responsibility towards the Open Web. I will continue to do my best to justify the confidence the W3C membership has placed in me.&lt;/em&gt; 🥹&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Context:&lt;/strong&gt; In &lt;a href=&quot;https://lea.verou.me/2020/11/tag/&quot;&gt;2020&lt;/a&gt;, I ran for the TAG election for the first time and had the great honor of being elected by the W3C membership. This year, I’m running for re-election. The W3C Technical Architecture Group (TAG) is the Working Group that ensures that Web Platform technologies are usable and follow consistent design principles, whether they are created inside or outside W3C. It advocates for the needs of everyone who uses the Web and everyone who works on the Web. If you work for a company that is a &lt;a href=&quot;https://www.w3.org/Consortium/Member/List&quot;&gt;W3C Member&lt;/a&gt;, please consider encouraging your AC rep to vote for me! My candidate statement follows.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I’m &lt;a href=&quot;https://en.wikipedia.org/wiki/Lea_Verou&quot;&gt;Lea&lt;/a&gt;, and I’m running for re-election to the TAG to continue applying my usability research, CSS WG, and TAG experience to help W3C stay connected to the developer community, and to better serve their needs by ensuring web platform features are not only powerful, but also learnable and approachable, with a smooth ease-of-use to complexity curve.&lt;/p&gt;
&lt;p&gt;I wear many hats. My background spans almost two decades of web design &amp;amp; development experience, one decade of standards work in the CSS WG, nearly a decade of PhD level human-computer interaction research &amp;amp; teaching at &lt;a href=&quot;https://mit.edu/&quot;&gt;MIT&lt;/a&gt;, and over a decade of educating web developers through &lt;a href=&quot;https://lea.verou.me/speaking/&quot;&gt;talks&lt;/a&gt;, &lt;a href=&quot;https://lea.verou.me/publications/&quot;&gt;books, articles&lt;/a&gt;, and helping them through my &lt;a href=&quot;https://lea.verou.me/projects/&quot;&gt;dozens of open source projects&lt;/a&gt;, some of which are used on &lt;a href=&quot;https://www.npmjs.com/package/prismjs&quot;&gt;millions of websites&lt;/a&gt;. For those unfamiliar with my background, I encourage taking a look at &lt;a href=&quot;https://lea.verou.me/2020/11/tag/&quot;&gt;my 2020 candidate statement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In 2020, I had the great honor of being elected to serve on the TAG by the W3C membership. In the two years I have served on the TAG, I participated in over 70 design reviews and helped prioritize API design in our reviewing. I have been &lt;a href=&quot;https://twitter.com/yoavweiss/status/1430807031364075520&quot;&gt;publicly praised&lt;/a&gt; for the quality of design reviews I led.&lt;/p&gt;
&lt;p&gt;It is important that the TAG does not operate in a vacuum:  The primary purpose of our work is to serve developers and end-users by ensuring web platform features are usable, secure and privacy preserving. I have used my experience during design reviews to make sure we remain connected to this mission.&lt;/p&gt;
&lt;p&gt;Together with Sangwhan Moon, I took the lead on our &lt;a href=&quot;https://w3ctag.github.io/design-principles/&quot;&gt;Web Platform Design Principles&lt;/a&gt; effort, which documents the principles that underlie Web Platform features — previously only existing in WG lore. The Web Platform is going through an explosion of new features; only in the last year the TAG received almost a hundred design review requests. With this volume, it is important that reviews are consistent, transparent, and fast. Evolving our published design principles helps with all three goals.&lt;/p&gt;
&lt;p&gt;The Web ecosystem is not just the Web Platform itself, but also the various tools and libraries out there. I &lt;a href=&quot;https://github.com/w3ctag/design-principles/issues/268&quot;&gt;started a project&lt;/a&gt; to publish a subset of the design principles that apply to web developers, to help them in creating Web Platform compatible APIs. After all, with web components, web developers are now HTML designers, with Houdini APIs, they are now CSS designers, and with JS, they’ve been JS API designers since forever. The project is currently in its infancy, and If elected, it will be one of my tasks to get it published within my next term.&lt;/p&gt;
&lt;p&gt;As a Greek woman, I bring both a Mediterranean and European perspective that diversifies the TAG and as a fully bilingual Greek and English speaker, I can fully participate in rapid technical discussions while also having an appreciation of the Internationalization needs of those who use the Web in languages other than English.&lt;/p&gt;
&lt;p&gt;To ensure my participation has been beneficial for the TAG, I reached out to the chairs for feedback before deciding to run again. Both were very positive and strongly encouraged me to run again.&lt;/p&gt;
&lt;p&gt;As someone not employed at a big tech company, I am not influenced by any particular company line. My only agenda is to lead the Web Platform to its full potential, and if re-elected, I’m willing to commit to spending the requisite hundreds of hours working towards that goal over the next two years. This was just the beginning, there is so much more important work to be done!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I would like to thank Open JS Foundation for graciously funding my TAG-related travel, in the event that I am re-elected, and both OpenJS Foundation and Bocoup for funding it during my first term.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Contrast Ratio has a new home — and this is great news!</title>
    <link href="https://lea.verou.me/2023/03/contrast-ratio-new-home/"/>
    <updated>2023-03-18T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3592</id>
    <content xml:lang="en" type="html">&lt;p&gt;It has been over a decade when I &lt;a href=&quot;https://lea.verou.me/2012/10/easy-color-contrast-ratios/&quot;&gt;launched&lt;/a&gt; &lt;a href=&quot;https://contrast-ratio.com/&quot;&gt;contrast-ratio.com&lt;/a&gt;, an app to calculate the WCAG 2.1 contrast ratio between any two CSS colors. At the time, all similar tools suffered from several flaws when being used for CSS editing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No support for semi-transparent colors (Since WCAG included no guidance for alpha transparency — I had to do &lt;a href=&quot;https://lists.w3.org/Archives/Public/w3c-wai-ig/2012OctDec/0011.html&quot;&gt;original research&lt;/a&gt; to calculate the contrast ratio range for that case)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No support for color formats other than hex or (at best) RGB with sliders. I wanted something where I could just paste a CSS color just like I had it specified in my code (e.g. &lt;code&gt;hsl(220 10% 90%&lt;/code&gt;), possibly tweak it a bit to pass, then paste it back. I didn’t want to use unintuitive hex colors, and I didn’t want to fiddle with sliders.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Poor UX, often calculating the actual ratio required further user actions, making iteration tedious&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Over the years, &lt;a href=&quot;https://contrast-ratio.com/&quot;&gt;contrast-ratio.com&lt;/a&gt; grew in popularity: it was recommended in &lt;a href=&quot;https://www.google.com/search?q=%22contrast-ratio.com%22+OR+%22leaverou.github.io%2Fcontrast-ratio%22&amp;amp;tbm=bks&quot;&gt;several books&lt;/a&gt;, talks, and workshops. It basically became the standard URL developers would visit for this purpose.&lt;/p&gt;
&lt;p&gt;However, I’ve been too busy to work on it further beyond just merging pull requests. My time is currently split between the &lt;a href=&quot;https://github.com/leaverou/&quot;&gt;dozens of open source projects&lt;/a&gt; I have started and maintain, &lt;a href=&quot;https://lea.verou.me/2022/11/tag-2/&quot;&gt;my TAG work&lt;/a&gt;, &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues?q=is%3Aopen+involves%3Aleaverou+sort%3Aupdated-desc+&quot;&gt;my CSS WG work&lt;/a&gt;, and my &lt;a href=&quot;https://designftw.mit.edu/&quot;&gt;teaching&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://lea.verou.me/2014/02/im-going-to-mit/&quot;&gt;research&lt;/a&gt; at MIT.&lt;/p&gt;
&lt;p&gt;Therefore, when &lt;a href=&quot;https://twitter.com/rosshudgens/&quot;&gt;Ross&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/drewpager&quot;&gt;Drew&lt;/a&gt; from &lt;a href=&quot;https://www.siegemedia.com/&quot;&gt;Siege Media&lt;/a&gt; approached me with a generous offer to buy the domain, and a commitment to take over maintainship of the &lt;a href=&quot;https://github.com/siege-media/contrast-ratio/&quot;&gt;open source project&lt;/a&gt;, I was cautiously optimistic. But now, after having seen some of their plans for it, I could not be more certain that the future of this tool is much brighter with them.&lt;/p&gt;
&lt;p&gt;Please join me in welcoming them to the project and help them get settled in as new stewards!&lt;/p&gt;
&lt;p&gt;ETA: &lt;a href=&quot;https://www.prnewswire.com/news-releases/contrast-ratio-is-now-part-of-siege-media-301790441.html&quot;&gt;Siege Media Press Release&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>JS private class fields considered harmful</title>
    <link href="https://lea.verou.me/2023/04/private-fields-considered-harmful/"/>
    <updated>2023-04-28T00:00:00Z</updated>
    <id>https://lea.verou.me/?p=3599</id>
    <content xml:lang="en" type="html">&lt;p&gt;Today I mourn. What am I mourning? Encapsulation. At least in my projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;As a library author, I’ve decided to avoid private class fields from now on and gradually refactor them out of my existing libraries&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Why did I make such a drastic decision?&lt;/p&gt;
&lt;p&gt;It all started a few days ago, when I was building a &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue 3&lt;/a&gt; app that used &lt;a href=&quot;https://colorjs.io/&quot;&gt;Color.js&lt;/a&gt; Color objects. For context, Vue 3 uses proxies to implement its reactivity system, just like &lt;a href=&quot;https://mavo.io/&quot;&gt;Mavo&lt;/a&gt; did back in 2016 (the first one to do so as far as I’m aware). I was getting several errors and upon tracking them down I had a very sad realization: &lt;strong&gt;instances of classes that use private fields cannot be proxied&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I will let that sink in for a bit. &lt;strong&gt;Private fields, proxies, pick one, you can’t have both.&lt;/strong&gt; Here is a &lt;a href=&quot;https://codepen.io/leaverou/pen/ExdWwax?editors=0012&quot;&gt;reduced testcase&lt;/a&gt; illustrating the problem.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/2023/04/private-fields-considered-harmful/images/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Basically, because a Proxy creates a &lt;em&gt;different&lt;/em&gt; object, it breaks both strict equality (&lt;code&gt;obj1 === obj2&lt;/code&gt;), as well as private properties. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding&quot;&gt;MDN even has a whole section on this&lt;/a&gt;. Unfortunately, the workaround proposed is no help when proxies are used to implement reactivity, so when &lt;a href=&quot;https://github.com/vuejs/core/issues/8149&quot;&gt;I tried to report this as a Vue bug&lt;/a&gt;, it was (rightly) closed as wontfix. It would not be possible to fix this in &lt;a href=&quot;https://mavo.io/&quot;&gt;Mavo&lt;/a&gt; either, for the same reason.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeaVerou/status/1639043004190031876&quot;&gt;I joined TC39&lt;/a&gt; fairly recently, so I was not aware of the background when proxies or private class fields were designed. Several fellow TC39 members filled me in on the discussions from back then. A lot of the background is in &lt;a href=&quot;https://github.com/tc39/proposal-class-fields/issues/106&quot;&gt;this super long thread&lt;/a&gt;, some interesting tl;drs as replies to my tweet:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LeaVerou/status/1650562320702099457&quot;&gt;https://twitter.com/LeaVerou/status/1650562320702099457&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After a lot of back and forth, I decided &lt;strong&gt;I cannot justify using private properties going forwards&lt;/strong&gt;. The tradeoff is simply not worth it. There is no real workaround for proxy-ability, whereas for private fields there is always private-by-convention. Does it suck? Absolutely. However, &lt;strong&gt;a sucky workaround is better than a nonexistent workaround&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Also, I control the internal implementation of my classes, whereas proxying happens by other parties.&lt;/strong&gt; As a library user, it must be incredibly confusing to have to deal with errors about access to private fields in a class you did not write.&lt;/p&gt;
&lt;p&gt;This was one of the saddest PRs I have ever written &lt;a href=&quot;https://github.com/LeaVerou/color.js/pull/306&quot;&gt;https://github.com/LeaVerou/color.js/pull/306&lt;/a&gt;. It feels like such a huge step backwards. I’ve waited years for private fields to be supported everywhere and relished when they got there. I was among the first library authors to adopt them in library code, before a lot of tooling even parsed them properly (and &lt;a href=&quot;https://github.com/LeaVerou/color.js/issues/220&quot;&gt;some still don’t&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Sure, they were kind of annoying to use (you usually want protected, i.e. visible to subclasses, not actually private), but they were better than nothing. I was not joking in the first paragraph; I am literally grieving.&lt;/p&gt;
&lt;p&gt;I may still use private fields on a case by case basis, where I cannot imagine objects being proxied being very useful, for example in web components. But from now on I will not reach to them without thought, like I have been for the past couple of years.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Migrating Disqus from WP to 11ty</title>
    <link href="https://lea.verou.me/blog/2023/preserve-disqus/"/>
    <updated>2023-07-18T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2023/preserve-disqus/</id>
    <content xml:lang="en" type="html">&lt;p&gt;So I recently &lt;a href=&quot;https://lea.verou.me/blog/2023/going-lean/&quot;&gt;ported my 14 year old blog from WordPress to Eleventy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I had been using &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; for comments for years, so I didn’t want to lose them, even if I ended up using a different solution for the future (or no comments at all).&lt;/p&gt;
&lt;p&gt;Looking around for an existing solution did not yield many results.
There’s Zach’s &lt;a href=&quot;https://github.com/11ty/eleventy-import-disqus&quot;&gt;eleventy-import-disqus&lt;/a&gt; but it’s aimed at importing Disqus comments as static copies,
but I wanted to have the option to continue using Disqus.&lt;/p&gt;
&lt;p&gt;Looking at the WP generated HTML source, I noticed that Disqus was using the WP post id (a number that is not displayed in the UI) to link its threads to the posts.
However, the importer I used did not preserve the post ids as metadata (filed issue &lt;a href=&quot;https://github.com/lonekorean/wordpress-export-to-markdown/issues/95&quot;&gt;#95&lt;/a&gt;).
What to do?&lt;/p&gt;
&lt;h2 id=&quot;getting-the-wp-post-id&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/preserve-disqus/#getting-the-wp-post-id&quot;&gt;Getting the WP post id&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My first thought was to add the post id to each post manually, but use a &lt;code&gt;HEAD&lt;/code&gt; request to my existing blog to read it from the &lt;code&gt;Link&lt;/code&gt; header, possibly en masse.
My second thought was, if I can use JS to get it, maybe I can include Disqus dynamically, through JS, after it procures this number.
Then I remembered that 11ty can handle any number of different data sources, and combines them all into a single data object.
If I could build an index of slug → post id as another data file, I could add a post id via JS in the 11ty config.&lt;/p&gt;
&lt;p&gt;My last epiphany was realizing I didn’t need any HTTP requests to get the post id: it was all in the exported sitemap XML, just unused by the importer!
Indeed, each &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; included a &lt;code&gt;&amp;lt;wp:post_id&amp;gt;&lt;/code&gt; element with the post id and a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element with the URL.
I tried to open it in Chrome so I could run some JS on it and build the index, but it complained of parse errors.
When I fixed them, the tab crashed under its sheer size.&lt;/p&gt;
&lt;p&gt;I needed to remove non-relevant data, and I needed to do it fast.
All I really needed was the post id, the slug, and the containing &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; element.
Since this did not just contain posts, but also other types of content, such as attachments or custom blocks,
we also needed to retain &lt;code&gt;&amp;lt;wp:post_type&amp;gt;&lt;/code&gt; so we can filter these out.
I copied the XML over to a separate file, and run a series of find &amp;amp; replaces in VS Code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;^(?!.*(wp:post_id|wp:post_type|&amp;lt;/?item&amp;gt;|&amp;lt;/?link&amp;gt;)).+&#92;n&lt;/code&gt; (regex) with empty string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;n{3,}&lt;/code&gt; (regex) with &lt;code&gt;&#92;n&lt;/code&gt; (to remove empty lines)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wp:post&lt;/code&gt; with &lt;code&gt;post&lt;/code&gt; to remove namespaces and make the XML easier to handle&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://lea.verou.me/&lt;/code&gt; with empty string and &lt;code&gt;&amp;lt;/link&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;/link&amp;gt;&lt;/code&gt; to keep just the &lt;code&gt;yyyy/mm/slug&lt;/code&gt; part of the URL&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then added &lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;&lt;/code&gt; at the top and wrapped everything in a &lt;code&gt;&amp;lt;root&amp;gt;&lt;/code&gt; element to make it valid XML.&lt;/p&gt;
&lt;p&gt;This resulted in a series of &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; elements that looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;item&amp;gt;
	&amp;lt;link&amp;gt;2023/04/private-fields-considered-harmful&amp;lt;/link&amp;gt;
	&amp;lt;post_id&amp;gt;3599&amp;lt;/post_id&amp;gt;
	&amp;lt;post_type&amp;gt;&amp;lt;![CDATA[post]]&amp;gt;&amp;lt;/post_type&amp;gt;
&amp;lt;/item&amp;gt;
&amp;lt;item&amp;gt;
	&amp;lt;link&amp;gt;2023/04/private-fields-considered-harmful/image-27&amp;lt;/link&amp;gt;
	&amp;lt;post_id&amp;gt;3600&amp;lt;/post_id&amp;gt;
	&amp;lt;post_type&amp;gt;&amp;lt;![CDATA[attachment]]&amp;gt;&amp;lt;/post_type&amp;gt;
&amp;lt;/item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, we have exuahsted the capabilities of find &amp;amp; replace; it’s time for some JS!&lt;/p&gt;
&lt;p&gt;I opened the file in Chrome and ran:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;copy(Object.assign({}, ...[...document.querySelectorAll(&amp;quot;item&amp;quot;)]
	.filter(item =&amp;gt; item.querySelector(&amp;quot;post_type&amp;quot;).textContent === &amp;quot;post&amp;quot;)
	.map(item =&amp;gt; ({ [item.querySelector(&amp;quot;link&amp;quot;).textContent]: item.querySelector(&amp;quot;post_id&amp;quot;).textContent } ))));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which copies JSON like this to the clipboard, ready to be pasted in a JSON file (I used &lt;code&gt;wpids.json&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
	...
	&amp;quot;2022/11/tag-2&amp;quot;: &amp;quot;3531&amp;quot;,
	&amp;quot;2023/03/contrast-ratio-new-home&amp;quot;: &amp;quot;3592&amp;quot;,
	&amp;quot;2023/04/private-fields-considered-harmful&amp;quot;: &amp;quot;3599&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some cleanup was still needed, but this was basically good to go.&lt;/p&gt;
&lt;h2 id=&quot;adding-the-post-id-to-the-posts&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/preserve-disqus/#adding-the-post-id-to-the-posts&quot;&gt;Adding the post id to the posts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To inject a &lt;code&gt;wpid&lt;/code&gt; property to each post, I added a &lt;code&gt;blog.11tydata.js&lt;/code&gt; file with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = {
	eleventyComputed: {
		postUrlStem: data =&amp;gt; {
			return data.page.filePathStem.replace(/^&#92;/blog&#92;/|&#92;/index$/g, &amp;quot;&amp;quot;);
		},
		wpid: data =&amp;gt; {
			return data.wpids[data.postUrlStem];
		}
	}
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;linking-to-disqus&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/preserve-disqus/#linking-to-disqus&quot;&gt;Linking to Disqus&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We now have the post id, and we can use it in our template.
Adapting the code from the &lt;a href=&quot;https://help.disqus.com/en/articles/1717112-universal-embed-code&quot;&gt;Universal Embed Code&lt;/a&gt;, we get:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{% if wpid %}
&amp;lt;div id=&amp;quot;disqus_thread&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
    /**
     *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT
     *  THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR
     *  PLATFORM OR CMS.
     *
     *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT:
     *  https://disqus.com/admin/universalcode/#configuration-variables
     */

    var disqus_config = function () {
        // Replace PAGE_URL with your page&#39;s canonical URL variable
        this.page.url = &#39;https://lea.verou.me/{{ postUrlStem }}/&#39;;

        // Replace PAGE_IDENTIFIER with your page&#39;s unique identifier variable
        this.page.identifier = &amp;quot;{{ wpid }} https:&#92;/&#92;/lea.verou.me&#92;/?p={{ wpid }}&amp;quot;;
    };

    (function() {  // REQUIRED CONFIGURATION VARIABLE: EDIT THE SHORTNAME BELOW
        var d = document, s = d.createElement(&#39;script&#39;);

        // IMPORTANT: Replace EXAMPLE with your forum shortname!
        s.src = &#39;https://leaverou.disqus.com/embed.js&#39;;

        s.setAttribute(&#39;data-timestamp&#39;, +new Date());
        (d.head || d.body).appendChild(s);
    })();
&amp;lt;/script&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it! This now works and displays the Disqus threads correctly!&lt;/p&gt;
&lt;h2 id=&quot;using-disqus-on-new-posts-as-well&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/preserve-disqus/#using-disqus-on-new-posts-as-well&quot;&gt;Using Disqus on new posts as well&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Note that as it currently stands, this will not display the Disqus UI on new posts, since they won’t have a wpid.
Even if I switch to something else in the future, Disqus is better than nothing meanwhile
(for me – many people would disagree: switching to no comments at all seems very common when people switch to a SSG blog).&lt;/p&gt;
&lt;p&gt;So, new posts don’t have a wpid, but they don’t need one either.
As long as we pass &lt;em&gt;some&lt;/em&gt; kind of unique identifier to Disqus, we have a comment thread.
The easiest way to do this is to use the post’s path, e.g. &lt;code&gt;2023/preserve-disqus&lt;/code&gt; for this one, as this is guaranteed to be unique.&lt;/p&gt;
&lt;p&gt;We also want to be able to disable comments on a per-post basis, so we need a way to do that.&lt;/p&gt;
&lt;p&gt;So instead of dealing with &lt;code&gt;wpid&lt;/code&gt; directly in templates, I added another computed property in &lt;code&gt;blog.11tydata.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;disqus_id: data =&amp;gt; {
	let wpid = data.wpid;

	if (wpid) {
		return `${ wpid } https:&#92;/&#92;/lea.verou.me&#92;/?p=${ wpid }`;
	}
	else if (data.disqus !== false) {
		return typeof data.disqus !== &amp;quot;string&amp;quot;? data.postUrlStem : data.disqus;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this allows us to pass a custom identifier to Disqus by using a string, disable it by using &lt;code&gt;false&lt;/code&gt;,
or just get the automatic behavior by using &lt;code&gt;true&lt;/code&gt; or not specifying it at all.
The custom identifier can be useful if we want to change the URL of a post without losing the comments.&lt;/p&gt;
&lt;p&gt;Then, I updated the &lt;a href=&quot;https://github.com/LeaVerou/lea.verou.me/blob/main/_includes/_comments.njk&quot;&gt;template&lt;/a&gt; to use &lt;code&gt;disqus_id&lt;/code&gt; instead of &lt;code&gt;wpid&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-next%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/preserve-disqus/#what%E2%80%99s-next%3F&quot;&gt;What’s next?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don’t know if I will continue using Disqus.
It’s convenient, but also heavyweight, and there are &lt;a href=&quot;https://techcrunch.com/2021/05/05/disqus-facing-3m-fine-in-norway-for-tracking-users-without-consent/?guccounter=1&amp;amp;guce_referrer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8&amp;amp;guce_referrer_sig=AQAAAHcgs5Gn_4eXhly4z1yjLi-xZ4abvUmjbEhqVoOgZ_FhBpI1n7zuyLL5p16rDFxCIAq3OJDon93aKZhebse8Qy4pPfthRfLOkmBFoFImhyLr5jgmJl42mvmpmRojuqX6w3hIe9_GJl3zGTb-dVLY3ZTA-VMce3cG4UOL5xeeGNu6&quot;&gt;privacy&lt;/a&gt; &lt;a href=&quot;https://fatfrogmedia.com/delete-disqus-comments-wordpress/&quot;&gt;concerns&lt;/a&gt; &lt;a href=&quot;https://www.reddit.com/r/privacy/comments/egb1ey/disqus_shared_personal_data_about_tens_of/&quot;&gt;around&lt;/a&gt; it.&lt;/p&gt;
&lt;p&gt;However, I’m not sure what I would use instead.
Any third party SaaS service would have the same privacy issues. Not necessarily now, but quite likely in the future.&lt;/p&gt;
&lt;p&gt;I’ve looked into &lt;a href=&quot;https://en.wikipedia.org/wiki/Webmention&quot;&gt;Webmentions&lt;/a&gt;, but the end-user experience does not compare to a regular comment system,
and it seems like quite a hassle to implement.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://utteranc.es/&quot;&gt;Utterances&lt;/a&gt; is a really cool idea: it uses GitHub issues as a backend for a comment system.
Having myself (ab)used the GitHub API as a storage backend many a times (even &lt;a href=&quot;https://lea.verou.me/2011/12/introducing-dabblet-an-interactive-css-playground/&quot;&gt;as early as 2012&lt;/a&gt;), I can see the appeal.
This may be a viable path forwards, though I need to verify that GitHub Issues can be easily exported, so that I’m not locked in.&lt;/p&gt;
&lt;p&gt;On a similar vein, I really loved &lt;a href=&quot;https://giscus.app/&quot;&gt;Gisqus&lt;/a&gt; seems great too: It’s like Utterances, but uses GitHub Discussions instead of Issues.
What holds me back from switching to it is that Discussions cannot yet be exported,
and I think portability is important here.&lt;/p&gt;
&lt;p&gt;People don’t even really use comments much anymore, they post on social media instead.
I would have &lt;strong&gt;loved&lt;/strong&gt; some way to simply collect the discussions about the post from various social media and display them underneath,
but with API prices getting out of control (&lt;a href=&quot;https://www.theverge.com/2023/3/30/23662832/twitter-api-tiers-free-bot-novelty-accounts-basic-enterprice-monthly-price&quot;&gt;1&lt;/a&gt; &lt;a href=&quot;https://www.theverge.com/2023/5/31/23743993/reddit-apollo-client-api-cost&quot;&gt;2&lt;/a&gt;), that doesn’t seem feasible.&lt;/p&gt;
&lt;p&gt;If there are any options I missed, please let me know in the (Disqus, for now 😕) comments!&lt;/p&gt;
</content>
  </entry><entry>
    <title>11ty: Index ALL the things!</title>
    <link href="https://lea.verou.me/blog/2023/11ty-indices/"/>
    <updated>2023-07-19T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2023/11ty-indices/</id>
    <content xml:lang="en" type="html">&lt;p&gt;This is a second spinoff post in the &lt;a href=&quot;https://lea.verou.me/blog/2023/going-lean/&quot;&gt;migration saga of this blog from WordPress to 11ty&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;on-good-urls&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/11ty-indices/#on-good-urls&quot;&gt;On good URLs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was important to me to have good, RESTful, &lt;a href=&quot;https://www.nngroup.com/articles/url-as-ui/&quot;&gt;usable, hackable&lt;/a&gt; URLs.
While a lot of that is easy and comes for free, following this principle with Eleventy proved quite hard:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;URLs that are “hackable” to allow users to move to higher levels of the information architecture by hacking off the end of the URL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What does this mean in practice?
It means it’s not enough if &lt;code&gt;tags/foo/&lt;/code&gt; shows all posts tagged “foo”, &lt;code&gt;tags/&lt;/code&gt; should also show all tags.
Similarly, it’s not enough if &lt;code&gt;/blog/2023/04/private-fields-considered-harmful/&lt;/code&gt; links to the &lt;a href=&quot;https://lea.verou.me/blog/2023/04/private-fields-considered-harmful/&quot;&gt;corresponding blog post&lt;/a&gt;,
but also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lea.verou.me/blog/2023/04/&quot;&gt;&lt;code&gt;/blog/2023/04/&lt;/code&gt;&lt;/a&gt; should show all posts from April 2023&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lea.verou.me/blog/2023/&quot;&gt;&lt;code&gt;/blog/2023/&lt;/code&gt;&lt;/a&gt; should show all posts from 2023&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lea.verou.me/blog/&quot;&gt;&lt;code&gt;/blog/&lt;/code&gt;&lt;/a&gt; should show all posts&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;eleventy-%E2%80%9Cpagination%E2%80%9D-primer&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/11ty-indices/#eleventy-%E2%80%9Cpagination%E2%80%9D-primer&quot;&gt;Eleventy “Pagination” Primer&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Eleventy has a &lt;a href=&quot;https://www.11ty.dev/docs/pagination/&quot;&gt;pagination&lt;/a&gt; feature, which actually does a lot more than pagination:
it’s used every time you want to generate several pages from a single template by chunking object keys and using them in permalinks.&lt;/p&gt;
&lt;p&gt;One of the most common non-pagination use cases for it is tag pages. The typical &lt;code&gt;/tags/tagname/&lt;/code&gt; page is generated by a deceptively simple template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;---
pagination:
  data: collections
  size: 1
  alias: tag
  filter: [&amp;quot;blog&amp;quot;, &amp;quot;all&amp;quot;]
permalink: /blog/tags/{{ tag }}/
override:tags: []
eleventyComputed:
  title: &amp;quot;{{ collections[ tag ].length | pluralize(&#39;post&#39;) }} on {{ tag | format_tag }}&amp;quot;
---

{% set taglist = collections[ tag ] | reverse %}
{# ... Loop over taglist here ... #}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That was it, then you just loop over &lt;code&gt;taglist&lt;/code&gt; (or &lt;code&gt;collections[ tag ] | reverse&lt;/code&gt; directly) to template the posts under each tag in reverse chronological order.
Simple, right?
But what about the indices?
As it currently stands, visiting &lt;code&gt;/blog/tags/&lt;/code&gt; will just produce a 404.&lt;/p&gt;
&lt;h2 id=&quot;index-of-all-tags&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/11ty-indices/#index-of-all-tags&quot;&gt;Index of all tags&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Creating an index of all tags only involves a single page, so it does not involve contorting the pagination feature to mind-bending levels,
like the rest of this post.
However, we need to do some processing to sort the tags by post count, and remove those that are not “real” tags.&lt;/p&gt;
&lt;p&gt;There are many ways to go about with this.&lt;/p&gt;
&lt;h3 id=&quot;the-quick-and-dirty-way&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/11ty-indices/#the-quick-and-dirty-way&quot;&gt;The quick and dirty way&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The quick and dirty way is to just iterate over &lt;code&gt;collections&lt;/code&gt; and count the posts for each tag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;&amp;lt;ol&amp;gt;
{% for tag, posts in collections %}
	&amp;lt;li&amp;gt;{{ tags.one(tag) }}
		({{ posts.length }} posts)
	&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;tip&quot;&gt;
&lt;p&gt;Unfamiliar with the &lt;code&gt;tags.one()&lt;/code&gt; syntax above?
It’s using &lt;a href=&quot;https://mozilla.github.io/nunjucks/templating.html#macro&quot;&gt;Nunjucks macros&lt;/a&gt; (there’s a &lt;code&gt;{% import &amp;quot;_tags.njk&amp;quot; as tags %}&lt;/code&gt; earlier in the template too).
Macros allow you to create parameterized templates snippets,
and I’ve come to love them during this migration project.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The problem is that this does not produce the tags in any particular order,
and you usually want frequently used tags to come first.
You could actually fix that with CSS:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;&amp;lt;ol&amp;gt;
{% for tag, posts in collections %}
	&amp;lt;li style=&amp;quot;order: {{ collections.all.length - posts.length }}&amp;quot;&amp;gt;
		{{ tags.one(tag) }}
		({{ posts.length }} posts)
	&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only advantage of this approach is that this is entirely doable via templates and doesn’t require any JS,
but there are several drawbacks.
First, it limits what styling you can use: for the &lt;code&gt;order&lt;/code&gt; property to actually have an effect, you need to be using either Flexbox or Grid layout.
But worse, the &lt;code&gt;order&lt;/code&gt; property &lt;a href=&quot;https://www.w3.org/TR/css-flexbox-1/#order-accessibility&quot;&gt;does not affect the order screen readers read your content&lt;/a&gt; one iota.&lt;/p&gt;
&lt;h3 id=&quot;dynamic-postsbytag-collection&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/11ty-indices/#dynamic-postsbytag-collection&quot;&gt;Dynamic &lt;code&gt;postsByTag&lt;/code&gt; collection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To do it all in Eleventy, &lt;a href=&quot;https://github.com/11ty/eleventy/issues/927&quot;&gt;the most common way&lt;/a&gt; is a dynamic collection,
added via &lt;a href=&quot;https://www.11ty.dev/docs/collections/#advanced-custom-filtering-and-sorting&quot;&gt;&lt;code&gt;eleventyConfig.addCollection()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;config.addCollection(&amp;quot;postsByTag&amp;quot;, (collectionApi) =&amp;gt; {
	const posts = collectionApi.getFilteredByTag(&amp;quot;blog&amp;quot;);
	let ret = {};

	for (let post of posts) {
		for (let tag of post.data.tags) {
			ret[tag] ??= [];
			ret[tag].push(post);
		}
	}

	// Now sort, and reconstruct the object
	ret = Object.fromEntries(Object.entries(ret).sort((a, b) =&amp;gt; b[1].length - a[1].length));

	return ret;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That we then use in the template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;&amp;lt;ol&amp;gt;
{% for tag, posts in collections.postsByTag %}
	&amp;lt;li&amp;gt;
		{{ tags.one(tag) }} ({{ posts }} posts)
	&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;custom-taglist-filter&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/11ty-indices/#custom-taglist-filter&quot;&gt;Custom &lt;code&gt;taglist&lt;/code&gt; filter&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another way is a custom filter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;config.addFilter(&amp;quot;taglist&amp;quot; (collections) =&amp;gt; {
	let tags = Object.keys(collections).filter(filters.is_real_tag);
	tags.sort((a, b) =&amp;gt; collections[b].length - collections[a].length);

	return Object.fromEntries(tags.map(tag =&amp;gt; [tag, collections[tag].length]));
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;used like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;&amp;lt;ol&amp;gt;
{% for tag, posts in collections | taglist %}
	&amp;lt;li&amp;gt;
		{{ tags.one(tag) }} ({{ posts }} posts)
	&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usually, filters are meant for more broadly usable utility functions, and are not a good fit here.
However, the filter approach can be more elegant if your use case is more complicated and involves many different outputs.
For the vast majority of use cases, a dynamic collection is more appropriate.&lt;/p&gt;
&lt;h2 id=&quot;index-of-posts-by-year&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/11ty-indices/#index-of-posts-by-year&quot;&gt;Index of posts by year&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Generating yearly indices can be quite similar as generating tag pages.
The main difference is that for tags the collection already exists (&lt;code&gt;collections[tag]&lt;/code&gt;) whereas
for years you have to build it yourself, using &lt;code&gt;addCollection()&lt;/code&gt; in your config file.&lt;/p&gt;
&lt;p&gt;This seems to come up pretty frequently, both for years and months (the next section):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/11ty/eleventy/issues/502&quot;&gt;https://github.com/11ty/eleventy/issues/502&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tomayac/blogccasion/issues/19&quot;&gt;https://github.com/tomayac/blogccasion/issues/19&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/11ty/eleventy/issues/316#issuecomment-441053919&quot;&gt;https://github.com/11ty/eleventy/issues/316#issuecomment-441053919&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/11ty/eleventy/issues/1284&quot;&gt;https://github.com/11ty/eleventy/issues/1284&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://darekkay.com/blog/eleventy-group-posts-by-year/&quot;&gt;Group posts by year in Eleventy (Blog post)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is what I did, after spending a pretty long time reading discussions and blog posts:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;eleventyConfig.addCollection(&amp;quot;postsByYear&amp;quot;, (collectionApi) =&amp;gt; {
	const posts = collectionApi.getFilteredByTag(&amp;quot;blog&amp;quot;).reverse();
	const ret = {};

	for (let post of posts) {
		let key = post.date.getFullYear();
		ret[key] ??= [];
		ret[key].push(post);
	}

	return ret;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then, in &lt;a href=&quot;https://github.com/LeaVerou/lea.verou.me/tree/main/blog/year-index.njk&quot;&gt;&lt;code&gt;blog/year-index.njk&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;---
pagination:
  data: collections.postsByYear
  size: 1
  alias: year
permalink: /blog/{{ year }}/
override:tags: []
eleventyComputed:
  title: &amp;quot;Posts from {{ year }}&amp;quot;
---

{% import &amp;quot;_posts.njk&amp;quot; as posts %}
{{ posts.list(collections.postsByYear[year], {style: &amp;quot;compact&amp;quot;}) }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see an example of such a page here: &lt;a href=&quot;https://lea.verou.me/blog/2010/&quot;&gt;Posts from 2010&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bonus, because this collection is more broadly useful, I was able to utilize it to make a little yearly archives bar chart!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/11ty-indices/image.png&quot; alt=&quot;Bar chart of posts by year, with 2012 selected and text above it reading &amp;quot;28 posts&amp;quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;index-of-posts-by-month&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/11ty-indices/#index-of-posts-by-month&quot;&gt;Index of posts by month&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pagination only works on one level:
You cannot paginate a paginated collection (though Zach has a &lt;a href=&quot;https://github.com/11ty/eleventy/issues/332#issuecomment-445236776&quot;&gt;workaround&lt;/a&gt; for that that I’m still trying to wrap my head around).
This also means that you cannot easily paginate tag or year index pages.
I worked around that by simply showing a more compact post list if there are more than 10 posts.&lt;/p&gt;
&lt;p&gt;However, it also means you cannot process the &lt;code&gt;postsByYear&lt;/code&gt; collection and somehow paginate by month.
You need to create &lt;em&gt;another&lt;/em&gt; collection, this time with the year + month as the key:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;config.addCollection(&amp;quot;postsByMonth&amp;quot;, (collectionApi) =&amp;gt; {
    const posts = collectionApi.getFilteredByTag(&amp;quot;blog&amp;quot;).reverse();
    const ret = {};

    for (let post of posts) {
        let key = filters.format_date(post.date, &amp;quot;iso&amp;quot;).substring(0, 7); // YYYY-MM
        ret[key] ??= [];
        ret[key].push(post);
    }

    return ret;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And a separate &lt;a href=&quot;https://github.com/LeaVerou/lea.verou.me/tree/main/blog/month-index.njk&quot;&gt;&lt;code&gt;blog/month-index.njk&lt;/code&gt;&lt;/a&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;---
pagination:
  data: collections.postsByMonth
  size: 1
  alias: month
permalink: /blog/{{ month | replace(&amp;quot;-&amp;quot;, &amp;quot;/&amp;quot;) }}/
override:tags: []
eleventyComputed:
  title: &amp;quot;Posts from {{ month | format_date({month: &#39;long&#39;, year: &#39;numeric&#39;}) }}&amp;quot;
---

{% import &amp;quot;_posts.njk&amp;quot; as posts %}
{{ posts.list(collections.postsByMonth[month], {style: &amp;quot;compact&amp;quot;}) }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see an example of such a page here: &lt;a href=&quot;https://lea.verou.me/blog/2010/12/&quot;&gt;Posts from December 2010&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Rethinking Categorization</title>
    <link href="https://lea.verou.me/blog/2023/rethinking-categorization/"/>
    <updated>2023-07-20T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2023/rethinking-categorization/</id>
    <content xml:lang="en" type="html">&lt;p&gt;This is the third spinoff post in the &lt;a href=&quot;https://lea.verou.me/blog/2023/going-lean/&quot;&gt;migration saga of this blog from WordPress to 11ty&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Migrating was a good opportunity to &lt;a href=&quot;https://twitter.com/LeaVerou/status/1680900090829983744&quot;&gt;rethink the information architecture of my site&lt;/a&gt;,
especially around categorization.&lt;/p&gt;
&lt;h2 id=&quot;categories-vs-tags&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/rethinking-categorization/#categories-vs-tags&quot;&gt;Categories vs Tags&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just like most WP users, I was using both categories and tags, simply because they came for free.
However the difference between them was a bit fuzzy, as evidenced by how inconsistently they are used, both here and around the Web.
I was mainly using Categories for the &lt;em&gt;type&lt;/em&gt; of article (Articles, Rants, Releases, Tips, Tutorials, News, Thoughts),
however there were also categories that were more like content tags (e.g. CSS WG, Original, Speaking, Benchmarks).&lt;/p&gt;
&lt;p&gt;This was easily solved by moving the latter to actual tags.
However, tags are no panacea, there are several issues with them as well.&lt;/p&gt;
&lt;h2 id=&quot;problems-with-tags&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/rethinking-categorization/#problems-with-tags&quot;&gt;Problems with tags&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;tag-aliases&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/rethinking-categorization/#tag-aliases&quot;&gt;Tag aliases&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First, there were many tags that were &lt;strong&gt;synonyms of each other&lt;/strong&gt;, and posts were fragmented across them, or had to include both (e.g. &lt;a href=&quot;https://lea.verou.me/blog/tags/js/&quot;&gt;JS&lt;/a&gt; and &lt;a href=&quot;https://lea.verou.me/blog/tags/javascript&quot;&gt;Javascript&lt;/a&gt;).
I addressed this by defining &lt;a href=&quot;https://github.com/LeaVerou/lea.verou.me/tree/main/data/tag_aliases.json&quot;&gt;aliases&lt;/a&gt; in a global data file, and using Eleventy to &lt;a href=&quot;https://github.com/LeaVerou/lea.verou.me/tree/main/redirects.njk&quot;&gt;dynamically build Netlify redirects&lt;/a&gt; for them.&lt;/p&gt;
&lt;pre&gt;&lt;code data-file=&quot;redirects.njk&quot; class=&quot;language-njk&quot;&gt;# Tag aliases
{% for alias, tag in tag_aliases %}/tags/{{ alias }}/ /tags/{{ tag }}/ 301
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Turns out I’m not the first to think of building the Netlify &lt;code&gt;_redirects&lt;/code&gt; file dynamically, some googling revealed &lt;a href=&quot;https://www.aleksandrhovhannisyan.com/blog/eleventy-netlify-redirects/&quot;&gt;this blog post&lt;/a&gt; from 2021 that does the same thing.&lt;/p&gt;
&lt;p&gt;I’ve also decided to expose these aliases in the &lt;a href=&quot;https://lea.verou.me/blog/tags/&quot;&gt;tags index&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/rethinking-categorization/images/aliases-tag-index.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E2%80%9Corphan%E2%80%9D-tags&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/rethinking-categorization/#%E2%80%9Corphan%E2%80%9D-tags&quot;&gt;“Orphan” tags&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lastly, another issue is what I call “orphan tags”: Tags that are only used in a single post.
The primary use case for both tags and categories is to help you discover related content.
Tags that are only used once clutter the list of tags, but serve no actual purpose.&lt;/p&gt;
&lt;p&gt;It is important to note that orphan tags are not (always) an authoring mistake.
While some tags are definitely too specific and thus unlikely to be used again,
the vast majority of orphan tags are tags that &lt;em&gt;could&lt;/em&gt; plausibly be used again, but it simply hasn’t happened.&lt;/p&gt;
&lt;p&gt;I definitely removed a bunch of overly specific tags from the content,
but was still left with more orphan tags than tags with more than one post (103 vs 78 as I write these lines).&lt;/p&gt;
&lt;p&gt;For (1), the best course of action is probably to remove the tags from the content altogether.
However for (2), there are two things to consider.&lt;/p&gt;
&lt;h4 id=&quot;how-to-best-display-orphan-tags-in-the-tag-index%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/rethinking-categorization/#how-to-best-display-orphan-tags-in-the-tag-index%3F&quot;&gt;How to best display orphan tags in the &lt;a href=&quot;https://lea.verou.me/blog/tags/&quot;&gt;tag index&lt;/a&gt;?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For the &lt;a href=&quot;https://lea.verou.me/blog/tags/&quot;&gt;tag index&lt;/a&gt;, I’ve separated orphan tags from the rest,
and I’m displaying them in a &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; element at the end, that is collapsed by default.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/rethinking-categorization/images/orphan-index.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Each tag is a link to the post that uses it instead of a tags page, since there is only one post that uses it.&lt;/p&gt;
&lt;h4 id=&quot;how-to-best-display-orphan-tags-in-the-post-itself%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/rethinking-categorization/#how-to-best-display-orphan-tags-in-the-post-itself%3F&quot;&gt;How to best display orphan tags in the post itself?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is a little trickier.
For now, I’ve refrained from making them links, and I’m displaying them faded out to communicate this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/rethinking-categorization/images/orphan-tags-post.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Another alternative I’m contemplating is to hide them entirely.
Not as a punitive measure because they have failed at their one purpose in life 😅, but because this would allow me to use tags liberally,
and only what sticks would be displayed to the end user.&lt;/p&gt;
&lt;p&gt;A third, intermediate solution, would be to have a “and 4 orphan tags” message at the end of the list of tags, which can be clicked to show them.&lt;/p&gt;
&lt;p&gt;These are not just UX/IA improvements, they are also performance improvements.
&lt;strong&gt;Not linking orphan tags to tag pages means I don’t need to generate these tag pages at all.&lt;/strong&gt;
Since the majority of tags are orphan tags, this allowed me to substantially reduce the number of pages that need to be generated,
and cut down build time by a whopping &lt;strong&gt;40%&lt;/strong&gt;, from 2.7s to 1.7s (on average).&lt;/p&gt;
&lt;h3 id=&quot;tag-hierarchies%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/rethinking-categorization/#tag-hierarchies%3F&quot;&gt;Tag hierarchies?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The theory is that categories are a &lt;a href=&quot;https://en.wikipedia.org/wiki/Taxonomy&quot;&gt;taxonomy&lt;/a&gt; and tags a &lt;a href=&quot;https://en.wikipedia.org/wiki/Folksonomy&quot;&gt;folksonomy&lt;/a&gt;.
Taxonomies can be hierarchical, but folksonomies are, &lt;a href=&quot;https://en.wikipedia.org/wiki/Folksonomy#Folksonomy_vs._taxonomy&quot;&gt;by definition&lt;/a&gt;, flat.
However, &lt;strong&gt;in practice, tags almost always have an implicit hierarchy&lt;/strong&gt;, which is also what &lt;a href=&quot;https://en.wikipedia.org/wiki/Folksonomy#Folksonomy_vs._taxonomy&quot;&gt;research on folksonomies in the wild tends to find&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Examples from this very blog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a separate tag for &lt;a href=&quot;https://lea.verou.me/blog/tags/es/&quot;&gt;ES&lt;/a&gt; (ECMAScript), and a separate one for &lt;a href=&quot;https://lea.verou.me/blog/tags/js&quot;&gt;JS&lt;/a&gt;.
However, any post tagged ES should also be tagged JS – though the opposite is not true.&lt;/li&gt;
&lt;li&gt;There is a tag for &lt;a href=&quot;https://lea.verou.me/blog/tags/css/&quot;&gt;CSS&lt;/a&gt;, tags for specific CSS specifications (e.g. &lt;a href=&quot;https://lea.verou.me/blog/tags/css-backgrounds/&quot;&gt;CSS Backgrounds &amp;amp; Borders&lt;/a&gt;), and even tags for specific CSS functions or properties (e.g. &lt;a href=&quot;https://lea.verou.me/blog/tags/background-attachment/&quot;&gt;&lt;code&gt;background-attachment&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://lea.verou.me/blog/tags/background-size/&quot;&gt;&lt;code&gt;background-size&lt;/code&gt;&lt;/a&gt;).
However, these are not orthogonal: posts tagged with specific CSS features should also be tagged with the CSS spec that contains them, as well as a general “CSS” tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;I have yet to see a use case for tagging that does &lt;em&gt;not&lt;/em&gt; result in implicit hierarchies.&lt;/strong&gt;
Yet, all UIs for entering tags assume that they are flat.
Instead, it’s up to each individual post to maintain these relationships, which is tedious and error prone.
In practice, the more general tags are often left out, but not intentionally or predictably.&lt;/p&gt;
&lt;p&gt;It would be much better to be able to define this hierarchy in a central place, and have it automatically applied to all posts.
In 11ty, it could be as simple as a data file for each tag’s “parent” tag.
Every time the tag is used, its parent is also added to the post automatically, recursively all the way up to the root (at build time).
I have not tried this yet, but I’m excited to experiment with it once I have a bit more time.&lt;/p&gt;
&lt;h2 id=&quot;categories-vs-tags%3A-reprise&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/rethinking-categorization/#categories-vs-tags%3A-reprise&quot;&gt;Categories vs Tags: Reprise&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Back to our original dilemma: Do I still need categories, especially if I eventually implement tag hierarchies?
It does seem that the categories I used in WP for the article type (Articles, Rants, Releases, Tips, Tutorials, News, Thoughts etc)
are somewhat distinct from my usage of tags, which are more about the content of the article.
However, it is unclear whether this is the best use of categories, or whether I should just use tags for this as well.
Another common practice is to use tags for more specific content tags, and categories for broader areas (e.g. “Software engineering”, “Product”, “HCI”, “Personal” etc).
Skipping past the point that tag hierarchies make it easy to use tags for this too, this makes me think: maybe what is needed is actually metadata, not categories.
Instead of deciding that categories hold the article type, or the broader domain, what if we had certain attributes for &lt;em&gt;both&lt;/em&gt; of these things.
Then, we could have a “type” attribute, and a “domain” attribute, and use them both for categorization, and for filtering.
Since Eleventy already supports arbitrary metadata, this is just a matter of implementation.&lt;/p&gt;
&lt;p&gt;Lots to think about, but one thing seems clear: Categories do not have a clear purpose, and thus I’m doing away with them.
For now, I have converted all past categories to tags, so that the additional metadata is not lost,
and I will revisit how to best expose this metadata in the future.&lt;/p&gt;
</content>
  </entry><entry>
    <title>Going Lean</title>
    <link href="https://lea.verou.me/blog/2023/going-lean/"/>
    <updated>2023-07-21T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2023/going-lean/</id>
    <content xml:lang="en" type="html">&lt;p&gt;WordPress has been with me since &lt;a href=&quot;https://lea.verou.me/blog&quot;&gt;my very first post in 2009&lt;/a&gt;.
There is a lot to love about it: It’s open source, it has a thriving ecosystem, a beautiful default theme, and a revolutionary block editor that makes my inner UX geek giddy.
Plus, WP made building a website and publishing content accessible to everyone.
No wonder it’s &lt;a href=&quot;https://almanac.httparchive.org/en/2022/cms#most-popular-cmss&quot;&gt;the most popular CMS in the world&lt;/a&gt;, by a &lt;strong&gt;huge&lt;/strong&gt; margin.&lt;/p&gt;
&lt;p&gt;However, for me, the bad had started to outweigh the good:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Things I could do in minutes in a static site, in WP required finding a plugin or tweaking PHP code.&lt;/li&gt;
&lt;li&gt;It was slow and bloated.&lt;/li&gt;
&lt;li&gt;Getting a draft out of it and into another medium was a pain.&lt;/li&gt;
&lt;li&gt;Despite having never been hacked, I was terrified about it, given all the horror stories.&lt;/li&gt;
&lt;li&gt;I was periodically getting “Error establishing a database connection” errors, whose frequency kept increasing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was time to move on.
&lt;em&gt;It’s not you WP, it’s me.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It seemed obvious that the next step would be a statically generated blog.
I had been using &lt;a href=&quot;https://11ty.dev/&quot;&gt;Eleventy&lt;/a&gt; for a while on a variety of sites at that point and loved it, so using that was a no-brainer.
In fact, my blog was one of my last remaining non-JAMstack sites, and by far the biggest.
I had built a &lt;a href=&quot;https://svgees.us/blog/&quot;&gt;simple 11ty blog for my husband&lt;/a&gt; a year ago, and was almost jealous of the convenience and simplicity.
There are so many conveniences that just come for free with this workflow: git, Markdown, custom components, even GitHub Copilot as you write your prose!
And if you can make the repo public, oooooh, the possibilities! People could even file PRs and issues for your blog posts!&lt;/p&gt;
&lt;p&gt;Using &lt;a href=&quot;https://netlify.com/&quot;&gt;Netlify&lt;/a&gt; as a platform was also a no-brainer:
I had been using it for years, for over 30 sites at this point!
I love their simplicity, their focus on developer experience, and their commitment to open source.
I also happen to know a bunch of folks there, and they have a great culture too.&lt;/p&gt;
&lt;p&gt;However, I was dreading the amount of work it would take to migrate 14 years of content, plugins, and styling.
The stroke that broke the camel’s back was a particularly bad db outage.
I &lt;a href=&quot;https://twitter.com/LeaVerou/status/1652166572335587329&quot;&gt;tweeted&lt;/a&gt; about my frustration, but I had already made up my mind.&lt;/p&gt;
&lt;p&gt;I reviewed the list of plugins I had installed on WP to estimate the amount of work.
Nearly all fell in one of two categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Solving problems I wouldn’t have if I wasn’t using WP (e.g. SVG support, Don’t Muck My Markup)&lt;/li&gt;
&lt;li&gt;Giving me benefits I could get in 11ty with very little code (e.g. Prism syntax highlighting, Custom Body Class, Disqus, Unlist Posts &amp;amp; Pages, Widget CSS classes)&lt;/li&gt;
&lt;li&gt;Giving me benefits I could get with existing Eleventy plugins (e.g. Add Anchor Links, Easy Table of Contents)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This could actually work!&lt;/p&gt;
&lt;h2 id=&quot;public-or-private-repo%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/going-lean/#public-or-private-repo%3F&quot;&gt;Public or private repo?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the hardest dilemmas was whether to make the repo for this website public or private.&lt;/p&gt;
&lt;p&gt;Overall, I was happy to have most files be public, but there were a few things I wanted to keep private:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Drafts (some drafts I’m ok to share publicly, but not all)&lt;/li&gt;
&lt;li&gt;Unlisted pages and posts (posts with publicly accessible URLs, but not linked from anywhere)&lt;/li&gt;
&lt;li&gt;Private pages (e.g. in the previous site I had a password-protected page with my details for conference organizers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, right now it’s all-or-nothing, even if only one file needs to be private, the whole repo needs to be private.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;FWIW I don’t think it has to be this way, and I &lt;a href=&quot;https://twitter.com/LeaVerou/status/1652806575973605378&quot;&gt;tweeted&lt;/a&gt; about this,
including some ideas about fixing it, either from the GitHub side, or the serverless platform side.
I’m hoping to write a blog post to expand on this soon.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Making the repo public does have many advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transparency is one of my core values, and this is in line with it.&lt;/li&gt;
&lt;li&gt;People can learn from my code and avoid going down the same rabbit holes I did.&lt;/li&gt;
&lt;li&gt;People can file issues for problems.&lt;/li&gt;
&lt;li&gt;People can send PRs to fix both content and functionality.&lt;/li&gt;
&lt;li&gt;I wouldn’t need to use a separate public repo for the data that populates my &lt;a href=&quot;https://lea.verou.me/speaking/&quot;&gt;Speaking&lt;/a&gt;, &lt;a href=&quot;https://lea.verou.me/publications/&quot;&gt;Publications&lt;/a&gt;, and &lt;a href=&quot;https://lea.verou.me/projects/&quot;&gt;Projects&lt;/a&gt; pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I went back and forth quite a lot, but in the end I decided to make it public.
In fact, I fully embraced it, by making it as easy as possible to file issues and submit PRs.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/going-lean/images/broken-page-notice.png&quot; alt=&quot;Notice from top of page saying &amp;quot;You are browsing the new, beta version of my website. Some things may not work properly. View this page on the old website and if you spot any problems, please file an issue!&amp;quot; with links throughout&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;Each page has a link to report a problem with it, which prefills as much info as possible.
This was also a good excuse to try out &lt;a href=&quot;https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms&quot;&gt;GitHub Issue Forms&lt;/a&gt;,
as well as &lt;a href=&quot;https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-url-query&quot;&gt;URLs for prefilling the form&lt;/a&gt;!&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/going-lean/images/gh-edit.png&quot; alt=&quot;&amp;quot;Edit on GitHub link&amp;quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
Each page has a link to edit it on GitHub, which automatically takes you through a PR flow if you don’t have write access to the repo.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;licensing&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/going-lean/#licensing&quot;&gt;Licensing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Note that &lt;strong&gt;a public repo is not automatically open source&lt;/strong&gt;.
As you know, I have a long track record of open sourcing my code.
I love seeing people learning from it, using it in their own projects, and blogging about what they’ve learned.
So, &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT-licensing&lt;/a&gt; the &lt;strong&gt;code&lt;/strong&gt; part of this website is a no-brainer.
&lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/&quot;&gt;CC-BY&lt;/a&gt; also seems like a no-brainer for &lt;strong&gt;content&lt;/strong&gt;, because, why not?&lt;/p&gt;
&lt;p&gt;Where it gets tricky is the &lt;strong&gt;design&lt;/strong&gt;.
I’m well aware that neither my logo nor the visual style of this website would win any design awards;
I haven’t worked as a graphic designer for many years, and it shows.
However, it’s something I feel is very personal to me, my own personal brand, which by definition needs to be unique.
Seeing another website with the same logo and/or visual style would feel just as unsettling as walking into a house that looks exactly like mine.
I’m speaking from experience: I’ve had my logo and design copied many times, and it always felt like a violation.&lt;/p&gt;
&lt;p&gt;I’m not sure how to express this distinction in a GitHub &lt;code&gt;LICENSE&lt;/code&gt; file, so I haven’t yet added one,
but I did try to outline it in the &lt;a href=&quot;https://lea.verou.me/credits/#licensing&quot;&gt;Credits &amp;amp; Making Of&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;It’s still difficult to draw the line precisely, especially when it comes to CSS code.
I’m basically happy for people to copy as much of my CSS code as they want (following &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT license&lt;/a&gt; rules),
as long as the end result doesn’t scream “Lea Verou” to anyone who has seen this site.
&lt;em&gt;But how on Earth do you express that?&lt;/em&gt; 🤔&lt;/p&gt;
&lt;h2 id=&quot;migrating-content-to-markdown&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/going-lean/#migrating-content-to-markdown&quot;&gt;Migrating content to Markdown&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The title of this section says “to Markdown” because that’s one of the benefits of this approach:
static site generators are largely compatible with each other, so if I ever needed to migrate again, it would be much easier.&lt;/p&gt;
&lt;p&gt;Thankfully, travelers on this road before me had already paved it.
Many open source scripts out there to migrate WP to Markdown!
The one that worked well for me was &lt;a href=&quot;https://github.com/lonekorean/wordpress-export-to-markdown&quot;&gt;lonekorean/wordpress-export-to-markdown&lt;/a&gt;
(though I later discovered there’s &lt;a href=&quot;https://github.com/flowershow/wordpress-to-markdown&quot;&gt;a more updated fork&lt;/a&gt; now)&lt;/p&gt;
&lt;p&gt;It was still a bumpy road. First, it kept getting stuck on parsing the WP XML export, specifically in comments.
I use Disqus for comments, but it mirrors comments in the internal WP system.
Also, WP seems to continue recording trackbacks even if they are not displayed anywhere.
Turns out I had hundreds of thousands of spam trackbacks, which I spent hours cleaning up (it was quite a meditative experience).
In the end I got the total comments + trackbacks from 290K down to 26K which reduced the size of the XML export from 210 MB to a mere 31 MB.
This did not fix the parsing issue, but allowed me to simply open the file in VS Code and delete the problematic comments manually.
It also fixed the uptime issues I was having: I never got another “Error establishing a database connection” error after that, despite taking my own sweet time to migrate (started in April 2023, and finished in July!).
Ideally, I wish WP had an option to export without comments, but I guess that’s not a common use case.&lt;/p&gt;
&lt;p&gt;While this importer is great, and allowed me to configure the file structure in a way that preserved all my URLs, I did lose a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“Read more” separators (filed it as &lt;a href=&quot;https://github.com/lonekorean/wordpress-export-to-markdown/issues/93&quot;&gt;issue #93&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Figures (they are imported as just images with text underneath) (filed it as &lt;a href=&quot;https://github.com/lonekorean/wordpress-export-to-markdown/issues/94&quot;&gt;issue #94&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Drafts (&lt;a href=&quot;https://github.com/lonekorean/wordpress-export-to-markdown/issues/16&quot;&gt;#16&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Pages (I had to manually copy them over, but it was only a handful)&lt;/li&gt;
&lt;li&gt;Any custom classes were gone (e.g. a &lt;code&gt;&amp;quot;view-demo&amp;quot;&lt;/code&gt; class I used to create “call to action” links)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few other issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It downloaded all images, but did not update the URLs in the Markdown files.
This was easy to fix with a regex find and replace from &lt;code&gt;https?://lea.verou.me/wp-content/uploads/(&#92;d{4}/&#92;d{2})/([&#92;w&#92;.-]+&#92;.(?:png|gif|jpe?g))&lt;/code&gt; to &lt;code&gt;images/$2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Some images from some posts were not downloaded – I still have no idea why.&lt;/li&gt;
&lt;li&gt;It did not download any non-media uploads, e.g. zip files.
Thankfully, these were only a couple, so I could detect and port over manually.&lt;/li&gt;
&lt;li&gt;Older posts included code directly in the content, without code blocks, which meant it was being parsed as HTML, often with disastrous results (e.g. the post just cutting off in the middle of a sentence because it mentioned &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, which opened an actual &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element and ate up the rest of the content).
I fixed a few manually, but I’m sure there’s more left.&lt;/li&gt;
&lt;li&gt;Because code was just included as content, the importer also escaped all Markdown special symbols, so adding code blocks around it was not enough, I also had to remove a bunch of backslashes manually.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;rethinking-categorization&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/going-lean/#rethinking-categorization&quot;&gt;Rethinking Categorization&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the importer preserved both tags and categories, this was a good opportunity to rethink whether I need them both,
and to re-evaluate how I use them.&lt;/p&gt;
&lt;p&gt;This spun off into a separate post: &lt;a href=&quot;https://lea.verou.me/blog/2023/rethinking-categorization/&quot;&gt;Rethinking Categorization&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;migrating-comments&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/going-lean/#migrating-comments&quot;&gt;Migrating comments&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Probably one of the hardest parts of this migration was preserving Disqus comments.
In fact, it was so hard that I procrastinated on it for three months,
being stuck in a limbo where I couldn’t blog because I’d have to port the new post manually.&lt;/p&gt;
&lt;p&gt;I’ve documented the process in a &lt;a href=&quot;https://lea.verou.me/blog/2023/preserve-disqus/&quot;&gt;separate blog post&lt;/a&gt;, as it was quite involved,
including some thoughts about what system to use in the future, as I eventually hope to migrate away from Disqus.&lt;/p&gt;
&lt;h2 id=&quot;keeping-urls-cool&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/going-lean/#keeping-urls-cool&quot;&gt;Keeping URLs cool&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wanted to preserve the URL structure of my old site as much as possible, both for SEO, but also because &lt;a href=&quot;https://www.w3.org/Provider/Style/URI&quot;&gt;cool URLs don’t change&lt;/a&gt;.
The WP importer I used allowed me to preserve the &lt;code&gt;/year/month/slug&lt;/code&gt; structure of my URLs.&lt;/p&gt;
&lt;p&gt;I did want to have the blog in its own directory though.
This site started as a blog, but I now see it as more of a personal site &lt;em&gt;with&lt;/em&gt; a blog.
Thankfully, redirecting these URLs to corresponding &lt;code&gt;/blog/&lt;/code&gt; URLs was a one liner using &lt;a href=&quot;https://docs.netlify.com/routing/redirects/&quot;&gt;Netlify redirects&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/20* /blog/20:splat 301
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Going forwards, I also decided to do away with the month being part of the URL, as it complicates the file structure for no discernible benefit and I don’t blog nearly as much now as I did in 2009, e.g. compare &lt;a href=&quot;https://lea.verou.me/blog/2009&quot;&gt;2009&lt;/a&gt; vs &lt;a href=&quot;https://lea.verou.me/blog/2022/&quot;&gt;2022&lt;/a&gt;: 38 vs 7!
I do think I will start blogging more again now, not only due to the new site,
but also due to new interests and a long backlog of ideas (just look at &lt;a href=&quot;https://lea.verou.me/blog/2023/07/&quot;&gt;July 2023&lt;/a&gt; so far!).
However, I doubt I will ever get back to the pre-2014 levels, I simply don’t have that kind of time anymore
(coincidentally, it appears my blogging frequency dropped significantly after I &lt;a href=&quot;https://lea.verou.me/blog/2014/02/im-going-to-mit/&quot;&gt;started my PhD&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I also wanted to continue having nice, RESTful, &lt;a href=&quot;https://www.nngroup.com/articles/url-as-ui/&quot;&gt;usable&lt;/a&gt; URLs, which also requires:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;URLs that are “hackable” to allow users to move to higher levels of the information architecture by hacking off the end of the URL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In practice, this means it’s not enough if &lt;code&gt;tags/foo/&lt;/code&gt; shows all posts tagged “foo”, &lt;code&gt;tags/&lt;/code&gt; should also show all tags.
Similarly, it’s not enough if &lt;code&gt;/blog/2023/04/private-fields-considered-harmful/&lt;/code&gt; links to the &lt;a href=&quot;https://lea.verou.me/blog/2023/04/private-fields-considered-harmful/&quot;&gt;corresponding blog post&lt;/a&gt;,
but also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lea.verou.me/blog/2023/04/&quot;&gt;&lt;code&gt;/blog/2023/04/&lt;/code&gt;&lt;/a&gt; should show all posts from April 2023&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lea.verou.me/blog/2023/&quot;&gt;&lt;code&gt;/blog/2023/&lt;/code&gt;&lt;/a&gt; should show all posts from 2023&lt;/li&gt;
&lt;li&gt;and of course &lt;a href=&quot;https://lea.verou.me/blog/&quot;&gt;&lt;code&gt;/blog/&lt;/code&gt;&lt;/a&gt; should show all posts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This proved quite tricky to do with Eleventy, and spanned an entirely different &lt;a href=&quot;https://lea.verou.me/blog/2023/11ty-indices/&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;overall-impressions&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/going-lean/#overall-impressions&quot;&gt;Overall impressions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Overall, I’m happy with the result, and the flexibility.
I’ve had a lot of fun with this project, and it was a great distraction during a very difficult time in my life,
due to dealing with some serious health issues in my immediate family.&lt;/p&gt;
&lt;p&gt;However, there are a few things that are now more of a hassle than they were in WP,
mainly around the editing flow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In WP, editing a blog post I was looking at in my browser was a single click (provided I was logged in).
I guess I could still do that by editing through GitHub, but now I’m spoiled, I want an easy way to edit in my own editor
(VS Code, which has &lt;a href=&quot;https://code.visualstudio.com/docs/languages/markdown&quot;&gt;a lot of nice features for Markdown editing&lt;/a&gt;),
however the only way to do that is to either painfully traverse the directory structure, or …search to find the right *.md file,
neither of which is ideal.&lt;/li&gt;
&lt;li&gt;Previewing a post I was editing was also a single click, whereas now I need to run a local server and manually type the URL in (or browse the website to find it).&lt;/li&gt;
&lt;li&gt;Making edits now requires me to think of a suitable commit message.
Sure, this is useful sometimes, but most of the time, I want the convenience of just saving my changes and being done with it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;open-file-in-vs-code-from-the-browser%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/going-lean/#open-file-in-vs-code-from-the-browser%3F&quot;&gt;Open file in VS Code from the browser?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There &lt;em&gt;is&lt;/em&gt; a way to solve the first problem: VS Code supports a &lt;code&gt;vscode://&lt;/code&gt; protocol that allows you to
&lt;a href=&quot;https://code.visualstudio.com/docs/editor/command-line#_opening-vs-code-with-urls&quot;&gt;open a file in VS Code from the browser&lt;/a&gt;.
This means, this link would open the file for this blog post in VS Code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&amp;quot;vscode://file/Users/leaverou/Documents/lea.verou.me/blog/2023/going-lean/index.md&amp;quot;&amp;gt;Edit in VS Code&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the issue? I cannot add a button to the UI that only works for me!
However, I don’t &lt;em&gt;need&lt;/em&gt; to add a button to the UI:
as long as I expose the input path of the current page (Eleventy’s &lt;a href=&quot;https://www.11ty.dev/docs/data-eleventy-supplied/&quot;&gt;&lt;code&gt;page.inputPath&lt;/code&gt;&lt;/a&gt;) in the HTML somehow,
I can just add a bookmarklet to my own browser that just does:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;location.href = `vscode://file/Users/leaverou/Documents/lea.verou.me/${document.documentElement.dataset.inputpath}`;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact, here it is, ready to be dragged to the bookmarks bar:
&lt;a href=&quot;javascript:location.href = `vscode://file/Users/leaverou/Documents/lea.verou.me/${document.documentElement.dataset.inputpath}`&quot; class=&quot;cta&quot;&gt;Edit in VS Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, if only I could find a way to do the opposite: open the localhost URL that corresponds to the Markdown file I’m editing — and my workflow would be complete!&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-next%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/going-lean/#what%E2%80%99s-next%3F&quot;&gt;What’s next?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Obviously, there’s a lot of work left to do, and I bet people will find a lot more breakage than I had noticed.
I also have a backlog of blog post ideas that I can’t &lt;em&gt;wait&lt;/em&gt; to write about.&lt;/p&gt;
&lt;p&gt;But I’ve also been toying around with the idea of porting over my personal (non-tech) blog posts,
and keep them in an entirely separate section of the website.
I don’t like that my content is currently hostage to &lt;a href=&quot;https://pensieve.verou.me/&quot;&gt;Tumblr&lt;/a&gt; (2012-2013) and &lt;a href=&quot;https://leaverou.medium.com/&quot;&gt;Medium&lt;/a&gt; (2017-2021),
and would love to own it too,
though I’m a bit concerned that properly separating the two would take a lot of work.&lt;/p&gt;
&lt;p&gt;Anyhow, &#39;nuff said. Ship it, squirrel! 🚢🐿️&lt;/p&gt;
</content>
  </entry><entry>
    <title>Help Design the Inaugural State of HTML Survey!</title>
    <link href="https://lea.verou.me/blog/2023/design-state-of-html/"/>
    <updated>2023-07-26T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2023/design-state-of-html/</id>
    <content xml:lang="en" type="html">&lt;p&gt;You have likely participated in several &lt;a href=&quot;https://survey.devographics.com/en-US&quot;&gt;Devographics surveys&lt;/a&gt; before,
such as &lt;a href=&quot;https://stateofcss.com/en-us/&quot;&gt;State of CSS&lt;/a&gt;, or &lt;a href=&quot;https://stateofjs.com/en-us/&quot;&gt;State of JS&lt;/a&gt;.
These surveys have become the primary source of unbiased data for the practices of front-end developers today
(there is also the &lt;a href=&quot;https://almanac.httparchive.org/&quot;&gt;Web Almanac&lt;/a&gt; research, but because this studies what is actually used on the web, it takes a lot longer for changes in developer practices to propagate).&lt;/p&gt;
&lt;p&gt;You may remember that last summer, &lt;a href=&quot;https://lea.verou.me/blog/2022/07/help-design-the-state-of-css-survey-2022/&quot;&gt;Google sponsored me to be Survey Design Lead&lt;/a&gt; for &lt;a href=&quot;https://survey.devographics.com/en-US/survey/state-of-css/2022&quot;&gt;State of CSS 2022&lt;/a&gt;.
It went really well: we got 60% higher response rate than the year before, which gave browsers a lot of actionable data to prioritize their work.
The feedback from these surveys is a prime input into the &lt;a href=&quot;https://web.dev/interop-2023/&quot;&gt;Interop&lt;/a&gt; project,
where browsers collaborate to implement the most important features for developers interoperably.&lt;/p&gt;
&lt;p&gt;So this summer, Google trusted me with a much bigger project, a brand new survey: &lt;strong&gt;State of HTML&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;For some of you, a State of HTML survey may be the obvious next step, the remaining missing piece.
For others, the gap this is filling may not be as clear.
No, this is not about whether you prefer &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;!
It turns out, just like JavaScript and CSS, HTML is actually going through an evolution of its own!
New elements like &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/95&quot;&gt;&lt;code&gt;&amp;lt;selectmenu&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/116&quot;&gt;&lt;code&gt;&amp;lt;breadcrumb&amp;gt;&lt;/code&gt;&lt;/a&gt; are on the horizon, or cool new features like &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/138&quot;&gt;popovers&lt;/a&gt; and &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/100&quot;&gt;declarative Shadow DOM&lt;/a&gt;.
There are even JS APIs that are intrinsically tied to HTML, such as e.g. &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/98&quot;&gt;Imperative slot assignment&lt;/a&gt;
or DOM APIs like &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/153&quot;&gt;&lt;code&gt;input.showPicker()&lt;/code&gt;&lt;/a&gt;
Historically, these did not fit in any of these surveys.
&lt;a href=&quot;https://2022.stateofjs.com/en-US/features/browser-apis/#custom_elements&quot;&gt;Some&lt;/a&gt; were previously asked in &lt;a href=&quot;https://stateofjs.com/&quot;&gt;State of JS&lt;/a&gt;, &lt;a href=&quot;https://2021.stateofcss.com/en-US/features/accessibility/#tabindex&quot;&gt;some&lt;/a&gt; in &lt;a href=&quot;https://stateofcss.com/&quot;&gt;State of CSS&lt;/a&gt;, but it was always a bit awkward.
This new survey aims to fill these gaps, and finish surveying the core technologies of the Web, which are HTML, CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;Designing a brand new survey is a more daunting task than creating the new edition of an existing survey,
but also an exciting one, as comparability with the data from prior years is not a concern,
so there is a lot more freedom.&lt;/p&gt;
&lt;p&gt;Each &lt;em&gt;State of X&lt;/em&gt; survey consists of two parts:
&lt;dfn id=&quot;part1&quot;&gt;Part 1&lt;/dfn&gt; is a quiz: a long list of lesser-known and/or cutting-edge (or even upcoming) features where respondents select one of three options:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/design-state-of-html/images/feature-example.png&quot; alt=&quot;Screenshot of question saying &amp;quot;Custom Elements&amp;quot; with answers 🤷 Never heard of it/Not sure what it is, ✅ Know what it is, but haven&#39;t used it, 👍 I&#39;ve used it&quot; /&gt;
Starting with State of CSS 2022, respondents could also add freeform comments to provide more context about their answer through the little speech bubble icon.
One of my goals this year is to make this feature quicker to use for common types of feedback,
and to facilitate quantitative analysis of the responses (to some degree).&lt;/p&gt;
&lt;p&gt;At the end of the survey, respondents even get a knowledge score based on their answers,
which provides immediate value and motivation which reduces survey fatigue.&lt;/p&gt;
&lt;p&gt;&lt;dfn id=&quot;part2&quot;&gt;Part 2&lt;/dfn&gt; is more freeform, and usually includes multiple-choice questions about tools and resources, freeform questions about pain points, and of course, demographics.&lt;/p&gt;
&lt;p&gt;One of the novel things I tried in the 2022 State of CSS survey was to &lt;a href=&quot;https://lea.verou.me/blog/2022/07/help-design-the-state-of-css-survey-2022/&quot;&gt;involve the community in the design process&lt;/a&gt;,
with one-click voting for the features to ask about.
These were actually GitHub Issues with certain labels.
Two years prior I had released &lt;a href=&quot;https://lea.verou.me/blog/2020/07/releasing-mavoice-a-free-app-to-vote-on-repo-issues/&quot;&gt;MaVoice: an app to facilitate one click voting on Issues in &lt;em&gt;any&lt;/em&gt; repo&lt;/a&gt;,
and it &lt;a href=&quot;https://projects.verou.me/mavoice/?repo=devographics/surveys&amp;amp;labels=State%20of%20CSS%202022&quot;&gt;fit the bill perfectly here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This process worked exceptionally well for uncovering blind spots: it turned out there were a bunch of CSS features that would be good to ask about, but were simply not on our radar.
This is one of the reasons I strongly believe in transparency and co-design: &lt;strong&gt;no one human or small team can ever match the collective intelligence of the community&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Predictably, I plan to try the same approach for State of HTML.
Instead of using MaVoice, this year I’m trying &lt;a href=&quot;https://github.com/features/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;.
These allow one click voting from the GitHub interface itself,
without users having to authorize a separate app.
They also allow for more discussion, and do not clutter Issues, which are better suited for – well – actual issues.&lt;/p&gt;
&lt;p&gt;I have created a Discussions category for this and seeded it with 55 features spanning 12 focus areas (Forms &amp;amp; Editing, Making Web Components, Consuming Web Components, ARIA &amp;amp; Accessibility APIs, Embedding, Multimedia, Interactivity, Semantic HTML, Templating, Bridging the gap with native, Performance, Security &amp;amp; Privacy).
These initial ideas and focus areas came from a combination of personal research, as well as several brainstorming sessions with the &lt;a href=&quot;https://www.w3.org/community/webdx/&quot;&gt;WebDX CG&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;cta&quot; href=&quot;https://github.com/Devographics/surveys/discussions/categories/state-of-html-2023-features&quot;&gt;Vote on Features for State of HTML 2023!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/design-state-of-html/images/discussions.png&quot; alt=&quot;Screenshot of list of discussions&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You can also see a (read-only) summary of the proposed features with their metadata &lt;a href=&quot;https://coda.io/@leaverou/html-features&quot;&gt;here&lt;/a&gt;
though keep in mind that it’s manually updated so it may not not include new proposals.&lt;/p&gt;
&lt;p&gt;If you can think of features we missed, please &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/new?category=state-of-html-2023-features&quot;&gt;post a new Discussion in this category&lt;/a&gt;.
There is also a more general &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/categories/state-of-html-2023-design&quot;&gt;💬 State of HTML 2023 Design&lt;/a&gt; category,
for meta-discussions on Part 1 of the survey, and design brainstorming on Part 2.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;Note that &lt;strong&gt;the feedback period will be open for two weeks, until August 10th&lt;/strong&gt;.
After that point, feedback may still be taken into account, but it may be too late in the process to make a difference.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Some things to keep in mind when voting and generally participating in these discussions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The votes and proposals collected through this process are &lt;strong&gt;only one of the many variables&lt;/strong&gt; that feed into deciding what to ask about, and are &lt;strong&gt;non-binding&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;There are &lt;strong&gt;two goals&lt;/strong&gt; to balance here:
&lt;ol&gt;
&lt;li&gt;The survey needs to provide value to developers – and be fun to fill in!&lt;/li&gt;
&lt;li&gt;The survey needs to provide value to browsers, i.e. get them actionable feedback they can use to help prioritize what to work on. This is the main way that these surveys have impact on the web platform, and is at least as important as (1).&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;While the title is “State of HTML”, certain JS APIs or even CSS syntax is also relevant, especially those very close to HTML, such as DOM, ARIA, Web Components, PWAs etc.&lt;/li&gt;
&lt;li&gt;Stable features that have existed for a long time and are widely known are generally less likely to make it to the survey.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&quot;cta&quot; href=&quot;https://github.com/Devographics/surveys/discussions/categories/state-of-html-2023-features&quot;&gt;Now go vote! 🗳&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Numbers or Brackets for numeric questions?</title>
    <link href="https://lea.verou.me/blog/2023/numbers-vs-brackets/"/>
    <updated>2023-08-03T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2023/numbers-vs-brackets/</id>
    <content xml:lang="en" type="html">&lt;p&gt;As you may know, this summer I am leading the design of the inaugural &lt;a href=&quot;https://lea.verou.me/blog/2023/design-state-of-html/&quot;&gt;State of HTML&lt;/a&gt; survey.
Naturally, I am also exploring ways to improve both survey UX, as well as all questions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Shaine Madala&lt;/em&gt;, a data scientist working on the survey design team &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/166#discussioncomment-6625819&quot;&gt;proposed&lt;/a&gt; using numerical inputs instead of brackets for the income question.
While &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/166#discussioncomment-6626156&quot;&gt;I was initially against it&lt;/a&gt;,
I decided to explore this a bit further, which changed my opinion.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/images/income-brackets.png&quot; alt=&quot;Multiple choice question showing income brackets starting from $0-$10 up to &amp;quot;More than $200k&amp;quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The current income question, which uses 6 brackets plus a &quot;Not Applicable&quot; option.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There are actually four demographics questions in &lt;em&gt;State of X&lt;/em&gt; surveys where the answer is essentially a number, yet we ask respondents to select a bracket:
age, years of experience, company size, and income.&lt;/p&gt;
&lt;p&gt;The arguments for brackets are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They are more privacy preserving for sensitive questions (e.g. people may feel more comfortable sharing an income bracket than their actual income)&lt;/li&gt;
&lt;li&gt;They are more efficient to input (one click vs homing to keyboard and hitting several keystrokes).&lt;/li&gt;
&lt;li&gt;In some cases respondents may not know the precise number offhand (e.g. company size)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The arguments for numerical input are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Depending on the specifics, these can actually be faster to answer overall since they involve lower cognitive overhead (for known numbers).&lt;/li&gt;
&lt;li&gt;The brackets are applied at the analysis stage, so they can be designed to provide a better overview of the dataset&lt;/li&gt;
&lt;li&gt;More elaborate statistics can be computed (e.g. averages, medians, stdevs, the sky is the limit)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;which-one-is-faster%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#which-one-is-faster%3F&quot;&gt;Which one is faster?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can actually calculate this!
Average reading speed for non-fiction is around 240 wpm (= 250ms/word)  &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;
Therefore, we can approximate reading time for each question by multiplying number of brackets × average words per bracket (wpb) × 250ms.&lt;/p&gt;
&lt;p&gt;However, this assumes the respondent reads all brackets from top to bottom, but this is a rare worst case scenario.
Usually they stop reading once they find the bracket that matches their answer, and they may even skip some brackets, performing a sort of manual binary search.
We should probably &lt;strong&gt;halve these times&lt;/strong&gt; to get a more realistic estimate.&lt;/p&gt;
&lt;p&gt;Average typing speed is 200 cpm &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; (≈ 300ms/character).
This means we can approximate typing time for each question by multiplying the number of digits on average × 300ms.&lt;/p&gt;
&lt;p&gt;Let’s see how this works out for each question:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question&lt;/th&gt;
&lt;th&gt;Brackets&lt;/th&gt;
&lt;th&gt;WPB&lt;/th&gt;
&lt;th&gt;Reading time&lt;/th&gt;
&lt;th&gt;Avg Digits&lt;/th&gt;
&lt;th&gt;Typing time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Age&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4s&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0.6s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Years of Experience&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3s&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0.6s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Company size&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4.5s&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0.9s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Income&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.75s&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1.5s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, despite our initial intuition that brackets are faster, the time it takes to read each bracketed question &lt;strong&gt;vastly&lt;/strong&gt; outweighs typing time for all questions!&lt;/p&gt;
&lt;p&gt;Of course, this is a simplification.
There are models in &lt;a href=&quot;https://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction&quot;&gt;HCI&lt;/a&gt;, such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Keystroke-level_model&quot;&gt;KLM&lt;/a&gt; that can more accurately estimate the time it takes for certain UI flows.
We even taught some of these to MIT students in &lt;a href=&quot;http://web.mit.edu/6.813/www/sp18/classes/10-more-efficiency/#keystroke_level_model&quot;&gt;6.813&lt;/a&gt;,
as well as &lt;a href=&quot;https://designftw.mit.edu/&quot;&gt;its successor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, here are some of the variables we left out in our analysis above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When answering with numerical input, most users need to home from mouse to keyboard, which takes time (estimated as 0.4s in KLM)
and then focus the input so they can write in it, which takes an additional click (estimated as 0.2s in KLM)&lt;/li&gt;
&lt;li&gt;When answering with brackets, users need to move the mouse to the correct bracket, which takes time (KLM estimates all pointing tasks as a flat 1.1s, but this can be more accurately estimated using &lt;a href=&quot;https://en.wikipedia.org/wiki/Fitts%27s_law&quot;&gt;Fitts’ Law&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We are assuming that the decision is instantaneous, but doing the mental math of comparing the number in your head to the bracket numbers also takes time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, given the vast difference in times, I don’t think a more accurate model would change the conclusion much.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;Note that this analysis is based on a desktop interface, primarily because it’s easier (most of these models were developed before mobile was widespread, e.g. KLM was invented in 1978!)
Mobile would require a separate calculation taking into account the specifics of mobile interaction (e.g. the time it takes for the keyboard to pop up), though the same logic applies.
(thanks Tim for &lt;a href=&quot;https://twitter.com/gumnos/status/1687199431819763712&quot;&gt;this exellent question&lt;/a&gt;!)&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;what-about-sliders%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#what-about-sliders%3F&quot;&gt;What about sliders?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sliders are uncommon in surveys, and for good reason.
They offer the most benefit in UIs where changes to the value provide &lt;strong&gt;feedback&lt;/strong&gt;, and allow users to &lt;strong&gt;iteratively approach the desired value by reacting to this feedback&lt;/strong&gt;.
For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In a color picker, the user can zero in to the desired coordinates iteratively, by seeing the color change in real time&lt;/li&gt;
&lt;li&gt;In a video player, the user can drag the slider to the right time by getting feedback about video frames.&lt;/li&gt;
&lt;li&gt;In searches (e.g. for flights), dragging the slider updates the results in real time, allowing the user to gradually refine their search with suitable tradeoffs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In surveys, there is usually no feedback, which eliminates this core benefit.&lt;/p&gt;
&lt;p&gt;When the number is known in advance, sliders are usually a poor choice, except when we have very few numbers to choose among (e.g. a 1-5 rating)
and the slider UI makes it very clear where to click to select each of them, or we don’t much care about the number we select (e.g. search flights by departure time).&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;
None of our demographics questions falls in this category (unless bracketed, in which case why not use regular brackets?).&lt;/p&gt;
&lt;p&gt;There are several reasons for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is hard to predict where exactly to click to select the desired number. The denser the range, the harder it is.&lt;/li&gt;
&lt;li&gt;Even if you know where to click, it’s &lt;a href=&quot;https://www.nngroup.com/articles/gui-slider-controls/#:~:text=Imprecise%20Interactions&quot;&gt;hard to do so on mobile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dragging a slider on desktop is generally slower than typing the number outright.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%3Cinput-type%3Dnumber%3E-all-the-things%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#%3Cinput-type%3Dnumber%3E-all-the-things%3F&quot;&gt;&lt;code&gt;&amp;lt;input type=number&amp;gt;&lt;/code&gt; all the things?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Efficiency is not the only consideration here.
Privacy is a big one. These surveys are anonoymous, but respondents are still often concerned about entering data they consider sensitive.
Also, for the efficiency argument to hold true, the numerical answer needs to be top of mind, which is not always the case.&lt;/p&gt;
&lt;p&gt;I summarize my recommendations below.&lt;/p&gt;
&lt;h3 id=&quot;age&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#age&quot;&gt;Age&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a two digit number, that is always top of mind. &lt;strong&gt;Number input.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;years-of-experience&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#years-of-experience&quot;&gt;Years of experience&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a 1-2 digit number, and it is either top of mind, or very close to it. &lt;strong&gt;Number input.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;company-size&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#company-size&quot;&gt;Company size&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While most people know their rough company size, they very rarely would be able to provide an exact number without searching.
This is a good candidate for &lt;strong&gt;brackets&lt;/strong&gt;.
However, the number of brackets should be reduced from the current 9 (does the difference between 2-5 and 6-10 employees really matter?),
and their labels should be copyedited for scannability.&lt;/p&gt;
&lt;p&gt;We should also take existing data into account.
Looking at the &lt;a href=&quot;https://2022.stateofcss.com/en-US/demographics/#company_size&quot;&gt;State of CSS 2022 results for this question&lt;/a&gt;,
it appears that about one third of respondents work at companies with 2-100 people,
so we should probably not combine these 5 brackets into one, like I was planning to propose.
101 to 1000 employees is also the existing bracket with the most responses (15.1%), so we could narrow it a little,
shifting some of its respondents to the previous bracket.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/images/company-size-results.png&quot; alt=&quot;Chart of responses for company size&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Taking all these factors into consideration,
I proposed the following brackets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just me!&lt;/li&gt;
&lt;li&gt;Small (2 - 50)&lt;/li&gt;
&lt;li&gt;Medium (51 - 200)&lt;/li&gt;
&lt;li&gt;Large (201 - 1000)&lt;/li&gt;
&lt;li&gt;Very Large (1000+)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;income&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#income&quot;&gt;Income&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The question that started it all is unfortunately the hardest.&lt;/p&gt;
&lt;p&gt;Income is a number that people know (or can approximate).
It is faster to type, but only marginally (1.75s vs 1.5s).
We can however reduce the keystrokes further (from 1.5s to 0.6s on average) by asking people to enter thousands.&lt;/p&gt;
&lt;p&gt;The biggest concern here is &lt;strong&gt;privacy&lt;/strong&gt;.
Would people be comfortable sharing a more precise number?
We could mitigate this somewhat by explicitly instructing respondents to round it further, e.g. to the nearest multiple of 10:&lt;/p&gt;
&lt;blockquote class=&quot;question&quot;&gt;
&lt;strong&gt;What is your approximate yearly income (before taxes)?&lt;/strong&gt;
&lt;small&gt;
Feel free to round to the nearest multiple of 10 if you are not comfortable sharing an exact number.
If it varies by year, please enter an average.
&lt;/small&gt;
&lt;br /&gt;
&lt;label&gt;$&lt;input type=&quot;number&quot; size=&quot;3&quot; /&gt; ,000&lt;/label&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, this assumes that the privacy issues are about granularity, or about the number being too low (rounding to 10s could help with both).
However, &lt;a href=&quot;https://people.csail.mit.edu/karger/&quot;&gt;David Karger&lt;/a&gt; made an excellent point in &lt;a href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#comment-6246846722&quot;&gt;the comments&lt;/a&gt;,
that people at the higher income brackets may also be reluctant to share their income:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I don’t think that rounding off accomplishes anything. It’s not the least significant digit that people care about, but the most significant digit. This all depends on who they imagine will read the data of course. But consider some techy earnings, say 350k. That’s quite a generous salary and some people might be embarrassed to reveal their good fortune. Rounding it to 300k would still be embarrassing. On the other hand, a bracket like 150 to 500 would give them wiggle room to say that they’re earning a decent salary without revealing that they’re earning a fantastic one. I don’t have immediate insight into what brackets should be chosen to give people the cover they need to be truthful, but I think they will work better for this question.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another idea was to offer UI that lets users indicate that the number they have entered is actually an upper or lower bound.&lt;/p&gt;
&lt;blockquote class=&quot;question&quot;&gt;
&lt;strong&gt;What is your approximate yearly income (before taxes)?&lt;/strong&gt;
&lt;select&gt;
&lt;option selected=&quot;&quot;&gt;About&lt;/option&gt;
&lt;option&gt;Over&lt;/option&gt;
&lt;option&gt;Under&lt;/option&gt;
&lt;option&gt;Exactly&lt;/option&gt;
&lt;/select&gt;
&lt;label&gt;$&lt;input type=&quot;number&quot; size=&quot;3&quot; /&gt; ,000&lt;/label&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, a dropdown PLUS a number input is much slower than using brackets,
but if only a tiny fraction of respondents uses it, it does not affect the analysis of the average case.&lt;/p&gt;
&lt;p&gt;However, after careful consideration and input, both &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/177#discussioncomment-6634104&quot;&gt;qualitative&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/SachaGreif/status/1688447006459805696&quot;&gt;quantitative&lt;/a&gt;, it appears that privacy is a much bigger factor than I had previously realized.
Even though I was aware that people see income level as sensitive data (more so in certain cultures than others),
I had not fully realized the extent of this.
In the end, I think &lt;strong&gt;the additional privacy afforded by brackets far outweighs any argument for efficiency or data analysis convenience&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’m sure there is a lot of prior art on the general dilemma on numerical inputs vs brackets,
but I wanted to do some analysis with the specifics of this case and outline an analytical framework for answering these kinds of dilemmas.&lt;/p&gt;
&lt;p&gt;That said, if you know of any relevant prior art, please share it in the comments!
Same if you can spot any flaws in my analysis or recommendations.&lt;/p&gt;
&lt;p&gt;You could also &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/177&quot;&gt;check out the relevant discussion&lt;/a&gt; as there may be good points there.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S0749596X19300786&quot;&gt;https://www.sciencedirect.com/science/article/abs/pii/S0749596X19300786&lt;/a&gt; &lt;a href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.typingpal.com/en/blog/good-typing-speed&quot;&gt;https://www.typingpal.com/en/blog/good-typing-speed&lt;/a&gt; &lt;a href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.nngroup.com/articles/gui-slider-controls/&quot;&gt;Slider Design: Rules of Thumb, NNGroup, 2015&lt;/a&gt; &lt;a href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;KLM is a poor model for dragging tasks for two reasons:
First, it regards dragging as simply a combination of three actions: &lt;em&gt;button press, mouse move, button release&lt;/em&gt;.
But we all know from experience that dragging is much harder than simply pointing, as managing two tasks simultaneously (holding down the mouse button and moving the pointer) is almost always harder than doing them sequentially.
Second, it assumes that all pointing tasks have a fixed cost (1.1s), which may be acceptable for actual pointing tasks, but the inaccuracy is magnified for dragging tasks.
A lot of HCI literature (and even &lt;a href=&quot;https://www.nngroup.com/articles/gui-slider-controls/#:~:text=subjected%20to%20the-,steering%20law,-%2C%20which%20describes%20the&quot;&gt;NNGroup&lt;/a&gt;) refers to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Steering_law&quot;&gt;Steering Law&lt;/a&gt; to estimate the time it takes to use a slider,
however modern sliders (and scrollbars) do not require steering, as they are not constrained to a single axis:
once dragging is initiated, moving the pointer in any direction adjusts the slider, until the mouse button is released.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fitts%27s_law&quot;&gt;Fitts Law&lt;/a&gt; actually appears to be a better model here, and indeed there are &lt;a href=&quot;https://scholar.google.com/scholar?hl=en&amp;amp;as_sdt=0%2C22&amp;amp;q=fitts+law+dragging&quot;&gt;many papers&lt;/a&gt; extending it to dragging.
However, evaluating this research is out of scope for this post. &lt;a href=&quot;https://lea.verou.me/blog/2023/numbers-vs-brackets/#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry><entry>
    <title>State of HTML 2023 now open!</title>
    <link href="https://lea.verou.me/blog/2023/state-of-html-2023/"/>
    <updated>2023-09-22T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2023/state-of-html-2023/</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; the brand new State of HTML survey is finally open!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://survey.devographics.com/en-US/survey/state-of-html/2023/?source=leaverou&quot; class=&quot;cta&quot; target=&quot;_blank&quot;&gt;Take State of HTML 2023 Survey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Benefits to you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Survey results are &lt;strong&gt;used by browsers to prioritize roadmaps&lt;/strong&gt; — the reason Google is funding this.
Time spent thoughtfully filling them out is an investment that can come back to you tenfold
in the form of seeing features you care about implemented, browser incompatibilities being prioritized, and gaps in the platform being addressed.&lt;/li&gt;
&lt;li&gt;In addition to browsers, several standards groups are also using the results for prioritization and decision-making.&lt;/li&gt;
&lt;li&gt;Learn about new and upcoming features you may have missed; add features to your reading list and get a list of resources at the end!&lt;/li&gt;
&lt;li&gt;Get a personalized score and see how you compare to other respondents&lt;/li&gt;
&lt;li&gt;Learn about the latest trends in the ecosystem and what other developers are focusing on&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;info&quot;&gt;
&lt;p&gt;While the survey will be open for 3 weeks, responses entered &lt;strong&gt;within the first 9 days (until October 1st)&lt;/strong&gt; will have a much higher impact on the Web,
as preliminary data will be used to inform &lt;a href=&quot;https://web.dev/interop-2024-proposals/&quot;&gt;Interop 2024&lt;/a&gt; proposals.&lt;/p&gt;
&lt;/div&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/images/logo.png&quot; alt=&quot;State of HTML 2023 Logo&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;The State of HTML logo, designed by &lt;a href=&quot;https://chriskirknielsen.com/&quot;&gt;Chris Kirk-Nielsen&lt;/a&gt;, who I think surpassed himself with this one!&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;background&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/#background&quot;&gt;Background&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is likely the most ambitious &lt;a href=&quot;https://www.devographics.com/&quot;&gt;Devographics&lt;/a&gt; survey to date.
For &lt;a href=&quot;https://lea.verou.me/blog/2023/design-state-of-html/&quot;&gt;the past couple of months&lt;/a&gt;, I’ve been hard at work leading a small product team spread across three continents (2am to 8am became my second work shift 😅).
We embarked on this mission with some uncertainty about whether there were &lt;em&gt;enough&lt;/em&gt; features for a State of HTML survey,
but quickly found ourselves with the opposite problem:
there were too many, all with good reasons for inclusion!
To help weigh the tradeoffs and decide what makes the cut we consulted both &lt;a href=&quot;https://github.com/Devographics/surveys/discussions/categories/state-of-html-2023-features?discussions_q=is%3Aopen+category%3A%22State+of+HTML+2023+Features%22+sort%3Atop&quot;&gt;the developer community&lt;/a&gt;,
as well as stakeholders across browsers, standards groups, community groups, and more.&lt;/p&gt;
&lt;p&gt;We even designed new UI controls to facilitate collecting the types of complex data that were needed without making the questions too taxing,
and did original UX research to validate them.
Once the dust settles, I plan to write separate blog posts about some of these.&lt;/p&gt;
&lt;h2 id=&quot;faq&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;can-i-edit-my-responses%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/#can-i-edit-my-responses%3F&quot;&gt;Can I edit my responses?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Absolutely!&lt;/strong&gt; Do not worry about filling it out perfectly in one go.
If you create an account, you can edit your responses for the whole period the survey is open, and even split filling it out across multiple devices (e.g. start on your phone, then fill out some on your desktop, etc.)
Even if you’re filling it out anonymously, you can still edit responses on your device for a while.
You could even start anonymously and create an account later, and your responses will be preserved (the only issue is filling it out anonymously, then logging in with an existing account).&lt;/p&gt;
&lt;p&gt;So, perhaps the call to action above should be…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://survey.devographics.com/en-US/survey/state-of-html/2023/?source=leaverou&quot; class=&quot;cta&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Start&lt;/em&gt; State of HTML 2023 Survey&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;why-are-there-js-questions-in-an-html-survey%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/#why-are-there-js-questions-in-an-html-survey%3F&quot;&gt;Why are there JS questions in an HTML survey?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For the same reason there are JS APIs in the &lt;a href=&quot;https://html.spec.whatwg.org/&quot;&gt;HTML standard&lt;/a&gt;:
many JS APIs are intrinsically related to HTML.
We mainly included JS APIs in the following areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APIs used to manipulate HTML dynamically (DOM, form validation, etc.)&lt;/li&gt;
&lt;li&gt;Web Components APIs, used to create custom HTML elements&lt;/li&gt;
&lt;li&gt;APIs used to create web apps that feel like native apps (e.g. Service Workers, Web App Manifest, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you don’t write any JS, we absolutely still want to hear from you!
In fact, I would encourage you &lt;strong&gt;even more strongly&lt;/strong&gt; to fill out the survey: we need to hear from folks who don’t write JS, as they are often underrepresented.
Please feel free to skip any JS-related questions (all questions are optional anyway) or select that you have never heard these features.
There is a question at the end, where you can select that you only write HTML/CSS:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/images/html-js-balance.png&quot; alt=&quot;Question about HTML/CSS and JS balance&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;is-the-survey-only-available-in-english%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/#is-the-survey-only-available-in-english%3F&quot;&gt;Is the survey only available in English?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Absolutely not! Localization has been an integral part of these surveys since the beginning.
Fun fact: Nobody in the core &lt;a href=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/#acknowledgements&quot;&gt;State of HTML team&lt;/a&gt; is a native English speaker.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/images/languages.png&quot; alt=&quot;Screenshot showing dozens of languages&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;Each survey gets (at least partially) translated to over 30 languages.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;However, since translations are a community effort, they are not necessarily complete, especially in the beginning.
If you are a native speaker of a language that is not yet complete, please consider &lt;a href=&quot;https://github.com/Devographics/locale-en-US&quot;&gt;helping out&lt;/a&gt;!&lt;/p&gt;
&lt;h3 id=&quot;what-does-my-score-mean%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/#what-does-my-score-mean%3F&quot;&gt;What does my score mean?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Previous surveys reported score as a percentage: “You have heard or used X out of Y features mentioned in the survey”.
This one did too at first:&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/images/my-score-old.png&quot; alt=&quot;80% score, 105/131 heard or used&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;This was my own score when the survey first launched, and I &lt;em&gt;created&lt;/em&gt; the darn survey 😅
Our engineer, &lt;a href=&quot;https://sachagreif.com/&quot;&gt;Sacha&lt;/a&gt; who is also the founder of &lt;a href=&quot;https://www.devographics.com/&quot;&gt;Devographics&lt;/a&gt; got 19%!&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These were a lot lower for this survey, for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It asks about &lt;em&gt;a lot&lt;/em&gt; of cutting edge features, more than the other surveys.
As I mentioned above, we had a lot of difficult tradeoffs to make,
and had to cut a ton of features that were otherwise a great fit.
We err’ed on the side of more cutting edge features, as those are the areas the survey can help make the most difference in the ecosystem.&lt;/li&gt;
&lt;li&gt;To save on space, and be able to ask about more features, we used a new compact format for some of the more stable features, which only asks about usage, not awareness.
Here is an example from the first section of the survey (Forms):
&lt;img src=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/images/form-validation.png&quot; alt=&quot;Form validation question screenshot&quot; /&gt;
However, this means that if you have never used a feature, it does not count towards your score, even if you have been aware of it for years.
It therefore felt unfair to many to report that you’ve “heard or used” X% of features, when there was no way to express that you have heard 89 out of 131 of them!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To address this, we changed the score to be a sum of points, a bit like a video game:
each used feature is worth 10 points, each known feature is worth 5 points.&lt;/p&gt;
&lt;p&gt;Since the new score is harder to interpret by itself and only makes sense in comparison to others,
we also show your rank among other participants, to make this easier.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/images/my-score-new.png&quot; alt=&quot;920 pts score, used 79 features out of 131, heard of 26 more&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;My score after the change.
If you have already taken the survey, you can just revisit it (with the same device &amp;amp; browser if filled it in anonymously)
and go straight to the finish page to see your new score and ranking!&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;i-found-a-bug%2C-what-should-i-do%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/#i-found-a-bug%2C-what-should-i-do%3F&quot;&gt;I found a bug, what should I do?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Please file an issue so we can fix it!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Devographics/surveys/issues/new&quot;&gt;File content issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Devographics/Monorepo/issues/new&quot;&gt;File technical issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;acknowledgements&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/#acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This survey would not have been possible without the hard work of many people.
Besides myself (Lea Verou), this includes the rest of the team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Engineering team: Sacha Greif, Eric Burel&lt;/li&gt;
&lt;li&gt;UX research &amp;amp; data science team: Shaine Rosewel Matala, Michael Quiapos, Gio Vernell Quiogue&lt;/li&gt;
&lt;li&gt;Our logo designer, &lt;a href=&quot;https://chriskirknielsen.com/&quot;&gt;Chris Kirk-Nielsen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And several volunteers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tink.uk/&quot;&gt;Léonie Watson&lt;/a&gt; for accessibility feedback&lt;/li&gt;
&lt;li&gt;Our usability testing participants&lt;/li&gt;
&lt;li&gt;…and all folks who provided early feedback throuhgout the process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last but not least, &lt;strong&gt;Kadir Topal&lt;/strong&gt; made the survey possible in the first place, by proposing it and securing funding from Google.&lt;/p&gt;
&lt;p&gt;Thank you all! 🙏🏼&lt;/p&gt;
&lt;h2 id=&quot;press-coverage-(selected)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/#press-coverage-(selected)&quot;&gt;Press coverage (selected)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=sPWlakxKRm8&quot;&gt;Turns out I know less about HTML than I thought! 😅 - Kevin Powell&lt;/a&gt; (Video)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/dianale/are-you-an-html-expert-find-out-with-the-new-state-of-html-2023-survey-58g4&quot;&gt;Are you an HTML expert? Find out with the new State of HTML 2023 survey - dev.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.codepen.io/2023/10/02/chris-corner-things-i-totally-didnt-know-about-that-i-learned-from-taking-the-state-of-html-2023-survey/&quot;&gt;Chris’ Corner: Things I Totally Didn’t Know About That I Learned From Taking the State of HTML 2023 Survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://frontendfoc.us/issues/611&quot;&gt;Frontend Focus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://css-weekly.com/issue-562/&quot;&gt;CSS Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thathtml.blog/2023/09/the-state-of-html/&quot;&gt;The HTML Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://survey.devographics.com/en-US/survey/state-of-html/2023/?source=leaverou&quot; class=&quot;cta&quot; target=&quot;_blank&quot;&gt;You still haven’t started the State of HTML 2023 survey?!&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Minimalist Affordances: Making the right tradeoffs</title>
    <link href="https://lea.verou.me/blog/2023/minimalist-affordances/"/>
    <updated>2023-11-02T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2023/minimalist-affordances/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Usability and aesthetics &lt;em&gt;usually&lt;/em&gt; go hand in hand.
In fact, there is even what we call the &lt;a href=&quot;https://www.nngroup.com/articles/aesthetic-usability-effect/&quot;&gt;&lt;em&gt;“Aesthetic Usability Effect”&lt;/em&gt;&lt;/a&gt;:
users perceive beautiful interfaces as easier to use and cut them more slack when it comes to minor usability issues.&lt;/p&gt;
&lt;p&gt;Unfortunately, sometimes usability and aesthetics can be at odds, also known as “form over function”.&lt;/p&gt;
&lt;h2 id=&quot;simplicity%2C-and-knowing-when-to-stop&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/#simplicity%2C-and-knowing-when-to-stop&quot;&gt;Simplicity, and knowing when to stop&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A common incarnation of form-over-function, is when designers start identifying signifiers and affordances as noise to be eliminated,
sacrificing a great deal of learnability for an — often marginal — improvement in aesthetics.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nngroup.com/articles/aesthetic-minimalist-design/&quot;&gt;Aesthetic and Minimalist Design&lt;/a&gt; is one of the Nielsen/Norman core usability heuristics (and all other heuristics taxonomies have something similar).
More poetically, Antoine de Saint-Exupéry said &lt;em&gt;“Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away”&lt;/em&gt;.
However, this is one of those cases where everyone agrees with the theory, but the devil is in the details (though user testing can do wonders for consensus).&lt;/p&gt;
&lt;p&gt;Case in point: The new Github comment UI is &lt;em&gt;beautiful&lt;/em&gt;.
Look at how the text area smoothly blends with the tab, creating an irregular and visually interesting shape!&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/images/new-comment.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;The new GitHub commenting UI, unfocused.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/images/new-comment-focused.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;The new GitHub commenting UI, focused. Am I the only one that expected the focus outline to also follow the irregular shape?&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;However, I cannot for the life of me internalize that this is a text field that I can type in.
Even after using it over a dozen times, I still have to do a double take every time (&lt;em&gt;“Where is the comment field?!”&lt;/em&gt;, &lt;em&gt;“Why is this read-only?”&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;For comparison, this was the old UI:&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/images/old-comment.png&quot; alt=&quot;Screenshot&quot; /&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/images/old-comment-focused.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
The old GitHub commenting UI, with and without focus.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;While definitely more cluttered, its main UI elements were much more recognizable:
there is a text field, indicated by the rounded rectangle, and tabs, indicated by the light gray border around the active tab.
By merging the two, both affordances are watered down to the point of being unrecognizable.&lt;/p&gt;
&lt;p&gt;Yes, there was more visual clutter, not all of which serves a purpose.
A skilled designer could probably eliminate the rounded rectangle around the entire area without impacting usability.
But the current design goes too far, and throws the baby out with the bathwater.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/images/twitter.png&quot; alt=&quot;Screenshot of Twitter’s new tweet modal&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;Twitter seems to be trying something similar, but since there is no irregular shape,
the text field affordance is not entirely lost.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;the-ever-evolving-vocabulary-of-user-interaction&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/#the-ever-evolving-vocabulary-of-user-interaction&quot;&gt;The ever-evolving vocabulary of user interaction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Communication is all about mutually understood conventions: &lt;a href=&quot;https://www.babbel.com/en/magazine/english-errors-that-are-now-accepted-as-correct&quot;&gt;a sufficiently widespread grammatical mistake eventually becomes part of the language&lt;/a&gt;.
In the language of user interfaces, affordances and signifiers are the vocabulary, and the same principles apply.
Learnability is not an intrinsic property of a UI; it is a function of the context (cultural and otherwise) in which it is used.&lt;/p&gt;
&lt;p&gt;Many affordances and signifiers use metaphors from the physical world to communicate what a user can do.
For example a button that looks raised reminds us of physical buttons.
Tabs are a metaphor for the tabs in a binder.
Others are entirely arbitrary and acquire meaning through learning, such as link underlines or the “hamburger” menu icon.&lt;/p&gt;
&lt;p&gt;We see the same pattern in language: some words are onomatopoeic, such as “buzz” or “meow”, while others are entirely learned, such as “dog” or “cat”.
Similarly, writing systems began as pictograms, but evolved to be more abstract and symbolic.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/images/alphabet-evolution.png&quot; alt=&quot;Egyptian pictograms to Greek letters&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;Insight and picture from &lt;a href=&quot;https://ux.stackexchange.com/a/56896/11761&quot;&gt;https://ux.stackexchange.com/a/56896/11761&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At first, the symbols are direct (if cartoony) representations. Then they slowly lose their extrinsic meaning and become defined more by our conventions of using them (our shared language) and the references to outside concepts disappear.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s worth reading the whole post if you have time.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;UI evolution is rife with patterns that began as obscure and ended up as obvious.
In other words, &lt;a href=&quot;https://www.nngroup.com/articles/consistency-and-standards/&quot;&gt;external consistency&lt;/a&gt; improved,
not because the UIs changed, but because the environment did.&lt;/p&gt;
&lt;p&gt;Some examples you are undoubtedly familiar with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Underlines have always been a strong affordance for links (to the point that &lt;a href=&quot;https://www.nngroup.com/articles/guidelines-for-visualizing-links/#:~:text=Don%27t%20underline%20any%20text%20that%27s%20not%20a%20link&quot;&gt;using them for anything else is an antipattern&lt;/a&gt;).
However, users evolved to perceive weaker signals as links, such as different colors, especially &lt;a href=&quot;https://www.nngroup.com/articles/guidelines-for-visualizing-links/#:~:text=Never%20show%20text%20in%20your%20chosen%20link%20colors%20unless%20it%27s%20a%20link&quot;&gt;if used consistently&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Clicking a website logo to go to the homepage was once an obscure hidden interaction, almost an easter egg.
It is now so conventional that &lt;a href=&quot;https://www.nngroup.com/articles/homepage-links/#:~:text=Website%20logos%20should%20link%20to%20the%20homepage&quot;&gt;a logo that does nothing when clicked is considered a usability issue&lt;/a&gt; (though having separate Home links is &lt;a href=&quot;https://www.nngroup.com/articles/homepage-links/&quot;&gt;still the recommendation&lt;/a&gt;, &lt;a href=&quot;https://ux.stackexchange.com/a/81736/11761&quot;&gt;28 years after the pattern was introduced&lt;/a&gt;!).&lt;/li&gt;
&lt;li&gt;Buttons used to need a 3D appearance to be perceived as such.
We gradually evolved such that any rectangle around text is perceived as a button, even if it is entirely flat (though research shows that &lt;a href=&quot;https://www.nngroup.com/articles/flat-ui-less-attention-cause-uncertainty/&quot;&gt;they&lt;/a&gt; &lt;a href=&quot;https://www.nngroup.com/articles/clickable-elements/&quot;&gt;are still&lt;/a&gt; &lt;a href=&quot;https://www.nngroup.com/articles/flat-design/&quot;&gt;less&lt;/a&gt; &lt;a href=&quot;https://www.nngroup.com/articles/flat-design-long-exposure/&quot;&gt;effective&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Could it be that the new GitHub comment UI is the beginning of a new convention?
It’s possible, but the odds are slim.
For new conventions to become established, they need to be widespread.
Links, buttons, website logos are present on any website, so users get plenty of exposure to any evolution in their design.
Similarly, multiline text fields and tabs are very commonplace UI elements. However, &lt;em&gt;their combination&lt;/em&gt; is far less common.
Even if every tabbed text field on the Web begun using the exact same design, the average user would still not get enough exposure to internalize it.&lt;/p&gt;
&lt;h2 id=&quot;ux-stockholm-syndrome&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/#ux-stockholm-syndrome&quot;&gt;UX Stockholm Syndrome&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is entirely possible that I’m overestimating the impact of this on GitHub users.
After all, I have not done user testing on it, so I’m basing my opinion on my own experience, and on what I’ve learned about usability spending the better part of the last decade at MIT &lt;a href=&quot;https://designftw.mit.edu/&quot;&gt;teaching it&lt;/a&gt; and doing a PhD on it.&lt;/p&gt;
&lt;p&gt;I wondered if it could be an A/B test, so I asked &lt;a href=&quot;https://svgees.us/&quot;&gt;Chris&lt;/a&gt; to show me what UI he was seeing.
He was also seeing the new UI, but interestingly he expressed frustration about being unable to tell where the text field actually is, and where he can type even before I told him about this article.
Whether or not it’s not an A/B test, I’m really hoping that GitHub is collecting enough metrics so they can evaluate the impact of this design on user experience at scale.&lt;/p&gt;
&lt;p&gt;As for me, I take comfort in knowing that when there is no alternative, users can eventually adapt to any UI, no matter how poor, so I &lt;em&gt;will&lt;/em&gt; at some point get used to it.
Airplane cockpits are the canonical example here, but this is commonly seen in UIs of a lot of enterprise software (though &lt;a href=&quot;https://uxmag.com/articles/the-future-of-enterprise-design-is-consumer-grade-ux&quot;&gt;the wind of change is blowing straight into the face of enterprise UX&lt;/a&gt;).&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;Of course even with heavy training, poor UIs can still lead to disastrous consequences,
such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Helios_Airways_Flight_522&quot;&gt;plane crashes&lt;/a&gt;,
&lt;a href=&quot;https://www.nngroup.com/articles/medical-usability/&quot;&gt;hospital deaths&lt;/a&gt; or &lt;a href=&quot;https://features.propublica.org/navy-uss-mccain-crash/navy-installed-touch-screen-steering-ten-sailors-paid-with-their-lives/&quot;&gt;military accidents&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Our life is rife with examples of poor usability, to the point where if something is easy to use, people are often surprised.
There is even what some of us call “&lt;a href=&quot;https://www.ianvoyce.com/rant/usability/2015/09/17/bad-ux-and-stockholm-syndrome.html&quot;&gt;UX Stockholm Syndrome&lt;/a&gt;”: after very prolonged exposure to a poor interface, users start believing that it is easy to use, and even advocate against improvements.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Curse_of_knowledge&quot;&gt;curse of knowledge&lt;/a&gt; makes them forget how difficult it was to learn, and the prolonged exposure can even make them efficient at using it.&lt;/p&gt;
&lt;p&gt;Take &lt;strong&gt;hex colors&lt;/strong&gt; for example. Quick, what color is &lt;code&gt;#7A6652&lt;/code&gt;?
Learning to mentally translate between hex color notation and actual visible colors takes years of practice.
Hex notation was never designed for humans; it was designed for machines, as a compact way to represent the 3 bytes of RGB channels of earlier screens.
&lt;strong&gt;Humans do not think of colors as combinations of lights.&lt;/strong&gt;
It’s not logical that to make brown you combine some red, a bit less green, and even less blue.
That is neither how we think about color, nor does it relate to any of our real-world color mixing experiences.
There are several color models with a more human-centered design, such as &lt;a href=&quot;https://en.wikipedia.org/wiki/HSL_and_HSV&quot;&gt;HSL&lt;/a&gt;, &lt;a href=&quot;https://lea.verou.me/blog/2020/04/lch-colors-in-css-what-why-and-how&quot;&gt;LCH&lt;/a&gt;, &lt;a href=&quot;https://www.smashingmagazine.com/2023/08/oklch-color-spaces-gamuts-css/&quot;&gt;OKLCH&lt;/a&gt;.
Their coordinates are designed around how humans describe colors,
such as hue for the main color (e.g. red, yellow, green, etc.), chroma/saturation to specify how intense the color is (e.g. 0 would be gray), and lightness to specify how light it is (e.g. white would be 100% and black would be 0%).
Yet, it’s common to see the kinds of people who have had very prolonged exposure to this notation (e.g. web designers) not only prefer it, but even try to sing its praises!&lt;/p&gt;
&lt;p&gt;Another example, entirely outside of software, is music notation.
You’ve likely learned it as a child, so it’s hard to remember what the learning experience was like,
and if you regularly read music sheets, you may even believe it’s easy.
But if we try to step back and examine it objectively, it’s highly unintuitive.&lt;/p&gt;
&lt;p&gt;Expanding on this would take a whole other article, but I will just give one example.
Take a look at the symbols for notes and pauses:&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/images/notes.png&quot; alt=&quot;Music notes and rests&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;Image courtesy of &lt;a href=&quot;https://www.musicnotes.com/blog/how-to-read-sheet-music/&quot;&gt;Musicnotes&lt;/a&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There is not only an ordering here, but successive symbols even have a fixed ratio of 2.
Yet &lt;em&gt;absolutely nothing&lt;/em&gt; in their representation signifies this.
&lt;strong&gt;Nothing in the depiction of ♩ indicates that it is longer than ♪, let alone that it is &lt;em&gt;double&lt;/em&gt; the length.&lt;/strong&gt;
You just have to learn it.
Heck, there’s nothing even indicating whether a symbol produces sound or not!
Demanding a lot of &lt;a href=&quot;https://medium.com/@matthewraychiang/doet-knowledge-in-the-head-and-in-the-world-64f901627eb3&quot;&gt;knowledge in the head&lt;/a&gt;
is not a problem in itself; it’s a common tradeoff when efficiency is higher priority than learnability.
E.g. the alphabet is also a set of arbitrary symbols we need to learn to be able to form words.
But even the best tradeoff is worse than none, aka having your cake and eating it too beats both options.
Was a tradeoff really necessary here?
Was there really no possible depiction of these symbols that could communicate their purpose, order, and ratios? Or at least a notation that was &lt;a href=&quot;https://medium.com/@matthewraychiang/doet-knowledge-in-the-head-and-in-the-world-64f901627eb3&quot;&gt;memorable by association rather than straight memorization&lt;/a&gt;?&lt;/p&gt;
&lt;h2 id=&quot;update%3A-github%E2%80%99s-response-(nov-20th%2C-2023)&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/#update%3A-github%E2%80%99s-response-(nov-20th%2C-2023)&quot;&gt;Update: GitHub’s response (Nov 20th, 2023)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This post resonated a lot with people on social media.
Here are some selected responses:&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Selected Social Media Replies&lt;/summary&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jitl/status/1720272221149581493&quot;&gt;https://twitter.com/jitl/status/1720272221149581493&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/noeldevelops/status/1724509073964487056&quot;&gt;https://twitter.com/noeldevelops/status/1724509073964487056&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/zisiszikos/status/1720157900620939519&quot;&gt;https://twitter.com/zisiszikos/status/1720157900620939519&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/manuelmeister/status/1720147908731818249&quot;&gt;https://twitter.com/manuelmeister/status/1720147908731818249&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;@leaverou @github I really thought the page was broken or incompletely loaded until I saw it enough times to try typing in it. It’s emotionally uncomfortable to type in, fighting how it looks vs. what I know it is.
— &lt;a href=&quot;https://front-end.social/@hazula@hachyderm.io&quot;&gt;Benjamin @hazula@hachyderm.io&lt;/a&gt;, &lt;a href=&quot;https://front-end.social/@hazula@hachyderm.io/111345248877999709&quot;&gt;Nov 3rd, 2023&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;p&gt;The &lt;a href=&quot;https://primer.style/&quot;&gt;Primer team at GitHub&lt;/a&gt; reached out to me to discuss the issue, and I was happy to see that they were very receptive to feedback.
They then iterated, and came up with a new design that communicates purpose much better, even if less minimalistic:&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/images/new-comment-fixed.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2023/minimalist-affordances/images/fixed-comment.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
The textarea is now clearly outlined, both before and after focus, clearly indicating that this is a multiline text field.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/natalyathree/status/1729161513636884499&quot;&gt;https://twitter.com/natalyathree/status/1729161513636884499&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;@leaverou @github thank you for this post. We have shipped improvements to make it easier again to identify the textarea and distinguish between Write and Preview.
— &lt;a href=&quot;https://front-end.social/@dipree@mastodon.social&quot;&gt;Daniel Adams (@dipree@mastodon.social)&lt;/a&gt;, &lt;a href=&quot;https://front-end.social/@dipree@mastodon.social/111444773791934052&quot;&gt;Nov 20th, 2023&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Always great to see an org that is receptive to feedback!&lt;/p&gt;
</content>
  </entry><entry>
    <title>Eigensolutions: composability as the antidote to overfit</title>
    <link href="https://lea.verou.me/blog/2023/eigensolutions/"/>
    <updated>2023-12-19T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2023/eigensolutions/</id>
    <content xml:lang="en" type="html">&lt;div class=&quot;nutshell&quot;&gt;
&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt;
&lt;a href=&quot;https://bootcamp.uxdesign.cc/overfitting-and-the-problem-with-use-cases-337d9f4bf4d7&quot;&gt;&lt;em&gt;Overfitting&lt;/em&gt;&lt;/a&gt; happens when solutions don’t generalize sufficiently and is a hallmark of poor design.
&lt;em&gt;Eigensolutions&lt;/em&gt; are the opposite: solutions that generalize so much they expose links between seemingly unrelated use cases.
Designing eigensolutions takes a mindset shift from linear design to &lt;em&gt;composability&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;creator-tools-are-not-uber-or-facebook&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#creator-tools-are-not-uber-or-facebook&quot;&gt;Creator tools are not Uber or Facebook&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In product literature, the design process looks a bit like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/eigensolutions/images/design-linear.png&quot; alt=&quot;Pain point -&amp;gt; Use cases -&amp;gt; Ideas -&amp;gt; Solution&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This works great with the kinds of transactional processes (marketplaces, social media, search engines, etc) most product literature centers around,
but can fall apart when designing creative tools (developer tools, no-code tools, design tools, languages, APIs etc.),
as there are fundamental differences&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; between the two:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;transactional processes&lt;/strong&gt;, users have clearly defined goals, and the task is highly specialized
(e.g. &lt;em&gt;“Go to work”&lt;/em&gt;, &lt;em&gt;“Order takeout”&lt;/em&gt;, &lt;em&gt;“Find accommodation for my upcoming trip”&lt;/em&gt;) and can often be modeled as a linear process.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;creator tools&lt;/strong&gt;, use cases vary &lt;em&gt;wildly&lt;/em&gt;, goals are neither linear, nor clearly defined, and may even change throughout the session.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creator tools typically ship knowingly addressing only a percentage of their key use cases — otherwise they would never ship at all.
It’s all about balancing UX, use case coverage, and design/implementation effort.&lt;/p&gt;
&lt;h3 id=&quot;floor-ceiling&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#floor-ceiling&quot;&gt;Evaluating user experience: Floor and ceiling&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In &lt;a href=&quot;https://en.wikipedia.org/wiki/End-user_development&quot;&gt;end-user programming&lt;/a&gt; we talk about the &lt;em&gt;floor&lt;/em&gt; and the &lt;em&gt;ceiling&lt;/em&gt; of a tool:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;floor&lt;/strong&gt; is the minimum level of knowledge users need to create something useful.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;ceiling&lt;/strong&gt; refers to the extent of what can be created.&lt;/li&gt;
&lt;/ul&gt;
&lt;aside&gt;
&lt;p&gt;&lt;a href=&quot;https://mres.medium.com/designing-for-wide-walls-323bdb4e7277&quot;&gt;Some&lt;/a&gt; people also talk about &lt;a href=&quot;https://johnumekubo.com/2017/11/09/low-floors-high-ceilings-and-wide-walls/&quot;&gt;&lt;em&gt;wide walls&lt;/em&gt;&lt;/a&gt;: the range of things that can be made (i.e. how domain specific the tool is).&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;I think that vocabulary generalizes more broadly to creator tools, and can be a useful UX metric.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/eigensolutions/images/floor-ceiling.png&quot; alt=&quot;A 2x2 chart of various creator tools and where they stand on the floor/ceiling grid&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;em&gt;Programming languages&lt;/em&gt; tend to have high ceiling, but also a high floor: You make anything, but it requires months or years of training,
whereas &lt;em&gt;domain specific GUI builders&lt;/em&gt; like Google Forms have a low floor, but also a low ceiling: Anyone can start using them with no training, but you can also only make very specific kinds of things with them.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A product that combines a low floor with a high ceiling is the unicorn of creator tools.
Therefore, most product work in creator tools centers around either &lt;strong&gt;reducing the floor&lt;/strong&gt; (making things &lt;em&gt;easier&lt;/em&gt;), or &lt;strong&gt;increasing the ceiling&lt;/strong&gt; (making things &lt;em&gt;possible&lt;/em&gt;).
Which one of the two takes priority depends on various factors (user research, product philosophy, strategy etc.), and could differ by product area or even by feature.&lt;/p&gt;
&lt;h3 id=&quot;use-case-backlog&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#use-case-backlog&quot;&gt;Evaluating use case coverage: The Use Case Backlog&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In creator tools, use cases tend to accumulate at a much faster rate than they can be addressed, especially in the beginning.
Therefore we end up with what I call a &lt;em&gt;“use case backlog”&lt;/em&gt;: a list of use cases that are within scope, but we cannot yet address
due to lack of resources, good solutions, or both.
The more general purpose and the more ambitious the tool is, the higher the rate of accumulation, since the pool of use cases is naturally larger.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/eigensolutions/images/use-case-backlog.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;Pain points get processed into use cases, which accumulate in the use case backlog&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Unlike the linear design process of transactional processes,
the design process for creator tools often consists of &lt;em&gt;matching&lt;/em&gt; use cases to solutions, which can happen before, during, or after idea conception.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;A product may include &lt;em&gt;both&lt;/em&gt; transactional processes and creator tools,
e.g. Instagram is a social media platform (transactional) with a photo editor (creator tool).
Although these tend to be more domain-specific creator tools, which are less good examples for the concepts discussed here.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;eigensolutions&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#eigensolutions&quot;&gt;From overfitting to eigensolutions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://shishir.io/&quot;&gt;Shishir Mehrotra&lt;/a&gt; (of &lt;a href=&quot;https://coda.io/&quot;&gt;Coda&lt;/a&gt;) wrote about the importance of “&lt;a href=&quot;https://coda.io/@shishir/eigenquestions-the-art-of-framing-problems&quot;&gt;&lt;em&gt;Eigenquestions&lt;/em&gt;&lt;/a&gt;” when framing problems, a term he coined, inspired from his math background:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the eigenquestion is the question where, if answered, it likely answers the subsequent questions as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This inspired me to name a symmetrical concept I’ve been pondering for a while: &lt;em&gt;Eigensolutions&lt;/em&gt;.
&lt;strong&gt;The &lt;em&gt;eigensolution&lt;/em&gt; is a solution that addresses several key use cases, that previously appeared unrelated.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An eigensolution is the polar opposite of &lt;a href=&quot;https://bootcamp.uxdesign.cc/overfitting-and-the-problem-with-use-cases-337d9f4bf4d7&quot;&gt;overfitting&lt;/a&gt;.
Overfitting happens when the driving use cases behind a solution are insufficiently diverse,
so the solution ends up being so specific it cannot even generalize to use cases that are clearly related.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Overfitting is one of the worst things that can happen during the design process.&lt;/strong&gt;
It is a hallmark of poor design that leads to feature creep and poor user experiences.
It forces product teams to keep adding more features to address the use cases that were not initially addressed.
The result is UI clutter and user confusion, as from the user’s perspective, there are now multiple distinct features that solve subtly different problems.&lt;/p&gt;
&lt;h2 id=&quot;composability&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#composability&quot;&gt;A mindset shift to composability&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is all nice and dandy, but how do we design and ship eigensolutions?
Do we just sit around waiting for inspiration to strike?
Well, we &lt;em&gt;could&lt;/em&gt;, but it would be a pretty poor use of resources. :)&lt;/p&gt;
&lt;p&gt;Instead, it takes a &lt;em&gt;mindset shift&lt;/em&gt;, from the linear &lt;em&gt;Use case → Idea → Solution&lt;/em&gt; process to &lt;strong&gt;composability&lt;/strong&gt;.
Rather than designing a solution to address only our driving use cases,
step back and ask yourself:
can we design a solution as a &lt;strong&gt;composition&lt;/strong&gt; of smaller, more general features, that could be used together to address a broader set of use cases?
In many cases the features required for that composition are already implemented and are just missing one piece: our eigensolution.
In other cases composability may require more than one new feature, but the result can still be a net win since these features are useful on their own and can ship independently.&lt;/p&gt;
&lt;p&gt;A composability mindset requires &lt;strong&gt;being aware of pain points and use cases across many different product areas&lt;/strong&gt;.
This becomes harder in larger organizations, where product teams are highly specialized.
It’s not impossible, but requires conscious effort to cross-polinate all the way down,
rather than completely depending on higher levels of the hierarchy to maintain a bird’s eye view of the product.&lt;/p&gt;
&lt;p&gt;It’s also important to note that it’s a spectrum, not a binary: &lt;em&gt;overfitting&lt;/em&gt; and &lt;em&gt;eigensolutions&lt;/em&gt; are just its two opposite ends.
Eigensolutions do not come along every day, and do not even exist for all problems.
While it’s important to actively guard against overfitting by making sure solutions are validated by many diverse use cases,
going too far the other side and chasing a general solution for every problem is also a poor use of resources.&lt;/p&gt;
&lt;p&gt;Instead, I think a happy medium is to try and be on the right side of the spectrum:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/eigensolutions/images/overfitting.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;shipping-eigensolutions&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#shipping-eigensolutions&quot;&gt;Shipping eigensolutions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Good design is only part of the work; but &lt;strong&gt;without shipping, even the most well designed feature is a pointless document&lt;/strong&gt;.
Contrary to what you may expect, eigensolutions can actually be quite hard to push to stakeholders:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Due to their generality, they often require significantly higher engineering effort to implement.
Quick-wins are easier to sell: they ship faster and add value sooner.
In my 11 years designing web technologies, I have seen many beautiful, elegant eigensolutions be vetoed due to implementation difficulties in favor of far more specific solutions — and often this was the right decision, it’s all about the cost-benefit.&lt;/li&gt;
&lt;li&gt;Eigensolutions tend to be lower level primitives, which are more flexible, but can also involve higher friction to use than a solution that is tailored to a specific use case.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In many cases, &lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#layering&quot;&gt;&lt;em&gt;layering&lt;/em&gt;&lt;/a&gt; can resolve or mitigate both of these issues.&lt;/p&gt;
&lt;h2 id=&quot;layering&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#layering&quot;&gt;Layering with higher level abstractions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My north star product design principle is &lt;em&gt;“Common things should be easy, complex things should be possible”&lt;/em&gt; (paraphrasing &lt;a href=&quot;https://www.goodreads.com/quotes/8636264-simple-things-should-be-simple-complex-things-should-be-possible&quot;&gt;Alan Kay&lt;/a&gt; — because common things are not always simple, but it’s common things you want to optimize for),
which in essence is another way of aiming for &lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#floor-ceiling&quot;&gt;low floors and high ceilings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Eigensolutions tend to be lower level primitives.
They enable a broad set of use cases, but may not be the most learnable or efficient way to implement all of them, compared to a tailored solution.
In other words, they make complex things possible, but do not necessarily make common things easy.
&lt;em&gt;Some do both, in which case congratulations, you’ve got an even bigger unicorn! You can skip this section. :)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;However, this is one of the rare times in life where we can have our cake and eat it too.
Instead of implementing tailored solutions ad-hoc (risking overfitting),
they can be implemented as &lt;strong&gt;shortcuts&lt;/strong&gt;: higher level abstractions &lt;em&gt;using&lt;/em&gt; the lower level primitive.
Done well, shortcuts provide dual benefit: not only do they reduce friction for common cases,
they also serve as teaching aids for the underlying lower level feature.
This offers a very smooth ease-of-use to power curve:
if users need to go further than what the shortcut provides, they can always fall back on the lower level primitive to do so.
&lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#TBD&quot;&gt;We know&lt;/a&gt; that tweaking is easier than creating from scratch,
so even when users use that escape hatch, they can tweak what they had created with the higher level UI, rather than starting from scratch.
This combined approach &lt;em&gt;both&lt;/em&gt; reduces the floor &lt;em&gt;and&lt;/em&gt; increases the ceiling!&lt;/p&gt;
&lt;h3 id=&quot;coda-filtering&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#coda-filtering&quot;&gt;Example: Table filtering in Coda&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://coda.io/&quot;&gt;Coda&lt;/a&gt; is a product I’ve been using a lot in the last few months.
It has replaced Google Docs, Google Sheets, and a few more niche or custom apps I was using.
Its UI is full of examples of this pattern, but for the sake of brevity, I will focus on one: table filtering.&lt;/p&gt;
&lt;p&gt;At first, the filtering UI is pretty high level, designed around common use cases:&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/eigensolutions/images/coda-filter-1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2023/eigensolutions/images/coda-filter-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;Also note the nice touch of “And” not just being informative, but also a control that allows the user to edit the logic used to combine multiple filters.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For the vast majority of use cases (I would guess &amp;gt;95%), the UI is perfectly sufficient.
If you don’t need additional flexibility, you may not even notice the little &lt;em&gt;&lt;strong&gt;f&lt;/strong&gt;&lt;/em&gt; button on the top right.
But for those that need additional power it can be a lifesaver.
That little &lt;em&gt;f&lt;/em&gt; indicates that behind the scenes, the UI is actually generating a &lt;em&gt;formula&lt;/em&gt; for filtering.
Clicking it opens a formula editor, where you can edit the formula directly:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/eigensolutions/images/coda-filter-editor.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I suspect that even for the use cases that require that escape hatch, a small tweak to the generated formula is all that is necessary.
The user may have not been able to write the formula from scratch, but tweaking is easier.
As one data point, the one time I used this, it was just about using parentheses to combine AND and OR differently than the UI allowed.
And as a bonus, the app can collect metrics about what users do with the lower level feature and use that to improve the higher level UI.
It’s a win-win all around.&lt;/p&gt;
&lt;h3 id=&quot;what-to-ship-first%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#what-to-ship-first%3F&quot;&gt;What to ship first?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In an ideal world, lower level primitives and higher level abstractions would be designed and shipped together.
However, engineering resources are typically limited, and it often makes sense to ship one before the other,
so we can provide value sooner.&lt;/p&gt;
&lt;p&gt;This can happen in either direction:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Lower level primitive first&lt;/strong&gt;.
Shortcuts to make common cases easy can ship at a later stage,
and demos and documentation to showcase common “recipes” can be used as a stopgap meanwhile.
This prioritizes use case coverage over optimal UX, but it also allows collecting more data,
which can inform the design of the shortcuts implemented.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Higher level abstraction first&lt;/strong&gt;, as an independent, ostensibly ad hoc feature.
Then later, once the lower level primitive ships, it is used to “explain” the shortcut, and make it more powerful.
This prioritizes optimal UX over use case coverage:
we’re not covering all use cases, but for the ones we are covering, we’re offering a frictionless user experience.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But which one?
As with most things in life, the answer is “it depends”.&lt;/p&gt;
&lt;p&gt;A few considerations are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many shortcuts do we need? What percentage of use cases do they cover?&lt;/li&gt;
&lt;li&gt;How much harder is it to use the lower level primitive directly? Are we certain we will need to provide shortcuts, or is it possible it may be sufficient on its own?&lt;/li&gt;
&lt;li&gt;Which one are we more confident about?&lt;/li&gt;
&lt;li&gt;How much engineering effort does the lower level primitive require and how does it compare to implementing the shortcuts as ad hoc features?&lt;/li&gt;
&lt;li&gt;Do we have extensibility mechanisms in place for users to create and share &lt;em&gt;their own&lt;/em&gt; higher level abstractions over the lower level feature?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Outside of specific cases,
it’s also good to have a design principle in place about which way is generally favored, which is part of the product philosophy
(the answer to the &lt;a href=&quot;https://coda.io/@shishir/eigenquestions-the-art-of-framing-problems/eigenquestions-3&quot;&gt;eigenquestion&lt;/a&gt;:
&lt;em&gt;&lt;strong&gt;“Are we optimizing for flexibility or learnability?”&lt;/strong&gt;&lt;/em&gt;)
and can be used to fall back on if weighing tradeoffs ends up inconclusive.&lt;/p&gt;
&lt;p&gt;Note that &lt;strong&gt;even when we don’t think the eigensolution is implementable&lt;/strong&gt;,
it can still be useful as a &lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#nsui&quot;&gt;&lt;em&gt;north star UI&lt;/em&gt;&lt;/a&gt; and designing the tailored solutions as special cases of it can still be a good idea.&lt;/p&gt;
&lt;aside id=&quot;nsui&quot;&gt;
&lt;h4 id=&quot;north-star-ui%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#north-star-ui%3F&quot;&gt;North Star UI?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The ideal UI for addressing a set of use cases in a perfect world where we have infinite resources.
This is rarely known to us, but there are cases where we know exactly what the perfect solution would be,
but it’s not feasible due to practical concerns (e.g. implementation challenges), so we need to keep looking.
However, it can still be useful as a guide to steer us in the right direction.
And in some cases, it becomes feasible later on, due to changes in internal or external factors.
In my 11 years of designing web technologies, I have seen many “unimplementable” solutions become implementable later on.&lt;/p&gt;
&lt;p&gt;My favorite example, and something I’m proud to have personally helped drive is the current &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting/Using_CSS_nesting&quot;&gt;CSS Nesting syntax&lt;/a&gt;.
We had plenty of signal for what the optimal syntax for users would be, but it was vetoed by engineering across all major browsers, so we had to design around certain constraints.
Instead of completely diverging (which &lt;em&gt;could&lt;/em&gt; have produced better syntaxes!), we used it as a north star, and designed and shipped a syntax that was a bit more verbose but forwards compatible with it.
Once we got consensus on that, I started trying to get people on board to explore ways (even potential algorithms) to bridge the gap,
until eventually Chrome engineers closed on a way to implement the north star syntax 🎉, and as they say, the rest is history.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;In the web platform we’ve gone back and forth on this a lot.
In the beginning, the Web skewed towards shipping higher level abstractions.
It had a low floor, but also a relatively low ceiling: many capabilities required browser plugins, or desktop applications.
The &lt;a href=&quot;https://extensiblewebmanifesto.org/&quot;&gt;Extensible Web Manifesto&lt;/a&gt; was created as a reaction,
urging standards groups to design low level primitives first.
For a while, this became the gold standard and many new features were very low level.
This filled some necessary gaps in the platform, but since resources are limited, the layering was often missed, resulting in &lt;em&gt;only&lt;/em&gt; low level primitives which were a pain to use.
More recently, we’ve been &lt;a href=&quot;https://www.w3.org/TR/design-principles/#high-level-low-level&quot;&gt;recommending&lt;/a&gt; a more balanced approach, where tradeoffs are evaluated on a case by case basis.&lt;/p&gt;
&lt;h2 id=&quot;example&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#example&quot;&gt;A fictional example: TableSoda&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Suppose we were working on a fictional product that is an improvement over spreadsheets, let’s call it &lt;em&gt;TableSoda&lt;/em&gt;.
It has several features that make it more powerful and user-friendly than spreadsheets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It allows users to have multiple tables and define formulas or datatypes for a whole column&lt;/li&gt;
&lt;li&gt;It also supports references from a cell of one table to a row of another table.&lt;/li&gt;
&lt;li&gt;Its formula language supports operations on entire columns, and can return entire rows from other tables.&lt;/li&gt;
&lt;li&gt;Each table can be shared with different people, but a given user can either see/edit all the rows and columns of a table, or none.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the use cases in TableSoda’s &lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#use-case-backlog&quot;&gt;use case backlog&lt;/a&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pivot tables: tables that display stats about the usage of a value in another table (usually counts but also sum, min, max, average, etc.)&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Unions of multiple tables. For example, combining a table of debits and a table of credits into a table of transactions.&lt;/li&gt;
&lt;li&gt;Vertical splitting: Multiple tables augmenting the same data with different metadata. For example, a table of product features, another table that scores these features on various factors, and lastly, a table of 👍🏼 reactions by different team members about each feature.&lt;/li&gt;
&lt;li&gt;Granular access control, by row(s) or column(s). For example, a table of tasks where each row is assigned to a different team member, and each team member can only see their own tasks and only edit the status column.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the traditional PM mindset, we would prioritize which one(s) of these is most important to solve, design a few possible solutions, evaluate tradeoffs between them.
Over time, we may end up with a pivot table feature, a table union feature, a table vertical split feature, a row-level access control feature, and a column-level access control feature.
These features would not necessarily be overfitting, they may solve their respective use cases quite well.
But they also add a lot of complexity to the product.&lt;/p&gt;
&lt;p&gt;Instead, we would still prioritize which one to address first, but with the mindset of decomposing it to its essential components
and addressing those (note that there may be many different possible decompositions).
Suppose we decide that we want to prioritize pivot tables.
A pivot table is essentially&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#fn2&quot; id=&quot;fnref2:1&quot;&gt;[2:1]&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A table of all unique values in the source column&lt;/li&gt;
&lt;li&gt;For each unique value, columns with its count, sum, etc. in the source column&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Users can already count the number of values in a column using formulas, and they can also use a &lt;code&gt;unique()&lt;/code&gt; formula to get a list of unique values in a column.
So what prevents them from creating their own pivot tables?
There is no way to create dynamic tables in TableSoda, rows can only be added by users.
What if we could populate a table’s rows via a formula? The formula values could be used either for one column or multiple (if it returns a list of objects).&lt;/p&gt;
&lt;p&gt;Formula-populated tables not only solve our driving use case, but all of the above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unions can be implemented by using a formula to concatenate the rows of multiple tables into a single list.&lt;/li&gt;
&lt;li&gt;Vertical splitting can be implemented by using a formula to keep the rows of multiple tables in sync with a master table&lt;/li&gt;
&lt;li&gt;Granular access control can be implemented by having a table with different permissions that is populated using a formula that filters the rows and/or columns of the source table.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s an eigensolution!&lt;/p&gt;
&lt;p&gt;Note that our eigensolution is not the end for any of our use cases.
It makes many things &lt;em&gt;possible&lt;/em&gt;, but none of them are &lt;em&gt;easy&lt;/em&gt;.
Some of them are common enough to warrant a &lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#layering&quot;&gt;shortcut&lt;/a&gt;: UI that generates the formula needed.
For others, our solution is more of a &lt;em&gt;workaround&lt;/em&gt; than a primary solution, and the search for a primary solution continues, potentially with reduced prioritization.
And others don’t come up often enough to warrant anything further.
But even if we still need to smoothen the ease-of-use to power curve, making things &lt;em&gt;possible&lt;/em&gt; bought us a lot more time to make them &lt;em&gt;easy&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;use-cases-as-the-testsuite-of-product-design&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#use-cases-as-the-testsuite-of-product-design&quot;&gt;Use cases as the testsuite of product design&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most discerning of readers may have noticed that despite the name &lt;em&gt;eigensolution&lt;/em&gt;, it’s still all about the use cases:
&lt;strong&gt;eigensolutions just expose links between use cases that may have been hard to detect, but seem obvious in retrospect&lt;/strong&gt;.
In the example above, one &lt;em&gt;could&lt;/em&gt; have seen in advance that all of these use cases were fundamentally about dynamically populating tables.
But wasn’t it &lt;em&gt;so&lt;/em&gt; much easier to see in retrospect?&lt;/p&gt;
&lt;p&gt;Requiring all use cases to precede any design work can be unnecessarily restrictive,
as frequently solving a problem improves our understanding of the problem.&lt;/p&gt;
&lt;p&gt;Joe McLean (of &lt;a href=&quot;https://miro.com/&quot;&gt;Miro&lt;/a&gt;) &lt;a href=&quot;https://bootcamp.uxdesign.cc/overfitting-and-the-problem-with-use-cases-337d9f4bf4d7&quot;&gt;takes a more extreme position&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I believe it’s best to think of a use case as a test case to see if your basic tools are working. What’s missing from the toolbox? What are the limits of what’s available? What 4 use cases would open up with the addition of one more tool?&lt;/p&gt;
&lt;p&gt;Use cases should be applied after design is done — to check if the tools available can accomplish the job. As a starting point, they put you in a mindset to overfit. This is especially dangerous because users will often tell you they love it in concept testing. “Ah yes, here is my process, represented in pictures!” But it’s only when you actually try to use the tool — hold the thing in your hands — that there’s a hundred things you need it to do that it doesn’t. It’s not flexible — it’s a series of menus and disappointed feature requirements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Joe argues for using use cases &lt;em&gt;only&lt;/em&gt; at the end, to validate a design, as he believes that starting from use cases leads puts you in a mindset to overfit.
This is so much the polar opposite of current conventional wisdom, that many would consider it heresy.&lt;/p&gt;
&lt;p&gt;I think that &lt;em&gt;also&lt;/em&gt; imposes unnecessary constraints on the design process.
I personally favor a more iterative process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Collect as many diverse use cases as possible upfront to drive the design&lt;/li&gt;
&lt;li&gt;Additional use cases are used to refine the design until it stabilizes&lt;/li&gt;
&lt;li&gt;Even more at the end to validate it further.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you’re on the right path, additional use cases will smoothly take you from refinement to validation as the design stabilizes.
If you’re not on the right path, they will expose fundamental flaws in your design and show you that you need to start over.&lt;/p&gt;
&lt;p&gt;This has some similarities to test-driven development in engineering:
engineers start with a few test cases before writing any code,
then add more as they go to make sure everything works as expected.&lt;/p&gt;
&lt;p&gt;But if someone else’s design thinking works best with using use cases only for validation, more power to them!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What matters is that the outcome is a solution that addresses a broad set of use cases in a way users can understand and use.&lt;/strong&gt;
We can probably all agree that no proposal should be considered without being &lt;strong&gt;rigorously&lt;/strong&gt; supported by use cases.
It is not enough for use cases to exist;
they need to be sufficiently diverse and correspond to &lt;em&gt;real&lt;/em&gt; user pain points that are &lt;em&gt;common&lt;/em&gt; enough to justify the cost of adding a new feature.
But whether use cases drove the design, were used to validate it, or a mix of both is irrelevant,
and requiring one or the other imposes unnecessary constraints on the design process.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to Marily Nika and Elika Etemad for providing feedback on an earlier draft of this post.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;notable-reactions&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#notable-reactions&quot;&gt;Notable reactions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hesitantly published this article right before the 2023 winter break.
I say hesitantly, because it was a departure from my usual content, and I wasn’t sure how it would be received.
I was elated to see that despite its length, somewhat intimidating title, and publication date, it did get some very validating reactions.&lt;/p&gt;
&lt;p&gt;My favorite was &lt;a href=&quot;http://people.csail.mit.edu/dnj/&quot;&gt;Daniel Jackson&lt;/a&gt;’s &lt;a href=&quot;https://forum.essenceofsoftware.com/t/lea-verou-post-eigensolutions-composability-as-the-antidote-to-overfit/184&quot;&gt;insightful summary of the ideas presented&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I just came across an &lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/&quot;&gt;excellent post &lt;/a&gt; by Lea Verou which argues for building software on more general and composable abstractions.&lt;/p&gt;
&lt;p&gt;In short, I see several different ideas at play in her piece:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use cases lead to overfitting and it’s better to design more coherent and general increments of function;&lt;/li&gt;
&lt;li&gt;More complex and domain-specific functionality can often be obtained as an instantiation or composition of more abstract and general functionality;&lt;/li&gt;
&lt;li&gt;Even if you don’t implement the more general and abstract functionality, it might be better to design it and think of your implementation as partial;&lt;/li&gt;
&lt;li&gt;You can use progressive disclosure in the UI as a bridge between more common domain-specific functionality and more general functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These ideas seem to have a lot in common with concept design. Maybe her eigensolutions are concepts? What do y’all think? Also, I really liked the critique of use cases, which connects to our &lt;a href=&quot;https://forum.essenceofsoftware.com/t/how-related-are-nakedobjects-by-pawlson-and-concept-oriented-design/177/9&quot;&gt;discussion&lt;/a&gt; last year of Bertrand Meyer’s piece.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was very validating to see that the ideas resonated with someone who has been thinking about good conceptual design so deeply that it’s his primary area of research at MIT for years, and has published an &lt;a href=&quot;https://essenceofsoftware.com/&quot;&gt;excellent book&lt;/a&gt; on the matter (I only started reading it recently, but I’m loving it so far).&lt;/p&gt;
&lt;p&gt;It was also validating to see that the ideas resonated with &lt;a href=&quot;https://shishir.io/&quot;&gt;Shishir Mehrotra&lt;/a&gt; (CEO of &lt;a href=&quot;https://coda.io/&quot;&gt;Coda&lt;/a&gt;), who &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7142948935676882945?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7142948935676882945%2C7145299080624103424%29&amp;amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287145299080624103424%2Curn%3Ali%3Aactivity%3A7142948935676882945%29&quot;&gt;commented&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Very insightful article, loved it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you recall, it was him who coined the term &lt;em&gt;eigenquestion&lt;/em&gt; that inspired the term &lt;em&gt;eigensolution&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.threads.net/@dfosco%5BTitle%5D(https://www.threads.net/@dfosco)&quot;&gt;Daniel Fosco&lt;/a&gt; (Software designer at &lt;a href=&quot;https://miro.com/&quot;&gt;Miro&lt;/a&gt;) &lt;a href=&quot;https://www.threads.net/@dfosco/post/C1FGfODoxSp&quot;&gt;reposted and wrote&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is by far the best design article I’ve read in a very long time. Lea dives right into what it takes to build complex tools that have to meet wide, unmapped user needs.
I also love how it does not shy away from the complexity of the topic even for a moment: on the contrary, the title is already telling you what you’re signing up for.
@leaverou is no stranger to great writing, but this one is truly a gem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I recently started using &lt;a href=&quot;https://miro.com/&quot;&gt;Miro&lt;/a&gt; myself, for diagrams and wireframes (most illustrations in this article have been made with Miro), and there are some real gems in its design, so it was very validating to see that the ideas resonated with someone who works on designing it.&lt;/p&gt;
&lt;p&gt;Fredrik Matheson (Creative Director at Bekk) &lt;a href=&quot;https://www.linkedin.com/posts/movito_whats-the-opposite-of-overfitting-eigensolutions-activity-7143012800225861632-i_Lw?utm_source=share&amp;amp;utm_medium=member_desktop&quot;&gt;reposted and wrote&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Are you new to UX? This post will be a bit like taking an elevator up above the clouds, where you can see further, beyond the constraints of the transactional systems you might be working on already. Recommended.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He even subsequently proceeded to quote concepts from it in a &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7143508856587911169?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7143508856587911169%2C7144244558615269376%29&amp;amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287144244558615269376%2Curn%3Ali%3Aactivity%3A7143508856587911169%29&quot;&gt;number of&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:ugcPost:7148246579894800384?commentUrn=urn%3Ali%3Acomment%3A%28ugcPost%3A7148246579894800384%2C7148248066465193984%29&amp;amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287148248066465193984%2Curn%3Ali%3AugcPost%3A7148246579894800384%29&quot;&gt;comments&lt;/a&gt; on other posts! 🤩&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/natebaldwindesign/&quot;&gt;Nate Baldwin&lt;/a&gt; (Principal Product Designer at Intuit) &lt;a href=&quot;https://twitter.com/NateBaldwinArt/status/1738748897928077400&quot;&gt;reposted and wrote&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a wonderful article! What @LeaVerou defines is what I consider platform design, which I think sits one level below UI systems design. Ie:&lt;/p&gt;
&lt;p&gt;Product design
⬇️
Systems design (UI)
⬇️
Platform design&lt;/p&gt;
&lt;p&gt;Although her approach to design is relevant to each.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I’ve spent so long designing creator tools that I tended to assume my observations and learnings from my experience are universal.
I first read about this distinction in Joe Mc Lean’s
excellent post on &lt;a href=&quot;https://bootcamp.uxdesign.cc/overfitting-and-the-problem-with-use-cases-337d9f4bf4d7&quot;&gt;overfitting&lt;/a&gt;, and it was a bit of an a-ha moment. &lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Yes, pivot tables are more complex than that, but let’s keep it simple for the sake of the example. &lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#fnref2:1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry><entry>
    <title>On compliance vs readability: Generating text colors with CSS</title>
    <link href="https://lea.verou.me/blog/2024/contrast-color/"/>
    <updated>2024-05-17T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2024/contrast-color/</id>
    <content xml:lang="en" type="html">&lt;div class=&quot;nutshell&quot;&gt;
&lt;p&gt;Can we emulate the upcoming CSS &lt;a href=&quot;https://drafts.csswg.org/css-color-5/#contrast-color&quot;&gt;&lt;code&gt;contrast-color()&lt;/code&gt;&lt;/a&gt; function via CSS features that have already widely shipped?
And if so, what are the tradeoffs involved and how to best balance them?&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;relative-colors&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/contrast-color/#relative-colors&quot;&gt;Relative Colors&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Out of &lt;a href=&quot;https://lea.verou.me/specs/&quot;&gt;all the CSS features I have designed&lt;/a&gt;,
&lt;a href=&quot;https://lea.verou.me/specs/#relative-colors&quot;&gt;Relative Colors&lt;/a&gt; aka &lt;em&gt;Relative Color Syntax&lt;/em&gt; (RCS) is definitely among the ones I’m most proud of.
In a nutshell, they allow CSS authors to derive a new color from an existing color value by doing arbitrary math on color components
in any supported color space:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;--color-lighter: hsl(from var(--color) h s calc(l * 1.2));
--color-lighterer: oklch(from var(--color) calc(l + 0.2) c h);
--color-alpha-50: oklab(from var(--color) l a b / 50%);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The elevator pitch was that by allowing lower level operations they provide authors flexibility on how to derive color variations,
giving us more time to figure out what the appropriate higher level primitives should be.&lt;/p&gt;
&lt;p&gt;As of May 2024, RCS has &lt;a href=&quot;https://caniuse.com/css-relative-colors&quot;&gt;shipped in every browser except Firefox&lt;/a&gt;.
but given that it is an &lt;a href=&quot;https://web.dev/blog/interop-2024&quot;&gt;Interop 2024 focus area&lt;/a&gt;,
that &lt;a href=&quot;https://mozilla.github.io/standards-positions/#css-relative-color-syntax&quot;&gt;Firefox has expressed a positive standards position&lt;/a&gt;,
and that the &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1701488&quot;&gt;Bugzilla issue&lt;/a&gt; has had some recent activity and has been assigned,
I am optimistic it would ship in Firefox soon (edit: &lt;strong&gt;it shipped 5 days after writing these lines, in Firefox 128&lt;/strong&gt; 🎉).
My guess it that it would become &lt;a href=&quot;https://web.dev/baseline&quot;&gt;Baseline&lt;/a&gt; by the end of 2024.&lt;/p&gt;
&lt;p&gt;Even if my prediction is off, it already is available to &lt;strong&gt;83% of users worldwide&lt;/strong&gt;,
and if you sort &lt;a href=&quot;https://caniuse.com/css-relative-colors&quot;&gt;its caniuse page&lt;/a&gt; by usage,
you will see the vast majority of the remaining 17% doesn’t come from Firefox,
but from older Chrome and Safari versions.
I think &lt;strong&gt;its current market share warrants production use today&lt;/strong&gt;,
as long as we use &lt;code&gt;@supports&lt;/code&gt; to make sure things &lt;em&gt;work&lt;/em&gt; in non-supporting browsers, even if less pretty.&lt;/p&gt;
&lt;p&gt;Most &lt;a href=&quot;https://developer.chrome.com/blog/css-relative-color-syntax&quot;&gt;Relative Colors tutorials&lt;/a&gt;
revolve around its primary driving use cases:
making tints and shades or other color variations by tweaking a specific color component up or down,
and/or overriding a color component with a fixed value,
like the example above.
While this does address some very common pain points,
it is merely scratching the surface of what RCS enables.
This article explores a more advanced use case, with the hope that it will spark more creative uses of RCS in the wild.&lt;/p&gt;
&lt;h2 id=&quot;the-css-contrast-color()-function&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/contrast-color/#the-css-contrast-color()-function&quot;&gt;The CSS &lt;code&gt;contrast-color()&lt;/code&gt; function&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the big longstanding CSS pain points is that it’s impossible to automatically specify a text color that is guaranteed to be readable on arbitrary backgrounds,
e.g. white on darker colors and black on lighter ones.&lt;/p&gt;
&lt;p&gt;Why would one need that?
The primary use case is &lt;em&gt;when colors are outside the CSS author’s control&lt;/em&gt;.
This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User-defined colors.&lt;/strong&gt; An example you’re likely familiar with: GitHub labels. Think of how you select an arbitrary color when creating a label and GitHub automatically picks the text color — often poorly (we’ll see why in a bit)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Colors defined by another developer.&lt;/strong&gt; E.g. you’re writing a web component that supports certain CSS variables for styling.
You &lt;em&gt;could&lt;/em&gt; require separate variables for the text and background, but that reduces the usability of your web component by making it more of a hassle to use.
Wouldn’t it be great if it could just use a &lt;a href=&quot;https://www.nngroup.com/articles/slips/&quot;&gt;sensible default&lt;/a&gt;, that you can, but rarely need to override?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Colors defined by an external design system&lt;/strong&gt;, like &lt;a href=&quot;https://open-props.style/&quot;&gt;Open Props&lt;/a&gt;, &lt;a href=&quot;https://material.io/&quot;&gt;Material Design&lt;/a&gt;, or even (&lt;em&gt;gasp&lt;/em&gt;) &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;Tailwind&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2024/contrast-color/images/gh-labels.png&quot; alt=&quot;Screenshot from GitHub issues showing many different labels with different colors&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
GitHub Labels are an example where colors are user-defined, and the UI needs to pick a text color that works with them.
GitHub uses WCAG 2.1 to determine the text color, which is why (as we will see in the next section) the results are often poor.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Even in a codebase where every line of CSS code is controlled by a single author,
reducing couplings can improve modularity and facilitate code reuse.&lt;/p&gt;
&lt;p&gt;The good news is that this is not going to be a pain point for much longer.
The CSS function &lt;a href=&quot;https://drafts.csswg.org/css-color-5/#contrast-color&quot;&gt;&lt;code&gt;contrast-color()&lt;/code&gt;&lt;/a&gt; was designed to address exactly that.
This is not new, you may have heard of it as &lt;code&gt;color-contrast()&lt;/code&gt; before, an earlier name.
I recently &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9166&quot;&gt;drove consensus to scope it down to an MVP&lt;/a&gt; that addresses the most prominent pain points and can actually ship soonish,
as it circumvents some very difficult design decisions that had caused the full-blown feature to stall.
I then &lt;a href=&quot;https://github.com/w3c/csswg-drafts/commit/39f469149abb5575505b6d2d54b8bddf119f896d&quot;&gt;added it to the spec&lt;/a&gt; per WG resolution, though some details still need to be ironed out.&lt;/p&gt;
&lt;p&gt;Usage will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;background: var(--color);
color: contrast-color(var(--color));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Glorious, isn’t it?&lt;/em&gt;
Of course, soonish in spec years is still, well, years.
As a data point, you can see in &lt;a href=&quot;https://lea.verou.me/specs/&quot;&gt;my past spec work&lt;/a&gt; that with a bit of luck (and browser interest), it can take as little as 2 years to get a feature shipped across all major browsers after it’s been specced.
When the standards work is also well-funded,
there have even been cases where a feature went &lt;strong&gt;from conception to baseline in 2 years&lt;/strong&gt;,
with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_layers&quot;&gt;Cascade Layers&lt;/a&gt; being the poster child for this:
&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/4470&quot;&gt;proposal by Miriam in Oct 2019&lt;/a&gt;,
&lt;a href=&quot;https://caniuse.com/css-cascade-layers&quot;&gt;shipped in every major browser by Mar 2022&lt;/a&gt;.
But 2 years is still a long time (and there are no guarantees it won’t be longer).
What is our recourse until then?&lt;/p&gt;
&lt;p&gt;As you may have guessed from the title, the answer is yes.
It may not be pretty, but there is a way to emulate &lt;code&gt;contrast-color()&lt;/code&gt; (or something close to it) using Relative Colors.&lt;/p&gt;
&lt;h2 id=&quot;using-rcs-to-automatically-compute-a-contrasting-text-color&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/contrast-color/#using-rcs-to-automatically-compute-a-contrasting-text-color&quot;&gt;Using RCS to automatically compute a contrasting text color&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the following we will use the &lt;a href=&quot;https://www.w3.org/TR/css-color-4/#ok-lab&quot;&gt;OKLCh color space&lt;/a&gt;, which is the most &lt;em&gt;perceptually uniform&lt;/em&gt; &lt;em&gt;polar color space&lt;/em&gt; that CSS supports.&lt;/p&gt;
&lt;aside class=&quot;info&quot; style=&quot;--label: &#39;Glossary&#39;&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Perceptually uniform color space&lt;/strong&gt;: A color space where the Euclidean distance between two colors is proportional to their perceptual difference.
RGB spaces (and their polar forms, HSL, HSV, HSB, HWB, etc.) are typically &lt;em&gt;not&lt;/em&gt; perceptually uniform.
Some examples of what this means for HSL in &lt;a href=&quot;https://lea.verou.me/blog/2020/04/lch-colors-in-css-what-why-and-how/&quot;&gt;my older post on LCH&lt;/a&gt;.
Examples of perceptually uniform color spaces include Lab, LCH, OkLab, and OkLCh.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Polar color space&lt;/strong&gt;: A color space where colors are represented as an angular hue (which determines the “core” color, e.g. red, yellow, green, blue, etc.) and two components that control the exact shade of that hue (typically some version of colorfulness and lightness).&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;
&lt;p&gt;Let’s assume there is a Lightness value above which black text is guaranteed to be readable regardless of the chroma and hue,
and below which white text is guaranteed to be readable.
We will validate that assumption later, but for now let’s take it for granted.
In the rest of this article, we’ll call that value the &lt;strong&gt;threshold&lt;/strong&gt; and represent it as &lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt;.&lt;/p&gt;
&lt;p&gt;We will compute this value more rigously in the next section (and prove that it actually exists!),
but for now let’s use &lt;code&gt;0.7&lt;/code&gt; (70%).
We can assign it to a variable to make it easier to tweak:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;--l-threshold: 0.7;
&lt;/code&gt;&lt;/pre&gt;
&lt;aside class=&quot;info&quot;&gt;
&lt;p&gt;Most RCS examples in the wild use &lt;code&gt;calc()&lt;/code&gt; with simple additions and multiplications.
However, &lt;strong&gt;any math function supported by CSS is actually fair game&lt;/strong&gt;, including &lt;code&gt;clamp()&lt;/code&gt;, trigonometric functions, and many others.
For example, if you wanted to create a lighter tint of a core color with RCS,
you could do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;background: oklch(from var(--color) 90% clamp(0, c, 0.1) h);
&lt;/code&gt;&lt;/pre&gt;
&lt;/aside&gt;
&lt;p&gt;Let’s work backwards from the desired result.
We want to come up with an expression that is composed of &lt;strong&gt;widely supported CSS math functions&lt;/strong&gt;,
and will return &lt;var&gt;1&lt;/var&gt; if &lt;var&gt;L&lt;/var&gt; ≤ &lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; and &lt;var&gt;0&lt;/var&gt; otherwise.
If we could write such an expression, we could then use that value as the lightness of a new color:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;--l: /* ??? */;
color: oklch(var(--l) 0 0);
&lt;/code&gt;&lt;/pre&gt;
&lt;aside class=&quot;info&quot;&gt;
&lt;p&gt;The CSS math functions that are widely supported are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;calc()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min()&lt;/code&gt;, &lt;code&gt;max()&lt;/code&gt;, &lt;code&gt;clamp()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://drafts.csswg.org/css-values-4/#trig-funcs&quot;&gt;Trigonometric functions&lt;/a&gt; (&lt;code&gt;sin()&lt;/code&gt;, &lt;code&gt;cos()&lt;/code&gt;, &lt;code&gt;tan()&lt;/code&gt;, &lt;code&gt;asin()&lt;/code&gt;, &lt;code&gt;acos()&lt;/code&gt;, &lt;code&gt;atan()&lt;/code&gt;, &lt;code&gt;atan2()&lt;/code&gt;) &lt;em&gt;(&lt;a href=&quot;https://lea.verou.me/specs/#css-trigonometric-functions&quot;&gt;another CSS feature I proposed&lt;/a&gt;, back in 2018 😁)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://drafts.csswg.org/css-values-4/#exponent-funcs&quot;&gt;Exponential functions&lt;/a&gt; (&lt;code&gt;exp()&lt;/code&gt;, &lt;code&gt;log()&lt;/code&gt;, &lt;code&gt;log2()&lt;/code&gt;, &lt;code&gt;log10()&lt;/code&gt;, &lt;code&gt;sqrt()&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;
&lt;p&gt;How could we simplify the task?
One way is to &lt;strong&gt;relax what our expression needs to return&lt;/strong&gt;.
We don’t actually need an exact &lt;var&gt;0&lt;/var&gt; or &lt;var&gt;1&lt;/var&gt;
If we can manage to find an expression that will give us &lt;var&gt;0&lt;/var&gt; when &lt;var&gt;L&lt;/var&gt; &amp;gt; &lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt;
and &amp;gt; &lt;var&gt;1&lt;/var&gt; when &lt;var&gt;L&lt;/var&gt; ≤ &lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt;,
we can just use &lt;code&gt;clamp(0, /* expression */, 1)&lt;/code&gt; to get the desired result.&lt;/p&gt;
&lt;p&gt;One idea would be to use ratios, as they have this nice property where they are &amp;gt; &lt;var&gt;1&lt;/var&gt; if the numerator is larger than the denominator and ≤ &lt;var&gt;1&lt;/var&gt; otherwise.&lt;/p&gt;
&lt;p&gt;The ratio of &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -1.54ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;9.227ex&quot; height=&quot;3.977ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -1077 4078.4 1757.8&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mfrac&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot; transform=&quot;translate(1698.7,394)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D43F&quot; d=&quot;M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mstyle&quot; transform=&quot;translate(220,-523)&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D43F&quot; d=&quot;M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(714,-150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;74&quot; d=&quot;M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;68&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(389,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;72&quot; d=&quot;M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z&quot; transform=&quot;translate(945,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;65&quot; d=&quot;M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z&quot; transform=&quot;translate(1337,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;73&quot; d=&quot;M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z&quot; transform=&quot;translate(1781,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;68&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(2175,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(2731,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot; transform=&quot;translate(3231,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;64&quot; d=&quot;M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z&quot; transform=&quot;translate(3509,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;rect width=&quot;3838.4&quot; height=&quot;60&quot; x=&quot;120&quot; y=&quot;220&quot;&gt;&lt;/rect&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mfrac&gt;&lt;mstyle displaystyle=&quot;true&quot; scriptlevel=&quot;0&quot;&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;/mstyle&gt;&lt;mstyle displaystyle=&quot;true&quot; scriptlevel=&quot;0&quot;&gt;&lt;msub&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mrow data-mjx-texclass=&quot;ORD&quot;&gt;&lt;mrow data-mjx-texclass=&quot;ORD&quot;&gt;&lt;mi data-mjx-auto-op=&quot;false&quot;&gt;threshold&lt;/mi&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mstyle&gt;&lt;/mfrac&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt; is &amp;lt; &lt;var&gt;1&lt;/var&gt; for &lt;var&gt;L&lt;/var&gt; ≤ &lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; and &amp;gt; &lt;var&gt;1&lt;/var&gt; when &lt;var&gt;L&lt;/var&gt; &amp;gt; &lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt;.
This means that &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -1.54ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;13.124ex&quot; height=&quot;3.977ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -1077 5800.8 1757.8&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mfrac&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot; transform=&quot;translate(1698.7,394)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D43F&quot; d=&quot;M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mstyle&quot; transform=&quot;translate(220,-523)&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D43F&quot; d=&quot;M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(714,-150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;74&quot; d=&quot;M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;68&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(389,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;72&quot; d=&quot;M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z&quot; transform=&quot;translate(945,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;65&quot; d=&quot;M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z&quot; transform=&quot;translate(1337,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;73&quot; d=&quot;M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z&quot; transform=&quot;translate(1781,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;68&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(2175,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z&quot; transform=&quot;translate(2731,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot; transform=&quot;translate(3231,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;64&quot; d=&quot;M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z&quot; transform=&quot;translate(3509,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;rect width=&quot;3838.4&quot; height=&quot;60&quot; x=&quot;120&quot; y=&quot;220&quot;&gt;&lt;/rect&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4300.6,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(5300.8,0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mfrac&gt;&lt;mstyle displaystyle=&quot;true&quot; scriptlevel=&quot;0&quot;&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;/mstyle&gt;&lt;mstyle displaystyle=&quot;true&quot; scriptlevel=&quot;0&quot;&gt;&lt;msub&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mrow data-mjx-texclass=&quot;ORD&quot;&gt;&lt;mrow data-mjx-texclass=&quot;ORD&quot;&gt;&lt;mi data-mjx-auto-op=&quot;false&quot;&gt;threshold&lt;/mi&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mstyle&gt;&lt;/mfrac&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt; will be a negative number for &lt;var&gt;L&lt;/var&gt; &amp;lt; &lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; and a positive one for &lt;var&gt;L&lt;/var&gt; &amp;gt; &lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt;.
Then all we need to do is multiply that expression by a huge (in magnitude) negative number so that when it’s negative the result is guaranteed to be over &lt;var&gt;1&lt;/var&gt;.&lt;/p&gt;
&lt;p&gt;Putting it all together, it looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;--l-threshold: 0.7;
--l: clamp(0, (l / var(--l-threshold) - 1) * -infinity, 1);
color: oklch(from var(--color) var(--l) 0 h);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One worry might be that if L gets close enough to the threshold we could get a number between &lt;var&gt;0&lt;/var&gt; - &lt;var&gt;1&lt;/var&gt;,
but in my experiments this never happened, presumably since precision is finite.&lt;/p&gt;
&lt;h3 id=&quot;fallback-for-browsers-that-don%E2%80%99t-support-rcs&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/contrast-color/#fallback-for-browsers-that-don%E2%80%99t-support-rcs&quot;&gt;Fallback for browsers that don’t support RCS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The last piece of the puzzle is to provide a fallback for browsers that don’t support RCS.
We can use &lt;code&gt;@supports&lt;/code&gt; with any color property and any relative color value as the test, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.contrast-color {
	/* Fallback */
	background: hsl(0 0 0 / 50%);
	color: white;

	@supports (color: oklch(from red l c h)) {
		--l: clamp(0, (l / var(--l-threshold) - 1) * -infinity, 1);
		color: oklch(from var(--color) var(--l) 0 h);
		background: none;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the spirit of making sure things work in non-supporting browsers, even if less pretty,
some fallback ideas could be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A white or semi-transparent white background with black text or vice versa.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-webkit-text-stroke&lt;/code&gt; with a color opposite to the text color. This works better with bolder text, since half of the outline is inside the letterforms.&lt;/li&gt;
&lt;li&gt;Many &lt;code&gt;text-shadow&lt;/code&gt; values with a color opposite to the text color. This works better with thinner text, as it’s drawn behind the text.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;does-this-mythical-l-threshold-actually-exist%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/contrast-color/#does-this-mythical-l-threshold-actually-exist%3F&quot;&gt;Does this mythical L threshold actually exist?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the previous section we’ve made a pretty big assumption:
That there is a Lightness value (&lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt;) above which black text is guaranteed to be readable regardless of the chroma and hue,
and below which white text is guaranteed to be readable regardless of the chroma and hue.
But does such a value exist?
It is time to put this claim to the test.&lt;/p&gt;
&lt;p&gt;When people first hear about &lt;a href=&quot;https://lea.verou.me/blog/2024/contrast-color/&quot;&gt;perceptually uniform color spaces&lt;/a&gt; like &lt;a href=&quot;https://en.wikipedia.org/wiki/CIELAB_color_space&quot;&gt;Lab&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/CIELAB_color_space#Cylindrical_model&quot;&gt;LCH&lt;/a&gt; or their improved versions, &lt;a href=&quot;https://bottosson.github.io/posts/oklab/&quot;&gt;OkLab&lt;/a&gt; and &lt;a href=&quot;https://www.w3.org/TR/css-color-4/#ok-lab&quot;&gt;OKLCH&lt;/a&gt;,
they imagine that they can infer the contrast between two colors by simply comparing their L(ightness) values.
This is unfortunately not true, as contrast depends on more factors than perceptual lightness.
However, there is certainly &lt;em&gt;significant&lt;/em&gt; correlation between Lightness values and contrast.&lt;/p&gt;
&lt;p&gt;At this point, I should point out that while most web designers are aware of the &lt;a href=&quot;https://www.w3.org/TR/WCAG21/#contrast-minimum&quot;&gt;WCAG 2.1 contrast algorithm&lt;/a&gt;,
which is part of the &lt;a href=&quot;https://www.w3.org/TR/WCAG21/&quot;&gt;Web Content Accessibility Guidelines&lt;/a&gt; and baked into law in many countries,
&lt;strong&gt;it has been known for years that it produces extremely poor results&lt;/strong&gt;.
So bad in fact that in &lt;a href=&quot;https://www.cedc.tools/article.html&quot;&gt;some tests&lt;/a&gt; it performs almost as bad as random chance for any color that is not very light or very dark.
There is a newer contrast algorithm, &lt;a href=&quot;https://apcacontrast.com/&quot;&gt;APCA&lt;/a&gt; that produces &lt;em&gt;far&lt;/em&gt; better results,
but is not yet part of any standard or legislation, and there have previously been some bumps along the way with making it freely available to the public (which seem to be largely resolved).&lt;/p&gt;
&lt;figure&gt;
&lt;div style=&quot;padding: .5em 1em; background: hsl(180 62% 40%); color: white&quot;&gt;Some text&lt;/div&gt;
&lt;div style=&quot;padding: .5em 1em; background: hsl(180 62% 40%); color: black&quot;&gt;Some text&lt;/div&gt;
&lt;figcaption&gt;Which of the two seems more readable?
You may be surprised to find that the white text version fails WCAG 2.1,
while the black text version even passes WCAG AAA!
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So where does that leave web authors?
In quite a predicament as it turns out.
It seems that the best way to create accessible color pairings right now is a two step process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use APCA to ensure &lt;strong&gt;actual readability&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compliance failsafe&lt;/strong&gt;: Ensure the result does not actively &lt;em&gt;fail&lt;/em&gt; WCAG 2.1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I ran &lt;a href=&quot;https://lea.verou.me/blog/2024/contrast-color/research/&quot;&gt;some quick experiments&lt;/a&gt; using &lt;a href=&quot;https://colorjs.io/&quot;&gt;Color.js&lt;/a&gt;
where I iterate over the &lt;a href=&quot;https://drafts.csswg.org/css-color-4/#prr-oklch&quot;&gt;OKLCh reference range&lt;/a&gt; (loosely based on the P3 gamut)
in increments of increasing granularity and calculate the lightness ranges for colors where white was the “best” text color (= produced higher contrast than black) and vice versa.
I also compute the brackets for each level (fail, AA, AAA, AAA+) for both APCA and WCAG.&lt;/p&gt;
&lt;p&gt;I then turned my exploration into an &lt;a href=&quot;https://lea.verou.me/blog/2024/contrast-color/research&quot;&gt;interactive playground&lt;/a&gt; where you can run the same experiments yourself,
potentially with narrower ranges that fit your use case, or with higher granularity.&lt;/p&gt;
&lt;figure&gt;
&lt;video src=&quot;https://lea.verou.me/blog/2024/contrast-color/videos/playground.mp4&quot; loop=&quot;&quot; autoplay=&quot;&quot; muted=&quot;&quot; style=&quot;max-height: 60vh&quot;&gt;&lt;/video&gt;
&lt;figcaption&gt;Calculating lightness ranges and contrast brackets for black and white on different background colors.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This is &lt;a href=&quot;https://lea.verou.me/blog/2024/contrast-color/research/?c=0,0.4,0.025&amp;h=0,359,1&quot;&gt;the table produced with C ∈ [0, 0.4] (step = 0.025) and H ∈ [0, 360) (step = 1)&lt;/a&gt;:&lt;/p&gt;
&lt;table&gt;
	&lt;thead&gt;&lt;tr&gt;&lt;th rowspan=&quot;2&quot;&gt;Text color&lt;/th&gt;&lt;th rowspan=&quot;2&quot;&gt;Level&lt;/th&gt;&lt;th colspan=&quot;2&quot;&gt;APCA&lt;/th&gt;&lt;th colspan=&quot;2&quot;&gt;WCAG 2.1&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;Min&lt;/th&gt;&lt;th&gt;Max&lt;/th&gt;&lt;th&gt;Min&lt;/th&gt;&lt;th&gt;Max&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
	&lt;tbody class=&quot;white&quot;&gt;
		&lt;tr class=&quot;best&quot;&gt;&lt;th rowspan=&quot;5&quot;&gt;white&lt;/th&gt;&lt;td&gt;best&lt;/td&gt;&lt;td&gt;0%&lt;/td&gt;&lt;td&gt;75.2%&lt;/td&gt;&lt;td&gt;0%&lt;/td&gt;&lt;td&gt;61.8%&lt;/td&gt;&lt;/tr&gt;
		&lt;tr class=&quot;fail&quot;&gt;&lt;td&gt;fail&lt;/td&gt;&lt;td&gt;71.6%&lt;/td&gt;&lt;td&gt;100%&lt;/td&gt;&lt;td&gt;62.4%&lt;/td&gt;&lt;td&gt;100%&lt;/td&gt;&lt;/tr&gt;
		&lt;tr class=&quot;aa&quot;&gt;&lt;td&gt;AA&lt;/td&gt;&lt;td&gt;62.7%&lt;/td&gt;&lt;td&gt;80.8%&lt;/td&gt;&lt;td&gt;52.3%&lt;/td&gt;&lt;td&gt;72.1%&lt;/td&gt;&lt;/tr&gt;
		&lt;tr class=&quot;aaa&quot;&gt;&lt;td&gt;AAA&lt;/td&gt;&lt;td&gt;52.6%&lt;/td&gt;&lt;td&gt;71.7%&lt;/td&gt;&lt;td&gt;42%&lt;/td&gt;&lt;td&gt;62.3%&lt;/td&gt;&lt;/tr&gt;
		&lt;tr class=&quot;aaa+&quot;&gt;&lt;td&gt;AAA+&lt;/td&gt;&lt;td&gt;0%&lt;/td&gt;&lt;td&gt;60.8%&lt;/td&gt;&lt;td&gt;0%&lt;/td&gt;&lt;td&gt;52.7%&lt;/td&gt;&lt;/tr&gt;
	&lt;/tbody&gt;
	&lt;tbody class=&quot;black&quot;&gt;
		&lt;tr class=&quot;best&quot;&gt;&lt;th rowspan=&quot;5&quot;&gt;black&lt;/th&gt;&lt;td&gt;best&lt;/td&gt;&lt;td&gt;66.1%&lt;/td&gt;&lt;td&gt;100%&lt;/td&gt;&lt;td&gt;52%&lt;/td&gt;&lt;td&gt;100%&lt;/td&gt;&lt;/tr&gt;
		&lt;tr class=&quot;fail&quot;&gt;&lt;td&gt;fail&lt;/td&gt;&lt;td&gt;0%&lt;/td&gt;&lt;td&gt;68.7%&lt;/td&gt;&lt;td&gt;0%&lt;/td&gt;&lt;td&gt;52.7%&lt;/td&gt;&lt;/tr&gt;
		&lt;tr class=&quot;aa&quot;&gt;&lt;td&gt;AA&lt;/td&gt;&lt;td&gt;60%&lt;/td&gt;&lt;td&gt;78.7%&lt;/td&gt;&lt;td&gt;42%&lt;/td&gt;&lt;td&gt;61.5%&lt;/td&gt;&lt;/tr&gt;
		&lt;tr class=&quot;aaa&quot;&gt;&lt;td&gt;AAA&lt;/td&gt;&lt;td&gt;69.4%&lt;/td&gt;&lt;td&gt;87.7%&lt;/td&gt;&lt;td&gt;51.4%&lt;/td&gt;&lt;td&gt;72.1%&lt;/td&gt;&lt;/tr&gt;
		&lt;tr class=&quot;aaa+&quot;&gt;&lt;td&gt;AAA+&lt;/td&gt;&lt;td&gt;78.2%&lt;/td&gt;&lt;td&gt;100%&lt;/td&gt;&lt;td&gt;62.4%&lt;/td&gt;&lt;td&gt;100%&lt;/td&gt;&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note that these are the min and max L values for each level.
E.g. the fact that white text &lt;em&gt;can&lt;/em&gt; fail WCAG when L ∈ [62.4%, 100%] doesn’t mean that &lt;em&gt;every&lt;/em&gt; color with L &amp;gt; 62.4% will fail WCAG,
just that &lt;em&gt;some&lt;/em&gt; do.
So, &lt;strong&gt;we can only draw meaningful conclusions by inverting the logic&lt;/strong&gt;:
Since all white text failures are have an L ∈ [62.4%, 100%],
it logically follows that if L &amp;lt; 62.4%, white text will pass WCAG
regardless of what the color is.&lt;/p&gt;
&lt;p&gt;By applying this logic to all ranges, we can draw similar guarantees for many of these brackets:&lt;/p&gt;
&lt;figure&gt;
&lt;div style=&quot;overflow: auto&quot;&gt;
&lt;table style=&quot;margin-inline-end: 1ch&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th colspan=&quot;2&quot;&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;0%&lt;/strong&gt; to &lt;span class=&quot;divider after&quot;&gt;52.7%&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span class=&quot;divider before&quot;&gt;52.7%&lt;/span&gt; to &lt;span class=&quot;divider after&quot;&gt;62.4%&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span class=&quot;divider before&quot;&gt;62.4%&lt;/span&gt; to &lt;span class=&quot;divider after&quot;&gt;66.1%&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span class=&quot;divider before&quot;&gt;66.1%&lt;/span&gt; to &lt;span class=&quot;divider after&quot;&gt;68.7%&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span class=&quot;divider before&quot;&gt;68.7%&lt;/span&gt; to &lt;span class=&quot;divider after&quot;&gt;71.6%&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span class=&quot;divider before&quot;&gt;71.6%&lt;/span&gt; to &lt;span class=&quot;divider after&quot;&gt;75.2%&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span class=&quot;divider before&quot;&gt;75.2%&lt;/span&gt; to &lt;strong&gt;100%&lt;/strong&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;th rowspan=&quot;2&quot;&gt; Compliance &lt;small&gt;WCAG 2.1&lt;/small&gt;&lt;/th&gt;&lt;th&gt;white&lt;/th&gt;&lt;td class=&quot;pass&quot;&gt;✅ AA&lt;/td&gt;&lt;td class=&quot;pass&quot;&gt;✅ AA&lt;/td&gt;&lt;td class=&quot;fail&quot;&gt;&lt;/td&gt;&lt;td class=&quot;fail&quot;&gt;&lt;/td&gt;&lt;td class=&quot;fail&quot;&gt;&lt;/td&gt;&lt;td class=&quot;fail&quot;&gt;&lt;/td&gt;&lt;td class=&quot;fail&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;!--v-if--&gt;&lt;th&gt;black&lt;/th&gt;&lt;td class=&quot;fail&quot;&gt;&lt;/td&gt;&lt;td class=&quot;pass&quot;&gt;✅ AA&lt;/td&gt;&lt;td class=&quot;pass&quot;&gt;✅ AAA&lt;/td&gt;&lt;td class=&quot;pass&quot;&gt;✅ AAA&lt;/td&gt;&lt;td class=&quot;pass&quot;&gt;✅ AAA&lt;/td&gt;&lt;td class=&quot;pass&quot;&gt;✅ AAA&lt;/td&gt;&lt;td class=&quot;pass&quot;&gt;✅ AAA+&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th rowspan=&quot;2&quot;&gt; Readability &lt;small&gt;APCA&lt;/small&gt;&lt;/th&gt;&lt;th&gt;white&lt;/th&gt;&lt;td class=&quot;pass&quot;&gt;😍 Best&lt;/td&gt;&lt;td class=&quot;pass&quot;&gt;😍 Best&lt;/td&gt;&lt;td class=&quot;pass&quot;&gt;😍 Best&lt;/td&gt;&lt;td class=&quot;ok&quot;&gt;🙂 OK&lt;/td&gt;&lt;td class=&quot;ok&quot;&gt;🙂 OK&lt;/td&gt;&lt;td class=&quot;fail&quot;&gt;&lt;/td&gt;&lt;td class=&quot;fail&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;!--v-if--&gt;&lt;th&gt;black&lt;/th&gt;&lt;td class=&quot;fail&quot;&gt;&lt;/td&gt;&lt;td class=&quot;fail&quot;&gt;&lt;/td&gt;&lt;td class=&quot;fail&quot;&gt;&lt;/td&gt;&lt;td class=&quot;fail&quot;&gt;&lt;/td&gt;&lt;td class=&quot;ok&quot;&gt;🙂 OK&lt;/td&gt;&lt;td class=&quot;ok&quot;&gt;🙂 OK&lt;/td&gt;&lt;td class=&quot;pass&quot;&gt;😍 Best&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;figcaption&gt;
Contrast guarantees we can infer for black and white text over arbitrary colors.
OK = passes but is not necessarily best.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You may have noticed that in general, WCAG has a lot of false negatives around white text,
and tends to place the Lightness threshold much lower than APCA.
This is a known issue with the WCAG algorithm.&lt;/p&gt;
&lt;p&gt;Therefore, &lt;strong&gt;to best balance readability and compliance, we should use the highest threshold we can get away with&lt;/strong&gt;.
This means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If passing WCAG is a requirement, the highest threshold we can use is &lt;strong&gt;62.3%&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If actual readability is our only concern, we can safely ignore WCAG and pick a threshold somewhere between 68.7% and 71.6%, e.g. &lt;strong&gt;70%&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s a &lt;a href=&quot;https://lea.verou.me/blog/2024/contrast-color/#demo&quot;&gt;demo&lt;/a&gt; so you can see how they both play out.
Edit the color below to see how the two thresholds work in practice, and compare with the actual contrast brackets, shown on the table next to (or below) the color picker.&lt;/p&gt;
&lt;style&gt;
.contrast-color {
	--text-shadow: 0 0 .05em black;
	--text-shadow-2: var(--text-shadow), var(--text-shadow);
	--text-shadow-4: var(--text-shadow-2), var(--text-shadow-2);
	--text-shadow-8: var(--text-shadow-4), var(--text-shadow-4);
	text-shadow: var(--text-shadow-8);
	color: white;
}

#demo {
	display: flex;
	gap: 2em;
	padding-block: 2rem;

	color-picker {
		flex: 1;

		&amp;::part(swatch) {
			flex: 1.8;
		}
	}

	input[type=number] {
		field-sizing: content;
		background: none;
		color: inherit;
		border: .1em solid;
		border-radius: .2em;
	}

	table {
		width: auto;
		margin-bottom: 0;
	}

	@media (width &lt;= 430px) {
		&amp; {
			flex-direction: column;
		}
	}
}

@supports (color: oklch(from red l c h)) {
	:root {
		--supports-rcs: 1;
	}

	.if-no-rcs {
		display: none;
	}

	.contrast-color {
		--l: clamp(0, (l / var(--l-threshold) - 1) * -infinity, 1);
		color: oklch(from var(--color) var(--l) 0 h);
		text-shadow: none;
	}
}
&lt;/style&gt;
&lt;div class=&quot;warning if-no-rcs&quot;&gt;
&lt;p&gt;Your browser does not support Relative Color Syntax, so the demo below will not work.
This is what it looks like in a supporting browser:
&lt;img src=&quot;https://lea.verou.me/blog/2024/contrast-color/images/demo.png&quot; alt=&quot;Screenshot of demo&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;section id=&quot;demo&quot;&gt;
&lt;script type=&quot;module&quot;&gt;
import { getLevel } from &quot;./research/util.js&quot;;
globalThis.updateContrasts = function (color) {
	if (!color) {
		return;
	}
	for (let td of document.querySelectorAll(&quot;[data-algo]&quot;)) {
		let {algo, color: textColor} = td.dataset;
		let level = getLevel(algo, color.contrast(textColor, algo));
		td.textContent = level;
		td.className = level === &quot;fail&quot; ? &quot;fail&quot; : &quot;pass&quot;;
	}
}
&lt;/script&gt;
&lt;script type=&quot;module&quot; src=&quot;https://elements.colorjs.io/src/color-picker/color-picker.js&quot;&gt;&lt;/script&gt;
&lt;color-picker space=&quot;oklch&quot; color=&quot;oklch(65% 30% 180)&quot; oncolorchange=&quot;updateContrasts(this.color)&quot;&gt;
	&lt;div class=&quot;contrast-color&quot; style=&quot;--l-threshold: 0.7;&quot;&gt;&lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; = 70%&lt;/div&gt;
	&lt;label class=&quot;contrast-color&quot; style=&quot;--l-threshold: 0.645;&quot;&gt;
		&lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; =
		&lt;input type=&quot;number&quot; value=&quot;64.5&quot; step=&quot;0.1&quot; oninput=&quot;this.parentNode.style.setProperty(&#39;--l-threshold&#39;, this.value/100)&quot; /&gt;%
	&lt;/label&gt;
	&lt;div class=&quot;contrast-color&quot; style=&quot;--l-threshold: 0.623;&quot;&gt;&lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; = 62.3%&lt;/div&gt;
&lt;/color-picker&gt;
&lt;table id=&quot;contrasts&quot;&gt;
	&lt;caption&gt;Actual contrast ratios&lt;/caption&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th&gt;Text color&lt;/th&gt;
			&lt;th&gt;APCA&lt;/th&gt;
			&lt;th&gt;WCAG 2.1&lt;/th&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;th&gt;White&lt;/th&gt;
			&lt;td data-algo=&quot;APCA&quot; data-color=&quot;white&quot;&gt;&lt;/td&gt;
			&lt;td data-algo=&quot;WCAG21&quot; data-color=&quot;white&quot;&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr class=&quot;black&quot;&gt;
			&lt;th&gt;Black&lt;/th&gt;
			&lt;td data-algo=&quot;APCA&quot; data-color=&quot;black&quot;&gt;&lt;/td&gt;
			&lt;td data-algo=&quot;WCAG21&quot; data-color=&quot;black&quot;&gt;&lt;/td&gt;
		&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/section&gt;
&lt;p&gt;Avoid colors marked “P3+”, “PP” or “PP+”, as these are almost certainly outside your screen gamut,
and &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9449&quot;&gt;browsers currently do not gamut map properly&lt;/a&gt;, so the visual result will be off.&lt;/p&gt;
&lt;aside class=&quot;note language-html&quot; style=&quot;--label: &#39;Sneak peek&#39;&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://elements.colorjs.io/src/color-picker&quot;&gt;&lt;code&gt;&amp;lt;color-picker&amp;gt;&lt;/code&gt;&lt;/a&gt; component above is part of a new project I’m working on called &lt;a href=&quot;https://elements.colorjs.io/&quot;&gt;Color Elements&lt;/a&gt; (&lt;a href=&quot;https://www.npmjs.com/package/color-elements&quot;&gt;&lt;code&gt;color-elements&lt;/code&gt;&lt;/a&gt; on npm).
It’s a (&lt;em&gt;highly&lt;/em&gt; experimental) collection of web components that make it easy to make color-related apps and demos.
If that seems interesting, feel free to try them out and provide feedback!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Note that if your actual color is more constrained (e.g. a subset of hues or chromas or a specific gamut),
you might be able to balance these tradeoffs better by using a different threshold.
Run the experiment yourself with your actual range of colors and find out!&lt;/p&gt;
&lt;p&gt;Here are some examples of narrower ranges I have tried and the highest threshold that still passes WCAG 2.1:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Color range&lt;/th&gt;
&lt;th&gt;Threshold&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Modern low-end screens&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/contrast-color/research/?gamut=srgb&quot;&gt;Colors within the sRGB gamut&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;65%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Modern high-end screens&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/contrast-color/research/?gamut=p3&quot;&gt;Colors within the P3 gamut&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;64.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Future high-end screens&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/contrast-color/research/?gamut=rec2020&quot;&gt;Colors within the Rec.2020 gamut&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;63.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Neutrals&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/contrast-color/research/?c=0,0.03,0.01&quot;&gt;C ∈ [0, 0.03]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;67%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Muted colors&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/contrast-color/research/?c=0,0.1,0.01&quot;&gt;C ∈ [0, 0.1]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;65.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Warm colors (reds/oranges/yellows)&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/contrast-color/research/?h=0,100,1&quot;&gt;H ∈ [0, 100]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;66.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pinks/Purples&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/contrast-color/research/?h=300,370,1&quot;&gt;H ∈ [300, 370]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;67%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It is particularly interesting that &lt;strong&gt;the threshold is improved to 64.5% by just ignoring colors that are not actually displayable&lt;/strong&gt; on modern screens.
So, assuming (though sadly this is &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9449&quot;&gt;not an assumption that currently holds true&lt;/a&gt;) that browsers prioritize preserving lightness when gamut mapping, we &lt;em&gt;could&lt;/em&gt; use 64.5% and still guarantee WCAG compliance.&lt;/p&gt;
&lt;p&gt;You can even turn this into a utility class that you can combine with different thesholds:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.contrast-color {
	--l: clamp(0, (l / var(--l-threshold, 0.623) - 1) * -infinity, 1);
	color: oklch(from var(--color) var(--l) 0 h);
}

.pink {
	--l-threshold: 0.67;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusion-%26-future-work&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/contrast-color/#conclusion-%26-future-work&quot;&gt;Conclusion &amp;amp; Future work&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Putting it all together, including a fallback, as well as a “fall forward” that uses &lt;code&gt;contrast-color()&lt;/code&gt;,
the utility class could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.contrast-color {
	/* Fallback for browsers that don&#39;t support RCS */
	color: white;
	text-shadow: 0 0 .05em black, 0 0 .05em black, 0 0 .05em black, 0 0 .05em black;

	@supports (color: oklch(from red l c h)) {
		--l: clamp(0, (l / var(--l-threshold, 0.623) - 1) * -infinity, 1);
		color: oklch(from var(--color) var(--l) 0 h);
		text-shadow: none;
	}

	@supports (color: contrast-color(red)) {
		color: contrast-color(var(--color));
		text-shadow: none;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is only a start.
I can imagine many directions for improvement such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since RCS allows us to do math with &lt;em&gt;any&lt;/em&gt; of the color components
in &lt;em&gt;any&lt;/em&gt; color space, I wonder if there is a better formula that still be implemented in CSS and balances readability and compliance even better.
E.g. I’ve had some chats with &lt;a href=&quot;https://github.com/Myndex&quot;&gt;Andrew Somers&lt;/a&gt; (creator of APCA) right before publishing this,
which suggest that doing math on luminance (the Y component of XYZ) instead could be a promising direction.&lt;/li&gt;
&lt;li&gt;We currently only calculate thresholds for white and black text.
However, in real designs, we rarely want pure black text,
which is why &lt;code&gt;contrast-color()&lt;/code&gt; only guarantees a &lt;em&gt;“very light or very dark color”&lt;/em&gt; unless the &lt;code&gt;max&lt;/code&gt; keyword is used.
How would this extend to darker tints of the background color?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;addendum&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/contrast-color/#addendum&quot;&gt;Addendum&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As often happens, after publishing this blog post, a ton of folks reached out to share all sorts of related work in the space.
I thought I’d share some of the most interesting findings here.&lt;/p&gt;
&lt;h3 id=&quot;using-luminance-instead-of-lightness&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/contrast-color/#using-luminance-instead-of-lightness&quot;&gt;Using luminance instead of Lightness&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When colors have sufficiently different lightness values (as happens with white or black text),
humans disregard chromatic contrast (the contrast that hue/colorfulness provide)
and basically only use lightness contrast to determine readability.
This is why L can be such a good predictor of whether white or black text works best.&lt;/p&gt;
&lt;p&gt;Another measure, luminance, is basically the color’s Y component in the XYZ color space,
and a good threshold for flipping to black text is when Y &amp;gt; 0.36.
This gives us another method for computing a text color:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;--y-threshold: 0.36;
--y: clamp(0, (y / var(--y-threshold) - 1) * -infinity, 1);
color: color(from var(--color) xyz-d65 var(--y) var(--y) var(--y));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see in &lt;a href=&quot;https://blackorwhite.lloydk.ca/&quot;&gt;this demo by Lloyd Kupchanko&lt;/a&gt;, using &lt;var&gt;Y&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; &amp;gt; 36%
very closely predicts the best text color as determined by APCA.&lt;/p&gt;
&lt;p&gt;In my tests (&lt;a href=&quot;https://codepen.io/leaverou/pen/ExzVOME&quot;&gt;codepen&lt;/a&gt;) it appeared to work as well as the &lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; method,
i.e. it was a struggle to find colors where they disagree.
However, &lt;a href=&quot;https://twitter.com/lkupchanko/status/1791558925206409553&quot;&gt;after this blog post, Lloyd added&lt;/a&gt; various &lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; boundaries to his demo,
and it appears that indeed, &lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; has a wider range where it disagrees with APCA than &lt;var&gt;Y&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; does.&lt;/p&gt;
&lt;p&gt;Given this, &lt;strong&gt;my recommendation would be to use the &lt;var&gt;Y&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; method if you need to flip between black and white text,
and the &lt;var&gt;L&lt;sub&gt;threshold&lt;/sub&gt;&lt;/var&gt; method if you need to customize the text color further&lt;/strong&gt; (e.g. have a very dark color instead of black).&lt;/p&gt;
&lt;h3 id=&quot;browser-bug-%26-workarounds&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/contrast-color/#browser-bug-%26-workarounds&quot;&gt;Browser bug &amp;amp; workarounds&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;About a week after publishing this post, I discovered a browser bug with &lt;code&gt;color-mix()&lt;/code&gt; and RCS,
where colors defined via &lt;code&gt;color-mix()&lt;/code&gt; used in &lt;code&gt;from&lt;/code&gt; render RCS invalid.
You can use &lt;a href=&quot;https://codepen.io/leaverou/pen/ExzVOME&quot;&gt;this testcase&lt;/a&gt; to see if a given browser is affected.
This has been fixed in Chrome 125 and Safari TP release 194, but it certainly throws a spanner in the works since the whole point of using this technique is that we don’t have to care how the color was defined.&lt;/p&gt;
&lt;p&gt;There are two ways to work around this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adjust the &lt;code&gt;@supports&lt;/code&gt; condition to use &lt;code&gt;color-mix()&lt;/code&gt;, like so:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@supports (color: oklch(from color-mix(in oklch, red, tan) l c h)) {
	/* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The downside is that right now, this would restrict the set of browsers this works in to a teeny tiny set.
2. Register the custom property that contains the color:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@property --color {
	syntax: &amp;quot;&amp;lt;color&amp;gt;&amp;quot;;
	inherits: true;
	initial-value: transparent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This completely fixes it, since if the property is registered, by the time the color hits RCS, it’s just a resolved color value.
&lt;code&gt;@property&lt;/code&gt; is currently &lt;a href=&quot;https://caniuse.com/mdn-css_at-rules_property&quot;&gt;supported&lt;/a&gt; by a much wider set of browsers than RCS, so this workaround doesn’t hurt compatiblity at all.&lt;/p&gt;
&lt;h3 id=&quot;useful-resources&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/contrast-color/#useful-resources&quot;&gt;Useful resources&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Many people have shared useful resources on the topic, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blackorwhite.lloydk.ca/&quot;&gt;Black or White?&lt;/a&gt;: Compare different contrast algorithms for picking between black or white&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://miunau.com/posts/dynamic-text-contrast-in-css/&quot;&gt;Dynamic text color contrast based on background lightness with CSS/SVG filters&lt;/a&gt;: A different approach to the same problem (requires extra HTML element for the text)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://svgees.us/&quot;&gt;Chris Lilley&lt;/a&gt;,
&lt;a href=&quot;https://github.com/myndex&quot;&gt;Andrew Somers&lt;/a&gt;,
&lt;a href=&quot;https://www.abeautifulsite.net/&quot;&gt;Cory LaViska&lt;/a&gt;,
&lt;a href=&quot;https://fantasai.inkedblade.net/&quot;&gt;Elika Etemad&lt;/a&gt;,
and &lt;a href=&quot;https://xanthir.com/&quot;&gt;Tab Atkins-Bittner&lt;/a&gt;
for their feedback on earlier drafts of this article.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Inline conditionals in CSS?</title>
    <link href="https://lea.verou.me/blog/2024/css-conditionals/"/>
    <updated>2024-06-18T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2024/css-conditionals/</id>
    <content xml:lang="en" type="html">&lt;div class=&quot;nutshell&quot;&gt;
&lt;p&gt;Last week, the CSS WG resolved to add an inline &lt;code&gt;if()&lt;/code&gt; to CSS.
But what does that mean, and why is it exciting?&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Last week, we had a CSS WG face-to-face meeting in A Coruña, Spain.
There is one resolution from that meeting that I’m particularly excited about:
the &lt;strong&gt;consensus to add an inline &lt;code&gt;if()&lt;/code&gt; to CSS&lt;/strong&gt;.
While I was not the first to propose an inline conditional syntax,
I did try and scope down the various nonterminating discussions into an MVP that can actually be implemented quickly,
discussed ideas with implemenators,
and eventually published a &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10064&quot;&gt;concrete proposal&lt;/a&gt; and pushed for group resolution.
Quite poetically, the relevant discussion occurred on my birthday, so in a way, I got &lt;code&gt;if()&lt;/code&gt; as the most unique birthday present ever. 😀&lt;/p&gt;
&lt;p&gt;This also comes to show that proposals being rejected is not the end-all for a given feature.
It is in fact quite common for features to be rejected for several times before they are accepted: CSS Nesting, &lt;code&gt;:has()&lt;/code&gt;, container queries were all simply the last iteration in a series of rejected proposals.
&lt;code&gt;if()&lt;/code&gt; itself was apparently &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/3455&quot;&gt;rejected&lt;/a&gt; in 2018 with very similar syntax to what I proposed.
What was the difference? Style queries had already shipped, and we could simply reference the same syntax for conditions (plus &lt;code&gt;media()&lt;/code&gt; and &lt;code&gt;supports()&lt;/code&gt; from &lt;a href=&quot;https://drafts.csswg.org/css-conditional/&quot;&gt;Tab’s &lt;code&gt;@when&lt;/code&gt; proposal&lt;/a&gt;) whereas in the 2018 proposal how conditions would work was largely undefined.&lt;/p&gt;
&lt;p&gt;I posted about this on a variety of social media, and the response by developers has been overwhelmingly positive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/LeaVerou/status/1801192208025940200&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/posts/leaverou_css-values-what-is-the-mvp-for-inline-activity-7206968267087745024-1Fns&quot;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://front-end.social/@leaverou/112608705600433866&quot;&gt;Mastodon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I even had friends from big companies writing to tell me their internal Slacks blew up about it.
This proves what I’ve always suspected, and was part of the case I made to the CSS WG: that &lt;strong&gt;this is a huge pain point&lt;/strong&gt;.
Hopefully the amount and intensity of positive reactions will help browsers prioritize this feature and add it to their roadmaps earlier rather than later.&lt;/p&gt;
&lt;p&gt;Across all these platforms, besides the &lt;em&gt;“I can’t wait for this to ship!”&lt;/em&gt; sentiment being most common,
there were a few other recurring questions and a fair bit of confusion that I figured were worth addressing.&lt;/p&gt;
&lt;h2 id=&quot;faq&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;why&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals/#why&quot;&gt;What is &lt;code&gt;if()&lt;/code&gt; for? Does it replace style queries?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Quite the opposite — &lt;code&gt;if()&lt;/code&gt; &lt;em&gt;complements&lt;/em&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_size_and_style_queries#container_style_queries_2&quot;&gt;style queries&lt;/a&gt;.
If you can do something with style queries, by all means, use style queries — they are almost certainly a better solution.
But there are things you simply cannot do with style queries.
Let me explain.&lt;/p&gt;
&lt;p&gt;The motivating use case was that components (in the broader sense) often need to define &lt;em&gt;higher level custom properties&lt;/em&gt;,
whose values are not just used verbatim in declarations, but that set unrelated values on a variety of declarations.&lt;/p&gt;
&lt;p&gt;For example, consider a &lt;code&gt;--variant&lt;/code&gt; custom property (inspired from &lt;a href=&quot;https://shoelace.style/components/alert#variants&quot;&gt;Shoelace’s &lt;code&gt;variant&lt;/code&gt; attribute&lt;/a&gt;).
It could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--variant: success | danger | warning | primary | none;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This needs to set background colors, border colors, text colors, icons, etc.
In fact, it’s actual value is not used verbatim anywhere, it is &lt;em&gt;only&lt;/em&gt; used to set other values.&lt;/p&gt;
&lt;p&gt;Style queries get us halfway there:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.callout { /* or :host if in Shadow DOM */
	@container (style(--variant: success)) {
		&amp;amp;::before {
			content: var(--icon-success);
			color: var(--color-success);
		}
	}

	/* (other variants) */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, style queries only work on descendants.
We cannot do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.callout {
	@container (style(--variant: success)) {
		border-color: var(--color-success-30);
		background-color: var(--color-success-95);

		&amp;amp;::before {
			content: var(--icon-success);
			color: var(--color-success-05);
		}
	}

	/* (other variants) */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Often the declarations we need to set on the element itself are very few, sometimes even just one.
However, even one is one too many and makes using custom properties untenable for many (possibly most) higher level custom property use cases.
As a result, component libraries end up resorting to presentational attributes like &lt;code&gt;pill&lt;/code&gt;, &lt;code&gt;outline&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;While &lt;strong&gt;presentational attributes&lt;/strong&gt; may seem fine at first glance, or even better for DX (fewer characters — at least compared to setting a variable per element),
they have several usability issues:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Reduced flexibility&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;They cannot be conditionally applied based on selectors, media queries, etc.
Changing them requires more JS.
If they are used within another component, you’re SOL, whereas with (inheritable) custom properties, you can set the property on the parent component and it will inherit down.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Verbosity&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;They have to be applied to individual instances, and cannot be inherited.
Even if one uses some form of templating or componentization to reduce duplication,
they still have to wade through these attributes when debugging with dev tools.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Lack of consistency&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Since almost every mature component &lt;em&gt;also&lt;/em&gt; supports custom properties,
users have to remember which styling is done via attributes and which via custom properties.
The distinction is often arbitrary, as it’s not driven by use cases, but implementation convenience.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;With &lt;code&gt;if()&lt;/code&gt;, the above example becomes possible, albeit with worse ergonomics than style queries since it cannot cascade
(though I do have a &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10443&quot;&gt;proposal&lt;/a&gt; to allow it to — plus all other &lt;a href=&quot;https://www.bram.us/2024/02/26/css-what-is-iacvt/&quot;&gt;IACVT&lt;/a&gt; declarations):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.callout {
	border-color: if(
		style(--variant: success) ? var(--color-success-30) :
		style(--variant: danger) ? var(--color-danger-30) :
		/* (other variants) */
		var(--color-neutral-30)
	);
	background-color: if(
		style(--variant: success) ? var(--color-success-95) :
		style(--variant: danger) ? var(--color-danger-95) :
		/* (other variants) */
		var(--color-neutral-95)
	);

	@container (style(--variant: success)) {
		&amp;amp;::before {
			content: var(--icon-success);
			color: var(--color-success-05);
		}
	}

	/* (other variants) */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this was the primary use case, it turned out that it’s pretty easy to also make media queries and supports conditions part of &lt;code&gt;if()&lt;/code&gt;’s conditional syntax.
And since it’s a function, its arguments (including the condition!) can be stored in other custom properties.
This means you can do things like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
	--xl: media(width &amp;gt; 1600px);
	--l: media (width &amp;gt; 1200px);
	--m: media (width &amp;gt; 800px);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then define values like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;padding: if(
	var(--xl) ? var(--size-3) :
	var(--l) or var(--m) ? var(--size-2) :
	var(--size-1)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like ternaries in JS, it may also be more ergonomic for cases where only a small part of the value varies:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;animation: if(media(prefers-reduced-motion) ? 10s : 1s) rainbow infinite;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;so-is-it-in-browsers-yet%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals/#so-is-it-in-browsers-yet%3F&quot;&gt;So is it in browsers yet?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Believe it or not, that was a &lt;a href=&quot;https://twitter.com/activenode/status/1801203345257910470&quot;&gt;real question&lt;/a&gt; I got 😅.
No, it’s not in browsers yet, and it won’t be for a while.
The most optimistic estimate is 2 years or so, &lt;em&gt;if&lt;/em&gt; the process doesn’t stall at any point (as it often does).&lt;/p&gt;
&lt;p&gt;All we have is consensus to work on the feature.
The next steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reach consensus on the &lt;em&gt;syntax&lt;/em&gt; of the feature.
Syntax debates can often take a very long time, because syntax is an area where everyone has opinions.
The current debates revolve around:
&lt;ul&gt;
&lt;li&gt;What separators to use between the condition and the branches?&lt;/li&gt;
&lt;li&gt;How to represent no value? Do we simply allow empty values like in &lt;code&gt;var()&lt;/code&gt; (where you can do &lt;code&gt;var(--foo,)&lt;/code&gt;)
or &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10441&quot;&gt;do we introduce a dedicated syntax that means “empty value”&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Should the last value be optional?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spec the feature.&lt;/li&gt;
&lt;li&gt;Get the first implementation.
Often that is the hardest part. Once one browser implements, it is far easier to get the others on board.&lt;/li&gt;
&lt;li&gt;Get it shipped across all major browsers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I do have a &lt;a href=&quot;https://lea.verou.me/specs&quot;&gt;page&lt;/a&gt; where I track some of my standards proposals which should help illuminate what the timeline looks like for each of these steps.
In fact, you can &lt;a href=&quot;https://lea.verou.me/specs/#if-mvp&quot;&gt;track the progress of &lt;code&gt;if()&lt;/code&gt;&lt;/a&gt; specifically there too.&lt;/p&gt;
&lt;aside class=&quot;info&quot;&gt;
&lt;p&gt;Do note that these steps are not necessarily linear.
Often we spec an initial version, then resolve on a different syntax and update the spec.
Sometimes browsers even implement the early syntax, and then it changes and they have to change their implementations (as happened with &lt;a href=&quot;https://lea.verou.me/specs/#relaxed-css-nesting&quot;&gt;Nesting&lt;/a&gt;)&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Want to make this happen faster?&lt;/strong&gt;
&lt;strong&gt;Excited about &lt;code&gt;if()&lt;/code&gt; and want to show gratitude?&lt;/strong&gt;
&lt;a href=&quot;https://opencollective.com/leaverou/projects/standards-work&quot;&gt;Fund my web standards work on Open Collective&lt;/a&gt;.
I started this while writing this blog post as an experiment, and don’t plan to promote it much, but it’s there if you are so inclined.&lt;/p&gt;
&lt;/aside&gt;
&lt;h3 id=&quot;is-this-the-first-conditional-in-css%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals/#is-this-the-first-conditional-in-css%3F&quot;&gt;Is this the first conditional in CSS?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Many responses were along the lines of “Wow, CSS is finally getting conditionals!”.&lt;/p&gt;
&lt;p&gt;Folks… CSS had conditionals from the very beginning.
Every selector is essentially a conditional!&lt;/p&gt;
&lt;p&gt;In addition:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@media&lt;/code&gt; and &lt;code&gt;@supports&lt;/code&gt; rules are conditionals. And let’s not forget &lt;code&gt;@container&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var(--foo, fallback)&lt;/code&gt; is a limited type of conditional (essentially &lt;code&gt;if(style(--foo: initial) ? var(--foo) : fallback)&lt;/code&gt;),
hence why it’s the basis of most &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10064#issuecomment-2161742249&quot;&gt;workarounds&lt;/a&gt; for emulating inline conditionals.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;does-this-make-css-imperative%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals/#does-this-make-css-imperative%3F&quot;&gt;Does this make CSS imperative?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A widespread misconception is that non-linear logic (conditionals, loops) makes a language imperative.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Declarative vs imperative is not about logic, but level of abstraction.&lt;/strong&gt;
Are we describing the &lt;em&gt;goal&lt;/em&gt; or &lt;em&gt;how&lt;/em&gt; to achieve it?
In culinary terms, a recipe is imperative, a restaurant menu is declarative&lt;/p&gt;
&lt;p&gt;Conditional logic can actually make a language &lt;em&gt;more&lt;/em&gt; declarative if it helps describe intent better.&lt;/p&gt;
&lt;p&gt;Consider the following two snippets of CSS:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Space toggle&lt;/th&gt;&lt;th&gt;if()&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;button {
	border-radius: calc(.2em + var(--pill, 999em));
}

.fancy.button {
	/* Turn pill on */
	--pill: initial;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;button {
	border-radius: if(style(--shape: pill) ? 999em : .2em);
}

.fancy.button {
	--shape: pill;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;I would argue the latter is far more declarative, i.e. much closer to specifying the goal rather than how to achieve it.&lt;/p&gt;
&lt;h3 id=&quot;does-this-make-css-a-programming-language%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals/#does-this-make-css-a-programming-language%3F&quot;&gt;Does this make CSS a programming language?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A very common type of response was around whether CSS is now a programming language
(either asking whether it is, or asserting that it now is).
To answer that, one first needs to answer &lt;em&gt;what&lt;/em&gt; a programming language &lt;em&gt;is&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If it’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Turing_completeness&quot;&gt;Turing-completeness&lt;/a&gt; that makes a language a programming language,
then &lt;a href=&quot;https://accodeing.com/blog/2015/css3-proven-to-be-turing-complete&quot;&gt;CSS has been a programming language for over a decade&lt;/a&gt;.
But then again, &lt;a href=&quot;https://en.wikipedia.org/wiki/Turing_completeness#Unintentional_Turing_completeness&quot;&gt;so is Excel or Minecraft&lt;/a&gt;.
So what does that even mean?&lt;/p&gt;
&lt;p&gt;If it’s imperativeness, then no, CSS is not a programming language.
But &lt;a href=&quot;https://en.wikipedia.org/wiki/Declarative_programming&quot;&gt;neither are&lt;/a&gt; many actual programming languages!&lt;/p&gt;
&lt;p&gt;But a deeper question is, &lt;em&gt;why does it matter&lt;/em&gt;?
Is it because it legitimizes choosing to specialize in CSS?
It is because you can then be considered a programmer even if you only write HTML &amp;amp; CSS?
If this only matters for optics, then we should fix the issue at its core and fight to legitimize CSS expertise &lt;em&gt;regardless&lt;/em&gt; of whether CSS is a programming language.
After all, as anyone who knows several well-respected programming languages &lt;em&gt;and&lt;/em&gt; CSS can attest, CSS is &lt;em&gt;far&lt;/em&gt; harder to master.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Great as all this may be, it won’t be in browsers for a while.
What can we do &lt;em&gt;right now&lt;/em&gt;?
I wrote &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/&quot;&gt;Part 2&lt;/a&gt; exactly about that: &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/&quot;&gt;CSS Conditionals, now?&lt;/a&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Inline conditionals in CSS, now?</title>
    <link href="https://lea.verou.me/blog/2024/css-conditionals-now/"/>
    <updated>2024-06-21T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2024/css-conditionals-now/</id>
    <content xml:lang="en" type="html">&lt;div class=&quot;nutshell&quot;&gt;
&lt;p&gt;The CSS WG &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals/&quot;&gt;resolved&lt;/a&gt; to add &lt;code&gt;if()&lt;/code&gt; to CSS, but that won’t be in browsers for a while.
What are our options in the meantime?&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A couple days ago, I posted about the recent &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals/&quot;&gt;CSS WG resolution to add an &lt;code&gt;if()&lt;/code&gt; function to CSS&lt;/a&gt;.
Great as it may be, this is still a long way off, two years if everything goes super smoothly, more if not.
So what can you do when you need conditionals &lt;em&gt;right now&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;You may be pleased to find that you’re not &lt;em&gt;completely&lt;/em&gt; out of luck.
There is a series of brilliant, horrible hacks that enable you to expose the kinds of higher level custom properties that conditionals typically enable.&lt;/p&gt;
&lt;h2 id=&quot;hacks-in-production&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#hacks-in-production&quot;&gt;Using hacks in production?!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The instinctive reaction many developers have when seeing hacks like these is “Nice hack, but can’t &lt;em&gt;possibly&lt;/em&gt; ever use this in production”.
This sounds reasonable on the surface (keeping the codebase maintainable is a worthy goal!) but
when examined deeply, it reflects the wrong order of priorities,
prioritizing developer convenience over user convenience.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Technical_Architecture_Group&quot;&gt;TAG&lt;/a&gt; maintains a &lt;a href=&quot;https://www.w3.org/TR/design-principles/&quot;&gt;Web Platform Design Principles&lt;/a&gt; document &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;
that everyone designing APIs for the web platform is supposed to read and follow.
I’m a strong believer in having published Design Principles, for any product&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.
They help stay on track, and remember what the big picture vision is, which is otherwise easy to lose sight of in the day to day minutiae.
One of the core principles in the document is the &lt;a href=&quot;https://www.w3.org/TR/design-principles/#priority-of-constituencies&quot;&gt;Priority of Constituencies&lt;/a&gt;.
The core of it is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;User needs come before the needs of web page authors, which come before the needs of user agent implementors, which come before the needs of specification writers, which come before theoretical purity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Obviously in most projects there are far fewer stakeholders than for the whole web platform,
but the spirit of the principle still applies:
&lt;strong&gt;the higher the abstraction, the higher priority the user needs&lt;/strong&gt;.
Or, in other words, &lt;strong&gt;consumers above producers&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For a more relatable example, in a web app using a framework like e.g. Vue and several Vue components,
the user needs of website users come before the needs of the web app developers,
which come before the needs of the developers of its Vue components,
which come before the needs of the Vue framework developers (sorry Evan :).&lt;/p&gt;
&lt;p&gt;The TAG did not invent this principle; it is well known in UX and Product circles with a number of different wordings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“Put the pain on those who can bear it”&lt;/li&gt;
&lt;li&gt;Prefer internal complexity over external complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why is that? Several reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is &lt;em&gt;far&lt;/em&gt; easier to change the implementation than to change the user-facing API, so it’s worth making sacrifices to keep it clean from the get go.&lt;/li&gt;
&lt;li&gt;Most products have way more users than developers, so this minimizes collective pain.&lt;/li&gt;
&lt;li&gt;Internal complexity can be managed far more easily, with tooling or even good comments.&lt;/li&gt;
&lt;li&gt;Managing complexity internally localizes it and contains it better.&lt;/li&gt;
&lt;li&gt;Once the underlying platform improves, only one codebase needs to be changed to reap the benefits.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The corollary is that if hacks allow you to expose a nicer API to component users, it may be worth the increase in internal complexity (to a degree).
Just make sure that part of the code is well commented, and keep track of it so you can return to it once the platform has evolved to not require a hack anymore.&lt;/p&gt;
&lt;p&gt;Like all principles, &lt;strong&gt;this isn’t absolute&lt;/strong&gt;.
A small gain in user convenience is not a good tradeoff when it requires tremendous implementation complexity.
But it’s a good north star to follow.&lt;/p&gt;
&lt;p&gt;As to whether custom properties are a better option to control styling than e.g. attributes,
I listed several arguments for that in my &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals/#why&quot;&gt;previous article&lt;/a&gt;.
Although, there are also cases where using custom properties is not a good idea…&lt;/p&gt;
&lt;h3 id=&quot;when-is-it-not-a-good-idea-to-do-this%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#when-is-it-not-a-good-idea-to-do-this%3F&quot;&gt;When is it not a good idea to do this?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In a nutshell, when the abstraction is likely to leak.
&lt;strong&gt;Ugliness is only acceptable if it’s encapsulated and not exposed to component users.&lt;/strong&gt;
If there is a high chance they may come into contact with it, it might be a better idea to simply use attributes and call it a day.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/images/callouts.png&quot; alt=&quot;A series of callouts with --variant declarations next to them&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Example callouts with three variants.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In many of the examples below, I use variants as the canonical example of a custom property that a component may want to expose.
However, if component consumers may need to customize each variant, it may be better to use attributes so they can just use e.g. &lt;code&gt;[variant=&amp;quot;success&amp;quot;]&lt;/code&gt; instead of having to understand whatever crazy hack was used to expose a &lt;code&gt;--variant&lt;/code&gt; custom property.
And even from a philosophical purity perspective, variants are on the brink of presentational vs semantic anyway.&lt;/p&gt;
&lt;h2 id=&quot;the-current-state-of-the-art&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#the-current-state-of-the-art&quot;&gt;The current state of the art&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is a host of hacks and workarounds that people have come up with to make up for the lack of inline conditionals in CSS,
with the first ones dating back to as early as 2015.&lt;/p&gt;
&lt;h3 id=&quot;binary-linear-interpolation&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#binary-linear-interpolation&quot;&gt;1. Binary Linear Interpolation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was &lt;a href=&quot;https://kizu.dev/conditions-for-css-variables/&quot;&gt;first documented by Roma Komarov in 2016&lt;/a&gt;, and has since been used in a number of creative ways.
The gist of this method is to use essentially the &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_interpolation&quot;&gt;linear interpolation&lt;/a&gt; formula for mapping &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;4.526ex&quot; height=&quot;2.262ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 2000.7 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(278,0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(778,0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1222.7,0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1722.7,0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt; to &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;4.431ex&quot; height=&quot;2.262ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 1958.7 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(278,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(807,0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1251.7,0)&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1680.7,0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;:&lt;/p&gt;
&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; display=&quot;true&quot; style=&quot;direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;18.398ex&quot; height=&quot;2.262ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 8131.8 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45D&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(725.2,0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1725.4,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2476.7,0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3476.9,0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(3865.9,0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4588.1,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5588.3,0)&quot;&gt;&lt;path data-c=&quot;1D45D&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6091.3,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6702.6,0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7702.8,0)&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;block&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;&lt;p&gt;However, instead of using this to map a range to another range,
we use it to map two points to two other points,
basically the two extremes of both ranges: &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.439ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;5.286ex&quot; height=&quot;1.946ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -666 2336.6 860&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45D&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(780.8,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1836.6,0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt; and &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.439ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;5.286ex&quot; height=&quot;1.946ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -666 2336.6 860&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45D&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(780.8,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1836.6,0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt; to select &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.023ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;1.197ex&quot; height=&quot;1.02ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -441 529 451&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt; and &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;0.971ex&quot; height=&quot;1.595ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 429 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt; respectively.&lt;/p&gt;
&lt;p&gt;This was Roma’s original example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
		--is-big: 0;
}

.is-big {
		--is-big: 1;
}

.block {
		padding: calc(
				25px * var(--is-big) +
				10px * (1 - var(--is-big))
		);
		border-width: calc(
				3px * var(--is-big) +
				1px * (1 - var(--is-big))
		);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;He even expands it to multiple conditions by multiplying the interpolation factors.
E.g. this code snippet to map &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;100px&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;20px&lt;/code&gt;, and &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;3px&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.block {
		padding: calc(
				100px * (1 - var(--foo)) * (2 - var(--foo)) * 0.5 +
				20px  * var(--foo) * (2 - var(--foo)) +
				3px   * var(--foo) * (1 - var(--foo)) * -0.5
		);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which these days could be rewritten as this, which also makes the boolean logic at play clearer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.block {
		--if-not-0: min(max(0 - var(--foo), var(--foo) - 0), 1);
		--if-not-1: min(max(1 - var(--foo), var(--foo) - 1), 1);
		--if-not-2: min(max(2 - var(--foo), var(--foo) - 2), 1);

		--if-0: var(--if-not-1) * var(--if-not-2);
		--if-1: var(--if-not-0) * var(--if-not-2);
		--if-2: var(--if-not-0) * var(--if-not-1);

		padding: calc(
				100px * var(--if-0) +
				20px  * var(--if-1) +
				3px   * var(--if-2)
		);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Back then, &lt;code&gt;min()&lt;/code&gt; and &lt;code&gt;max()&lt;/code&gt; were not available, so he had to divide each factor by an obscure constant to make it equal to 1 when it was not &lt;code&gt;0&lt;/code&gt;.
Once &lt;code&gt;abs()&lt;/code&gt; ships this will be even simpler (the inner &lt;code&gt;max()&lt;/code&gt; is basically getting the absolute value of &lt;code&gt;N - var(--foo)&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Ana Tudor also wrote about this in 2018, in this very visual article: &lt;a href=&quot;https://css-tricks.com/dry-switching-with-css-variables-the-difference-of-one-declaration/&quot;&gt;DRY Switching with CSS Variables&lt;/a&gt;.
Pretty sure she was also using boolean algebra on these too (multiplication = AND, addition = OR), but I couldn’t find the exact post.&lt;/p&gt;
&lt;h3 id=&quot;toggles&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#toggles&quot;&gt;2. Toggles (Space Toggle, Cyclic Toggles)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was independently discovered by Ana Tudor (&lt;a href=&quot;https://twitter.com/anatudor/status/1284160219963170816&quot;&gt;c. 2017&lt;/a&gt;),
Jane Ori &lt;a href=&quot;https://twitter.com/Jane0ri/status/1282303255826046977&quot;&gt;in April 2020&lt;/a&gt; (who gave it the name “Space Toggle”),
David Khoursid (aka David K Piano) in &lt;a href=&quot;https://twitter.com/DavidKPiano/status/1284163706016927746&quot;&gt;June 2020&lt;/a&gt; (he &lt;a href=&quot;https://twitter.com/DavidKPiano/status/1284155737720205313&quot;&gt;called it&lt;/a&gt; prop-and-lock),
and yours truly in &lt;a href=&quot;https://lea.verou.me/blog/2020/10/the-var-space-hack-to-toggle-multiple-values-with-one-custom-property/&quot;&gt;Oct 2020&lt;/a&gt; (I called it the --var: ; hack, arguably the worst name of the three 😅).&lt;/p&gt;
&lt;p&gt;The core idea is that &lt;code&gt;var(--foo, fallback)&lt;/code&gt; is actually a very limited form of conditional: if &lt;code&gt;--foo&lt;/code&gt; is &lt;code&gt;initial&lt;/code&gt; (or IACVT), it falls back to &lt;code&gt;fallback&lt;/code&gt;, otherwise it’s &lt;code&gt;var(--foo)&lt;/code&gt;.
Furthermore, we can set custom properties (or their fallbacks) to empty values to get them to be ignored when used as part of a property value.
It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
	--if-success: ;
	--if-warning: ;
}
.success {
	--if-success: initial;
}

.warning {
	--if-warning: initial;
}

.callout {
	background:
		var(--if-success, var(--color-success-90))
		var(--if-warning, var(--color-warning-90));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of the downsides of this version is that it only supports two states per variable.
Note how we needed two variables for the two states.
Another downside is that there is no way to specify a fallback if none of the relevant variables are set.
In the example above, if neither &lt;code&gt;--if-success&lt;/code&gt; nor &lt;code&gt;--if-warning&lt;/code&gt; are set, the &lt;code&gt;background&lt;/code&gt; declaration will be empty, and thus become IACVT which will make it &lt;code&gt;transparent&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;cyclic-toggles&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#cyclic-toggles&quot;&gt;Cyclic Toggles&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In 2023, Roma Komarov expanded the technique into what he called &lt;a href=&quot;https://kizu.dev/cyclic-toggles/&quot;&gt;“Cyclic Dependency Space Toggles”&lt;/a&gt; which
addresses both limitations:
it supports any number of states,
and allows for a default value.
The core idea is that variables do not only become &lt;code&gt;initial&lt;/code&gt; when they are not set, or are explicitly set to &lt;code&gt;initial&lt;/code&gt;,
but also when cycles are encountered.&lt;/p&gt;
&lt;aside class=&quot;info&quot;&gt;
&lt;p&gt;What is a cycle? A cycle is when a variable references itself, either directly or indirectly.
The most trivial cycle is &lt;code&gt;--foo: var(--foo);&lt;/code&gt; but they can have any number of steps, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;--a1: var(--a2);
--a2: var(--a3);
--a3: var(--a1);
&lt;/code&gt;&lt;/pre&gt;
&lt;/aside&gt;
&lt;p&gt;Roma’s technique depends on this behavior by producing cycles on all but one of the variables used for the values.
It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.info {
	--variant: var(--variant-default);

	--variant-default: var(--variant,);
	--variant-success: var(--variant,);
	--variant-warning: var(--variant,);
	--variant-error:   var(--variant,);

	background:
		var(--variant-default, lavender)
		var(--variant-success, palegreen)
		var(--variant-warning, khaki)
		var(--variant-error,   lightpink);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And is used like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.my-warning {
	--variant: var(--variant-warning);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;A downside of this method is that since the values behind the &lt;code&gt;--variant-success&lt;/code&gt;, &lt;code&gt;--variant-warning&lt;/code&gt;, etc variables are specific to the &lt;code&gt;--variant&lt;/code&gt; variable
they need to be namespaced to avoid clashes.&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&quot;layered-toggles&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#layered-toggles&quot;&gt;Layered Toggles&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A big downside of most of these methods (except for the animation-based ones) is that you need to specify all values of the property in one place,
and the declaration gets applied whether your custom property has a value or not,
which makes it difficult to layer composable styles leading to some undesirable couplings.&lt;/p&gt;
&lt;p&gt;Roma Komarov’s &lt;a href=&quot;https://kizu.dev/layered-toggles/&quot;&gt;“Layered Toggles”&lt;/a&gt; method addresses this for some cases
by allowing us to decouple the different values by taking advantage of Cascade Layers.
The core idea is that Cascade Layers include a &lt;code&gt;revert-layer&lt;/code&gt; keyword that will cause the current layer to be ignored wrt the declaration it’s used on.
Given that we can use unnamed layers, we can simply user a &lt;code&gt;@layer {}&lt;/code&gt; rule for every block of properties we want to apply conditionally.&lt;/p&gt;
&lt;p&gt;This approach does have some severe limitations which made it rather unpractical for my use cases.
The biggest one is that anything in a layer has lower priority than any unlayered styles,
which makes it prohibitive for many use cases.
Also, this doesn’t really simplify cyclic toggles, you still need to set all values in one place.
Still, worth a look as there are some use cases it can be helpful for.&lt;/p&gt;
&lt;h3 id=&quot;paused-animations&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#paused-animations&quot;&gt;3. Paused animations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The core idea behind this method is that paused animations (&lt;code&gt;animation-play-state: paused&lt;/code&gt;) can still be advanced by setting &lt;code&gt;animation-delay&lt;/code&gt; to a negative value.
For example in an animation like &lt;code&gt;animation: 100s foo&lt;/code&gt;, you can access the 50% mark by setting &lt;code&gt;animation-delay: -50s&lt;/code&gt;.
It’s trivial to transform raw numbers to &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; values, so this can be abstracted to plain numbers for the user-facing API.&lt;/p&gt;
&lt;p&gt;Here is a simple example to illustrate how this works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@keyframes color-mixin {
	0% { background: var(--color-neutral-90); border-color: var(--color-neutral-80); }
	25% { background: var(--color-success-90); border-color: var(--color-success-80); }
	50% { background: var(--color-warning-90); border-color: var(--color-warning-80); }
	75% { background: var(--color-danger-90); border-color: var(--color-danger-80); }
}

button {
	animation: foo 100s calc(var(--variant) * -100s / 4 ) infinite paused;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Used like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.error button {
	--variant: 2;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is merely to illustrate the core idea, having a &lt;code&gt;--variant&lt;/code&gt; property that takes numbers is not a good API!
Though the numbers could be aliased to variables, so that users would set &lt;code&gt;--variant: var(--success)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This technique seems to have been &lt;a href=&quot;https://youtu.be/eVnUDTtOLE0?t=1167&quot;&gt;first documented by me in 2015&lt;/a&gt;, during a talk about …pie charts
(I would swear I showed it in an earlier talk but I cannot find it).
I never bothered writing about it, but &lt;a href=&quot;https://au.si/css-conditions-today&quot;&gt;someone else did&lt;/a&gt;, 4 years later.&lt;/p&gt;
&lt;p&gt;To ensure you don’t get slightly interpolated values due to precision issues, you could also slap a &lt;code&gt;steps()&lt;/code&gt; in there:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;button {
	animation: foo 100s calc(var(--variant) * -100s / 4 ) infinite paused steps(4);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is especially useful when 100 divided by your number of values produces repeating decimals,
e.g. 3 steps means your keyframes are at increments of &lt;code&gt;33.33333%&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A benefit of this method is that defining each state is done with regular declarations, not involving any weirdness,
and that .&lt;/p&gt;
&lt;p&gt;It does also have some obvious downsides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Values restricted to numbers&lt;/li&gt;
&lt;li&gt;Takes over the &lt;code&gt;animation&lt;/code&gt; property, so you can’t use it for actual animations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;type-grinding&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#type-grinding&quot;&gt;4. Type Grinding&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So far all of these methods impose constraints on the API exposed by these custom properties:
numbers by the linear interpolation method and weird values that have to be hidden behind variables
for the space toggle and cyclic toggle methods.&lt;/p&gt;
&lt;p&gt;In October 2022, Jane Ori was the first one to discover a method that actually allows us to support plain keywords,
which is what the majority of these use cases needs.
She called it &lt;a href=&quot;https://www.bitovi.com/blog/css-only-type-grinding-casting-tokens-into-useful-values&quot;&gt;“CSS-Only Type Grinding”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Its core idea is if a custom property is registered (via either &lt;code&gt;@property&lt;/code&gt; or &lt;code&gt;CSS.registerProperty()&lt;/code&gt;),
assigning values to it that are not valid for its syntax makes it IACVT (Invalid at computed value time) and it falls back to its initial (or inherited) value.&lt;/p&gt;
&lt;p&gt;She takes advantage of that to progressively transform keywords to other keywords or numbers through a series of intermediate registered custom properties,
each substituting one more value for another.&lt;/p&gt;
&lt;p&gt;I was recently independently experimenting with a similar idea.
It started from a use case of one of my components where I wanted to implement a &lt;code&gt;--size&lt;/code&gt; property with two values: &lt;code&gt;normal&lt;/code&gt; and &lt;code&gt;large&lt;/code&gt;.
Style queries could &lt;em&gt;almost&lt;/em&gt; get me there, but I also needed to set &lt;code&gt;flex-flow: column&lt;/code&gt; on the element itself when &lt;code&gt;--size&lt;/code&gt; was &lt;code&gt;large&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The end result takes N + 1 &lt;code&gt;@property&lt;/code&gt; rules, where N is the number of distinct values you need to support.
The first one is the rule defining the syntax of your &lt;em&gt;actual&lt;/em&gt; property:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@property --size {
	syntax: &amp;quot;normal | large&amp;quot;,
	initial-value: normal;
	inherits: true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you define N more rules, each progressively substituting one value for another:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@property --size-step-1 {
	syntax: &amp;quot;row | large&amp;quot;;
	initial-value: row;
	inherits: false;
}

@property --size-step-end {
	syntax: &amp;quot;row | column&amp;quot;;
	initial-value: column;
	inherits: false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And at the component host you daisy chain them like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:host {
	--size-step-1: var(--size);
	--size-step-end: var(--size-step-1);
	flex-flow: var(--size-step-end);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And component consumers get a really nice API:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.my-component {
	--size: large;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can &lt;a href=&quot;https://codepen.io/leaverou/pen/OJYzQjN/c8ec7595b68381e99d38441487db546f&quot;&gt;see it in action in this codepen&lt;/a&gt;:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;css,result&quot; data-slug-hash=&quot;OJYzQjN&quot; data-pen-title=&quot;Transform keywords to other keywords (2 keyword version)&quot; data-user=&quot;leaverou&quot; data-token=&quot;c8ec7595b68381e99d38441487db546f&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
	&lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/leaverou/pen/OJYzQjN/c8ec7595b68381e99d38441487db546f&quot;&gt;
	Transform keywords to other keywords (2 keyword version)&lt;/a&gt; by Lea Verou (&lt;a href=&quot;https://codepen.io/leaverou&quot;&gt;@leaverou&lt;/a&gt;)
	on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;You can use the same general idea to &lt;a href=&quot;https://codepen.io/leaverou/pen/rNgpRMR/d5b5cb91be7a39d9a9974e3e0239e7dd&quot;&gt;transform more keywords&lt;/a&gt;
or to &lt;a href=&quot;https://codepen.io/leaverou/pen/pompYrQ/75b6c0dcdfd367410011bab93fbab251&quot;&gt;transform keywords into different sets of keywords for use in different properties&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can also transform keywords to numbers, by replacing successive keywords with &lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt; in the syntax, one at a time, with different initial values each time.
Here is the &lt;code&gt;--variant&lt;/code&gt; example using this method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@property --variant {
	syntax: &amp;quot;none | success | warning | danger&amp;quot;;
	initial-value: none;
	inherits: true;
}


@property --variant-step-1 {
	syntax: &amp;quot;none | &amp;lt;integer&amp;gt; | warning | danger&amp;quot;;
	initial-value: 1;
	inherits: false;
}

@property --variant-step-2 {
	syntax: &amp;quot;none | &amp;lt;integer&amp;gt; | danger&amp;quot;;
	initial-value: 2;
	inherits: false;
}

@property --variant-step-3 {
	syntax: &amp;quot;none | &amp;lt;integer&amp;gt;&amp;quot;;
	initial-value: 3;
	inherits: false;
}

@property --variant-index {
	syntax: &amp;quot;&amp;lt;integer&amp;gt;&amp;quot;;
	initial-value: 0;
	inherits: false;
}

.callout {
	--variant-step-1: var(--variant);
	--variant-step-2: var(--variant-step-1);
	--variant-step-3: var(--variant-step-2);
	--variant-index: var(--variant-step-3);

	/* Now use --variant-index to set other values */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we can use techniques like &lt;a href=&quot;https://forsethingvild.medium.com/lea-verous-dynamic-css-secrets-takeaways-d281218de60a#6ca0&quot;&gt;linear range mapping&lt;/a&gt; to transform it to a length or a percentage (&lt;a href=&quot;https://css.land/ranges/&quot;&gt;generator&lt;/a&gt;)
or &lt;a href=&quot;https://noahliebman.net/2024/04/recursion-in-the-stylesheet/&quot;&gt;recursive &lt;code&gt;color-mix()&lt;/code&gt;&lt;/a&gt; to use that number to select an appropriate color.&lt;/p&gt;
&lt;h3 id=&quot;variable-animation-name&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#variable-animation-name&quot;&gt;5. Variable animation name&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In 2018, Roma Komarov &lt;a href=&quot;https://codepen.io/kizu/details/vVNpXj&quot;&gt;discovered&lt;/a&gt; another method that allows plain keywords to be used as the custom property API,
forgot about it, then &lt;a href=&quot;https://codepen.io/kizu/pen/YzRXXXL&quot;&gt;rediscovered&lt;/a&gt; it in June 2023 😅.
He still never wrote about it, so these codepens are the only documentation we have.
It’s a variation of the previous method: instead of using a single &lt;code&gt;@keyframes&lt;/code&gt; rule and switching between them via &lt;code&gt;animation-delay&lt;/code&gt;,
define several separate &lt;code&gt;@keyframes&lt;/code&gt; rules, each named after the keyword we want to use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@keyframes success {
	from, to {
		background-color: var(--color-success-90);
		border-color: var(--color-success-80);
	}
}
@keyframes warning {
	from, to {
		background-color: var(--color-warning-90);
		border-color: var(--color-warning-80);
	}
}
@keyframes danger {
	from, to {
		background-color: var(--color-danger-90);
		border-color: var(--color-danger-80);
	}
}

.callout {
	padding: 1em;
	margin: 1rem;
	border: 3px solid var(--color-neutral-80);
	background: var(--color-neutral-90);

	animation: var(--variant) 0s paused both;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Used like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.warning {
	--variant: warning;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The obvious downsides of this method are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Impractical to use outside of Shadow DOM due to the potential for name clashes.&lt;/li&gt;
&lt;li&gt;Takes over the &lt;code&gt;animation&lt;/code&gt; property, so you can’t use it for actual animations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;improvements&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#improvements&quot;&gt;Improvements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every one of these methods has limitations, some of which are inerent in its nature, but others can be improved upon.
In this section I will discuss some improvements that me or others have thought of.
I decided to include these in a separate section, since they affect more than one method.&lt;/p&gt;
&lt;h3 id=&quot;making-animation-based-approaches-cascade-better&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#making-animation-based-approaches-cascade-better&quot;&gt;Making animation-based approaches cascade better&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A big downside with the animation-based approaches (3 and 5) is the place of animations in the cascade:
properties applied via animation keyframes can only be overridden via other animations or &lt;code&gt;!important&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One way to deal with that is to set custom properties in the animation keyframes, that you apply in regular rules.
To use the example from &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#variable-animation-name&quot;&gt;Variable animation name&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@keyframes success {
	from, to {
		--background-color: var(--color-success-90);
		--border-color: var(--color-success-80);
	}
}
@keyframes warning {
	from, to {
		--background-color: var(--color-warning-90);
		--border-color: var(--color-warning-80);
	}
}
@keyframes danger {
	from, to {
		--background-color: var(--color-danger-90);
		--border-color: var(--color-danger-80);
	}
}

.callout {
	padding: 1em;
	margin: 1rem;
	border: 3px solid var(--border-color, var(--color-neutral-80));
	background-color: var(--background-color, var(--color-neutral-90));

	animation: var(--variant) 0s paused both;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you can combine the two approaches (variable animation-name and &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#paused-animations&quot;&gt;paused animations&lt;/a&gt;)
when you have two custom properties where each state of the first corresponds to N distinct states of the latter.
For example, a &lt;code&gt;--variant&lt;/code&gt; that sets colors, and a light/dark mode within each variant that sets different colors.&lt;/p&gt;
&lt;h3 id=&quot;making-animation-based-approaches-compose-better-with-author-code&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#making-animation-based-approaches-compose-better-with-author-code&quot;&gt;Making animation-based approaches compose better with author code&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another downside of the animation-based approaches is that they take over the &lt;code&gt;animation&lt;/code&gt; property.
If authors want to apply an animation to your component, suddenly a bunch of unrelated things stop working, which is not great user experience.&lt;/p&gt;
&lt;p&gt;There isn’t that much to do here to prevent this experience, but you can at least offer a way out:
instead of defining your animations directly on &lt;code&gt;animation&lt;/code&gt;, define them on a custom property, e.g. &lt;code&gt;--core-animations&lt;/code&gt;.
Then, if authors want to apply their own animations, they just make sure to also include &lt;code&gt;var(--core-animations)&lt;/code&gt; before or after.&lt;/p&gt;
&lt;h3 id=&quot;discrete-color-scales&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#discrete-color-scales&quot;&gt;Discrete color scales&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Many of the approaches above are based on numerical values, which are then mapped to the value we actually want.
For numbers or &lt;a href=&quot;https://www.w3.org/TR/css-values/#dimensions&quot;&gt;dimensions&lt;/a&gt;, this is easy.
But what about colors?&lt;/p&gt;
&lt;p&gt;I linked to Noah Liebman’s post above on &lt;a href=&quot;https://noahliebman.net/2024/04/recursion-in-the-stylesheet/&quot;&gt;recursive &lt;code&gt;color-mix()&lt;/code&gt;&lt;/a&gt;,
where he presents a rather complex method to select among a continuous color scale based on a 0-1 number.&lt;/p&gt;
&lt;p&gt;However, if you don’t care about any intermediate colors and just want to select among a few discrete colors, the method can be a lot simpler.
Simple enough to be specified inline.&lt;/p&gt;
&lt;p&gt;Let me explain: Since &lt;code&gt;color-mix()&lt;/code&gt; only takes two colors, we need to nest them to select among more than 2, no way around that.
However, the percentages we calculate can be very simple: &lt;code&gt;100%&lt;/code&gt; when we want to select the first color and &lt;code&gt;0%&lt;/code&gt; otherwise.
I plugged these numbers into my &lt;a href=&quot;https://css.land/ranges/&quot;&gt;CSS range mapping tool&lt;/a&gt;
(&lt;a href=&quot;https://css.land/ranges/?min_x=2&amp;amp;min_y=100%25&amp;amp;max_x=3&amp;amp;max_y=0%25&amp;amp;variableName=variant-index&quot;&gt;example&lt;/a&gt;) and noticed a pattern:
If we want to output &lt;code&gt;100%&lt;/code&gt; when our variable (e.g. &lt;code&gt;--variant-index&lt;/code&gt;) is N-1 and &lt;code&gt;0%&lt;/code&gt; when it’s N, we can use &lt;code&gt;100% * (N - var(--variant-index))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can use this on every step of the mixing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;background: color-mix(in oklab,
	var(--stone-2) calc(100% * (1 - var(--color-index, 0))), /* default color */
	color-mix(in oklab,
		var(--green-2) calc(100% * (2 - var(--color-index))),
		color-mix(in oklab,
			var(--yellow-2) calc(100% * (3 - var(--color-index))),
			var(--red-2)
		)
	)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what happens when the resulting percentage is &amp;lt; 0% or &amp;gt; 100%?
Generally, &lt;a href=&quot;https://www.w3.org/TR/css-color-5/#color-mix-percent-norm&quot;&gt;percentages outside [0%, 100%] make &lt;code&gt;color-mix()&lt;/code&gt; invalid&lt;/a&gt;,
which would indicate that we need to take care to keep our percentages within that range (via &lt;code&gt;clamp()&lt;/code&gt; or &lt;code&gt;max()&lt;/code&gt;).
However, &lt;a href=&quot;https://drafts.csswg.org/css-values-4/#calc-range&quot;&gt;within math functions there is no parse-time range-checking&lt;/a&gt;,
so values are simply clamped to the allowed range.&lt;/p&gt;
&lt;p&gt;Here is a simple example that you can play with (&lt;a href=&quot;https://codepen.io/leaverou/pen/ZENxGjX?editors=0100&quot;&gt;codepen&lt;/a&gt;):&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;css,result&quot; data-slug-hash=&quot;ZENxGjX&quot; data-pen-title=&quot;Discrete color scales with simpler recursive color-mix()&quot; data-user=&quot;leaverou&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/leaverou/pen/ZENxGjX&quot;&gt;
  Discrete color scales with simpler recursive color-mix()&lt;/a&gt; by Lea Verou (&lt;a href=&quot;https://codepen.io/leaverou&quot;&gt;@leaverou&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;And here is a more realistic one, using the &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#type-grinding&quot;&gt;Type Grinding&lt;/a&gt; method to transform keywords to numbers, and then using the above technique to select among 4 colors for backgrounds and borders (&lt;a href=&quot;https://codepen.io/leaverou/pen/rNgJoJe&quot;&gt;codepen&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;combining-approaches&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#combining-approaches&quot;&gt;Combining approaches&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are two components to each method: the input values it supports, i.e. your custom property API that you will expose, e.g. numbers, keywords, etc.,
and the output values it supports (&lt;code&gt;&amp;lt;dimension&amp;gt;&lt;/code&gt;, keywords, etc.).&lt;/p&gt;
&lt;p&gt;Even without doing anything, we can combine methods that support the same type of input values,
e.g. &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#binary-linear-interpolation&quot;&gt;Binary Linear Interpolation&lt;/a&gt; and &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#paused-animations&quot;&gt;Paused animations&lt;/a&gt;
or &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#type-grinding&quot;&gt;Type Grinding&lt;/a&gt; and &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#named-paused-animations&quot;&gt;Variable animation names&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If we can transform the input values of one method to the input values of another, we can mix and match approaches to maximize flexibility.
For example, we can use &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#type-grinding&quot;&gt;type grinding&lt;/a&gt; to transform keywords to numbers, and then use &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#paused-animations&quot;&gt;paused animations&lt;/a&gt; or &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#binary-linear-interpolation&quot;&gt;binary linear interpolation&lt;/a&gt; to select among a number of quantitative values based on that number.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Keywords → Numbers&lt;/dt&gt;
&lt;dd&gt;Type grinding&lt;/dd&gt;
&lt;dt&gt;Numbers → Keywords&lt;/dt&gt;
&lt;dd&gt;We can use &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#paused-animations&quot;&gt;paused animations&lt;/a&gt; to select among a number of keywords based on a number (which we transform to a negative &lt;code&gt;animation-delay&lt;/code&gt;).&lt;/dd&gt;
&lt;dt&gt;Space toggles → Numbers&lt;/dt&gt;
&lt;dd&gt;Easy: &lt;code&gt;--number: calc(0 var(--toggle, + 1))&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;Numbers → Space toggles&lt;/dt&gt;
&lt;dd&gt;Once again, &lt;a href=&quot;https://codepen.io/kizu/pen/zYQdamG&quot;&gt;Roma Komarov has come up with a very cool trick&lt;/a&gt;: he conditionally applies an animation which interpolates two custom properties from &lt;code&gt;initial&lt;/code&gt; to the empty value and vice versa — basically &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#named-paused-animations&quot;&gt;variable animation names&lt;/a&gt; but used on an internal value.
Unfortunately &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1763376&quot;&gt;a Firefox bug&lt;/a&gt; prevents it from working interoperably.
He also tried &lt;a href=&quot;https://codepen.io/kizu/pen/BaedVMP&quot;&gt;a variant for space toggles&lt;/a&gt; but that has even worse compatibility, limited to Chrome only.
I &lt;a href=&quot;https://codepen.io/leaverou/pen/eYaMdMN?editors=1100&quot;&gt;modified his idea a bit&lt;/a&gt; to use &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#paused-animations&quot;&gt;paused animations&lt;/a&gt; instead,
and it looks like my attempt works on Firefox as well. 🎉&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&quot;so%2C-which-one-is-better%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#so%2C-which-one-is-better%3F&quot;&gt;So, which one is better?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve summarized the pros and cons of each method below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Input values&lt;/th&gt;
&lt;th&gt;Output values&lt;/th&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#binary-linear-interpolation&quot;&gt;Binary Linear Interpolation&lt;/a&gt;&lt;/p&gt;
&lt;/th&gt;
&lt;td&gt;Numbers&lt;/td&gt;
&lt;td&gt;Quantitative&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Lightweight&lt;/li&gt;
&lt;li&gt;Requires no global rules&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Limited output range&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#toggles&quot;&gt;Toggles&lt;/a&gt;&lt;/p&gt;
&lt;/th&gt;
&lt;td&gt;
&lt;p&gt;&lt;code&gt;var(--alias)&lt;/code&gt; &lt;em&gt;(actual values are too weird to expose raw)&lt;/em&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Can be used in part of a value&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Weird values that need to be aliased&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#paused-animations&quot;&gt;Paused animations&lt;/a&gt;&lt;/p&gt;
&lt;/th&gt;
&lt;td&gt;Numbers&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Normal, decoupled declarations&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Takes over &lt;code&gt;animation&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;Cascade weirdness&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#type-grinding&quot;&gt;Type Grinding&lt;/a&gt;&lt;/p&gt;
&lt;/th&gt;
&lt;td&gt;Keywords&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Any value supported by the &lt;code&gt;syntax&lt;/code&gt; descriptor&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;High flexibility for exposed API&lt;/li&gt;
&lt;li&gt;Good encapsulation&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Must insert CSS into light DOM&lt;/li&gt;
&lt;li&gt;Tedious code (though can be automated with build tools)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://caniuse.com/mdn-css_at-rules_property&quot;&gt;No Firefox support&lt;/a&gt; (though that’s &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1864818&quot;&gt;changing&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#variable-animation-name&quot;&gt;Variable animation name&lt;/a&gt;&lt;/p&gt;
&lt;/th&gt;
&lt;td&gt;Keywords&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Normal, decoupled declarations&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Impractical outside of Shadow DOM due to name clashes&lt;/li&gt;
&lt;li&gt;Takes over &lt;code&gt;animation&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;Cascade weirdness&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The most important consideration is the API we want to expose to component users.
After all, exposing a nicer API is the whole point of this, right?&lt;/p&gt;
&lt;p&gt;If your custom property makes sense as a number &lt;em&gt;without degrading usability&lt;/em&gt;
(e.g. &lt;code&gt;--size&lt;/code&gt; may make sense as a number, but &lt;code&gt;small | medium | large&lt;/code&gt; is still better than &lt;code&gt;0 | 1 | 2&lt;/code&gt;),
then &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#binary-linear-interpolation&quot;&gt;Binary Linear Interpolation&lt;/a&gt; is probably the most flexible method to start with,
and as we have seen in &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#combining-approaches&quot;&gt;Combining approaches&lt;/a&gt; section, numbers can be converted to inputs for every other method.&lt;/p&gt;
&lt;p&gt;However, in the vast majority of cases I have seen, the &lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#nsui&quot;&gt;north star API&lt;/a&gt; is a set of plain, high-level keywords.
This is only possible via &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#type-grinding&quot;&gt;Type Grinding&lt;/a&gt; and &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#named-paused-animations&quot;&gt;Variable animation names&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Between the two, Type Grinding is the one providing the best encapsulation,
since it relies entirely on custom properties and does not hijack any native properties.&lt;/p&gt;
&lt;p&gt;Unfortunately, the fact that &lt;a href=&quot;https://codepen.io/leaverou/pen/MWdQxyG&quot;&gt;&lt;code&gt;@property&lt;/code&gt; is not yet supported in Shadow DOM&lt;/a&gt; throws a spanner in the works,
but since these intermediate properties are only used for internal calculations,
we can just give them obscure names and insert them in the light DOM.&lt;/p&gt;
&lt;p&gt;On the other hand, &lt;a href=&quot;https://codepen.io/leaverou/pen/gOJvEMw&quot;&gt;&lt;code&gt;@keyframes&lt;/code&gt; are not only allowed, but also properly scoped when used in Shadow DOM&lt;/a&gt;,
so &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#variable-animation-name&quot;&gt;Variable animation name&lt;/a&gt; might be a good choice when you don’t want to use the same keywords for multiple custom properties on the same component
and its downsides are not dealbreakers for your particular use case.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Phew! That was a long one. If you’re aware of any other techniques, let me know so I can add them.&lt;/p&gt;
&lt;p&gt;And I think after all of this, if you had any doubt that we need &lt;code&gt;if()&lt;/code&gt; in CSS,
the sheer number and horribleness of these hacks &lt;em&gt;must&lt;/em&gt; have dispelled it by now. 😅&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://kizu.dev/&quot;&gt;Roma Komarov&lt;/a&gt; for reviewing earlier drafts of this article.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I’ve always thought this was our most important deliverable, and pushed for prioritizing it. Recently, I even became editor of it. 🙃 &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I’m using &lt;em&gt;product&lt;/em&gt; here in the general sense, of any software product, technology, or API, not just for-profit or commercial ones. &lt;a href=&quot;https://lea.verou.me/blog/2024/css-conditionals-now/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry><entry>
    <title>Forget “show, don’t tell”. Engage, don’t show!</title>
    <link href="https://lea.verou.me/blog/2024/engage-dont-show/"/>
    <updated>2024-07-03T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2024/engage-dont-show/</id>
    <content xml:lang="en" type="html">&lt;p&gt;A few days ago, I gave a very well received talk about API design at &lt;a href=&quot;https://www.dotjs.io/&quot;&gt;dotJS&lt;/a&gt; titled “API Design is UI Design” &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/engage-dont-show/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.
One of the points I made was that good UIs (and thus, good APIs) have a smooth &lt;em&gt;UI complexity&lt;/em&gt; to &lt;em&gt;Use case complexity&lt;/em&gt; curve.
This means that &lt;strong&gt;incremental user effort results in incremental value&lt;/strong&gt;;
at no point going just a little bit further requires a disproportionately big chunk of upfront work &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/engage-dont-show/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2024/engage-dont-show/images/smooth-curve.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Observing my daughter’s second ever piano lesson today made me realize how this principle extends to education and most other kinds of knowledge transfer (writing, presentations, etc.).
Her (generally wonderful) teacher spent 40 minutes teaching her notation, longer and shorter notes, practicing drawing clefs, etc.
Despite his playful demeanor and her general interest in the subject, she was clearly distracted by the end of it.&lt;/p&gt;
&lt;p&gt;It’s easy to dismiss this as a 5 year old’s short attention span, but I could tell what was going on:
she did not understand &lt;em&gt;why&lt;/em&gt; these were useful, nor how they connect to her end goal, which is &lt;em&gt;to play music&lt;/em&gt;.
To her, notation was just an assortment of arbitrary symbols and lines, some of which she got to draw.
Note lengths were just isolated sounds with no connection to actual music.
Once I connected note lengths to songs she has sung with me and suggested they try something more hands on, her focus returned &lt;em&gt;instantly&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I mentioned to her teacher that kids that age struggle to learn theory for that long without practicing it.
He agreed, and said that many kids are motivated to get through the theory because they’ve heard their teacher play nice music and want to get there too.
The thing is… sure, that’s motivating.
But as far as motivations go, it’s pretty weak.&lt;/p&gt;
&lt;p&gt;Humans are animals, and &lt;strong&gt;animals don’t play the long game, or they would die&lt;/strong&gt;.
We are programmed to optimize for &lt;strong&gt;quick, easy dopamine hits&lt;/strong&gt;.
The farther into the future the reward, the more discipline it takes to stay motivated and put effort towards it.
This applies to all humans, but even more to kids and ADHD folks &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/engage-dont-show/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;.
That’s why it’s so hard for teenagers to study so they can improve their career opportunities and why you struggle to eat well and exercise so you can be healthy and fit.&lt;/p&gt;
&lt;p&gt;So how does this apply to knowledge transfer?
It highlights how &lt;em&gt;essential&lt;/em&gt; it is for students to
&lt;em&gt;a)&lt;/em&gt; understand &lt;strong&gt;&lt;em&gt;why&lt;/em&gt; what they are learning is useful&lt;/strong&gt; and
&lt;em&gt;b)&lt;/em&gt; &lt;strong&gt;put it in practice ASAP&lt;/strong&gt;.
You can’t retain information that is not connected to an obvious purpose &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/engage-dont-show/#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt; — your brain will treat it as noise and discard it.&lt;/p&gt;
&lt;p&gt;The thing is, the more expert you are on a topic, the harder these are to do when conveying knowledge to others.
I get it. I’ve done it too.
First, the purpose of concepts feels obvious to you, so it’s easy to forget to articulate it.
You overestimate the student’s interest in the minutiae of your field of expertise.
Worse yet, &lt;strong&gt;so many&lt;/strong&gt; concepts feel &lt;em&gt;essential&lt;/em&gt; that you are &lt;em&gt;convinced&lt;/em&gt; nothing is possible without learning them (or even if it is, it’s just &lt;em&gt;not The Right Way™&lt;/em&gt;).
Looking back on some of my earlier CSS lectures, I’ve definitely been guilty of this.&lt;/p&gt;
&lt;p&gt;As educators, it’s very tempting to say “they can’t &lt;em&gt;possibly&lt;/em&gt; practice before understanding X, Y, Z, they must learn it &lt;em&gt;&lt;strong&gt;properly&lt;/strong&gt;&lt;/em&gt;”.
Except …they won’t.
At best they will skim over it until it’s time to practice, which is when the actual learning happens.
At worst, they will give up.
You will get much better retention if you &lt;strong&gt;frequently get them to see the value of their incremental imperfect knowledge&lt;/strong&gt;
than by expecting a big upfront attention investment before they can reap the rewards.&lt;/p&gt;
&lt;p&gt;There is another reason to avoid long chunks of upfront theory:
humans are goal oriented.
When we have a goal, we are far more motivated to absorb information that helps us towards that goal.
The value of the new information is clear, we are practicing it immediately, and it is already connected to other things we know.&lt;/p&gt;
&lt;p&gt;This means that explaining things in context as they become relevant is infinitely better for retention and comprehension than explaining them upfront.
When knowledge is a solution to a problem the student is already facing, its purpose is clear, and it has already been filtered by relevance.
Furthermore, learning it provides immediate value and instant gratification: it explains what they are experiencing or helps them achieve an immediate goal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Even if you don’t teach&lt;/strong&gt;, this still applies to you.
I would go as far as to say it applies to every kind of knowledge transfer:
teaching, writing documentation, giving talks, even just explaining a tricky concept to your colleague over lunch break.
Literally any activity that involves interfacing with other humans benefits from empathy and understanding of human nature and its limitations.&lt;/p&gt;
&lt;p&gt;To sum up:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Always explain &lt;strong&gt;why&lt;/strong&gt; something is useful. Yes, even when it’s obvious to you.&lt;/li&gt;
&lt;li&gt;Minimize the amount of knowledge you convey before the next opportunity to practice it.
For non-interactive forms of knowledge transfer (e.g. a book), this may mean showing an example,
whereas for interactive ones it could mean giving the student a small exercise or task.
Even in non-interactive forms, you can ask questions — the receiver will still pause and think what they would answer even if you are not there to hear it.&lt;/li&gt;
&lt;li&gt;Prefer explaining in context rather than explaining upfront.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;“Show, don’t tell”&lt;/em&gt;? Nah.
More like &lt;strong&gt;&lt;em&gt;“Engage, don’t show”&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(In the interest of time, I’m posting this without citations to avoid going down the rabbit hole of trying to find the best source for each claim, especially since I believe they’re pretty uncontroversial in the psychology / cognitive science literature. That said, I’d love to add references if you have good ones!)&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;The video is now available on YouTube: &lt;a href=&quot;https://www.youtube.com/watch?v=g92XUzc1OHY&quot;&gt;API Design is UI Design&lt;/a&gt; &lt;a href=&quot;https://lea.verou.me/blog/2024/engage-dont-show/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;When it does, this is called a usability cliff. &lt;a href=&quot;https://lea.verou.me/blog/2024/engage-dont-show/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I often say that optimizing UX for people with ADHD actually creates delightful experiences even for those with neurotypical attention spans.
Just because you &lt;em&gt;could&lt;/em&gt; focus your attention on something you don’t find interesting doesn’t mean you enjoy it.
Yet another case of accessibility helping everyone! &lt;a href=&quot;https://lea.verou.me/blog/2024/engage-dont-show/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I mean, you can memorize anything if you try hard enough, but by optimizing teaching we can keep rote memorization down to the bare minimum. &lt;a href=&quot;https://lea.verou.me/blog/2024/engage-dont-show/#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry><entry>
    <title>Making the Web more Awesome — for everyone</title>
    <link href="https://lea.verou.me/blog/2024/awesome/"/>
    <updated>2024-09-16T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2024/awesome/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Folks, I have some exciting news to share. 🤩&lt;/p&gt;
&lt;p&gt;Today I start a new chapter in my career.
After &lt;a href=&quot;https://lea.verou.me/blog/2014/02/im-going-to-mit/&quot;&gt;a decade at MIT&lt;/a&gt;, &lt;a href=&quot;https://designftw.mit.edu/&quot;&gt;teaching&lt;/a&gt; and
doing &lt;a href=&quot;https://lea.verou.me/publications/#research&quot;&gt;research&lt;/a&gt; at the intersection of usability and programming language design,
I wrapped up my &lt;a href=&quot;https://phd.verou.me/&quot;&gt;PhD&lt;/a&gt; two weeks ago
(yes, &lt;strong&gt;I’m a Dr now&lt;/strong&gt;! And &lt;a href=&quot;https://www.nytimes.com/2018/06/28/opinion/women-dont-back-down-online.html&quot;&gt;&lt;em&gt;damn right I will&lt;/em&gt;&lt;/a&gt; — once it actually sinks in)
and &lt;strong&gt;today I start my new role as &lt;em&gt;Product Lead&lt;/em&gt; at &lt;a href=&quot;https://fontawesome.com/&quot;&gt;Font Awesome&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2024/awesome/images/hero.png&quot; alt=&quot;Font Awesome + Lea Verou&quot; /&gt;
&lt;p&gt;I will be evaluating user needs and improving product design and usability across all company products,
with an emphasis on &lt;a href=&quot;https://www.kickstarter.com/projects/fontawesome/web-awesome&quot;&gt;Web Awesome&lt;/a&gt;,
the product we are launching early next year to revolutionize how Web UIs are built by using web components and CSS in ways you’ve never seen before.
Beyond improving the products themselves (all of which include &lt;strong&gt;extensive free &amp;amp; open source versions&lt;/strong&gt;),
part of my role will utilize &lt;a href=&quot;https://lea.verou.me/specs&quot;&gt;my web standards experience&lt;/a&gt; to collect web platform pain points from across the company and translating them to new and existing web standards proposals.&lt;/p&gt;
&lt;p&gt;Yes, I know, it’s a match made in heaven. 😍
There is even a small chance I may have been the first to &lt;a href=&quot;https://lea.verou.me/blog/2010/02/iphone-keyboard-with-css3-no-images/&quot;&gt;create an icon font for use in a web UI via &lt;code&gt;@font-face&lt;/code&gt;&lt;/a&gt;,
which would make it even more wonderfully poetic that I’m joining the company that has become synonymous with icon fonts on the Web.&lt;/p&gt;
&lt;p&gt;However, it was not &lt;a href=&quot;https://phd.verou.me/&quot;&gt;my MIT PhD&lt;/a&gt; that led me to this role,
but an email from Dave Gandy (creator &amp;amp; CEO of Font Awesome) about &lt;a href=&quot;https://colorjs.io/&quot;&gt;Color.js&lt;/a&gt;,
that turned into hours of chats,
and eventually a job offer for a role I could not refuse, one that was literally molded around my skills and interests.&lt;/p&gt;
&lt;p&gt;The role is not the only reason I’m excited to join Font Awesome, though.
The company itself is a breath of fresh air:
open source friendly (as Dave says, &lt;em&gt;“literally the only reason we have Pro versions is that we need to sustain this somehow”&lt;/em&gt; 😅),
already profitable (= no scrambling to meet VC demands by cramming AI features nobody wants into our products),
fully remote, huge emphasis on work-life balance,
and an interview process that did not feel like an interview — or even a process.
In fact, they did not even want to look at my resume (despite my efforts 🤣).
It is telling that &lt;strong&gt;in their 10 years of existence, not a single person has left the company, and they have never had to let anyone go&lt;/strong&gt;.
Moreover, it bridges the best of both worlds: despite having existed for a decade,
branching out to new products&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/awesome/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; and markets gives it a startup-like energy and excitement.&lt;/p&gt;
&lt;p&gt;I had been extremely selective in the job opportunities I pursued, so it took a while to find the perfect role.
Having ADHD (diagnosed only last year — I want to write a blog post about that too at some point),
I knew it was &lt;em&gt;crucial&lt;/em&gt; to find a job I could be passionate about:
ADHD folks are unstoppable machines in jobs they love (I have literally built my career by directing my &lt;a href=&quot;https://en.wikipedia.org/wiki/Hyperfocus&quot;&gt;&lt;em&gt;hyperfocus&lt;/em&gt;&lt;/a&gt; to things that are actually productive),
but struggle way more than neurotypicals in jobs they hate.
It took a while, but when I started talking with Dave, I knew Font Awesome was &lt;em&gt;it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I’m still reeling from the mad rush of spending the past couple of months averaging 100-hour weeks to wrap up my PhD before starting,
but I couldn’t be more excited about this new chapter.&lt;/p&gt;
&lt;p&gt;I’m hoping to write a series of blog posts in the coming weeks about about my journey to this point.
Things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How I decided that academia was not for me — but persisted to the finish line anyway because I’m stubborn AF 😅&lt;/li&gt;
&lt;li&gt;How I realized that product work is my real calling, not software engineering per se (as much as I love both)&lt;/li&gt;
&lt;li&gt;How I used web technologies instead of LaTeX to write &lt;a href=&quot;https://phd.verou.me/&quot;&gt;my PhD thesis&lt;/a&gt; (and print it to &lt;a href=&quot;https://phd.verou.me/thesis.pdf&quot;&gt;PDF&lt;/a&gt; for submission), with &lt;a href=&quot;https://11ty.dev/&quot;&gt;11ty&lt;/a&gt; plus several open source plugins, many of which I wrote, an ecosystem I hope to one day free more people from the tyranny of LaTeX (which was amazing in the 70s, but its ergonomics are now showing their age).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But for now, I just wanted to share the news, and go off to make the web more awesome — &lt;em&gt;for everyone&lt;/em&gt;. 🚀&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;My excitement grew even stronger when a week before my start date, I learned that &lt;a href=&quot;https://www.11ty.dev/blog/eleventy-font-awesome/&quot;&gt;11ty (and its creator, Zach Leatherman) had also joined Font Awesome&lt;/a&gt;
— I think at this point every tool I use regularly is officially &lt;em&gt;Awesome&lt;/em&gt; 😅.
Yes, this site is built on 11ty as well. And even my &lt;a href=&quot;https://phd.verou.me/&quot;&gt;PhD thesis&lt;/a&gt;! &lt;a href=&quot;https://lea.verou.me/blog/2024/awesome/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry><entry>
    <title>Web Components are not Framework Components — and That’s Okay</title>
    <link href="https://lea.verou.me/blog/2024/wcs-vs-frameworks/"/>
    <updated>2024-10-01T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2024/wcs-vs-frameworks/</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This post expresses my opinions, which do not necessarily reflect consensus by the whole Web Components community.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://dev.to/ryansolid/web-components-are-not-the-future-48bh&quot;&gt;blog post by Ryan Carniato&lt;/a&gt;
titled &lt;em&gt;“Web Components Are Not the Future”&lt;/em&gt; has recently stirred a lot of controversy.
A few other JS framework authors pitched in, expressing &lt;a href=&quot;https://x.com/youyuxi/status/1839833110164504691&quot;&gt;frustration&lt;/a&gt; and &lt;a href=&quot;https://x.com/Rich_Harris/status/1839885047349788720&quot;&gt;disillusionment&lt;/a&gt; around Web Components.
Some Web Components &lt;a href=&quot;https://www.linkedin.com/posts/kreitlow_as-someone-who-builds-complex-custom-elements-activity-7246381911470682113-dPoI/&quot;&gt;folks&lt;/a&gt; &lt;a href=&quot;https://nolanlawson.com/2024/09/28/web-components-are-okay/&quot;&gt;wrote&lt;/a&gt; &lt;a href=&quot;https://www.abeautifulsite.net/posts/web-components-are-not-the-future-they-re-the-present/&quot;&gt;rebuttals&lt;/a&gt;,
while others &lt;a href=&quot;https://x.com/Mr__Disagree/status/1839487412797350267&quot;&gt;repeatedly&lt;/a&gt; &lt;a href=&quot;https://x.com/mr__disagree/status/1839846994040283344&quot;&gt;tried&lt;/a&gt; to get to the bottom of the issues,
so they could be addressed in the future.&lt;/p&gt;
&lt;p&gt;When you are on the receiving end of such an onslaught,
the initial reaction is to feel threatened and become defensive.
However, these kinds of posts can often end up shaking things up and pushing a technology forwards in the end.
I have some personal experience:
after I published my &lt;a href=&quot;https://lea.verou.me/blog/2020/09/the-failed-promise-of-web-components&quot;&gt;2020 post titled “The failed promise of Web Components”&lt;/a&gt; which also made the rounds at the time,
I was approached by a bunch of folks (Justin Fagnani, Gray Norton, Kevin Schaaf) about teaming up to fix the issues I described.
The result of these brainstorming sessions was the &lt;a href=&quot;https://web-components-cg.netlify.app/&quot;&gt;Web Components CG&lt;/a&gt; which now has a life of its own
and has become a vibrant Web Components community that has helped move several specs of strategic importance forwards.&lt;/p&gt;
&lt;p&gt;As someone who deeply cares about Web Components,
&lt;a href=&quot;https://x.com/LeaVerou/status/1840134654852247765&quot;&gt;my initial response was also to push back&lt;/a&gt;.
I was reminded of how many times I have seen this pattern before.
&lt;strong&gt;It is common for new web platform features to face pushback and resistance for many years&lt;/strong&gt;;
we tend to compare them to current userland practices, and their ergonomics often fare poorly at the start.
Especially when there is no immediately apparent &lt;a href=&quot;https://en.wikipedia.org/wiki/Pareto_principle&quot;&gt;80/20 solution&lt;/a&gt;, making things &lt;em&gt;possible&lt;/em&gt; tends to precede making them &lt;em&gt;easy&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Web platform features operate under a whole different set of requirements and constraints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They need to last &lt;em&gt;decades&lt;/em&gt;, not just until the next major release.&lt;/li&gt;
&lt;li&gt;They need to not only cater to the current version of the web platform, but &lt;em&gt;anticipate&lt;/em&gt; its future evolution and be compatible with it.&lt;/li&gt;
&lt;li&gt;They need to be &lt;em&gt;backwards compatible&lt;/em&gt; with the web as it was 20 years ago.&lt;/li&gt;
&lt;li&gt;They need to be compatible with a slew of accessibility and internationalization needs that userland libraries often ignore at first.&lt;/li&gt;
&lt;li&gt;They are developed in a distributed way, by people across many different organizations, with different needs and priorities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usually, the result is &lt;strong&gt;more robust, but takes a lot longer&lt;/strong&gt;.
That’s why I’ve often said that web standards are &lt;em&gt;“product work on hard mode”&lt;/em&gt; — they include most components of regular product work (collecting user needs, designing ergonomic solutions, balancing impact over effort, leading without authority, etc.), but with the added constraints of a distributed, long-term, and compatibility-focused development process that would make most PMs pull their hair out in frustration and run screaming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I’m old enough to remember this pattern playing out with CSS itself&lt;/strong&gt;:
huge pushback when it was introduced in the mid 90s.
It was clunky for layout and had terrible browser support — &lt;em&gt;“why fix something that wasn’t broken?”&lt;/em&gt; folks cried.
Embarrassingly, I was one of the last holdouts:
I liked CSS for styling, but was among the last to switch to floats for layout — tables were just so much more ergonomic!
The majority resistance lasted until the mid &#39;00s when it went from &lt;em&gt;“this will never work”&lt;/em&gt; to &lt;em&gt;“this was clearly the solution all along”&lt;/em&gt; almost overnight.
And the rest, as they say, is history. 🙂&lt;/p&gt;
&lt;p&gt;But the more I thought about this, the more I realized that — as often happens in these kinds of heated debates — &lt;strong&gt;the truth lies somewhere in the middle&lt;/strong&gt;.
Having used both several frameworks, and several web components,
and having authored both web components (most of them experimental and unreleased) and &lt;a href=&quot;https://mavo.io/&quot;&gt;even one framework&lt;/a&gt; over the course of &lt;a href=&quot;https://phd.verou.me/&quot;&gt;my PhD&lt;/a&gt;, both sides do have some valid points.&lt;/p&gt;
&lt;p&gt;Frankly, if framework authors were sold the idea that web components would be a compile target for their frameworks, and then got today’s WC APIs, I understand their frustration.
Worse yet, if every time they tried to explain that this sucks as a compile target they were told “no you just don’t get it”, heck I’d feel gaslit too!
&lt;strong&gt;Web Components are still far from being a good compile target for all framework components,
but that is not a prerequisite for them being useful&lt;/strong&gt;.
They simply solve different problems.&lt;/p&gt;
&lt;p&gt;Let me explain.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2024/wcs-vs-frameworks/images/component-types.svg&quot; alt=&quot;Venn diagram illustrating general vs project-specific components&quot; /&gt;
&lt;figcaption&gt;
&lt;p&gt;Not all component use cases are the same.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I think the crux of this debate is that &lt;strong&gt;the community has mixed two very different categories of use cases&lt;/strong&gt;,
largely because frameworks do not differentiate between them;
“component” has become the hammer with which to hammer every nail.
Conceptually, there are two core categories of components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Generalizable elements&lt;/strong&gt; that extend what HTML can do and can be used in the same way as native HTML elements across a wide range of diverse projects.
Things like tabs, rating widgets, comboboxes, dialogs, menus, charts, etc.
Another way to think about these is &lt;em&gt;“if resources were infinite, elements that would make sense as native HTML elements”&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reactive templating&lt;/strong&gt;: UI modules that have project-specific purposes and are not required to make sense in a different project.
For example, a font foundry may have a component to demo a font family with child components to demo a font family style,
but the uses of such components outside the very niche font foundry use case are very limited.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, it’s a spectrum; few things in life fit neatly in completely distinct categories.
For example an &lt;code&gt;&amp;lt;html-demo&amp;gt;&lt;/code&gt; component may be somewhat niche, but would be useful across any site that wants to demo HTML snippets
(e.g. a web components library, a documentation site around web technologies, a book teaching how to implement UI patterns, etc.).
But the fact that it’s a spectrum does not mean the distinction does not exist.&lt;/p&gt;
&lt;p&gt;WCs primarily benefit the use case of generalizable elements that extend HTML,
and are still painful to use for reactive templating.
Fundamentally, &lt;strong&gt;it’s about the ratio of potential consumers to authors&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The huge benefit of Web Components is &lt;strong&gt;interoperability&lt;/strong&gt;:
you write it once, it works forever, and you can use it with any framework (or none at all).
It makes no sense to fragment efforts to reimplement e.g. tabs or a rating widget separately for each framework-specific silo,
it is simply duplicated busywork.&lt;/p&gt;
&lt;p&gt;As a personal anecdote, a few weeks ago I found this &lt;a href=&quot;https://carlosnz.github.io/json-edit-react/&quot;&gt;amazing JSON viewer component&lt;/a&gt;, but I couldn’t use it because I don’t use React (I prefer Vue and Svelte).
To this day, I have not found anything comparable for Vue, Svelte, or vanilla JS.
This kind of fragmentation is sadly an everyday occurrence for most devs.&lt;/p&gt;
&lt;p&gt;But when it comes to project-specific components, the importance of interop decreases:
you typically pick a framework and stick to it across your entire project.
Reusing project-specific components across different projects is not a major need,
so the value proposition of interop is smaller.&lt;/p&gt;
&lt;p&gt;Additionally, the &lt;strong&gt;ergonomics&lt;/strong&gt; of consuming vs authoring web components are vastly different.
&lt;em&gt;Consuming&lt;/em&gt; WCs is already pretty smooth, and the APIs are largely there to demystify most of the magic of built-in elements and expose it to web components (with a few small gaps being actively plugged as we speak).
However, &lt;em&gt;authoring&lt;/em&gt; web components is a whole different story.
Especially without a library like &lt;a href=&quot;https://lit.dev/&quot;&gt;Lit&lt;/a&gt;, authoring WCs is still painful, tedious, and riddled with footguns.
For generalizable elements, this is an acceptable tradeoff, as their potential consumers are a much larger group than their authors.
As an extreme example of this, nobody complains about the ergonomics of implementing native elements in browsers using C++ or Rust.
But when using components as a templating mechanism, authoring ergonomics are &lt;em&gt;crucial&lt;/em&gt;,
since the overlap between consumers and authors is nearly 100%.&lt;/p&gt;
&lt;p&gt;This was the motivation behind &lt;a href=&quot;https://x.com/LeaVerou/status/1697245010650148924&quot;&gt;this Twitter poll I posted a while back&lt;/a&gt;.
I asked if people mostly &lt;em&gt;consumed&lt;/em&gt; web components, &lt;em&gt;used&lt;/em&gt; WCs that others have made, or both.
Note that many people who use WCs are not aware of it, so the motivation was not to gauge adoption,
but to see if the community has caught on to this distinction between use cases.
&lt;strong&gt;The fact that &amp;gt; 80% of people who knowingly use web components are also web components &lt;em&gt;authors&lt;/em&gt; is indicative of the problem.&lt;/strong&gt;
WCs are meant to empower folks to do more, not to be consumed by expert web developers who can also write them.
Until this number becomes a lot smaller, Web Components will not have reached their full potential.
This was one of the reasons &lt;a href=&quot;https://lea.verou.me/blog/2024/awesome&quot;&gt;I joined the Web Awesome project&lt;/a&gt;;
I think that is the right direction for WCs:
encapsulating complexity into beautiful, generalizable, customizable elements that give people superpowers by extending what HTML can do:
they can be used by developers to author gorgeous UIs,
designers to do more without having to learn JS,
or even hobbyists that struggle with both (since HTML is the most approachable web platform language).&lt;/p&gt;
&lt;p&gt;So IMO making it about frameworks vs web components is a false dichotomy.
Frameworks already use native HTML elements in their components.
&lt;strong&gt;Web components extend what native elements can do, and thus make crafting project-specific components easier across &lt;em&gt;all&lt;/em&gt; frameworks&lt;/strong&gt; (as well as &lt;em&gt;no&lt;/em&gt; frameworks).
I wonder if this narrative could resonate across both sides and reconcile them.
Basically &lt;em&gt;“yes, we may still need frameworks for nontrivial apps, but web components make their job easier”&lt;/em&gt;
rather than pitting them against each other in a pointless comparison where everyone loses.&lt;/p&gt;
&lt;p&gt;We will certainly eventually get to the point where web components are more ergonomic to author,
but we first need to get the low-level foundations right.
At this point &lt;strong&gt;the focus is still on making things &lt;em&gt;possible&lt;/em&gt; rather than making them &lt;em&gt;easy&lt;/em&gt;&lt;/strong&gt;.
The last remaining pieces of the puzzle are things like
&lt;a href=&quot;https://github.com/WICG/webcomponents/blob/gh-pages/proposals/reference-target-explainer.md&quot;&gt;Reference Target&lt;/a&gt; for cross-root ARIA
or &lt;a href=&quot;https://github.com/openui/open-ui/issues/1088#issuecomment-2366092981&quot;&gt;&lt;code&gt;ElementInternals.type&lt;/code&gt;&lt;/a&gt; to allow custom elements to become popover targets or submit buttons,
both of which saw a lot of progress at &lt;a href=&quot;https://www.w3.org/2024/09/TPAC/Overview.html&quot;&gt;W3C TPAC&lt;/a&gt; last week.&lt;/p&gt;
&lt;p&gt;After that, perhaps eventually web components will even become viable for reactive templating use cases;
things like the &lt;a href=&quot;https://github.com/WICG/webcomponents/issues/909&quot;&gt;&lt;code&gt;open-stylable&lt;/code&gt; shadow roots&lt;/a&gt; proposal,
declarative elements, or &lt;a href=&quot;https://github.com/WICG/webcomponents/blob/gh-pages/proposals/DOM-Parts-Declarative-Template.md&quot;&gt;DOM Parts&lt;/a&gt;
are some early beginnings in that direction,
and &lt;a href=&quot;https://www.konnorrogers.com/posts/2023/what-is-declarative-shadow-dom&quot;&gt;declarative shadow DOM&lt;/a&gt; paved the way for SSR (among other things).
&lt;strong&gt;Then, and only then, they may make sense as a compile target for frameworks.&lt;/strong&gt;
However, that is quite far off.
And even if we get there, frameworks would still be useful for complex use cases,
as they do a lot more than let you use and define components.
Components are not even the best reuse mechanism for every project-specific use case — e.g. for list rendering, components are overkill compared to something like &lt;a href=&quot;https://vuejs.org/guide/essentials/list&quot;&gt;&lt;code&gt;v-for&lt;/code&gt;&lt;/a&gt;.
And by then frameworks will be doing even more.
It is by definition that frameworks are always a step ahead of the web platform,
not a failing of the web platform.
As Cory &lt;a href=&quot;https://www.abeautifulsite.net/posts/web-components-are-not-the-future-they-re-the-present/&quot;&gt;said&lt;/a&gt;, &lt;em&gt;“Frameworks are a testbed for new ideas that may or may not work out.”&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The bottom line is, web components reduce the number of use cases where we need to reach for a framework,
but complex large applications will likely still benefit from one.
&lt;strong&gt;So how about we conclude that frameworks are useful, web components are also useful, stop fighting and go make awesome sh!t using whatever tools we find most productive?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to Michael Warren, Nolan Lawson, Cory LaViska, Steve Orvell, and others for their feedback on earlier drafts of this post.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>Context Chips in Survey Design: “Okay, but how does it _feel_?”</title>
    <link href="https://lea.verou.me/blog/2024/context-chips/"/>
    <updated>2024-12-27T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2024/context-chips/</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2024/context-chips/images/cover.svg&quot; alt=&quot;Minimalistic skeleton diagram showing the concept presented in this article&quot; /&gt;&lt;/p&gt;
&lt;p&gt;One would think that we’ve more or less figured survey UI out by now.
Multiple choice questions, checkbox questions, matrix questions, dropdown questions, freeform textfields, numerical scales,
&lt;em&gt;what more could one possibly need&lt;/em&gt;?!&lt;/p&gt;
&lt;p&gt;And yet, every time Google sponsored me to lead one of the &lt;a href=&quot;https://devographics.com/&quot;&gt;State Of … surveys&lt;/a&gt;, and &lt;em&gt;especially&lt;/em&gt; the inaugural &lt;a href=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/&quot;&gt;State of HTML 2023 Survey&lt;/a&gt;,
I kept hitting the same wall; I kept feeling that the established options for answering UIs were woefully inadequate for
&lt;strong&gt;balancing the collection good insights with minimal friction for end-users&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.devographics.com/&quot;&gt;State Of&lt;/a&gt; surveys used a completely custom survey infrastructure,
so I could often (but not always) convince engineering to implement new question UIs.
After &lt;a href=&quot;https://lea.verou.me/blog/2024/awesome/&quot;&gt;joining Font Awesome&lt;/a&gt;, I somehow found myself leading &lt;a href=&quot;https://survey.awesome.me/?from=lv_blog&quot;&gt;yet another survey&lt;/a&gt;, despite swearing never to do this again. 🥲
Alas, building a custom survey UI was simply not an option in this case; I had to make do with the existing options out there &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/context-chips/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;, so I felt this kind of pain to my core once again.&lt;/p&gt;
&lt;p&gt;So what are these cases where the existing answering UIs are inadequate, and how could better ones help?
I’m hoping this case study to be Part 1 of a series around how survey UI innovations can help balance tradeoffs between user experience and data quality, though this is definitely the one I’m most proud of, as it was such a bumpy ride, but it was all worth it in the end.&lt;/p&gt;
&lt;h2 id=&quot;the-problem&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#the-problem&quot;&gt;The Problem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For context, the body of State Of surveys is a series of &lt;em&gt;“Feature questions”&lt;/em&gt;,
which present the respondent with a certain web platform feature and ask if they had heard of it or used it.
Feature questions look like this:&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2024/context-chips/images/feature.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
An example of a feature question from the State of CSS 2022 survey.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Respondents get a score in the end, based on how many of these they had heard of or used.
Each survey had dozens of these questions.
Based on initial estimates, State of HTML was going to have at least &lt;strong&gt;fifty&lt;/strong&gt;.&lt;/p&gt;
&lt;figure class=&quot;float&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2024/context-chips/images/score.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
This was my score. We revamped the scoring system for this iteration and switched from a percentage to a point-based score,
since not all questions were equally weighted.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Respondents &lt;em&gt;love&lt;/em&gt; these questions.&lt;/strong&gt;
They learn about new things they may not have heard of, and get to test their knowledge.
But also, from the survey designer’s perspective, they gamify a (very long) survey, increasing completion rates,
and provide users incentive to share their score on social media, spreading the word.&lt;/p&gt;
&lt;p&gt;One would expect that they also provide valuable data, yet browser vendors had repeatedly mentioned that this data was largely useless to them.
Surveys were all about what people &lt;em&gt;felt&lt;/em&gt;, not what they knew or had used — they had better ways to gauge those.
Instead, &lt;strong&gt;the reason they funneled thousands into funding these surveys every year was the 1-2 pain points questions&lt;/strong&gt; towards the end.
That was it.
Survey data on experience and awareness &lt;em&gt;could&lt;/em&gt; be useful, but only if it was accompanied with subjective sentiment data:
if they hadn’t used it or heard about it, were they interested? If they had used it, how did it &lt;em&gt;feel&lt;/em&gt;?&lt;/p&gt;
&lt;figure class=&quot;float&quot;&gt;
&lt;p&gt;&lt;video src=&quot;https://lea.verou.me/blog/2024/context-chips/videos/comments.mp4&quot; loop=&quot;&quot; muted=&quot;&quot; loading=&quot;lazy&quot; autoplay=&quot;&quot; playsinline=&quot;&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;figcaption&gt;
Optional freeform comments had been added the year prior, but got an abysmally low response rate,
and being entirely freeform, were hard to analyze.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As an attempt to address this feedback, a button that opened a freeform comment field had been introduced the year prior, but response rates were abysmally low,
starting from &lt;strong&gt;0.9%&lt;/strong&gt; for the first question &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/context-chips/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; and dropping further along the way.
This was no surprise to me: freeform questions have a dramatically lower response rate than structured questions,
and hidden controls get less interaction (&lt;em&gt;“out of sight, out of mind”&lt;/em&gt;).
But even if they had a high response rate, freeform comments are notoriously hard to analyze, especially when they are so domain specific.&lt;/p&gt;
&lt;h2 id=&quot;ideation&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#ideation&quot;&gt;Ideation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Essentially, the data we needed to collect was a combination of two variables: &lt;strong&gt;experience&lt;/strong&gt; and &lt;strong&gt;sentiment&lt;/strong&gt;.
Collecting data on two variables is common in survey design, and typically implemented as a matrix question.&lt;/p&gt;
&lt;figure class=&quot;center&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;🤷&lt;/th&gt;
&lt;th&gt;👍&lt;/th&gt;
&lt;th&gt;👎&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Never heard of it&lt;/td&gt;
&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;matrix&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;matrix&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;matrix&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Heard of it&lt;/td&gt;
&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;matrix&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;matrix&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;matrix&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Used it&lt;/td&gt;
&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;matrix&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;matrix&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;matrix&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;
If user experience and cognitive load were not a concern, the same data could actually be collected with a matrix question.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Indeed, if there were only a couple such questions, a matrix could have been acceptable.
But …could you imagine filling out 50 of these?&lt;/p&gt;
&lt;p&gt;An acceptable solution needed to add &lt;strong&gt;minimal friction for end-users&lt;/strong&gt;:
there were at least 50 such questions, so any increase in friction would quickly add up — even one extra click was pushing it.
And we needed a sufficiently &lt;strong&gt;high response rate&lt;/strong&gt; to have a good &lt;abbr title=&quot;Confidence Interval&quot;&gt;CI&lt;/abbr&gt;.
But it also needed to facilitate &lt;strong&gt;quantitative&lt;/strong&gt; data analysis.
Oh, and all of that should involve &lt;strong&gt;minimal engineering effort&lt;/strong&gt;, as the (tiny) engineering team was already stretched thin.&lt;/p&gt;
&lt;p&gt;Did I hear anyone say &lt;em&gt;overconstrained&lt;/em&gt;? 😅&lt;/p&gt;
&lt;h3 id=&quot;idea-1%3A-quick-context&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#idea-1%3A-quick-context&quot;&gt;Idea 1: Quick context&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Initially, I took these constraints to heart.
Misguided as it may have been, the comment field and the infrastructure around it already existed, so I designed a UI that revealed relevant positive/negative sentiment options using contextual &lt;a href=&quot;https://www.nngroup.com/articles/progressive-disclosure/&quot;&gt;progressive disclosure&lt;/a&gt;.
These &lt;strong&gt;inserted predefined responses&lt;/strong&gt; into the comment field with a single click.&lt;/p&gt;
&lt;p&gt;Being a purely client-side interaction meant it could be implemented in a day, and it &lt;em&gt;still&lt;/em&gt; kept end-user friction at bay:
providing sentiment was optional and only required a single click.&lt;/p&gt;
&lt;p&gt;In theory, quantitative data analysis was not optimally covered, as freeform responses are notoriously hard to analyze.
However, based in the psychology of user behavior, I hypothesized that &lt;strong&gt;the vast majority of users would not edit these at all&lt;/strong&gt;, a minority would append context, and an even tinier minority would actually edit the responses.
This meant we could analyze them via simple string matching and only lose a few false negatives.&lt;/p&gt;
&lt;figure&gt;
&lt;video src=&quot;https://lea.verou.me/blog/2024/context-chips/videos/quick-context.mp4&quot; loop=&quot;&quot; muted=&quot;&quot; loading=&quot;lazy&quot; autoplay=&quot;&quot; playsinline=&quot;&quot;&gt;&lt;/video&gt;
&lt;figcaption&gt;
Mockup of the quick context idea.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I was very proud of myself: I had managed to design a solution that satisfied all constraints, a feat that initially seemed impossible!
Not to mention this design gently guided users towards using the comment field, which could motivate them to add even more context.&lt;/p&gt;
&lt;p&gt;Yet, when I presented my mocks to the team, engineering &lt;em&gt;hated&lt;/em&gt; it with a passion.
The lead engineer (who was also the project founder) found the idea of &lt;strong&gt;turning a structured interaction into unstructured data &lt;em&gt;deeply&lt;/em&gt; unsettling&lt;/strong&gt;.
So much it motivated him to implement a whole backend to store these followups properly, something I had initially thought was out of the question.&lt;/p&gt;
&lt;p&gt;So now what?
Back to the drawing board, but with one constraint lifted!&lt;/p&gt;
&lt;h3 id=&quot;ideas-2-%26-3%3A-followups-and-sentiment-radios&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#ideas-2-%26-3%3A-followups-and-sentiment-radios&quot;&gt;Ideas 2 &amp;amp; 3: Followups and sentiment radios&lt;/a&gt;&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2024/context-chips/images/followups.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2024/context-chips/images/sentiment-radios.png&quot; alt=&quot;&quot; style=&quot;flex: 1.38&quot; /&gt;
&lt;figcaption&gt;
Mockups of intermediate ideas.
Left: Followups (by lead engineer)
Right: Sentiment radios (by Google PM)
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This new backend came with a UI proposal that raised red flags for both me and the Google PM I was collaborating with (one of the survey’s core stakeholders, but not the main one).
Even &lt;em&gt;seeing&lt;/em&gt; the followup UI required an extra click, so it was guaranteed to have a low response rate.
It would have been better than the 0.9% of the comment field (clicking is easier than typing!), but still pretty low (I would estimate &amp;lt; 15%).
And even when users were intrinsically motivated to leave feedback, &lt;strong&gt;two clicks and a popover was a steep price&lt;/strong&gt; to pay.&lt;/p&gt;
&lt;aside&gt;
&lt;h4 id=&quot;%E2%80%9Ctwo-clicks-and-a-popover%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#%E2%80%9Ctwo-clicks-and-a-popover%E2%80%9D&quot;&gt;“Two clicks and a popover”&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Perceived friction is not just about the number of clicks and keystrokes, but also about the number of &lt;em&gt;context switches&lt;/em&gt;.
The bigger the UI shift, the more cognitive overhead it adds, as the action is &lt;em&gt;perceived&lt;/em&gt; as more substantial, even when in terms of user interaction it involves exactly the same number of steps (using simplistic models like &lt;a href=&quot;https://en.wikipedia.org/wiki/Keystroke-level_model&quot;&gt;KLM&lt;/a&gt;).
This is the reason why it feels smoother to have a text field that expands when you click on it,
rather than a button that makes a text field appear:
an existing control changing form is perceived as a smaller UI shift than one control disappearing and another appearing.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Another idea came from the Google PM: &lt;strong&gt;sentiment radios&lt;/strong&gt;.
It was an attempt to simplify the interaction by framing it as a two step process:
first experience, then sentiment, through radio buttons that slid down once a main answer was selected.
However, I was very concerned that such a major UI shift after every single answer would quickly become overwhelming over the course of the survey.&lt;/p&gt;
&lt;h3 id=&quot;idea-4%3A-context-chips&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#idea-4%3A-context-chips&quot;&gt;Idea 4: Context chips&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Back to the drawing board, I asked myself: if I had infinite engineering resources, what UI would I design?
The biggest challenge was reducing friction.
All ideas so far had required at least one extra (optional) click to select sentiment.
Could we do better?
&lt;strong&gt;What if users could select &lt;em&gt;both&lt;/em&gt; experience &lt;em&gt;and&lt;/em&gt; sentiment with a single click?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Guided by this, I designed a UI where selecting sentiment is done via “context chips” which are &lt;strong&gt;actually part of the answer&lt;/strong&gt;,
so clicking them &lt;em&gt;also&lt;/em&gt; selects the answer they are accompanying, allowing users to express an answer across both variables with a single click, or just select the answer itself to express no sentiment.
To reduce visual clutter, these only faded in on hover.
Additionally, clicking on the selected chip a second time would deselect it, fixing a longstanding UX issue with radio buttons &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/context-chips/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Over the course of designing this, I became so convinced it was the right solution, that I implemented a high fidelity prototype myself, complete with code that could be easily adapted to the infrastructure used by the survey app.&lt;/p&gt;
&lt;figure&gt;
	&lt;video src=&quot;https://lea.verou.me/blog/2024/context-chips/videos/feature-desktop.mp4&quot; loop=&quot;&quot; muted=&quot;&quot; loading=&quot;lazy&quot; autoplay=&quot;&quot; playsinline=&quot;&quot; style=&quot;flex: 2.9 &quot;&gt;&lt;/video&gt;
	&lt;video src=&quot;https://lea.verou.me/blog/2024/context-chips/videos/feature-mobile.mp4&quot; loop=&quot;&quot; muted=&quot;&quot; loading=&quot;lazy&quot; autoplay=&quot;&quot; playsinline=&quot;&quot;&gt;&lt;/video&gt;
&lt;figcaption&gt;
&lt;p&gt;The context chips prototype on desktop and mobile.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There were so many things I loved about this design, even beyond the core idea of answering both variables with a single click.
There were no layout shifts, the followups were in close proximity to the main answer, and the styling of the chips helped build a visual association to reduce friction even more as you go.
I was not a huge fan of the mobile version, but I couldn’t think of a much better way to adapt this UI to mobile.&lt;/p&gt;
&lt;figure&gt;
&lt;video src=&quot;https://lea.verou.me/blog/2024/context-chips/videos/in-answer.mp4&quot; loop=&quot;&quot; muted=&quot;&quot; loading=&quot;lazy&quot; autoplay=&quot;&quot; playsinline=&quot;&quot;&gt;&lt;/video&gt;
&lt;figcaption&gt;
&lt;p&gt;Early alternative concept that supported followups.
This was deemed too complicated and was abandoned early on.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Reception of context chips was not what I had hoped at first.
I had expected pushback due to the engineering effort needed, but folks also had other concerns:
that users would find things appearing on hover distracting and feel “ambushed”,
that the UI was too “weird”,
that users would not discover the 1-click interaction and use it as a two-step process anyway,
and that response rate would be low because these chips were not visible upfront.&lt;/p&gt;
&lt;h3 id=&quot;mini-feature-questions%3A-context-chips-%2B-checkboxes%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#mini-feature-questions%3A-context-chips-%2B-checkboxes%3F&quot;&gt;Mini-feature questions: Context Chips + Checkboxes?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Around the same time as designing context chips, I had a relevant realization:
&lt;strong&gt;we don’t actually need to know &lt;em&gt;both&lt;/em&gt; awareness and usage for all features&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For old, widely supported features, awareness doesn’t matter, because even when it’s low, it has plateaued.
And for features that are so new they have not yet been implemented in browsers, usage is largely meaningless.
For these cases, each feature only has two states, and thus experience can be expressed with a checkbox!
This would allow us to combine questions about multiple features in one,
and we could still use context chips, albeit a little differently:&lt;/p&gt;
&lt;figure&gt;
	&lt;video src=&quot;https://lea.verou.me/blog/2024/context-chips/videos/minifeature-desktop.mp4&quot; loop=&quot;&quot; muted=&quot;&quot; loading=&quot;lazy&quot; autoplay=&quot;&quot; playsinline=&quot;&quot; style=&quot;flex: 3.97&quot;&gt;&lt;/video&gt;
	&lt;video src=&quot;https://lea.verou.me/blog/2024/context-chips/videos/minifeature-mobile.mp4&quot; loop=&quot;&quot; muted=&quot;&quot; loading=&quot;lazy&quot; autoplay=&quot;&quot; playsinline=&quot;&quot;&gt;&lt;/video&gt;
&lt;figcaption&gt;
&lt;p&gt;The mini features prototype on desktop and mobile.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;While these could be used for questions that &lt;strong&gt;either&lt;/strong&gt; discern usage &lt;strong&gt;or&lt;/strong&gt; awareness, we decided to stick to the former, as there was a (valid) concern that having mini-feature questions whose checked state meant different things could be confusing and lead to errors.
That way, only old, lower-priority features would be relegated to this template,
and new features which tend to be higher priority for browser vendors would still get the full UI, comments and all.
Instead, to improve the experience for cutting edge features, we introduced a “Not implemented” tag next to the “Used it” option.&lt;/p&gt;
&lt;p&gt;One disadvantage of the mini feature UI is that due to the way context chips work, it is not possible to select sentiment for features you have not used:
once you click on a chip, it also &lt;em&gt;selects&lt;/em&gt; the feature, as if you had clicked on its label.
I guess it could be possible to click on a chip and then &lt;em&gt;uncheck&lt;/em&gt; the feature, but that would be a very weird interaction.&lt;/p&gt;
&lt;h3 id=&quot;idea-5%3A-existing-5-point-question-template&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#idea-5%3A-existing-5-point-question-template&quot;&gt;Idea 5: Existing 5-point question template&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At this point, the lead engineer dredged up a question template that had been used in other surveys to ask about the respondent’s experience with various types of tooling.
Instead of separating experience and sentiment, it used a 5-point scale where each answer except the first answered &lt;em&gt;both&lt;/em&gt; questions.&lt;/p&gt;
&lt;figure class=&quot;float&quot;&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2024/context-chips/images/5-point.png&quot; alt=&quot;&quot; /&gt;
&lt;figcaption&gt;
&lt;p&gt;The existing 5-point question template.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The eng lead was sold: zero engineering effort!
The Google PM was also sold: 100% response rate! (since it was &lt;strong&gt;not possible to &lt;em&gt;avoid&lt;/em&gt; expressing sentiment&lt;/strong&gt; for features you had heard or used).&lt;/p&gt;
&lt;p&gt;I had serious reservations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are arguments for even numbered &lt;a href=&quot;https://en.wikipedia.org/wiki/Likert_scale&quot;&gt;Likert scales&lt;/a&gt; (no neutral option), but these always involve scales of at least 4 points.
If you force people to select between two states, positive or negative, you’re simply going to get garbage data.
Neutral votes get pushed into positive votes, and the data around positive sentiment becomes useless.&lt;/li&gt;
&lt;li&gt;These did not allow users to express sentiment for features they had not heard of, despite these questions often including enough info for users to know whether they were interested.&lt;/li&gt;
&lt;li&gt;I was worried that increasing the number of upfront answers to 5 would increase cognitive load too much — and even scrolling distance, by 66%!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A UX researcher we were working with even did a &lt;a href=&quot;https://www.nngroup.com/articles/how-to-conduct-a-heuristic-evaluation/&quot;&gt;heuristic evaluation&lt;/a&gt; that somewhat favored the 5-point template mainly on the basis of being a more familiar UI.
The odds seemed stacked against context chips, but the upcoming usability testing could still tip the scales in their favor.&lt;/p&gt;
&lt;h2 id=&quot;usability-testing-to-the-rescue!&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#usability-testing-to-the-rescue!&quot;&gt;Usability Testing to the Rescue!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Despite the lead engineer being unconvinced about the merits of context chips and being adamant that even adapting my fully functional prototype was too much work, since the prototype existed, we decided to user test it against the 5-point question and see how it compared.&lt;/p&gt;
&lt;p&gt;We ran a &lt;a href=&quot;https://www.nngroup.com/articles/between-within-subjects/&quot;&gt;within-subjects&lt;/a&gt; usability study
with 6 participants (&lt;a href=&quot;https://www.nngroup.com/articles/why-you-only-need-to-test-with-5-users/&quot;&gt;no, they are not too few&lt;/a&gt;)
recruited via social media.
Half of the survey used the 5-point template, the other half context chips.
The order of the conditions was randomized to avoid order effects.&lt;/p&gt;
&lt;p&gt;In addition to their actual experience, we also collected subjective feedback at the end of the survey,
showing them a screenshot of each answering UI and asking how each felt.&lt;/p&gt;
&lt;h3 id=&quot;what-worked-well%3A-context-chips&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#what-worked-well%3A-context-chips&quot;&gt;What worked well: Context Chips&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have run many usability studies in the last ten years, and I have never seen results as resounding as this one.
So much that we unanimously agreed to switch to context chips after the 5th participant, because the scales were so tipped in favor of context chips that nothing that happened in the last session could have tipped them the other way.&lt;/p&gt;
&lt;p&gt;The lead engineer observed some of the sessions, and this was instrumental in changing his mind.
This was not a coincidence: when engineering is unconvinced that a certain UI is worth the implementation complexity,
it can be a good strategy to have them observe usability testing sessions.
Not only does it help prove the value to them, it also builds long-term user empathy, which makes future consensus easier.
Given the unfortunate lack of &lt;a href=&quot;https://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction&quot;&gt;HCI&lt;/a&gt; prioritization in Computer Science curricula, this may even be their first exposure to usability testing.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;All&lt;/em&gt; of my concerns about the 5-point template were brought up by participants on their own accord, repeatedly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All participants &lt;em&gt;really&lt;/em&gt; liked being able to express sentiment, and were vocal about their &lt;strong&gt;frustration when they could not express it&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;All but one participant (4/5) complained about &lt;strong&gt;being forced into selecting a sentiment when they had no opinion&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Some participants even mentioned that the 5-point template felt overwhelming.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, &lt;em&gt;none&lt;/em&gt; of the concerns about context chips were validated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No-one found the chips appearing on hover distracting or felt “ambushed”.&lt;/li&gt;
&lt;li&gt;No-one struggled to understand how to use them.&lt;/li&gt;
&lt;li&gt;Everyone discovered the 1-click interaction pretty fast (typically within the first 2-3 questions).
But interestingly, &lt;strong&gt;they still &lt;em&gt;chose&lt;/em&gt; to use it as a two-step process for some of the questions&lt;/strong&gt;, presumably to reduce cognitive load for difficult to answer questions by breaking down the decision into two smaller ones.
The fact that this UI allowed users to make &lt;strong&gt;&lt;em&gt;their own&lt;/em&gt; efficiency vs cognitive load tradeoffs&lt;/strong&gt; was an advantage I had not even considered when designing it!&lt;/li&gt;
&lt;li&gt;Response rate was generally high — when people did not select sentiment, it was because they &lt;strong&gt;genuinely&lt;/strong&gt; had no opinion, not because they couldn’t be bothered.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;what-worked-okay%3A-mini-feature-questions&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#what-worked-okay%3A-mini-feature-questions&quot;&gt;What worked okay: Mini-feature Questions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/context-chips/#mini-feature-questions&quot;&gt;Mini-feature questions&lt;/a&gt; did successfully help &lt;strong&gt;cut down response time per feature by 75%&lt;/strong&gt;,
though this came at a cost:
Once more, we saw that participants &lt;em&gt;really&lt;/em&gt; wanted to express sentiment, and were frustrated when they couldn’t,
which was the case for features they had not used.
Regardless, we agreed that the tradeoff was worth it for the low-priority questions we were planning to use mini-features for.&lt;/p&gt;
&lt;h3 id=&quot;what-did-not-work%3A-context-chips-on-mobile&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#what-did-not-work%3A-context-chips-on-mobile&quot;&gt;What did not work: Context Chips on Mobile&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A blind spot in our testing was that we did not test the UI on mobile.
Usability tests were conducted remotely via video call, so it was a lot easier to get participants to use their regular computers.
Additionally, stats for previous surveys showed that mobile use was a much smaller percentage in these surveys than for the web in general (~25%), so we did not prioritize it.&lt;/p&gt;
&lt;p&gt;This was a mistake in itself: using current usage stats to inform prioritization may seem like a great idea, but it can be prone to &lt;a href=&quot;https://www.indeed.com/career-advice/career-development/reverse-causality&quot;&gt;reverse causality bias&lt;/a&gt;.
Meaning, are people not using these surveys on mobile very much because they genuinely don’t need to,
or because the experience on mobile is subpar?
We often see this with accessibility too: people claim that it doesn’t matter because they don’t have users with disabilities,
but often they don’t have users with disabilities because their site is not accessible!&lt;/p&gt;
&lt;p&gt;But even if 75% of users genuinely preferred to take these surveys on desktop (which is plausible, since they are long and people often do them in increments), we should at least have done a few sessions on mobile — 25% is not negligible!&lt;/p&gt;
&lt;p&gt;Once responses started coming in, we realized that participants had trouble understanding what the up and down arrows meant, since on mobile these are shown without labels until selected.
This would have been an easy fix had it had been caught early, e.g. thumbs up/down icons could have been used instead.
This was not a huge issue, as their purpose becomes clear when selected, but it definitely adds some friction.&lt;/p&gt;
&lt;h2 id=&quot;aftermath%3A-context-chips-in-the-wild&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#aftermath%3A-context-chips-in-the-wild&quot;&gt;Aftermath: Context Chips in the Wild&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In our usability testing, we had seen a high response rate for sentiment (% of question respondents who selected sentiment),
but that is no guarantee things will play out that way post-launch as well.
When participants know they are being watched they are always more willing to engage and pay a lot more attention,
no matter how much you emphasize that they should act naturally when briefing them.
That’s not their failing; it’s simply human nature.&lt;/p&gt;
&lt;p&gt;Indeed, sentiment response rates in the real-world were lower than those observed in the usability study,
but still high — ranging from 24% to 59% and averaging 38% (with the same median) &lt;strong&gt;per question&lt;/strong&gt;, meaning that out of every ten participants that answered each question, approximately four also provided a sentiment.
This was more than enough to draw conclusions.
In fact, context chips were deemed such a success &lt;strong&gt;they were later adopted by all other State Of surveys&lt;/strong&gt;,
even at the cost of continuity with previous years.&lt;/p&gt;
&lt;p&gt;Against expectations, participants were &lt;strong&gt;just as likely to express sentiment for features they had never heard of&lt;/strong&gt;,
and in fact marginally more likely than for features they had simply heard of.
In general response rates were pretty uniform across all experiences:&lt;/p&gt;
&lt;figure class=&quot;center&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Experience&lt;/th&gt;
&lt;th&gt;Sentiment response rate (average)&lt;/th&gt;
&lt;th&gt;Sentiment response rate (median)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Never heard of it&lt;/td&gt;
&lt;td&gt;37.3%&lt;/td&gt;
&lt;td&gt;37.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Heard of it&lt;/td&gt;
&lt;td&gt;37.3%&lt;/td&gt;
&lt;td&gt;36.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Used it&lt;/td&gt;
&lt;td&gt;39.0%&lt;/td&gt;
&lt;td&gt;40.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Overall&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;37.6%&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;37.9%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;
&lt;p&gt;Sentiment response rates overall and by experience (per question).&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As we had observed in the user study as well, participants were &lt;strong&gt;&lt;em&gt;far&lt;/em&gt; more likely to express positive rather than negative sentiment&lt;/strong&gt; (possibly a case of &lt;a href=&quot;https://en.wikipedia.org/wiki/Acquiescence_bias&quot;&gt;acquiescence bias&lt;/a&gt;).
Here are some interesting stats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The feature with the &lt;strong&gt;most negative sentiment&lt;/strong&gt; overall across all experiences (&lt;a href=&quot;https://immersive-web.github.io/model-element/&quot;&gt;&lt;code&gt;&amp;lt;model&amp;gt;&lt;/code&gt;&lt;/a&gt;) still only had 10% of respondents expressing negative sentiment for it, and still had &lt;strong&gt;2.4x more positive sentiment&lt;/strong&gt; than negative (24.7% vs 10.4%)!&lt;/li&gt;
&lt;li&gt;In contrast, the feature with the &lt;strong&gt;most positive sentiment&lt;/strong&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist&quot;&gt;&lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;&lt;/a&gt;) got a whopping 55% of respondents expressing positive sentiment (and only 4% negative).&lt;/li&gt;
&lt;li&gt;In fact, even the feature with the &lt;strong&gt;least positive sentiment&lt;/strong&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assign&quot;&gt;Imperative Slot Assignment&lt;/a&gt; 🤔) still had way more positive sentiment (17.24%) than &lt;code&gt;&amp;lt;model&amp;gt;&lt;/code&gt; had negative sentiment (10%)!&lt;/li&gt;
&lt;li&gt;If we look at the &lt;strong&gt;ratio of positive over negative sentiment&lt;/strong&gt;, it ranged from &lt;strong&gt;64x&lt;/strong&gt; (!) more positive than negative sentiment (45% vs 0.7% for landmark elements) to a mere &lt;strong&gt;2.4x&lt;/strong&gt; times more positive sentiment (24.7% vs 10.4% for &lt;code&gt;&amp;lt;model&amp;gt;&lt;/code&gt;), and was &lt;strong&gt;11x&lt;/strong&gt; on average (&lt;strong&gt;8x&lt;/strong&gt; median).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;The analysis presented in this section includes data from &lt;strong&gt;20K respondents&lt;/strong&gt;, which was &lt;em&gt;most&lt;/em&gt; of the whole dataset (around 90%) but not all, as it was done before the survey closed.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;results-visualization&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#results-visualization&quot;&gt;Results Visualization&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Presenting all this data was another challenge.
When you have two variables, &lt;strong&gt;ideally you want to be able to group results by either&lt;/strong&gt;.
E.g. you may be more interested in the total negative sentiment for a feature, or how many people had used it, and the results visualization should support both.
How do we design a results display that facilitates this?
Thankfully the visualizations for State Of surveys were already very interactive so interactivity was not out of the question.&lt;/p&gt;
&lt;p&gt;I was no longer involved by then but consulted in a volunteer capacity.
My main advice was to &lt;strong&gt;use proximity for clear visual grouping&lt;/strong&gt;, and to use a &lt;strong&gt;consistent visual association for bars&lt;/strong&gt; that represented the same bit of data, both of which they followed.
This was the rendering they settled on for the results:&lt;/p&gt;
&lt;figure&gt;
&lt;video src=&quot;https://lea.verou.me/blog/2024/context-chips/videos/results.mp4&quot; loop=&quot;&quot; muted=&quot;&quot; loading=&quot;lazy&quot; autoplay=&quot;&quot; playsinline=&quot;&quot;&gt;&lt;/video&gt;
&lt;figcaption&gt;
Interactive bar chart presenting two variables at once.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I think in terms of functionality this works really well.
The visual design could be improved to communicate IA better and appear less busy at first glance,
but given there is no dedicated designer in the team, I think they did a fantastic job.&lt;/p&gt;
&lt;h2 id=&quot;generalizability&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#generalizability&quot;&gt;Generalizability&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While this UI was originally designed to collect sentiment about the selected option in a multiple choice question,
I think it could be &lt;strong&gt;generalized to improving UX for other types of two variable questions&lt;/strong&gt;.
Generally, it can be a good fit when we have questions that collect data across two variables and:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The second variable is &lt;strong&gt;optional&lt;/strong&gt; and lower priority than the first&lt;/li&gt;
&lt;li&gt;The first variable is &lt;strong&gt;exclusive&lt;/strong&gt; (single) choice, i.e. not checkbox questions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The core benefit of this approach is the &lt;strong&gt;reduction in cognitive load&lt;/strong&gt;.
It is &lt;a href=&quot;https://journals.sagepub.com/doi/full/10.1177/0894439316674459&quot;&gt;well established that matrix questions are more overwhelming&lt;/a&gt;.
This design allows questions to initially appear like a simple multiple choice question, and only reveal the UI for the second variable upon interaction.
Additionally, while matrix questions force participants to decide on both variables at once, this design allows them to make their own tradeoff of cognitive load vs efficiency, treating the UI as single step or two step as they see fit.&lt;/p&gt;
&lt;p&gt;Another benefit of this design is that it allows for &lt;strong&gt;option labels to be context-dependent&lt;/strong&gt; for the second variable, whereas a matrix limits you to a single column header.
In the sentiment case, the labels varied depending on whether the feature had been used (&lt;em&gt;“Positive experience”&lt;/em&gt; / &lt;em&gt;“Negative experience”&lt;/em&gt;) or not (&lt;em&gt;“Interested”&lt;/em&gt; / &lt;em&gt;“Not interested”&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;The more such questions a survey has, the bigger the benefits — if it’s only about a couple questions,
it may not be worth the implementation complexity,
though I’m hoping that survey software may eventually provide this out of the box so that this is no longer a tradeoff.&lt;/p&gt;
&lt;p&gt;That said, matrix questions &lt;em&gt;do&lt;/em&gt; have their benefits, when used appropriately, i.e. when the two requirements listed above are not met.&lt;/p&gt;
&lt;p&gt;Matrix questions have an big edge when users need to make &lt;strong&gt;a single selection per row&lt;/strong&gt;,
especially when this may be the same answer for multiple rows, which means they can just &lt;strong&gt;tick down a whole column&lt;/strong&gt;.
Context chips do not allow users to build this positional association, as they are not aligned vertically.
THey are placed right after the answer text, and thus their horizontal position varies per answer.
To mitigate this, it can be useful to color-code them and maintain the same color coding consistently throughout the survey so that participants can build a visual association &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2024/context-chips/#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Context chips also &lt;strong&gt;enforce a clear prioritization&lt;/strong&gt; across the two variables:
the question is presented as a multiple choice question across the first variable,
with the chips allowing the respondent to provide optional additional context across a second variable.
Matrix questions allow presenting the two variables with the same visual weight,
which could be desirable in certain cases.
For example, there are cases when we don’t want to allow the respondent to provide an answer to the first variable without &lt;em&gt;also&lt;/em&gt; providing an answer to the second.&lt;/p&gt;
&lt;h2 id=&quot;lessons-learned&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#lessons-learned&quot;&gt;Lessons Learned&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to any generalizable knowledge around survey design, I think this is also an interesting product management case study, and teaches us several lessons.&lt;/p&gt;
&lt;h3 id=&quot;nsui&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#nsui&quot;&gt;Never skimp on articulating the &lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/#nsui&quot;&gt;north star UI&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Start any product design task by &lt;strong&gt;ignoring ephemeral constraints&lt;/strong&gt; (e.g. engineering resources) and first reach consensus on what the optimal UI is, &lt;em&gt;before&lt;/em&gt; you start applying constraints.
Yes, you read that right.
I want to write a whole post about the importance of north star UIs, because this is one of many cases over the course of my career where tight implementation constraints were magically lifted, either due to a change of mind, a change in the environment, or simply someone’s brilliant idea.
Without consensus on what the north star UI is (or even a clear idea about it) you then have to go back to the drawing board when this happens.&lt;/p&gt;
&lt;h3 id=&quot;user-testing-is-also-a-consensus-building-tool&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#user-testing-is-also-a-consensus-building-tool&quot;&gt;User testing is also a consensus-building tool&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You probably already know that usability testing is a great tool for improving user experience,
but there is a second, more strategic hidden utility to it: consensus building.&lt;/p&gt;
&lt;p&gt;I’ve been in way, &lt;strong&gt;&lt;em&gt;way&lt;/em&gt;&lt;/strong&gt; too many teams where UI decisions were made by &lt;strong&gt;hypothesizing about user behavior&lt;/strong&gt;, which could not only be missing the mark, but also there is no way forwards for disagreements.
What do you do, hypothesize harder?
When there is user testing data, it is much harder to argue against it.&lt;/p&gt;
&lt;p&gt;This is especially useful in convincing engineering that a certain UI is worth the implementation complexity,
and having engineers observe usability testing sessions can be an educational experience for many.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;For many engineers, user needs are an &lt;a href=&quot;https://www.theuncertaintyproject.org/tools/rumsfeld-matrix&quot;&gt;unknown unknown&lt;/a&gt; since HCI courses are elective in most CS curricula and not talked about very much in engineering resources.
One of the most common comments we got after the first lecture of our &lt;a href=&quot;https://designftw.mit.edu/&quot;&gt;usability &amp;amp; web programming class at MIT&lt;/a&gt; was “Wow, I had never thought about software from the user’s perspective before!”.
Believe it or not, these comments would often came from CS majors about to graduate!&lt;/p&gt;
&lt;/aside&gt;
&lt;h3 id=&quot;heuristic-evaluations-are-not-a-substitute-for-usability-testing&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2024/context-chips/#heuristic-evaluations-are-not-a-substitute-for-usability-testing&quot;&gt;Heuristic evaluations are not a substitute for usability testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are many things to like about &lt;a href=&quot;https://www.interaction-design.org/literature/topics/heuristic-evaluation?srsltid=AfmBOoq-_ZLU1ObBeZI5GJYZBlWSI4uRNlwL6_7W1hwKloKHw-54l29n&quot;&gt;heuristic evaluations&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_review&quot;&gt;design reviews&lt;/a&gt;.
They can be done by a usability expert alone and can uncover numerous issues that would have taken multiple rounds of usability testing, especially if they are also a domain expert.
Fixing the low hanging fruit issues means user testing time can be spent more efficiently, uncovering less obvious problems.
That are  are also certain types of issues that can &lt;em&gt;only&lt;/em&gt; be uncovered by a heuristic evaluation, such as _“death by a thousand paper cuts” type issues: small issues that are not a big deal on their own and are too small to observe in a user study, but add up to more friction.&lt;/p&gt;
&lt;p&gt;However, a big downside of these is that they are inherently &lt;strong&gt;prone to bias&lt;/strong&gt;.
They can be excellent for finding problems that may have been overlooked and are often obvious once pointed out.
However (unless the number of evaluators is large), they are not a good way to decide between alternatives.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Unlike Devographics, surveys are not FA’s core business, so the Impact/Effort tradeoff simply wasn’t there for a custom UI, at least at this point in time. I ended up going with &lt;a href=&quot;https://tally.so/&quot;&gt;Tally&lt;/a&gt;, mainly due to the flexibility of its conditional logic and its support for code injection (which among other things, allowed me to use FA icons — a whopping 120 different ones!). &lt;a href=&quot;https://lea.verou.me/blog/2024/context-chips/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Meaning out of the people who responded to that question about their experience with a feature, only 0.9% left a comment. &lt;a href=&quot;https://lea.verou.me/blog/2024/context-chips/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;A radio group with all buttons off cannot be returned to that state by user interaction. &lt;a href=&quot;https://lea.verou.me/blog/2024/context-chips/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;The ~9% of people with atypical color vision won’t benefit, but that’s okay in this case,
as color is used to add an extra cue, and not an essential part of the interface. &lt;a href=&quot;https://lea.verou.me/blog/2024/context-chips/#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry><entry>
    <title>Style-observer: JS to observe CSS property changes, for reals</title>
    <link href="https://lea.verou.me/blog/2025/style-observer/"/>
    <updated>2025-02-12T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2025/style-observer/</id>
    <content xml:lang="en" type="html">&lt;figure class=&quot;outlined&quot;&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2025/style-observer/images/social.gif&quot; alt=&quot;Style-observer social media teaser&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;I cannot count the number of times in my career I wished I could run JS in response to CSS property changes,
regardless of what triggered them: media queries, user actions, or even other JS.&lt;/p&gt;
&lt;p&gt;Use cases abound.
Here are some of mine:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement higher level custom properties in components, where one custom property changes multiple others in nontrivial ways (e.g. a &lt;code&gt;--variant: danger&lt;/code&gt; that sets 10 color tokens).&lt;/li&gt;
&lt;li&gt;Polyfill missing CSS features&lt;/li&gt;
&lt;li&gt;Change certain HTML attributes via CSS (hello &lt;code&gt;--aria-expanded&lt;/code&gt;!)&lt;/li&gt;
&lt;li&gt;Set CSS properties based on other CSS properties without having to mirror them as custom properties&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most recent time I needed this was to prototype an idea I had for &lt;a href=&quot;https://webawesome.com/&quot;&gt;Web Awesome&lt;/a&gt;,
and I decided this was it:
I’d either find a good, bulletproof solution, or I would build it myself.&lt;/p&gt;
&lt;p&gt;Spoiler alert:
&lt;a href=&quot;https://observe.style/&quot; title=&quot;And I couldn&#39;t even resist registering a domain for it 🤦🏽‍♀️ It’s all fun and games until the renewal bills start coming 🥲&quot; class=&quot;cta&quot;&gt;Oops, I did it again&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;a-brief-history-of-style-observers&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/style-observer/#a-brief-history-of-style-observers&quot;&gt;A Brief History of Style Observers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The quest for a JS style observer has been long and torturous.
Many have tried to slay this particular dragon, each getting us a little bit closer.&lt;/p&gt;
&lt;p&gt;The earliest attempts relied on &lt;a href=&quot;https://en.wikipedia.org/wiki/Polling_(computer_science)&quot;&gt;polling&lt;/a&gt;, and thus were also prohibitively slow.
Notable examples were &lt;a href=&quot;https://github.com/keithclark/ComputedStyleObserver&quot;&gt;&lt;code&gt;ComputedStyleObserver&lt;/code&gt; by Keith Clark&lt;/a&gt; in 2018
and &lt;a href=&quot;https://github.com/PixelsCommander/StyleObserver&quot;&gt;&lt;code&gt;StyleObserver&lt;/code&gt; by PixelsCommander&lt;/a&gt; in 2019.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://propjockey.io/&quot;&gt;Jane Ori&lt;/a&gt; first asked “Can we do better than polling?” with her &lt;a href=&quot;https://github.com/propjockey/css-var-listener&quot;&gt;css-var-listener&lt;/a&gt; in 2019.
It parsed the selectors of relevant CSS rules, and used a combination of observers and event listeners to detect changes to the matched elements.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fluorumlabs&quot;&gt;Artem Godin&lt;/a&gt; was the first to try using transition events such as &lt;code&gt;transitionstart&lt;/code&gt; to detect changes, with his &lt;a href=&quot;https://github.com/fluorumlabs/css-variable-observer&quot;&gt;css-variable-observer&lt;/a&gt; in 2020.
In fact, for CSS properties that are animatable, such as &lt;code&gt;color&lt;/code&gt; or &lt;code&gt;font-size&lt;/code&gt;, using transition events is already enough.
But what about the rest, especially custom properties which are probably the top use case?&lt;/p&gt;
&lt;p&gt;In addition to pioneering transition events for this purpose, Artem also concocted a brilliant hack to detect changes to custom properties:
he stuffed them into &lt;code&gt;font-variation-settings&lt;/code&gt;, which is animatable regardless of whether the axes specified corresponded to any real axes in any actual variable font, and then listened to transitions on that property.
It was brilliant, but also quite limited: it only supported observing changes to custom properties whose values were numbers (otherwise they would make &lt;code&gt;font-variation-settings&lt;/code&gt; invalid).&lt;/p&gt;
&lt;p&gt;The next breakthrough came four years later, when &lt;a href=&quot;https://github.com/bramus&quot;&gt;Bramus Van Damme&lt;/a&gt; pioneered a way to do it “properly”, using the (then) newly Baseline &lt;code&gt;transition-behavior: allow-discrete&lt;/code&gt; after &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8982#issuecomment-2317203434&quot;&gt;an idea by Jake Archibald&lt;/a&gt;.
His &lt;a href=&quot;https://github.com/bramus/style-observer&quot;&gt;@bramus/style-observer&lt;/a&gt; was the closest we’ve ever gotten to a “proper” general solution.&lt;/p&gt;
&lt;p&gt;Releasing his work as open source was already a great service to the community, but he didn’t stop there.
He stumbled on &lt;a href=&quot;https://allow-discrete-bugs.netlify.app/&quot;&gt;a ton of browser bugs&lt;/a&gt;, which he did an incredible job of &lt;a href=&quot;https://www.bram.us/2024/08/31/introducing-bramus-style-observer-a-mutationobserver-for-css/#custom-props&quot;&gt;documenting&lt;/a&gt; and then filing.
His conclusion was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Right now, the only cross-browser way to observe Custom Properties with @bramus/style-observer is to register the property with a syntax of “&lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt;”.
Note that &lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt; values can not start with a number, so you can’t use this type to store numeric values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wait, what?
That was still &lt;em&gt;quite&lt;/em&gt; the limitation!&lt;/p&gt;
&lt;p&gt;My brain started racing with ideas for how to improve on this.
What if, instead of trying to work around all of these bugs at once, we &lt;em&gt;detect&lt;/em&gt; them so we only have to work around the ones that are actually present?&lt;/p&gt;
&lt;h2 id=&quot;world%2C-meet-style-observer&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/style-observer/#world%2C-meet-style-observer&quot;&gt;World, meet &lt;code&gt;style-observer&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At first I considered just sending a bunch of PRs, but I wanted to iterate fast, and change too many things.
I took the fact that the domain &lt;a href=&quot;https://lea.verou.me/%60observe.style&quot;&gt;&lt;code&gt;observe.style&lt;/code&gt;&lt;/a&gt; was available as a sign from the universe, and decided the time had come for me to take my own crack at this age-old problem, armed with the knowledge of those who came before me and with the help of my trusty apprentice &lt;a href=&quot;https://d12n.me/&quot;&gt;Dmitry Sharabin&lt;/a&gt; &lt;em&gt;(hiring him to work full-time on our open source projects is a whole separate blog post)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One of the core ways &lt;code&gt;style-observer&lt;/code&gt; achieves better browser support is that
it &lt;strong&gt;performs feature detection&lt;/strong&gt; for many of the bugs Bramus identified.
This way, code can work around them in a targeted way, rather than the same code having to tiptoe around all possible bugs.
As a result, it basically works in every browser that supports &lt;a href=&quot;https://caniuse.com/mdn-css_properties_transition-behavior&quot;&gt;&lt;code&gt;transition-behavior: allow-discrete&lt;/code&gt;&lt;/a&gt;,
i.e. 90% globally.&lt;/p&gt;
&lt;figure class=&quot;float&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2025/style-observer/images/calm.png&quot; alt=&quot;Keep Calm and Style Observe&quot; /&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Safari transition loop bug (&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=279012&quot;&gt;#279012&lt;/a&gt;)&lt;/strong&gt;:
&lt;code&gt;StyleObserver&lt;/code&gt; &lt;a href=&quot;https://github.com/LeaVerou/style-observer/blob/main/src/util/detect-transitionrun-loop.js&quot;&gt;detects&lt;/a&gt; this and works around it by debouncing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chrome unregistered transition bug (&lt;a href=&quot;https://issues.chromium.org/issues/360159391&quot;&gt;#360159391&lt;/a&gt;)&lt;/strong&gt;:
&lt;code&gt;StyleObserver&lt;/code&gt; &lt;a href=&quot;https://github.com/LeaVerou/style-observer/blob/main/src/util/detect-unregistered-transition.js&quot;&gt;detects&lt;/a&gt; this bug and works around it by registering the property, if unregistered.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Firefox no initial &lt;code&gt;transitionstart&lt;/code&gt; bug (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1916214&quot;&gt;#1916214&lt;/a&gt;)&lt;/strong&gt;:
By design, &lt;code&gt;StyleObserver&lt;/code&gt; does not fire its callback immediately (i.e. works more like &lt;code&gt;MutationObserver&lt;/code&gt; than like &lt;code&gt;ResizeObserver&lt;/code&gt;).
In browsers that &lt;em&gt;do&lt;/em&gt; fire an initial &lt;code&gt;transitionstart&lt;/code&gt; event, it is ignored.&lt;/li&gt;
&lt;li&gt;In addition, while working on this, we found &lt;a href=&quot;https://github.com/LeaVerou/style-observer/issues/42&quot;&gt;a couple more bugs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, besides browser support, this supports throttling, aggregation, and plays more nicely with existing transitions.&lt;/p&gt;
&lt;p&gt;Since this came out of a real need, to (potentially) ship in a real product, it has been exhaustively tested, and comes with a testsuite of &amp;gt; 150 unit tests (thanks to Dmitry’s hard work).&lt;/p&gt;
&lt;p&gt;If you want to contribute, one area we could use help with is benchmarking.&lt;/p&gt;
&lt;p&gt;That’s all for now!
Try it out and let us know what you think!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://observe.style/&quot; class=&quot;cta&quot;&gt;Gotta end with a call to action, amirite?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docs: &lt;a href=&quot;https://observe.style/&quot;&gt;observe.style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Repo: &lt;a href=&quot;https://github.com/LeaVerou/style-observer&quot;&gt;leaverou/style-observer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NPM: &lt;a href=&quot;https://www.npmjs.com/package/style-observer&quot;&gt;style-observer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry><entry>
    <title>Construction Lines</title>
    <link href="https://lea.verou.me/blog/2025/construction-lines/"/>
    <updated>2025-06-13T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2025/construction-lines/</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;object data=&quot;https://lea.verou.me/blog/2025/construction-lines/images/logo-with-lines.svg&quot; id=&quot;logo-with-lines&quot;&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;I recently stumbled across &lt;a href=&quot;https://theoatmeal.com/comics/creativity_things&quot;&gt;The Oatmeal’s series on Creativity&lt;/a&gt;.
While all of it is spot on, the part on &lt;a href=&quot;https://theoatmeal.com/comics/creativity_erasers&quot;&gt;erasers&lt;/a&gt; hit especially hard.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“There is a lot of shame associated with backpedaling;
things like quitting your job, getting a divorce, or simply starting over are considered &lt;em&gt;shameful&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But forward isn’t always progress.&lt;/p&gt;
&lt;p&gt;And backward isn’t always regress.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sometimes going down the wrong path isn’t a mistake —
it’s a construction line.&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;— &lt;a href=&quot;https://theoatmeal.com/comics/creativity_erasers&quot;&gt;Matthew Inman (The Oatmeal)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was exactly what I needed to hear.
You see, only a few days prior, &lt;strong&gt;Font Awesome and I had parted ways&lt;/strong&gt; — the end of a short, but transformative chapter.
I’m proud of what we built together, and grateful for what I learned along the way.
But it was time to move on.&lt;/p&gt;
&lt;p&gt;Jobs are a lot like relationships.
They often start with infatuation — and end with the realization that you’re simply not compatible, and that’s no-one’s fault.
Letting go always stings, even when it’s the right call.
There’s always grief: when you’re not ready to move on, you grieve the bond; when you are, you grieve your expectations.
But every ending leaves behind clarity — about who you are, and what makes you happy.&lt;/p&gt;
&lt;style&gt;
#logo-with-lines {
	max-height: 50vh;
	margin: auto;
	background: radial-gradient(white 30%, transparent 80%);
	display: block;
}
&lt;/style&gt;
&lt;h2 id=&quot;the-pursuit-of-happiness&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/construction-lines/#the-pursuit-of-happiness&quot;&gt;The pursuit of happiness&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Today is my 39th birthday — and this summer marks 20 years since I first dipped my toes into this industry.
Naturally, I’ve been doing a lot of reflection.&lt;/p&gt;
&lt;p&gt;As is typical for ADHDers, I have done a ton of different things, and built a diverse skillset as a result.
But what made me happiest?
The list of highs went a bit like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Entrepreneurship:&lt;/strong&gt; Co-founding a startup and driving it to become a household name (in Greece — this was 2008!)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consulting:&lt;/strong&gt; Being a full-time consultant, speaker, and author, traveling the world and jumping from one exciting gig to another&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Academia:&lt;/strong&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2025/construction-lines/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; Pushing the boundaries of Human-Computer Interaction at MIT and teaching MIT CS students to care about people.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All had three things in common: &lt;strong&gt;autonomy&lt;/strong&gt;, &lt;strong&gt;breadth&lt;/strong&gt;, and &lt;strong&gt;impact&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;These three things have been the biggest predictors of happiness for me — far more than &lt;strong&gt;income&lt;/strong&gt; &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2025/construction-lines/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; or &lt;strong&gt;work-life balance&lt;/strong&gt;, which are the usual suspects.&lt;/p&gt;
&lt;p&gt;I used to &lt;strong&gt;aspire to work-life balance&lt;/strong&gt; in the same way I aspired to frequent exercise — because it was good for me, not because it gave me joy.
Eventually I realized that what makes me happy isn’t working less, it’s loving what I do, and feeling it matters.
Working less cannot transform how your work makes you &lt;em&gt;feel&lt;/em&gt;; it can only dampen the effects.
But dilution doesn’t turn misery into joy — at best it just makes it tolerable.
Don’t get me wrong, poor WLB &lt;em&gt;can absolutely&lt;/em&gt; make you miserable; when long hours are an externally imposed expectation,
not an internal drive fueled by passion.
As with many things in life, it’s &lt;em&gt;enthusiastic consent&lt;/em&gt; that makes all the difference.&lt;/p&gt;
&lt;p&gt;Then there’s &lt;strong&gt;breadth&lt;/strong&gt;.
Most jobs try to box you in:
PM or engineer? Scientist or practitioner? UX Researcher or designer? DevRel or standards?
And I’m like…&lt;/p&gt;
&lt;figure class=&quot;center&quot; style=&quot;width: max(60%, 20em);&quot;&gt;
  &lt;video controls=&quot;&quot; src=&quot;https://lea.verou.me/blog/2025/construction-lines/videos/aurora.mp4&quot; loop=&quot;&quot;&gt;&lt;/video&gt;
  &lt;figcaption&gt;
&lt;p&gt;Aurora is my spirit animal 🫶🏼 &lt;a href=&quot;https://www.instagram.com/reel/DKj1uT7hHl-/?igsh=MXBtNWpnNWJnNWczag==&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It’s silly that people are forced to choose, and present themselves as &lt;em&gt;less than&lt;/em&gt; to seem more attractive to hiring managers.
To use myself as an example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web architecture:&lt;/strong&gt; I have designed &lt;a href=&quot;https://lea.verou.me/specs&quot;&gt;several&lt;/a&gt; web technologies that have shipped across all browsers.
I’ve spent 4 years in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Technical_Architecture_Group&quot;&gt;TAG&lt;/a&gt;,
reviewing new web technologies across the web platform,
and eventually leading the &lt;a href=&quot;https://www.w3.org/TR/design-principles/&quot;&gt;Web Platform Design Principles&lt;/a&gt; effort.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Product/usability/HCI:&lt;/strong&gt; Prior to working as Product Lead at Font Awesome,
I’ve earned a PhD at MIT in Human-Computer Interaction with a minor in Entrepreneurship &amp;amp; Innovation.
I published peer reviewed papers in top-tier HCI conferences,
and co-created/taught a &lt;a href=&quot;https://designftw.mit.edu/&quot;&gt;course&lt;/a&gt; on usability &amp;amp; web technologies that is now a permanent subject.
I have run user research for scientific and industry projects.
I have started several open source projects, some used by millions.
In the more distant past, I co-founded a (then) well-known social startup in my home country, Greece and ran product, engineering, and design for three years (six if you count pre-incorporation).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DevRel:&lt;/strong&gt; I’ve given over 100 conference talks, published a bestselling &lt;a href=&quot;https://amzn.to/3FXipvi&quot;&gt;book&lt;/a&gt; on CSS, and was the first devrel hire at W3C back in 2012.
I have built dozens of apps and polyfills that stimulated developer interest in new Web features and drove browser adoption.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Should I present myself as a web architecture expert, a usability/product person, an HCI researcher, or a Developer Advocate?&lt;/p&gt;
&lt;p&gt;What a pointless dilemma if I ever saw one!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Combining skills across different areas is a strength to be celebrated, not a weakness to be swept under the rug.&lt;/strong&gt;
The crossover between skills is where the magic happens.
Off the top of my head:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understanding usability principles has made me a &lt;em&gt;far&lt;/em&gt; better web standards designer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web standards work is product design on hard mode.&lt;/strong&gt;
After the impossibly hard constraints and tradeoffs you deal with when designing APIs for the Web platform, regular product problems seem like a cakewalk (&lt;em&gt;we have versions? And we can actually change things?? And we have reliable metrics?!? And the stakeholders all work at the same company?!?&lt;/em&gt; 🤯).&lt;/li&gt;
&lt;li&gt;They often &lt;strong&gt;feed into each other&lt;/strong&gt;: DevRel work made me a better communicator in everything I do.
Usability made me a better speaker and educator&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2025/construction-lines/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;, so a better developer advocate too.&lt;/li&gt;
&lt;li&gt;Leading the &lt;a href=&quot;https://w3.org/TR/design-principles&quot;&gt;Web Platform Design Principles&lt;/a&gt; convinced me that &lt;strong&gt;explicit design principles are immensely useful for all product work&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Web standards taught me that contrary to popular belief, &lt;strong&gt;you do not need a benevolent dictator to ship&lt;/strong&gt;.
But then you do need a good process.
Consensus does not magically grow on trees, building consensus is its own &lt;a href=&quot;https://www.w3.org/guide/&quot;&gt;art&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, &lt;strong&gt;impact&lt;/strong&gt; does not have to be about solving world hunger or curing cancer.
Making people’s lives a &lt;em&gt;little&lt;/em&gt; better is meaningful impact too.
It all boils down to:&lt;/p&gt;
&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; display=&quot;true&quot; style=&quot;direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.439ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;36.423ex&quot; height=&quot;2.009ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 16099 888&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mtext&quot;&gt;&lt;path data-c=&quot;49&quot; d=&quot;M328 0Q307 3 180 3T32 0H21V46H43Q92 46 106 49T126 60Q128 63 128 342Q128 620 126 623Q122 628 118 630T96 635T43 637H21V683H32Q53 680 180 680T328 683H339V637H317Q268 637 254 634T234 623Q232 620 232 342Q232 63 234 60Q238 55 242 53T264 48T317 46H339V0H328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(361,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;70&quot; d=&quot;M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z&quot; transform=&quot;translate(1194,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;61&quot; d=&quot;M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z&quot; transform=&quot;translate(1750,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;63&quot; d=&quot;M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z&quot; transform=&quot;translate(2250,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;74&quot; d=&quot;M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z&quot; transform=&quot;translate(2694,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3360.8,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtext&quot; transform=&quot;translate(4416.6,0)&quot;&gt;&lt;path data-c=&quot;49&quot; d=&quot;M328 0Q307 3 180 3T32 0H21V46H43Q92 46 106 49T126 60Q128 63 128 342Q128 620 126 623Q122 628 118 630T96 635T43 637H21V683H32Q53 680 180 680T328 683H339V637H317Q268 637 254 634T234 623Q232 620 232 342Q232 63 234 60Q238 55 242 53T264 48T317 46H339V0H328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(361,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;64&quot; d=&quot;M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z&quot; transform=&quot;translate(917,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;69&quot; d=&quot;M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z&quot; transform=&quot;translate(1473,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;76&quot; d=&quot;M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z&quot; transform=&quot;translate(1751,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;69&quot; d=&quot;M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z&quot; transform=&quot;translate(2279,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;64&quot; d=&quot;M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z&quot; transform=&quot;translate(2557,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;75&quot; d=&quot;M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z&quot; transform=&quot;translate(3113,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;61&quot; d=&quot;M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z&quot; transform=&quot;translate(3669,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z&quot; transform=&quot;translate(4169,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;20&quot; d=&quot;&quot; transform=&quot;translate(4447,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;49&quot; d=&quot;M328 0Q307 3 180 3T32 0H21V46H43Q92 46 106 49T126 60Q128 63 128 342Q128 620 126 623Q122 628 118 630T96 635T43 637H21V683H32Q53 680 180 680T328 683H339V637H317Q268 637 254 634T234 623Q232 620 232 342Q232 63 234 60Q238 55 242 53T264 48T317 46H339V0H328Z&quot; transform=&quot;translate(4697,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(5058,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;70&quot; d=&quot;M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z&quot; transform=&quot;translate(5891,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;61&quot; d=&quot;M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z&quot; transform=&quot;translate(6447,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;63&quot; d=&quot;M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z&quot; transform=&quot;translate(6947,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;74&quot; d=&quot;M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z&quot; transform=&quot;translate(7391,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(12418.8,0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtext&quot; transform=&quot;translate(13419,0)&quot;&gt;&lt;path data-c=&quot;52&quot; d=&quot;M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;65&quot; d=&quot;M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z&quot; transform=&quot;translate(736,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;61&quot; d=&quot;M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z&quot; transform=&quot;translate(1180,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;63&quot; d=&quot;M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z&quot; transform=&quot;translate(1680,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;68&quot; d=&quot;M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z&quot; transform=&quot;translate(2124,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;block&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;&gt;&lt;mtext&gt;Impact&lt;/mtext&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mtext&gt;Individual Impact&lt;/mtext&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mtext&gt;Reach&lt;/mtext&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;&lt;p&gt;You can achieve the same total impact by improving the lives of a few people a lot, or the lives of many people a little.
For example, &lt;a href=&quot;https://lea.verou.me/specs&quot;&gt;my work on web standards&lt;/a&gt; has been some of the most fulfilling work I’ve ever done.
Its &lt;em&gt;Individual Impact&lt;/em&gt; is small, but the &lt;em&gt;Reach&lt;/em&gt; is millions, since all front-end developers out there use the same web platform.&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-next%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/construction-lines/#what%E2%80%99s-next%3F&quot;&gt;What’s next?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since consulting and entrepreneurship have been my happiness peaks, I figured I’d try them again.
Yes, both at once, because after all, we’ve already established that WLB is a foreign concept 🤣&lt;/p&gt;
&lt;p&gt;My apprentice &lt;a href=&quot;https://d12n.me/&quot;&gt;Dmitry&lt;/a&gt; and I have been in high gear building some exciting things,
which I hope to be able to share soon,
and I feel more exhilarated than I have in years.
I had missed drawing my own lines.&lt;/p&gt;
&lt;p&gt;In parallel, I’m taking on select &lt;a href=&quot;https://lea.verou.me/consulting/&quot;&gt;consulting work&lt;/a&gt;,
so if you need help with certain challenges, or to level up your team around web architecture, CSS, or usability, &lt;a href=&quot;https://lea.verou.me/consulting/&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong, I’m not closing the door to full-time roles.
I know there are roles out there that value passion and offer the kind of autonomy, breadth, and impact that would let me thrive.
It’s the ROI of digging through rubble to find them that gives me pause — as a product person at heart, I/E tradeoffs are top of mind.
But if you have such a unicorn, &lt;a class=&quot;contact no-after&quot; data-subject=&quot;🦄 job&quot;&gt;I’m all ears&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also &lt;em&gt;finally&lt;/em&gt; took a few small steps to make my pro bono work financially sustainable, a long overdue todo item.
Both pages still need work, but you can now support my writing via &lt;a href=&quot;https://ko-fi.com/leaverou&quot;&gt;ko-fi&lt;/a&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2025/construction-lines/#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;, and my open source work via &lt;a href=&quot;https://github.com/leaverou&quot;&gt;GitHub Sponsors&lt;/a&gt;.
I made separate pages for my two most popular projects, &lt;a href=&quot;https://opencollective.com/prismjs&quot;&gt;Prism&lt;/a&gt; (nearing 1.8 &lt;strong&gt;billion&lt;/strong&gt; total npm installs! 🤯) and &lt;a href=&quot;https://opencollective.com/color&quot;&gt;Color.js&lt;/a&gt;.
This is as much about &lt;em&gt;prioritization&lt;/em&gt; as it is about &lt;em&gt;sustainability&lt;/em&gt;: &lt;strong&gt;money is an excellent signal about what truly matters to people&lt;/strong&gt;.&lt;/p&gt;
&lt;aside style=&quot;--label: &#39;PSA&#39;&quot;&gt;
&lt;p&gt;It should go without saying that if you’re a for-profit company depending on open source work, you are &lt;em&gt;expected&lt;/em&gt; to fund it.
This is not a legal expectation, mainly because enforcement is a headache, but it absolutely is an ethical one.
It is also in your best interest — funding the open source software you use ensures that it continues to be maintained.
&lt;strong&gt;Don’t be the reason we can’t have nice things&lt;/strong&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;I don’t have a polished “next” to announce yet.&lt;br /&gt;
But I’m exactly where I need to be.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sometimes the clearest lines are the ones drawn after you erase.&lt;/strong&gt;&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Many things wrong with academia, but the intellectual freedom is unparalleled, and it makes up for a lot. &lt;a href=&quot;https://lea.verou.me/blog/2025/construction-lines/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;See also &lt;a href=&quot;https://www.zenpencils.com/comic/98-alan-watts-what-if-money-was-no-object/&quot;&gt;Alan Watts’ “What if money was no object?”&lt;/a&gt; — a classic, but still relevant. &lt;a href=&quot;https://lea.verou.me/blog/2025/construction-lines/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Teaching is absolutely a form of UI design — a UI that exposes your knowledge to students — the users.
There are many similarities between how good educators design their material and how good UI designers design interfaces. &lt;a href=&quot;https://lea.verou.me/blog/2025/construction-lines/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Thanks &lt;a href=&quot;https://overreacted.io/&quot;&gt;Dan Abramov&lt;/a&gt; for the wording inspiration (with permission). These things are &lt;em&gt;so&lt;/em&gt; hard. &lt;a href=&quot;https://lea.verou.me/blog/2025/construction-lines/#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry><entry>
    <title>Bluesky Likes Web Components</title>
    <link href="https://lea.verou.me/blog/2025/bluesky-likes/"/>
    <updated>2025-06-17T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2025/bluesky-likes/</id>
    <content xml:lang="en" type="html">&lt;figure&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2025/bluesky-likes/images/demo.png&quot; alt=&quot;Screenshot of the Bluesky Likes components&quot; style=&quot;width: 100%;&quot; /&gt;
&lt;figcaption&gt;
&lt;p&gt;Just want the components? Here you go:
&lt;a href=&quot;https://projects.verou.me/bluesky-likes/&quot; target=&quot;_blank&quot; class=&quot;small cta&quot;&gt;
&lt;i class=&quot;fa-brands fa-bluesky&quot;&gt;&lt;/i&gt; Demo&lt;/a&gt;
&lt;a href=&quot;https://github.com/LeaVerou/bluesky-likes&quot; target=&quot;_blank&quot; class=&quot;small cta&quot;&gt;
&lt;i class=&quot;fa-brands fa-github&quot;&gt;&lt;/i&gt; Repo&lt;/a&gt;
&lt;a href=&quot;https://www.npmjs.com/package/bluesky-likes&quot; target=&quot;_blank&quot; class=&quot;small cta&quot;&gt;
&lt;i class=&quot;fa-brands fa-npm&quot;&gt;&lt;/i&gt; NPM&lt;/a&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;a-love-letter-to-the-bluesky-api&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#a-love-letter-to-the-bluesky-api&quot;&gt;A love letter to the Bluesky API&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’m old enough to remember the golden Web 2.0 era, when many of today’s big social media platforms grew up.
A simpler time, when the Web was much more extroverted.
It was common for websites to embed data from others (the peak of &lt;a href=&quot;https://en.wikipedia.org/wiki/Mashup_(web_application_hybrid)&quot;&gt;mashups&lt;/a&gt;),
and prominently feature widgets from various platforms to showcase a post’s likes or shares.&lt;/p&gt;
&lt;p&gt;Especially Twitter was so ubiquitous that the number of Twitter shares was my primary metric for how much people were interested in a blog post I wrote.
Then, websites started progressively becoming walled gardens, guarding their data with more fervor than Gollum guarding the Precious.
Features disappeared or got locked behind API keys, ridiculous rate limits, expensive paywalls, and other restrictions.
Don’t get me wrong, I get it.
A lot of it was reactionary, a response to abuse — the usual reason we can’t have nice things.
And even when it was to stimulate profit — it is understandable that they want to monetize their platforms.
People gotta eat.&lt;/p&gt;
&lt;p&gt;I was recently reading &lt;a href=&quot;https://whitep4nth3r.com/blog/the-promise-that-wasnt-kept/&quot;&gt;this interesting article&lt;/a&gt; by Salma Alam-Naylor.
The article makes some great points, but it was something else that caught my eye: the widget of Bluesky likes at the bottom.&lt;/p&gt;
&lt;figure class=&quot;no-padding&quot;&gt;
	&lt;img src=&quot;https://lea.verou.me/blog/2025/bluesky-likes/images/salmas-widget.png&quot; alt=&quot;Screenshot of Salma&#39;s Bluesky likes widget&quot; /&gt;
	&lt;figcaption&gt;Salma&#39;s Bluesky likes widget that inspired these&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I mentioned it to my trusty apprentice &lt;a href=&quot;https://d12n.me/&quot;&gt;Dmitry&lt;/a&gt; who &lt;a href=&quot;https://codepen.io/dmitrysharabin/pen/Jodbyqm&quot;&gt;discovered&lt;/a&gt; the API was actually much simpler than what we’ve come to expect.
Later, it turned out Salma has even written an entire &lt;a href=&quot;https://whitep4nth3r.com/blog/show-bluesky-likes-on-blog-posts/&quot;&gt;post&lt;/a&gt; on how to implement the same thing on your own site.&lt;/p&gt;
&lt;p&gt;The openness of the API was so refreshing.
Not only can you read public data without being authenticated, &lt;strong&gt;you don’t even need an API key!&lt;/strong&gt;
Major nostalgia vibes.&lt;/p&gt;
&lt;p&gt;It seemed the perfect candidate for a web component that you can just drop in to a page, give it a post URL, and it will display the likes for that post.
I just &lt;em&gt;had&lt;/em&gt; to make it, and of course use it right here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web Components that use API data have been historically awkward.&lt;/strong&gt;
Let’s set aside private API keys or APIs that require authentication even for reading public data for a minute.
Even for public API keys, where on Earth do you put them?!
There is no established pattern for passing global options to components.
&lt;strong&gt;Attributes need to be specified on every instance&lt;/strong&gt;, which is very tedious.
So every component invents their own pattern: some bite the bullet and use attributes, others use static class fields, &lt;code&gt;data-*&lt;/code&gt; attributes on any element or on specific elements, separate ES module exports, etc.
None of these are ideal, so components often do multiple.
Not to mention the onboarding hassle of creating API keys if you want to try multiple APIs.&lt;/p&gt;
&lt;p&gt;The Bluesky API was a breath of fresh air:
just straightforward HTTP GET requests with straightforward JSON data responses.&lt;/p&gt;
&lt;p&gt;Sing with me!&lt;br /&gt;
🎶 &lt;em&gt;all you need is &lt;code&gt;fetch&lt;/code&gt;&lt;/em&gt; 🎺🎺🎺&lt;br /&gt;
🎶 &lt;em&gt;all you need is &lt;code&gt;fetch&lt;/code&gt;&lt;/em&gt; 🎺🎺🎺&lt;br /&gt;
🎶 &lt;em&gt;all you need is &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt;&lt;/em&gt; 🎶&lt;br /&gt;
🎶 &lt;em&gt;&lt;code&gt;fetch&lt;/code&gt; is all you need&lt;/em&gt; 🎶&lt;/p&gt;
&lt;p&gt;Building a component that used it was a breeze.&lt;/p&gt;
&lt;h2 id=&quot;two-components-for-displaying-bluesky-likes&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#two-components-for-displaying-bluesky-likes&quot;&gt;Two Components for displaying Bluesky likes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the end I ended up building two separate components, published under the same &lt;a href=&quot;https://www.npmjs.com/package/bluesky-likes&quot;&gt;&lt;code&gt;bluesky-likes&lt;/code&gt; npm package&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;bluesky-likes&amp;gt;&lt;/code&gt; — displays the number of likes for a post, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;bluesky-likers&amp;gt;&lt;/code&gt; — displays the list of users who liked a post.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They can be used separately, or together.
E.g. to get a display similar to Salma’s widget, the markup would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://unpkg.com/bluesky-likes&amp;quot; type=&amp;quot;module&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;h2&amp;gt;
	&amp;lt;bluesky-likes src=&amp;quot;https://bsky.app/profile/lea.verou.me/post/3lhygzakuic2n&amp;quot;&amp;gt;&amp;lt;/bluesky-likes&amp;gt;
	likes on Bluesky
&amp;lt;/h2&amp;gt;

&amp;lt;p&amp;gt;
	&amp;lt;a href=&amp;quot;https://bsky.app/profile/lea.verou.me/post/3lhygzakuic2n&amp;quot;&amp;gt;Like this post on Bluesky to see your face on this page&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;bluesky-likers src=&amp;quot;https://bsky.app/profile/lea.verou.me/post/3lhygzakuic2n&amp;quot;&amp;gt;&amp;lt;/bluesky-likers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the result would be similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://projects.verou.me/bluesky-likes/demo/screenshot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I started by making a single component that did both, but it quickly became clear that it was better to split them up.
It provided a lot more flexibility with only a tiny bit more effort for the common case,
and it allowed me to simplify the internal structure of each component.&lt;/p&gt;
&lt;p&gt;Requests are &lt;strong&gt;aggressively cached&lt;/strong&gt; across component instances,
so the fact that it’s two separate components doesn’t mean you’ll be making duplicate requests.
Additionally, these ended up pretty lightweight: the whole package is &lt;a href=&quot;https://bundlephobia.com/package/bluesky-likes&quot;&gt;~2.5 KB minified &amp;amp; gzipped&lt;/a&gt; and dependency-free.&lt;/p&gt;
&lt;aside id=&quot;dependencies&quot;&gt;
&lt;h4&gt;Aside: On dependencies&lt;/h4&gt;
&lt;p&gt;Don’t get me wrong; &lt;strong&gt;I have nothing against dependencies&lt;/strong&gt;.
For nontrivial web components or web component libraries, they are typically necessary.
In fact, one of my many unfinished side projects is &lt;a href=&quot;https://github.com/nudeui/element&quot;&gt;a modular library of composable web component helpers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don’t set out to make anything dependency-free; I think that’s the wrong goal.
&lt;strong&gt;Abstractions are how technology moves forward.&lt;/strong&gt;
But abstractions come with a &lt;strong&gt;cost&lt;/strong&gt;, so they need to add enough &lt;strong&gt;value&lt;/strong&gt; to justify their existence in a project.
As with most things in life, it’s all about the balance of tradeoffs.&lt;/p&gt;
&lt;p&gt;I tend to approach most dependencies in the same way I approached the epidural when I had my daughter:
first try without, and if it gets too painful, go for it.
It just never got to that point.
They both got close but then it was over. 🤷🏽‍♀️&lt;/p&gt;
&lt;/aside&gt;
&lt;h2 id=&quot;api-design-for-web-components&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#api-design-for-web-components&quot;&gt;API Design for Web Components&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;design-principles&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#design-principles&quot;&gt;Design Principles&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Per my usual &lt;a href=&quot;https://www.youtube.com/watch?v=g92XUzc1OHY&quot;&gt;API design philosophy&lt;/a&gt;,
I wanted these components to make common cases easy, complex cases possible, and not have usability cliffs,
i.e. the progression from the former to the latter should be smooth.&lt;/p&gt;
&lt;figure&gt;
	&lt;object data=&quot;https://talks.verou.me/api-design/images/curve-delightful-3.svg&quot;&gt;&lt;/object&gt;
	&lt;object data=&quot;https://lea.verou.me/blog/2025/bluesky-likes/images/usability-cliff.svg&quot;&gt;&lt;/object&gt;
	&lt;figcaption&gt;API design curve&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;What does that mean for a web component?&lt;/p&gt;
&lt;h4 id=&quot;common-use-cases-should-be-easy&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#common-use-cases-should-be-easy&quot;&gt;Common use cases should be &lt;em&gt;easy&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You should have a good result by simply including the component and specifying the minimum input to communicate your intent,
in this case, a Bluesky post URL.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You should not need to write CSS to make it look decent&lt;/li&gt;
&lt;li&gt;You should not need to write JavaScript to make it work&lt;/li&gt;
&lt;li&gt;You should not need to slot content for things that could have sensible defaults&lt;/li&gt;
&lt;li&gt;You should not need to specify things it can figure out on its own from things you’ve already specified&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;complex-use-cases-should-be-possible&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#complex-use-cases-should-be-possible&quot;&gt;Complex use cases should be &lt;em&gt;possible&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you’re willing to put more work into it, the sky should be the limit.
You should be able to completely restyle it, customize nearly every part of its UI etc, but the UX of these things doesn’t need to be optimized.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Extensibility over encapsulation&lt;/strong&gt;:
If something doesn’t need to be hidden away, expose it as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/::part&quot;&gt;part&lt;/a&gt;.
Don’t be frugal with your parts.
The downsides of exposing too many parts are few and small, but not exposing enough parts can make certain styling impossible.&lt;/li&gt;
&lt;li&gt;Don’t be frugal with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots#adding_flexibility_with_slots&quot;&gt;slots&lt;/a&gt;:
use slots with fallback content liberally.
That way people can customize content or even entire parts of the UI.&lt;/li&gt;
&lt;li&gt;Expose &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:state&quot;&gt;states&lt;/a&gt; for conditional styling. Yes, it’s Baseline now.&lt;/li&gt;
&lt;/ul&gt;
&lt;article role=&quot;note&quot; class=&quot;tip&quot;&gt;
&lt;p&gt;You can &lt;em&gt;style&lt;/em&gt; the &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element itself, to avoid adding (and thus, having to expose) additional wrapper divs.
And yes, you can expose a &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; via a &lt;code&gt;part&lt;/code&gt; as well.
Just be mindful that that part will be available whether the slot has slotted content or not.&lt;/p&gt;
&lt;/article&gt;
&lt;p&gt;For these components, as a proof of concept, in addition to parts and slots
all component styles and templates are exposed as static properties on the component class that you can modify or replace,
either directly on it, or in your own subclass, for extreme customizability.&lt;/p&gt;
&lt;h4 id=&quot;no-usability-cliffs&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#no-usability-cliffs&quot;&gt;No usability cliffs&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Making common things easy and complex things possible is not enough&lt;/strong&gt; for a good API.
Most use cases fall somewhere in between the two extremes.
If a small increase in use case complexity throws users off the deep end in terms of API complexity, they’re gonna have a &lt;em&gt;bad time&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The API should have enough customization hooks that common customizations do not require going through the same flow as full customization and recreating everything.&lt;/p&gt;
&lt;p&gt;For web components, this might mean:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ideally, &lt;strong&gt;standard CSS properties&lt;/strong&gt; on the host should work.
This is also part of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Principle_of_least_astonishment&quot;&gt;principle of least astonishment&lt;/a&gt;.
However, sometimes this is simply not feasible or it would require unacceptable tradeoffs, which brings us to…&lt;/li&gt;
&lt;li&gt;Exposing enough &lt;strong&gt;custom properties&lt;/strong&gt; that basic, common customizations don’t require parts.&lt;/li&gt;
&lt;li&gt;Nest slots liberally: You should not have to replace an entire part of the UI just to customize its content.
&lt;strong&gt;Nested slots allow you to provide UI extension points at different levels of abstraction.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;the-99-99-rule-of-web-components&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#the-99-99-rule-of-web-components&quot;&gt;The 99-99 rule of Web Components&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Ninety%E2%80%93ninety_rule&quot;&gt;Ninety-Ninety Rule&lt;/a&gt; tells us that the last 10% of the work takes 90% of the time.
I would argue that for web components, it’s more like a 99-99 Rule.&lt;/p&gt;
&lt;p&gt;Take these components as an example.
They are the poster child for the kind of straightforward, simple component that does one thing well, right?
But web components are a bit like children: if most people realized upfront how much work they are, way fewer would get made. 😅&lt;/p&gt;
&lt;figure&gt;
	&lt;object data=&quot;https://lea.verou.me/blog/2025/bluesky-likes/images/iceberg.svg&quot;&gt;&lt;/object&gt;
	&lt;figcaption&gt;Building a web component is always more work than it looks&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Even when the core functionality is straightforward, there are so many other things that need to be done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dynamically responding to changes (in attributes, slots, nested content, etc) like regular HTML elements takes work, especially if you want to do it 100% &lt;em&gt;properly&lt;/em&gt;, which is rarely a good idea (more on that below).
Libraries like &lt;a href=&quot;https://lit.dev/&quot;&gt;Lit&lt;/a&gt; make some of it easier, but not trivial.&lt;/li&gt;
&lt;li&gt;Accessibility and i18n often take orders of magnitude more work than core functionality, especially together.&lt;/li&gt;
&lt;li&gt;Designing &amp;amp; implementing style and UI customization hooks&lt;/li&gt;
&lt;li&gt;Figuring out the right tradeoffs between performance and all of the above&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is without any additional functionality creeping up.&lt;/p&gt;
&lt;p&gt;Some &lt;s&gt;battle scars&lt;/s&gt; examples below.&lt;/p&gt;
&lt;h3 id=&quot;customizing-the-link-in-%3Cbluesky-likes%3E&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#customizing-the-link-in-%3Cbluesky-likes%3E&quot;&gt;Customizing the link in &lt;code&gt;&amp;lt;bluesky-likes&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A good component has sensible defaults, but allows customization of everything users may reasonably want to customize.
There is nothing more annoying than finding a web component that does &lt;em&gt;almost&lt;/em&gt; what you want, but doesn’t allow you to customize the one thing you &lt;em&gt;really&lt;/em&gt; need to customize.&lt;/p&gt;
&lt;p&gt;My first prototype of &lt;code&gt;&amp;lt;bluesky-likes&amp;gt;&lt;/code&gt; always had an internal link in its shadow DOM that opened the full list of likers in a new tab.
This opened it up to usability, accessibility, and i18n issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if you want it to link to the post itself, or even an entirely different URL?&lt;/li&gt;
&lt;li&gt;How to customize the link attributes, e.g. &lt;code&gt;rel&lt;/code&gt; or &lt;code&gt;target&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a11y:&lt;/strong&gt; The link did not have a &lt;code&gt;title&lt;/code&gt; at the time, only the icon had alt text.
This meant assistive technologies would read it like “Butterfly blue heart fifteen”.
How to word the link title to best communicate what the link does to assistive technologies without excessive verbosity?&lt;/li&gt;
&lt;li&gt;And then, how to allow users to customize the link title for &lt;strong&gt;i18n&lt;/strong&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Often components will solve these types of problems the brute force way, by replicating all &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; attributes on the component itself,
which is both heavyweight and a maintenance nightmare over time.&lt;/p&gt;
&lt;p&gt;Instead, we went with a somewhat unconventional solution:
&lt;strong&gt;the component detects whether it’s inside a link&lt;/strong&gt;, and removes its internal &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element in that case.
This solves all four issues at once; the answer to all of them is to just wrap it with the link of your choice.
This allowed us to just pick a good default &lt;code&gt;title&lt;/code&gt; attribute, and not have to worry about it.&lt;/p&gt;
&lt;p&gt;It’s not perfect: now that &lt;code&gt;:host-context()&lt;/code&gt; is &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/1914#issuecomment-2737310093&quot;&gt;removed&lt;/a&gt;,
there is no way for a component to style itself differently when it’s inside a link,
to e.g. control the focus outline.
And the detection is not perfect, because doing it 100% perfectly would incur a performance penalty for little gain.
But on balance, it so far seems the tradeoffs are worth it.&lt;/p&gt;
&lt;h3 id=&quot;a11y&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#a11y&quot;&gt;The pain of creating accessible components&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My first prototype of &lt;code&gt;&amp;lt;bluesky-likers&amp;gt;&lt;/code&gt; wrapped all avatars with regular links (they just had &lt;code&gt;rel=&amp;quot;nofollow&amp;quot;&lt;/code&gt; and &lt;code&gt;target=_blank&amp;quot;&lt;/code&gt;).
Quite reasonable, right?
And then it dawned on me: this meant that if a keyboard user had the misfortune of stumbling across this component in their path,
they would have needed to hit Tab 101 (!) times in the worst case to escape it.
&lt;strong&gt;Yikes on bikes!&lt;/strong&gt; 😱&lt;/p&gt;
&lt;p&gt;So what to do? &lt;code&gt;tabindex=&amp;quot;-1&amp;quot;&lt;/code&gt; would remove the links from the tabbing order, fixing the immediate problem.
But then how would keyboard users actually access them?&lt;/p&gt;
&lt;p&gt;A bigger question is &lt;em&gt;“Do they need to?”&lt;/em&gt;.
These links are entirely auxiliary;
in Salma’s original widget avatars &lt;strong&gt;were not links at all&lt;/strong&gt;.
Even if someone wants to explore the profiles of people who liked a post for some reason,
the Bluesky “Liked By” page (already linked via &lt;code&gt;&amp;lt;bluesky-likes&amp;gt;&lt;/code&gt;) is a much better fit for this.&lt;/p&gt;
&lt;p&gt;When using a pointing device, links are free.
If you don’t interact with them, they don’t get in your way, so you may as well have them even if few users will need them.
But when something is part of the tabbing order, there is now a &lt;em&gt;cost&lt;/em&gt; to it.
&lt;strong&gt;Is the value of being able to tab &lt;em&gt;to&lt;/em&gt; it outweighed by the friction of having to tab &lt;em&gt;past&lt;/em&gt; it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On the other hand, it feels &lt;em&gt;wrong&lt;/em&gt; to have links that are not exposed at all to keyboard and assistive tech users.
Even if they are auxiliary, making them entirely inaccessible feels like we’re talking away their agency.&lt;/p&gt;
&lt;p&gt;I decided to err on the side of exposing the links to keyboard users,
and added a description, via a &lt;code&gt;description&lt;/code&gt; slot with default fallback content, to explain to SR users what is being displayed,
and a skip link after it, which is visible when focused.&lt;/p&gt;
&lt;details class=&quot;warning&quot;&gt;
&lt;summary&gt;Why not use the default slot for the description?&lt;/summary&gt;
&lt;p&gt;The default slot can be very convenient when nothing else is slotted.
However, it is very annoying to slot things in other slots &lt;em&gt;without&lt;/em&gt; slotting anything in the default slot.
Consider this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;bluesky-likers src=&amp;quot;...&amp;quot;&amp;gt;
     &amp;lt;div slot=&amp;quot;empty&amp;quot;&amp;gt;No likers :(&amp;lt;/div&amp;gt;
&amp;lt;/bluesky-likers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It may not look like it, but here we’ve also slotted a few blank text nodes to the default slot,
which would obliterate the SR-accessible default description with no visible signs to the developer.
And since &lt;a href=&quot;https://2024.stateofhtml.com/en-US/features/accessibility/&quot;&gt;2/5 devs don’t test at all for screen readers&lt;/a&gt;, they would be unlikely to notice.&lt;/p&gt;
&lt;p&gt;Default slots are great because they allow users to specify content without having to understand slots — it’s just how HTML works.
However, because of this issue, I mainly recommend using them for things one nearly always wants to specify when using the component.
If actual content is slotted into it, the additional blank nodes are not a problem.
You could also choose to go for the default slot if you don’t have any other slots, though that’s a little more dangerous,
as you may always want to add more slots later.&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;It’s still not an ideal user experience though.
A skip link offers you the choice of skipping only at the beginning.
What happens if you tab through 30 links, and &lt;em&gt;then&lt;/em&gt; decide you’ve had too much?
Or when you’re tabbing backwards, via &lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Tab&lt;/kbd&gt;?
Then you’re still stuck wading through all links with no escape and no respite.&lt;/p&gt;
&lt;p&gt;In the end, perhaps I should bite the bullet and implement more &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/Guides/Keyboard-navigable_JavaScript_widgets&quot;&gt;sophisticated keyboard navigation&lt;/a&gt;,
similar to how native form controls work (imagine a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; having tab stops for every &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;!).
But I have already spent more than is reasonable on these components, so it’s time to let them ride the trains,
and leave the rest to PRs.
For now, I implemented &lt;kbd&gt;Home&lt;/kbd&gt; and &lt;kbd&gt;End&lt;/kbd&gt; keys to jump to the first and last link respectively, so that at least users have an out.&lt;/p&gt;
&lt;p&gt;But as a former TAG member, I can’t help but see this as a &lt;strong&gt;gap in the platform&lt;/strong&gt;.
&lt;strong&gt;It should not be this hard to create accessible components&lt;/strong&gt;.
It should not require jumping through hoops, and the process should not be a minefield.
Good keyboard accessibility benefits everyone, and the primitives the web platform currently provides to enable that are egregiously insufficient.&lt;/p&gt;
&lt;h3 id=&quot;the-pain-of-creating-localizable-web-components&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#the-pain-of-creating-localizable-web-components&quot;&gt;The pain of creating localizable web components&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Difficulty jumps to eleven when you want to make a component localizable.
As a minimum, it means &lt;em&gt;any&lt;/em&gt; UI text, no matter where it appears, must be customizable.
This is desirable &lt;em&gt;anyway&lt;/em&gt; for customizability, but it becomes &lt;em&gt;essential&lt;/em&gt; for localization.
The quick and dirty way is to provide slots for element content and attributes for content that appears in attributes (e.g. titles, aria-labels, etc).&lt;/p&gt;
&lt;article role=&quot;note&quot; class=&quot;note&quot;&gt;
&lt;p&gt;Avoid providing attributes as the only way to customize content.
This means they cannot contain HTML, which is often necessary for localization, and always desirable for customization.
That said, attributes are totally fine as a &lt;strong&gt;shortcut&lt;/strong&gt; for making common cases easy.
E.g. a common pattern is to provide &lt;em&gt;both&lt;/em&gt; an attribute &lt;em&gt;and&lt;/em&gt; a label with the same name for commonly customizable things (e.g. labels).&lt;/p&gt;
&lt;/article&gt;
&lt;p&gt;However, this is often not enough.
For example, both components display formatted &lt;strong&gt;numbers&lt;/strong&gt;:
&lt;code&gt;&amp;lt;bluesky-likes&amp;gt;&lt;/code&gt; displays the total number of likes, and &lt;code&gt;&amp;lt;bluesky-likers&amp;gt;&lt;/code&gt; displays the number of likes not shown (if any).&lt;/p&gt;
&lt;p&gt;The web platform thankfully already provides a low-level primitive for formatting numbers: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat&quot;&gt;&lt;code&gt;Intl.NumberFormat&lt;/code&gt;&lt;/a&gt;,
which you can also access via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString&quot;&gt;&lt;code&gt;number.toLocaleString()&lt;/code&gt;&lt;/a&gt;.
For example, to format &lt;code&gt;1234567&lt;/code&gt; as &lt;code&gt;1.2M&lt;/code&gt; , you can do&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Try it in the console!
(1234567).toLocaleString(&amp;quot;en&amp;quot;, {notation: &amp;quot;compact&amp;quot;})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is great for English UIs, but what about other languages?&lt;/p&gt;
&lt;p&gt;If you answered &lt;em&gt;“Oh, we’ll just pass &lt;code&gt;this.lang&lt;/code&gt; to instead of a hardcoded &lt;code&gt;&amp;quot;en&amp;quot;&lt;/code&gt;”&lt;/em&gt;,
you’d be wrong, at least for the general case.
That gives you the element language &lt;strong&gt;only when it’s directly specified on the element via a &lt;code&gt;lang&lt;/code&gt; attribute&lt;/strong&gt;.
However, usually the &lt;code&gt;lang&lt;/code&gt; attribute is not specified on every element,
but on an ancestor, and it inherits down.&lt;/p&gt;
&lt;p&gt;Something like is a good compromise:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const lang = this.lang
			|| this.parentNode.closest(&amp;quot;[lang]&amp;quot;)?.lang
			|| this.ownerDocument.documentElement.lang
			|| &amp;quot;en&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gets you the element’s language correctly if it’s:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;specified on the element itself&lt;/li&gt;
&lt;li&gt;specified on an ancestor element within the same shadow tree&lt;/li&gt;
&lt;li&gt;specified on the root element of the document&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is what these components use.
It’s not perfect, but it covers a good majority of cases with minimal performance impact.
Notably, the cases it misses is when the component is inside a shadow tree but is getting its language from an element outside that shadow tree, that is also &lt;em&gt;not&lt;/em&gt; the root element.
I’d wager that case is very rare, and there is always the escape hatch of specifying the &lt;code&gt;lang&lt;/code&gt; attribute on the component itself.&lt;/p&gt;
&lt;h4 id=&quot;what-would-doing-it-100%25-properly-entail%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#what-would-doing-it-100%25-properly-entail%3F&quot;&gt;What would doing it 100% &lt;em&gt;properly&lt;/em&gt; entail?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If the route above is a shortcut and misses some cases, you may be wondering what it would take to cover every possible case.
Maybe it’s just for the lulz, or maybe you’re working under very strict guidelines that require you to fully emulate how a native element would behave.&lt;/p&gt;
&lt;article role=&quot;note&quot; class=&quot;warning&quot;&gt;
&lt;p&gt;I advise against following or even reading this section.
Proceed at your own risk.
Or save your mental health and &lt;a href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#ship-it-squirrel&quot;&gt;skip it&lt;/a&gt;.
Unless you’re in the WHATWG, in which case please, go ahead.&lt;/p&gt;
&lt;/article&gt;
&lt;p&gt;So what would doing it 100% &lt;em&gt;properly&lt;/em&gt; look like?
First, we’d want to take nested shadow roots into account, using something like this,
which you might want to abstract into a helper function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let lang = this.lang;
if (!lang) {
	let langElement = this;
	while (!(langElement = langElement.closest(&amp;quot;[lang]&amp;quot;))) {
		let root = langElement.getRootNode();
		let host = root.host ?? root.documentElement;
		langElement = host;
	}

	lang = langElement?.lang || &amp;quot;en&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But, &lt;em&gt;actually&lt;/em&gt;, if you &lt;em&gt;really&lt;/em&gt; needed to do it properly, &lt;strong&gt;even now you wouldn’t be done&lt;/strong&gt;!
What about dynamically reacting to changes?
Any element’s &lt;code&gt;lang&lt;/code&gt; attribute could change at any point.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Er, take my advice and don’t go there.
Pour yourself a glass of wine (replace with your vice of choice if wine is not your thing), watch an episode of your favorite TV show and try to forget about this.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Some of you will foolishly continue.
I hear some voices at the back crying &lt;em&gt;“But what about mutation observers?”&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Oh my sweet summer child. &lt;em&gt;&lt;strong&gt;What are you going to observe?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The element with the &lt;code&gt;lang&lt;/code&gt; attribute you just found?
&lt;em&gt;WRONG.&lt;/em&gt;
What if a &lt;code&gt;lang&lt;/code&gt; attribute is added to an element &lt;em&gt;between&lt;/em&gt; that ancestor and your component?
I.e. you go from this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div lang=&amp;quot;el&amp;quot; id=&amp;quot;a&amp;quot;&amp;gt;
	&amp;lt;div id=&amp;quot;b&amp;quot;&amp;gt;
		&amp;lt;bluesky-likes src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/bluesky-likes&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div lang=&amp;quot;el&amp;quot; id=&amp;quot;a&amp;quot;&amp;gt;
	&amp;lt;div lang=&amp;quot;es&amp;quot; id=&amp;quot;b&amp;quot;&amp;gt;
		&amp;lt;bluesky-likes src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/bluesky-likes&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your component language is now &lt;code&gt;es&lt;/code&gt;, but nothing changed in the element you were observing (&lt;code&gt;#a&lt;/code&gt;), so nothing notified your component.
What is your recourse?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I told you to not think about it. You didn’t listen. It’s still not too late to skip this section and escape the horrors that lie ahead.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Still here? Damn, you’re stubborn.
Fine, here’s how to do it with mutation observers if you &lt;em&gt;really&lt;/em&gt; need to. But be warned, it’s going to hurt.&lt;/p&gt;
&lt;p&gt;Mutation observers cannot observe ancestors, so the only way to detect changes that way would be to observe not just the element with the &lt;code&gt;lang&lt;/code&gt; attribute
but also &lt;strong&gt;its entire subtree&lt;/strong&gt;.
Oh and if the path from your component to that ancestor involves shadow trees, you need to observe them separately,
because mutation observers don’t reach past shadow trees (&lt;a href=&quot;https://github.com/whatwg/dom/issues/1287&quot;&gt;proposal&lt;/a&gt; to change that).&lt;/p&gt;
&lt;p&gt;😮‍💨
Surely, that should do it, right?
WRONG again.
&lt;em&gt;I told you it would hurt.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Consider the scenario where the ancestor with the &lt;code&gt;lang&lt;/code&gt; attribute is removed.
Mutation observers cannot observe element removal (&lt;a href=&quot;https://github.com/whatwg/dom/issues/533&quot;&gt;proposal&lt;/a&gt; to fix that),
so if you go from this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body lang=&amp;quot;el&amp;quot;&amp;gt;
	&amp;lt;div lang=&amp;quot;el&amp;quot; id=&amp;quot;a&amp;quot;&amp;gt;
		&amp;lt;div id=&amp;quot;b&amp;quot;&amp;gt;
			&amp;lt;bluesky-likes src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/bluesky-likes&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body lang=&amp;quot;el&amp;quot;&amp;gt;
	&amp;lt;div id=&amp;quot;b&amp;quot;&amp;gt;
		&amp;lt;bluesky-likes src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/bluesky-likes&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…nothing will notify your component if you’re just observing &lt;code&gt;#a&lt;/code&gt; and its descendants.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So the only way to get it right in all cases is to observe the entire tree, from the document root down to your component, including all shadow trees between your component and the root.&lt;/strong&gt;
&lt;em&gt;Feeling nauseous yet?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is one alternative.
So, the browser knows what the element’s language is, but the only way it exposes it is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:lang&quot;&gt;&lt;code&gt;:lang()&lt;/code&gt; pseudo-class&lt;/a&gt;,
which doesn’t allow you to read it, but only check whether an element matches a given language.
While not ideal, we &lt;em&gt;can&lt;/em&gt; hack this to observe language changes.&lt;/p&gt;
&lt;p&gt;Coupled with the earlier snippet to detect the current language,
this allows us to detect changes to the component’s language without the huge performance impact of observing the entire page.&lt;/p&gt;
&lt;p&gt;How can we do that?
Once you’ve detected the component language, generate a rule that sets a CSS variable.
E.g. suppose you detected &lt;code&gt;el&lt;/code&gt;, you’d add this to your shadow DOM:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:host(:lang(el)) {
	--lang: el;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we register the &lt;code&gt;--lang&lt;/code&gt; property,
and observe changes to it via &lt;a href=&quot;https://lea.verou.me/blog/2025/style-observer/&quot;&gt;Style Observer&lt;/a&gt; or just raw transition events.
When a change is detected, run the detection snippet again and add another CSS rule.&lt;/p&gt;
&lt;article role=&quot;alert&quot; class=&quot;warning&quot;&gt;
&lt;p&gt;When registering component CSS properties, make sure to register them globally (e.g. via &lt;code&gt;CSS.registerProperty()&lt;/code&gt;),
as &lt;code&gt;@property&lt;/code&gt; does not currently work in shadow DOM.
This is already spec’ed, but not yet implemented by browsers.&lt;/p&gt;
&lt;/article&gt;
&lt;p&gt;Now, &lt;em&gt;should you&lt;/em&gt; do this?
Just because you can, doesn’t mean you should.
In the vast majority of cases, a few false positives/negatives are acceptable,
and &lt;strong&gt;the tradeoff and performance impact of introducing all this complexity is absolutely not worth it&lt;/strong&gt;.
I can only see it being a good idea in very specific cases, when you have a reason to strive for this kind of perfection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Most of web components development is about making exactly these kinds of tradeoffs&lt;/strong&gt;
between how close you want to get to the way a native element would behave,
and how much complexity and performance impact you’re willing to sacrifice for it.
But going all the way is rarely a good balance of tradeoffs.
That said, &lt;strong&gt;this &lt;em&gt;should&lt;/em&gt; be easier&lt;/strong&gt;.
Reading a component’s language should not require balancing tradeoffs for crying out loud!&lt;/p&gt;
&lt;p&gt;There is some progress on that front.
In September at TPAC we got &lt;a href=&quot;https://github.com/whatwg/html/issues/7039#issuecomment-2378006020&quot;&gt;WHATWG consensus&lt;/a&gt;
on standardizing a way to read the current language / direction and react to future changes.
To my knowledge, not much has happened since, but it’s a start.
Perhaps this dramatic reenactment generates some empathy among WHATWG folks on what web components developers have to go through.&lt;/p&gt;
&lt;h2 id=&quot;ship-it-squirrel&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/bluesky-likes/#ship-it-squirrel&quot;&gt;🚢 it, squirrel!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It’s all fun and games and then you ship.&lt;/p&gt;
&lt;p&gt;Hopefully, I have demonstrated that
if you’re not careful, building a web component can become a potentially unbounded task.
Some tasks are definitely necessary, e.g. accessibility, i18n, performance, etc,
but there comes a point where you’re &lt;a href=&quot;https://theoatmeal.com/comics/creativity_petting&quot;&gt;petting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So here they are:
&lt;a href=&quot;https://projects.verou.me/bluesky-likes/&quot; target=&quot;_blank&quot; class=&quot;cta&quot;&gt;
&lt;i class=&quot;fa-brands fa-bluesky&quot;&gt;&lt;/i&gt; Demo&lt;/a&gt;
&lt;a href=&quot;https://github.com/LeaVerou/bluesky-likes&quot; target=&quot;_blank&quot; class=&quot;cta&quot;&gt;
&lt;i class=&quot;fa-brands fa-github&quot;&gt;&lt;/i&gt; Repo&lt;/a&gt;
&lt;a href=&quot;https://www.npmjs.com/package/bluesky-likes&quot; target=&quot;_blank&quot; class=&quot;cta&quot;&gt;
&lt;i class=&quot;fa-brands fa-npm&quot;&gt;&lt;/i&gt; NPM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They’re far from perfect.
Yes, they could be improved in a &lt;a href=&quot;https://github.com/LeaVerou/bluesky-likes/issues&quot;&gt;number of ways&lt;/a&gt;.
But they’re good enough to use here, and that will do for now.
If you want to improve them, pull requests are welcome (check with me for big features though).
And if you use them on a for-profit site, I do expect you to &lt;a href=&quot;https://github.com/sponsors/LeaVerou&quot;&gt;fund their development&lt;/a&gt;.
That’s an ethical and social expectation, not a legal one (but it will help prioritization, and that’s in your best interest too).&lt;/p&gt;
&lt;p&gt;If you’ve used them, I’d love to see what you do with them!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://tink.uk/&quot;&gt;Léonie Watson&lt;/a&gt; for some of the early a11y feedback, and to &lt;a href=&quot;https://d12n.me/&quot;&gt;Dmitry Sharabin&lt;/a&gt; for helping with the initial API exploration.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry><entry>
    <title>The Hovercar Framework for Deliberate Product Design</title>
    <link href="https://lea.verou.me/blog/2025/hovercar/"/>
    <updated>2025-06-25T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2025/hovercar/</id>
    <content xml:lang="en" type="html">&lt;p&gt;You may be familiar with this wonderful illustration and &lt;a href=&quot;https://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp&quot;&gt;accompanying
blog post&lt;/a&gt; by Henrik Kniberg about good MVPs:&lt;/p&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2025/hovercar/images/mvp.png&quot; alt=&quot;Henrik Kniberg&#39;s MVP illustration&quot; /&gt;
&lt;p&gt;It’s a very visual way to illustrate the age-old concept that
that a good MVP is not the one developed in isolation over months or years,
grounded on assumptions about user needs and goals,
but one that &lt;strong&gt;delivers value to users as early as possible&lt;/strong&gt;,
so that future iterations can take advantage of the lessons learned from real users.&lt;/p&gt;
&lt;h2 id=&quot;spectrum&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/hovercar/#spectrum&quot;&gt;From Hovercar to Skateboard&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I love Henrik’s metaphor so much, I have been using a similar system to flesh out product requirements and shipping goals, especially early on.
It can be immediately understood by anyone who has seen Henrik’s illustration,
and I find it can be a lot more pragmatic and flexible than the usual simple two tiered system (core requirements and stretch goals).
Additionally, I find this fits nicely into a &lt;a href=&quot;https://basecamp.com/shapeup/1.2-chapter-03#fixed-time-variable-scope&quot;&gt;fixed time, variable scope&lt;/a&gt; development process,
such as &lt;a href=&quot;https://basecamp.com/shapeup&quot;&gt;Shape Up&lt;/a&gt;.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;🛹 The Skateboard &lt;small&gt;aka the Pessimist’s MVP&lt;/small&gt;&lt;/dt&gt;
&lt;dd&gt;What is the absolute minimum we &lt;em&gt;can&lt;/em&gt; ship, if need be?
Utilitarian, bare-bones, and somewhat embarrassing, but shippable — barely.
Anything that can be &lt;a href=&quot;https://stackingthebricks.com/the-fine-art-of-flintstoning/&quot;&gt;flintstoned&lt;/a&gt; gets flintstoned.&lt;/dd&gt;
&lt;dt&gt;🛴 The Scooter &lt;small&gt;aka the Realist’s MVP&lt;/small&gt;&lt;/dt&gt;
&lt;dd&gt;The minimum product that delivers value. Usable, but no frills. This is the target.&lt;/dd&gt;
&lt;dt&gt;🚲 The Bicycle &lt;small&gt;aka the Optimist’s MVP&lt;/small&gt;&lt;/dt&gt;
&lt;dd&gt;Stretch goals — UX polish, &lt;em&gt;“sprinkles of delight”&lt;/em&gt;, nonessential but high I/E features.
Great if we get here, fine if we don’t.&lt;/dd&gt;
&lt;dt&gt;🏍️ The Motorcycle&lt;/dt&gt;
&lt;dd&gt;Post-launch highest priority items.&lt;/dd&gt;
&lt;dt&gt;🚗 The Car&lt;/dt&gt;
&lt;dd&gt;Our ultimate vision, taking current constraints into account.&lt;/dd&gt;
&lt;dt&gt;🏎️ The Hovercar &lt;small&gt;aka the North Star UI&lt;/small&gt;&lt;/dt&gt;
&lt;dd&gt;The ideal experience — unconstrained by time, resources, or backwards compatibility.
Unlikely to ship, but a guiding light for all of the above.&lt;/dd&gt;
&lt;/dl&gt;
&lt;article class=&quot;note&quot; role=&quot;note&quot;&gt;
&lt;p&gt;Please note that the concept of a North Star UI has no relation to the &lt;a href=&quot;https://mixpanel.com/blog/north-star-metric/&quot;&gt;North Star Metric&lt;/a&gt;.
While both serve as a guiding light for product decisions, and both are important,
the North Star UI guides you in &lt;em&gt;designing&lt;/em&gt; the product,
whereas the North Star Metric is about &lt;em&gt;evaluating&lt;/em&gt; success.
To avoid confusion, I’ll refer to it as “North Star UI”, although it’s not about the UI per se, but the product vision on a deeper level.&lt;/p&gt;
&lt;/article&gt;
&lt;p&gt;The first three stages are much more concrete and pragmatic, as they directly affect what is being worked on.
The more we go down the list, the less fleshed out specs are, as they need to allow room for customer input.
This also allows us to outline future vision, without having to invest in it prematurely.&lt;/p&gt;
&lt;p&gt;The most controversial of these is the last one: the &lt;strong&gt;hovercar&lt;/strong&gt;, i.e. the &lt;em&gt;North Star UI&lt;/em&gt;.
&lt;strong&gt;It is the very antithesis of the MVP.&lt;/strong&gt;
The MVP describes what we can ship ASAP,
whereas the North Star describes the most idealized goal, one we may &lt;em&gt;never&lt;/em&gt; be able to ship.&lt;/p&gt;
&lt;p&gt;It is easy to dismiss that as a waste of time, a purely academic exercise.
&lt;em&gt;“We’re all about shipping. Why would we spend time on something that may not even be feasible?”&lt;/em&gt; I hear you cry in Agile.&lt;/p&gt;
&lt;p&gt;Stay with me for a moment, and please try to keep an open mind.
Paradoxical as it may sound, fleshing out your North Star can actually &lt;strong&gt;save you time&lt;/strong&gt;.
How? Start counting.&lt;/p&gt;
&lt;h2 id=&quot;core&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/hovercar/#core&quot;&gt;Core Idea&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At its core, this framework is about breaking down tough product design problems into three more manageable components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;North Star&lt;/strong&gt;: What is the ideal solution?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Constraints&lt;/strong&gt;: What prevents us from getting there &lt;em&gt;right now&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compromises&lt;/strong&gt;: How close can we reasonably get given these constraints?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One way to frame it is is that 2 &amp;amp; 3 are &lt;strong&gt;the product version of &lt;a href=&quot;https://en.wikipedia.org/wiki/Technical_debt&quot;&gt;tech debt&lt;/a&gt;&lt;/strong&gt;.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;It’s important to understand what constraints are fair game to ignore for 1 and which are not.
I often call these &lt;strong&gt;&lt;em&gt;ephemeral or situational constraints&lt;/em&gt;&lt;/strong&gt;.
They are constraints that are not fundamental to the product problem at hand,
but relate to the environment in which the product is being built and &lt;em&gt;could&lt;/em&gt; be lifted or change over time.
Things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Engineering resources&lt;/li&gt;
&lt;li&gt;Time&lt;/li&gt;
&lt;li&gt;Technical limitations (within reason)&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Backwards compatibility&lt;/li&gt;
&lt;li&gt;Regulatory requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unlike ephemeral constraints, certain &lt;strong&gt;requirements&lt;/strong&gt; are part of the problem description and cannot be ignored.
Some examples from the &lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#case-studies&quot;&gt;case studies&lt;/a&gt; below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#context-chips&quot;&gt;Context Chips Survey UI&lt;/a&gt;: Efficiency and discoverability&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#css-nesting&quot;&gt;CSS Nesting Syntax&lt;/a&gt;: Conciseness and readability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While these may be addressed differently in different solutions, it would be an oxymoron to have a North Star that did not take them into account.&lt;/p&gt;
&lt;h2 id=&quot;benefits&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/hovercar/#benefits&quot;&gt;Benefits&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;tractable&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/hovercar/#tractable&quot;&gt;1. It makes hard product problems tractable&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nearly every domain of human endeavor has a version of &lt;em&gt;divide and conquer&lt;/em&gt;:
instead of solving a complex problem all at once, break it down into smaller, manageable components and solve them separately.
Product design is no different.&lt;/p&gt;
&lt;p&gt;This process really shines when you’re dealing with the kinds of tough product problems where at least two of these questions are hard,
so breaking it down can do wonders for reducing complexity.&lt;/p&gt;
&lt;h3 id=&quot;resilient&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/hovercar/#resilient&quot;&gt;2. It makes the product design process robust and adaptable&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By solving these components separately,
our product design process becomes can more easily adapt to changes.&lt;/p&gt;
&lt;p&gt;I have often seen “unimplementable” solutions become implementable down the line,
due to changes in internal or external factors, or simply because someone had a lightbulb moment.&lt;/p&gt;
&lt;p&gt;By addressing these components separately, when constraints get lifted all we need to reevaluate is our compromises.
But without this modularization, our only solution is to go back to the drawing board.
Unsurprisingly, companies often choose to simply miss out on the opportunity, because it’s cheaper (or seems cheaper) to do so.&lt;/p&gt;
&lt;h3 id=&quot;consensus&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/hovercar/#consensus&quot;&gt;3. It facilitates team alignment by making the implicit, explicit&lt;/a&gt;&lt;/h3&gt;
&lt;figure class=&quot;float&quot;&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2025/hovercar/images/onion.png&quot; /&gt;
&lt;figcaption&gt;
Every shipping goal is derived from the North Star, like peeling layers off an onion.
This is whether you realize it or not.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Whether you realize it or not, &lt;strong&gt;every shipping goal is always derived from the North Star&lt;/strong&gt;, like peeling layers off an onion.
In some contexts the process of breaking down a bigger shipping goal into milestones that can ship independently is even called &lt;em&gt;layering&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The process is so ingrained, so automatic, that most product designers don’t realize they are doing it.
They go from hovercar to car so quickly they barely realize the hovercar was there to begin with.
Thinking about the North Star is taboo — who has time for daydreaming?
We must ship, &lt;em&gt;yesterday&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;But the hovercar is &lt;strong&gt;fundamental&lt;/strong&gt;.
Without it, there is no skateboard — you can’t reduce the unknown.
When designing it is not an explicit part of the process,
the result is that the main driver of all product design decisions is something that can never be explicitly discussed and debated like any other design decision.
In what universe is that efficient?&lt;/p&gt;
&lt;p&gt;A skateboard might be a good MVP if your ultimate vision is a hovercar,
but it would be a &lt;em&gt;terrible&lt;/em&gt; minimum viable cruise ship — you might want to try a wooden raft for that.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2025/hovercar/images/boats.png&quot; alt=&quot;A wooden raft, then a simple sailboat, then a speedboat, then a yacht, and finally a ship.&quot; /&gt;
&lt;figcaption&gt;
&lt;p&gt;A skateboard may be a great MVP for a car, but a terrible MVP for a cruise ship.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Making the North Star taboo doesn’t make it disappear (when did that &lt;em&gt;ever&lt;/em&gt; work?).&lt;/p&gt;
&lt;p&gt;It just means that &lt;strong&gt;everyone is following a different version of it.&lt;/strong&gt;
And since MVPs are products of the North Star, this will manifest as difficulty reaching consensus at every step of the way.&lt;/p&gt;
&lt;p&gt;The product team will disagree on whether to ship a skateboard or a wooden raft,
then on whether to build a scooter or a simple sailboat,
then on whether to work on a speedboat or a yacht,
and so on.
It will seem like there is so much disconnect that every decision is hard,
&lt;strong&gt;but there is actually only one root disconnect that manifests as multiple because it is never addressed head on.&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2025/hovercar/images/disconnect.png&quot; alt=&quot;Two people arguing. One has a speech bubble with a skateboard, the other a speech bubble with a wooden raft. The first also has a thought bubble with a car, the second a thought bubble with a ship.&quot; /&gt;
&lt;figcaption&gt;
&lt;p&gt;When the North Star is not clearly articulated, everyone has their own.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here is a story that will sound familiar to many readers:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A product team is trying to design a feature to address a specific user pain point.
Alice has designed an elegant solution that addresses not just the problem at hand, but several prevalent longstanding user pain points at once — an &lt;a href=&quot;https://lea.verou.me/blog/2023/eigensolutions/&quot;&gt;eigensolution&lt;/a&gt;.
She is aware it would be a little trickier to implement than other potential solutions,
but the increase in implementation effort is very modest, and easily offset by the tremendous improvement in user experience.
She has even outlined a staged deployment strategy that allows it to ship incrementally, adding value and getting customer feedback earlier.&lt;/p&gt;
&lt;p&gt;Excited, she presents her idea to the product team, only to hear engineering manager Bob dismiss it with  &lt;em&gt;“this is scope creep and way too much work, it’s not worth doing”&lt;/em&gt;.
However, what Bob is &lt;em&gt;actually&lt;/em&gt; thinking is &lt;em&gt;“this is a bad idea; any amount of work towards it is a waste”&lt;/em&gt;.
The design session is now derailed; instead of debating Alice’s idea on its merits, the discussion has shifted towards costing and/or reducing effort.
But this is a dead end because the amount of work was never the real problem.
In the end, Alice wants to be seen as a team player, so she backs off and concedes to Bob’s “simpler” idea, despite her worries that it is &lt;a href=&quot;https://bootcamp.uxdesign.cc/overfitting-and-the-problem-with-use-cases-337d9f4bf4d7&quot;&gt;overfit&lt;/a&gt; to the very specific use case being discussed, and the product is now worse.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Arguing over effort &lt;em&gt;feels&lt;/em&gt; safer and less confrontational than debating vision — but is often a proxy war.&lt;/strong&gt;
Additionally, it is not productive.
If the idea is poor, effort is irrelevant.
And once we &lt;em&gt;know&lt;/em&gt; an idea is good and believe it to our core, we have more incentive to figure out implementation,
which often proves to be easier than expected once properly investigated.
&lt;strong&gt;Explicitly fleshing out the Hovercar strips away the noise and brings clarity.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When we answer the questions &lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#tractable&quot;&gt;above&lt;/a&gt; in order and reach consensus on the North Star before moving on to the compromises,
we know what is an actual design decision and what is a compromise driven by practical constraints.
&lt;strong&gt;Articulating these separately, allows us to discuss them separately.&lt;/strong&gt;
It is very hard to evaluate tradeoffs collaboratively if you are not on the same page about what we are trading off and how much it’s worth.
&lt;strong&gt;You need &lt;em&gt;both&lt;/em&gt; the cost &lt;em&gt;and&lt;/em&gt; the benefit to do a cost-benefit analysis!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Additionally, fleshing the North Star out separately ensures that &lt;strong&gt;everyone is on the same page about &lt;em&gt;what&lt;/em&gt; is being discussed&lt;/strong&gt;.
All too often have I seen early design sessions where one person is discussing the skateboard,
another the bicycle, and a third one the hovercar,
no-one realizing that the reason they can’t reach consensus is that they are designing different things.&lt;/p&gt;
&lt;h3 id=&quot;user-testing&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/hovercar/#user-testing&quot;&gt;4. It can improve the MVP via user testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Conventional wisdom is that we strip down the North Star to an MVP, ship that, then iterate based on user input.
With that process, &lt;strong&gt;our actual vision never really gets evaluated&lt;/strong&gt; and by the time we get to it, it has already changed tremendously.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But did you know you can actually get input from real users without writing a single line of code?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2025/hovercar/images/user-test-wireframe.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Believe it or not, you don’t need to wait until a UI is prototyped to user test it.&lt;/strong&gt;
You can even user test a low-fi paper prototype or even a wireframe.
This is widely known in usability circles, yet somehow entirely unheard of outside the field.
The user tells you where they would click or tap on every step, and you mock the UI’s response by physically manipulating the prototype or showing them a wireframe of the next stage.&lt;/p&gt;
&lt;p&gt;Obviously, this works better for some types of products than others.
It is notably hard to mock rich interactions or UIs with too many possible responses.
But when it &lt;em&gt;does&lt;/em&gt; work, its Impact/Effort ratio is very high;
you get to see whether your core vision is on the right track,
and adjust your MVP accordingly.&lt;/p&gt;
&lt;p&gt;It can be especially useful when there are different perspectives within a team about what the North Star might be,
or when the problem is so novel that every potential solution is low-confidence.
No-one’s product intuition is always right, and &lt;strong&gt;there is no point in evaluating compromises if it turns out that even the “perfect” solution was not actually all that great&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;evolution&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/hovercar/#evolution&quot;&gt;5. It paves the way for future evolution&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So far, we have discussed the merits of designing our North Star,
assuming we will never be able to ship it.
However, in many cases,
&lt;strong&gt;simply articulating what the North Star is can bring it within reach.&lt;/strong&gt;
It’s not magic, just human psychology.&lt;/p&gt;
&lt;p&gt;Once we have a North Star, &lt;strong&gt;we can use it to evaluate proposed solutions&lt;/strong&gt;:
How do they relate to it?
Are they a milestone along a path that ends at the North Star?
Do they actively &lt;em&gt;prevent us&lt;/em&gt; from ever getting there?
Prioritizing solutions that get us closer to the North Star can be a powerful momentum building tool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Humans find it a lot easier to make one more step along a path they are already on, than to make the first step on an entirely new path.&lt;/strong&gt;
This is well-established in psychology and often used as a technique for managing depression or executive dysfunction.
However, it applies on anything that involves humans — and that includes product design.&lt;/p&gt;
&lt;p&gt;Once we’re partway there, it naturally begs the question: can we get closer? &lt;em&gt;How much closer?&lt;/em&gt;
Even if we can’t get all the way there, maybe we can close enough that the remaining distance won’t matter.
&lt;strong&gt;And often, the closer you get, the more achievable the finish line gets.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In fact, sometimes simply reframing the North Star as a sequence of milestones rather than a binary goal can be all that is needed to make it feasible.
For an example of this, check out the &lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#css-nesting&quot;&gt;CSS Nesting case study&lt;/a&gt; below.&lt;/p&gt;
&lt;h2 id=&quot;case-studies&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/hovercar/#case-studies&quot;&gt;Case studies&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my 20 years of product design, I have seen ephemeral constraints melt away so many times I have learned to interpret &lt;em&gt;“unimplementable”&lt;/em&gt; as &lt;em&gt;“kinda hard; right now”&lt;/em&gt;.
Two examples from my own experience that I find particularly relevant below,
one around Survey UI, and one around a &lt;a href=&quot;https://en.wikipedia.org/wiki/CSS&quot;&gt;CSS&lt;/a&gt; language feature.&lt;/p&gt;
&lt;h3 id=&quot;context-chips&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/hovercar/#context-chips&quot;&gt;Context Chips and the Power of Engineering Momentum&lt;/a&gt;&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2024/context-chips/images/cover.png&quot; alt=&quot;Illustration of context chips&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The case study is described at length in &lt;a href=&quot;https://lea.verou.me/blog/2024/context-chips/&quot;&gt;Context Chips in Survey Design: “Okay, but how does it &lt;em&gt;feel&lt;/em&gt;?”&lt;/a&gt;.
In a nutshell, the relevant bits are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Originally, I needed to aggressively prioritize due to minimal engineering resources, which led me to design an extremely low-effort solution which still satisfied requirements.&lt;/li&gt;
&lt;li&gt;The engineer &lt;em&gt;hated&lt;/em&gt; the low-effort idea so much, he prototyped a much higher-effort solution in a day, backend and all.
Previously, this would have been entirely out of the question.&lt;/li&gt;
&lt;li&gt;Once I took the ephemeral constraints out of the question, I was able to design a much better, novel solution, but it got pushback on the basis of effort.&lt;/li&gt;
&lt;li&gt;Prototyping it allowed us to user test it, which revealed it performed way better than alternatives.&lt;/li&gt;
&lt;li&gt;Once user testing built engineering momentum and the implementation was more deeply looked into, it turned out it did not actually require as much effort as initially thought.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a dirty little secret about software engineering (and possibly any creative pursuit):
&lt;strong&gt;neither feasibility nor effort are fixed for a given task.&lt;/strong&gt;
Engineers are not automatons that will implement everything with the same energy and enthusiasm.
They may implement product vision they disagree with,
but you will be getting very poor ROI out of their time.&lt;/p&gt;
&lt;p&gt;Investing the time and energy to get engineers &lt;em&gt;excited&lt;/em&gt; can really pay dividends.
&lt;strong&gt;When good engineers are excited, they become miracle workers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In fact, &lt;em&gt;engineering momentum&lt;/em&gt; is often, &lt;strong&gt;all that is needed to make the infeasible, feasible.&lt;/strong&gt;
It may seem hard to fit this into the crunch of OKRs and KPIs but it’s worth it; the difference is not small, it is orders of magnitude.
Things that were impossible or insurmountable become feasible, and things that would normally take weeks or months get done in days.&lt;/p&gt;
&lt;p&gt;One way to build engineering momentum is to demonstrate the &lt;strong&gt;value and utility of what is being built&lt;/strong&gt;.
All too often, product decisions are made in a vacuum, based on gut feelings and assumptions about user needs.
Backing them up with &lt;strong&gt;data&lt;/strong&gt;, such as usability testing sessions is an excellent way to demonstrate (and test!) their basis.
When possible, &lt;strong&gt;having engineers observe user testing sessions firsthand&lt;/strong&gt; can be much more powerful than secondhand reports.&lt;/p&gt;
&lt;h3 id=&quot;css-nesting&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/hovercar/#css-nesting&quot;&gt;Relaxed CSS Nesting and the Power of Evolution&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes high effort things just take a lot of hard work and there is no way around it.
Other times, feasibility is just &lt;strong&gt;one good idea away&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;One of my favorite examples, and something I’m proud to have &lt;a href=&quot;https://lea.verou.me/specs/#relaxed-css-nesting&quot;&gt;helped drive&lt;/a&gt; is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting/Using_CSS_nesting&quot;&gt;relaxed CSS Nesting syntax&lt;/a&gt;, now &lt;a href=&quot;https://caniuse.com/css-nesting&quot;&gt;shipped in every browser&lt;/a&gt;.
It is such an amazing case study on the importance of having an explicit and consensus-backed North Star UI &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;In a nutshell, CSS nesting was a (then new) CSS syntax that let developers better organize their code through reducing repetition.&lt;/p&gt;
&lt;figure id=&quot;css-nesting-example&quot; class=&quot;float&quot;&gt;
&lt;style&gt;
#css-nesting-example {
	pre {
		font-size: 50%;
		font-weight: 600;
		width: auto;
		overflow: auto;
	}
	pre code {
		white-space: pre;
	}
}
&lt;/style&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;table.browser-support {
	border-collapse: collapse;
}
table.browser-support th,
table.browser-support td {
	border: 1px solid silver;
}
@media (width &amp;lt; 600px) {
	table.browser-support,
	table.browser-support tr,
	table.browser-support th,
	table.browser-support td {
		display: block;
	}
}
table.browser-support th {
	border: 0;
}
table.browser-support td {
	background: yellowgreen;
}
table.browser-support td:empty {
	background: red;
}
table.browser-support td &amp;gt; a {
	color: inherit;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;table.browser-support {
	border-collapse: collapse;

	@media (width &amp;lt; 600px) {
		&amp;amp;, tr, th, td {
			display: block;
		}
	}

	th, td {
		border: 1px solid silver;
	}
	th {
		border: 0;
	}
	td {
		background: yellowgreen;

		&amp;amp;:empty {
			background: red;
		}

		&amp;gt; a {
			color: inherit;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figcaption&gt;
Example of CSS code, with (right) and without (left) nesting.
Which one is easier to read?
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This is one of the rare cases where the North Star was well known in advance,
since the syntax was already well established in developer tooling (CSS preprocessors).
Instead, &lt;strong&gt;the big challenge was navigating the practical constraints&lt;/strong&gt;,
since CSS implemented in browsers has different performance characteristics,
so a syntax that is feasible for tooling may be out of reach for a browser.
In this case, the North Star syntax had been ruled out by browser engineers due to prohibitive parsing performance &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;,
so we had to design a different, more explicit syntax that could be parsed more efficiently.&lt;/p&gt;
&lt;p&gt;At this point, it is important to note that CSS Nesting is a feature that is very heavily used once available.
Conciseness and readability are paramount,
especially when conciseness is the sole purpose of the feature in the first place!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/2021/WD-css-nesting-1-20210831/#nesting&quot;&gt;Initial attempts&lt;/a&gt; for a syntax that satisfied these technical requirements introduced a lot of noise,
making the syntax tedious to write and noisy to read.
Even worse, these attempts were actively incompatible with the North Star syntax, as well as other parts of the language (namely, the &lt;code&gt;@scope&lt;/code&gt; rule).
This meant that even if the North Star syntax became feasible later,
CSS would need to forever support syntax that would then have no purpose,
and would only exist as a wart from the past, just like HTML doctypes.&lt;/p&gt;
&lt;p&gt;Once Google became very keen to ship Nesting (driven by  &lt;a href=&quot;https://2022.stateofcss.com/en-US/usage/#missing_features_freeform&quot;&gt;State of CSS 2022&lt;/a&gt;, which showed it as the top missing CSS feature),
a small subset of the CSS Working Group, led by Elika Etemad and myself met to explore alternatives,
and produced &lt;strong&gt;four competing proposals&lt;/strong&gt;.
The one that the group voted to adopt &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt; was the one I &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/7834#issuecomment-1272373216&quot;&gt;designed&lt;/a&gt; explicitly to answer the question:
&lt;strong&gt;If the North Star syntax is out of the question &lt;em&gt;right now&lt;/em&gt;, what is the largest subset of it that is feasible?&lt;/strong&gt;&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;This highlights the importance of taking into account the long-term &lt;strong&gt;evolution&lt;/strong&gt; of a product in addition to the short-term &lt;strong&gt;utility&lt;/strong&gt; and &lt;strong&gt;usability&lt;/strong&gt; (although they are more important).
Some of the other proposals had slightly better ergonomics than that the intermediate milestone we went with, but were incompatible with the North Star so they would have ruled it out.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We took a bet: we sacrificed &lt;strong&gt;a little bit of short-term usability&lt;/strong&gt;, to have a chance at &lt;strong&gt;much better usability in the long term&lt;/strong&gt;.&lt;/em&gt;
Sacrificing &lt;em&gt;a lot&lt;/em&gt; of short-term utility or usability for a better future evolution trajectory is &lt;em&gt;generally&lt;/em&gt; a bad idea, because you are risking being stuck with the poor intermediate solution, but even that can be acceptable when you have high confidence that you’ll get there, especially if that future is not very far.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Once we got consensus on this intermediate syntax, I &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/7961&quot;&gt;started exploring whether we could get any closer to the 🌟&lt;/a&gt;, even proposing an algorithm that would reduce the number of cases that required the slower parsing to essentially an edge case.
A few other WG members joined me, with my co-TAG member Peter Linss being most vocal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is a big advantage of North Star compatible designs: it is &lt;em&gt;much&lt;/em&gt; easier to convince people to move a little further along on the path they are already on, than to move to a completely different path.&lt;/strong&gt;
With a bit of luck, you may even find yourself implementing an “infeasible” North Star without even realizing it, one little step at a time.&lt;/p&gt;
&lt;p&gt;We initially faced a lot of resistance from browser engineers, until eventually a brilliant Google engineer, &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/7961#issuecomment-1489883575&quot;&gt;Anders Ruud&lt;/a&gt; and his team experimented with variations of my proposed algorithm and actually closed in on a way to implement the North Star syntax in Chrome.
The rest, as they say, is history. 🌟&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/hovercar/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully by now you’re convinced about the value of investing time in reaching alignment on an explicit North Star that has buy-in from the entire product team.&lt;/p&gt;
&lt;p&gt;A common misconception is that the North Star is a static goal that prevents you from adapting to new data, such as customer feedback.
But often, your North Star will change a lot over time, and that’s okay.
&lt;strong&gt;Having an initial destination does not take away your ability to course correct.&lt;/strong&gt;
That’s not giving up, it’s adapting.&lt;/p&gt;
&lt;p&gt;And yes, it’s true that many product teams &lt;em&gt;do&lt;/em&gt; use a vision-led approach — they just start from the car, not the hovercar.
While that confers some of the benefits above, there is still an implicit reduction happening, because the hovercar is still there in the back of their mind.&lt;/p&gt;
&lt;p&gt;Note that for this framework to be beneficial, it is important that &lt;strong&gt;everyone is on the same page and understands the steps, benefits, and goals&lt;/strong&gt; of this approach.
Co-designing a North Star with a team that sees the process as a pointless thought experiment will only add friction and will not confer any of these benefits.
Also, this is a mindset that can only work when applied top-down.
If you are not a decision-maker at your place of work and leadership is not on board,
you will have a very hard time if you try to push this ad hoc, without first getting leadership buy-in.
You can try sending them a link to this blog post!&lt;/p&gt;
&lt;p&gt;If this post resonated, please share your own case studies in the comments.
Or, if you decide to give this framework a try, I’d love to hear how it went!&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Indeed, looks like &lt;a href=&quot;https://andrewchen.com/product-design-debt-versus-technical-debt/&quot;&gt;I’m not the first&lt;/a&gt; to draw a parallel between the two! &lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I even did &lt;a href=&quot;https://www.youtube.com/watch?v=hcEDJq7jfdY&quot;&gt;an entire talk about it at Web Unleashed&lt;/a&gt;,
with a lot more technical detail than what I have included here. &lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;for any Compilers geeks out there that want all the deets: it required potentially unbounded lookahead since there is no fixed number of tokens a parser can read and be able to tell the difference between a selector and a declaration. &lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Originally dubbed &lt;a href=&quot;https://github.com/w3c/csswg-drafts/blob/2535b93ca241a1db5a29c47c5b22c5b1d0be2e71/css-nesting-1/proposals.md&quot;&gt;&lt;em&gt;“Lea’s proposal”&lt;/em&gt;&lt;/a&gt;, and later &lt;a href=&quot;https://github.com/w3c/csswg-drafts/blob/main/css-nesting-1/proposals.md&quot;&gt;“Non-letter start proposal”&lt;/a&gt;, but became known as &lt;a href=&quot;https://webkit.org/blog/13607/help-choose-from-options-for-css-nesting-syntax/&quot;&gt;Option 3&lt;/a&gt; from its position among the five options considered (including the original syntax). &lt;a href=&quot;https://lea.verou.me/blog/2025/hovercar/#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry><entry>
    <title>Influence the State of HTML 2025 Survey!</title>
    <link href="https://lea.verou.me/blog/2025/design-state-of-html/"/>
    <updated>2025-07-08T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2025/design-state-of-html/</id>
    <content xml:lang="en" type="html">&lt;figure class=&quot;no-padding&quot; style=&quot;background: #383336&quot;&gt;
&lt;a href=&quot;https://survey.devographics.com/en-US/survey/state-of-html/2025/?source=leaverou&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2025/design-state-of-html/images/image.png&quot; alt=&quot;State of HTML 2025&quot; /&gt;
&lt;/a&gt;
&lt;figcaption&gt;
Mamma mia, here we go again!
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Two years ago, I was funded by Google to &lt;a href=&quot;https://lea.verou.me/blog/2023/design-state-of-html/&quot;&gt;design the inaugural State of HTML survey&lt;/a&gt;.
While I had led &lt;em&gt;State of …&lt;/em&gt; surveys before (also graciously sponsored by Google), that was by far the most intense, as 0→1 projects often are.
In addition to the research, content, and analysis work that goes into every &lt;em&gt;State of …&lt;/em&gt; survey,
the unique challenges it presented were a forcing function for finally tackling some longstanding UX issues with these surveys.
As a result, we &lt;a href=&quot;https://lea.verou.me/blog/2024/context-chips/&quot;&gt;pioneered new survey interaction UIs&lt;/a&gt;, and validated them via usability testing.
This work did not just affect State of HTML, but had ripple effects on all subsequent &lt;em&gt;State of …&lt;/em&gt; surveys.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://2023.stateofhtml.com/en-US/conclusion/&quot;&gt;results&lt;/a&gt; made it all worth it.
Turnout was the highest ever for a new Devographics &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2025/design-state-of-html/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; survey: &lt;strong&gt;21 thousand participants&lt;/strong&gt;, which remains a record high for State of HTML.
The survey findings heavily influenced &lt;a href=&quot;https://web.dev/blog/interop-2024&quot;&gt;Interop 2024&lt;/a&gt; (hello Popover API and Declarative Shadow DOM!) and helped prioritize several other initiatives, such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Customizable_select&quot;&gt;stylable selects&lt;/a&gt;.
Despite lower 2024 participation, the survey still significantly influenced &lt;a href=&quot;https://web.dev/blog/interop-2025&quot;&gt;Interop 2025&lt;/a&gt;;
notably, View transitions was added after being prominent in the survey for two years in a row.&lt;/p&gt;
&lt;p&gt;This is the goal of these surveys: to &lt;strong&gt;drive meaningful change in the web platform&lt;/strong&gt;.
Sure, getting a shareable score about what you know and seeing how you compare to the rest of the industry is fun, but the reason browser vendors pour thousands of dollars into funding these surveys is because they provide &lt;strong&gt;unique vendor-neutral insights into developer pain points and priorities&lt;/strong&gt;, which helps them make better decisions about what to work on.
And this ultimately helps you: by getting your voice heard, you can directly influence the tools you work with.
&lt;strong&gt;It’s a win-win: developers get better tools, and browser vendors get better roadmaps.&lt;/strong&gt;&lt;/p&gt;
&lt;aside class=&quot;no-icon&quot;&gt;
&lt;h4&gt;Fun fact&lt;/h4&gt;
&lt;p&gt;One of my favorite examples of &lt;strong&gt;impact&lt;/strong&gt; these surveys have driven is &lt;a href=&quot;https://www.youtube.com/watch?v=hcEDJq7jfdY&quot;&gt;CSS Nesting&lt;/a&gt;.
Browsers ignored the proposal to do Nesting natively for &lt;strong&gt;a decade&lt;/strong&gt;, the rationale being that preprocessors served the need just fine.
Then it came up in State of CSS 2022 as a top pain point and they &lt;strong&gt;scrambled&lt;/strong&gt; to get it implemented ASAP.
It was Baseline just a year later.
Nothing moves things faster than demonstrating a clear need, and these surveys are a great way to do that.&lt;/p&gt;
&lt;/aside&gt;
&lt;h2 id=&quot;state-of-html-2025&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/design-state-of-html/#state-of-html-2025&quot;&gt;State of HTML 2025&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Last year, I was too busy to take the lead again.
Wrapping up my PhD and starting a new job immediately after, there was no time to breathe, let alone lead a survey.
I’m happy to be returning to it this year, but my joy is bittersweet.&lt;/p&gt;
&lt;p&gt;When I was first asked to lead this year’s survey a few months ago,
I was still too busy to take it on.
Someone else from the community accepted the role — someone incredibly knowledgeable and talented who would have done a &lt;strong&gt;fantastic&lt;/strong&gt; job.
But they live in the Middle East, and as the war escalated, their safety and their family’s well-being were directly impacted.
Understandably, leading a developer survey became the least of their concerns.
In the meantime, I made a few &lt;a href=&quot;https://lea.verou.me/blog/2025/construction-lines/&quot;&gt;decisions&lt;/a&gt; that opened up some availability, and I was able to step in at the last minute.
It’s a sobering reminder that events which feel far away can hit close to home — shaping not just headlines, but the work and lives of people we know.&lt;/p&gt;
&lt;h3 id=&quot;web-platform-features-at-the-verge-of-interop&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/design-state-of-html/#web-platform-features-at-the-verge-of-interop&quot;&gt;Web Platform Features at the verge of Interop&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A big part of these surveys is “feature questions”: respondents are presented with a series of web platform features,
and asked about their familiarity and sentiment towards them.
At the end, they get a score based on how many they were familiar with that they can share with others,
and browser vendors and standards groups get signal on which upcoming features to prioritize or improve.&lt;/p&gt;
&lt;p&gt;You can see which features were included in last year’s survey &lt;a href=&quot;https://2024.stateofhtml.com/en-US/features/&quot;&gt;here&lt;/a&gt; or in &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://lea.verou.me/blog/2025/design-state-of-html/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; the table below.&lt;/p&gt;
&lt;details class=&quot;with-preview&quot;&gt;
&lt;summary&gt;State of HTML Features&lt;/summary&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;2023&lt;/th&gt;
&lt;th&gt;2024&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/form-elements.html#the-datalist-element&quot;&gt;&lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-autocomplete&quot;&gt;&lt;code&gt;autocomplete&lt;/code&gt; attribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://w3c.github.io/html-media-capture/#dfn-capture&quot;&gt;HTML Media Capture&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/input.html#dom-input-showpicker&quot;&gt;&lt;code&gt;input.showPicker()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://xhr.spec.whatwg.org/#dom-formdata&quot;&gt;FormData API&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://open-ui.org/components/selectmenu/&quot;&gt;&lt;code&gt;&amp;lt;selectlist&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/interaction.html#attr-contenteditable&quot;&gt;&lt;code&gt;contenteditable=&amp;quot;plaintext-only&amp;quot;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element&quot;&gt;&lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/interactive-elements.html#the-details-element&quot;&gt;&lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/whatwg/html/pull/9400&quot;&gt;Exclusive Accordion&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/popover.html#dom-popover&quot;&gt;Popover API&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute&quot;&gt;&lt;code&gt;inert&lt;/code&gt; attribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/urls-and-fetching.html#lazy-loading-attributes&quot;&gt;Lazy loading&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element&quot;&gt;&lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; attributes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://blog.logrocket.com/understanding-css-preload-other-resource-hints/&quot;&gt;Resource Hints&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Security Policy (CSP)&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://wicg.github.io/priority-hints/&quot;&gt;&lt;code&gt;fetchpriority&lt;/code&gt; attribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/urls-and-fetching.html#blocking-attributes&quot;&gt;&lt;code&gt;blocking=&amp;quot;render&amp;quot;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://immersive-web.github.io/model-element/&quot;&gt;&lt;code&gt;&amp;lt;model&amp;gt;&lt;/code&gt; for AR/VR/3D content&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://wicg.github.io/controls-list/#solution-outline&quot;&gt;&lt;code&gt;controlslist&lt;/code&gt; attribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/scripting.html#the-template-element&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Using Custom Elements&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#dom-customelementregistry-define-dev&quot;&gt;Defining Custom Elements&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/WICG/webcomponents/blob/gh-pages/proposals/Scoped-Custom-Element-Registries.md&quot;&gt;Scoped Custom Element Registries&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shadow DOM&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/mfreed7/declarative-shadow-dom&quot;&gt;Declarative Shadow DOM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Named slot assignment&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/scripting.html#dom-slot-assign&quot;&gt;Imperative slot assignment&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#the-elementinternals-interface&quot;&gt;&lt;code&gt;ElementInternals&lt;/code&gt; API&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/WICG/webcomponents/blob/gh-pages/proposals/DOM-Parts.md&quot;&gt;DOM Parts&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/WICG/webcomponents/blob/gh-pages/proposals/html-modules-explainer.md&quot;&gt;HTML Modules&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Landmark elements&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/interaction.html#attr-tabindex&quot;&gt;&lt;code&gt;tabindex&lt;/code&gt; attribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://open-ui.org/components/focusgroup.explainer/&quot;&gt;&lt;code&gt;focusgroup&lt;/code&gt; attribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/grouping-content.html#the-search-element&quot;&gt;&lt;code&gt;&amp;lt;search&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://web.dev/file-system-access/&quot;&gt;File System Access API&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://developer.chrome.com/articles/badging-api/&quot;&gt;Badging API&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://web.dev/web-share/&quot;&gt;Web Share API&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://wicg.github.io/web-app-launch/#launch_handler-member&quot;&gt;Launch Handler API&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://web.dev/file-handling/&quot;&gt;File Handling API&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://wicg.github.io/window-controls-overlay/&quot;&gt;Window Controls Overlay API&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/WICG/isolated-web-apps&quot;&gt;Isolated Web Apps&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://open-ui.org/components/customizableselect/&quot;&gt;Customizable Select&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EditContext&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;caretPositionFromPoint&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clipboard API&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CSS Custom Highlight API&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;setHtmlUnsafe()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;parseHtmlUnsafe()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Intl.Segmenter&lt;/code&gt; API&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/details&gt;
&lt;p&gt;I believe that co-designing these surveys with the community is the best way to avoid blind spots.
While the timeline is tighter than usual this year (&lt;strong&gt;the survey is launching later this month!&lt;/strong&gt;), there is still a little time to ask:&lt;/p&gt;
&lt;div class=&quot;nutshell&quot;&gt;
&lt;p&gt;👉🏼 Which upcoming HTML features or Web APIs are currently on your radar? 👈🏼&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;What does “on your radar” mean? Features you’re excited about and would love to see progress on.&lt;/p&gt;
&lt;p&gt;Why focus on &lt;em&gt;upcoming&lt;/em&gt; features?
The best candidates for these surveys are features that are mature enough to be fleshed out (at least a mature proposal, ideally a spec and &lt;a href=&quot;https://web-platform-tests.org/&quot;&gt;WPT tests&lt;/a&gt;),
but not so mature they have already been implemented in every browser.
These are the features for which a survey such as this can drive &lt;strong&gt;meaningful impact&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If it’s so early for a feature that it’s not yet fleshed out, it’s hard to make progress via initiatives such as &lt;a href=&quot;https://wpt.fyi/interop&quot;&gt;Interop&lt;/a&gt;.
Interest is still useful signal to help prioritize work on fleshing it out, but it’s a bit of a longer game.
And for features that are already implemented everywhere, the only thing that can improve things further is passage of time
— a problem for which I unfortunately have no solution &lt;em&gt;(yet)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Obviously we’re looking at all the usual suspects already,
and initiatives such as &lt;a href=&quot;https://webstatus.dev/&quot;&gt;webstatus.dev&lt;/a&gt;
and &lt;a href=&quot;https://web-platform-dx.github.io/web-features-explorer&quot;&gt;Web platform features explorer&lt;/a&gt; provide a treasure trove of data which makes this task infinitely easier than it used to be.
But this kind of preliminary signal is also useful for filtering and prioritization — to give you a sense, my list of candidate new features to ask about already has 57 items (!).
Given that State of HTML 2024 asked about 49 features, that will need some &lt;em&gt;very&lt;/em&gt; heavy pruning.&lt;/p&gt;
&lt;article class=&quot;note&quot;&gt;
&lt;p&gt;While the title is &lt;em&gt;“State of HTML”&lt;/em&gt;,
anything that wouldn’t fit better in &lt;a href=&quot;https://stateofcss.com/&quot;&gt;State of CSS&lt;/a&gt; or &lt;a href=&quot;https://stateofjs.com/&quot;&gt;State of JS&lt;/a&gt; is fair game.
This includes topics such as accessibility, browser APIs, web components, templating, static site generation, media formats, and more.
This may seem strange at first, but is no different than how the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;HTML specification&lt;/a&gt; itself covers a lot more than just HTML markup.&lt;/p&gt;
&lt;/article&gt;
&lt;p&gt;Any way to reach me works fine.
You can post in the comments here (preferred),
or reply on
&lt;a href=&quot;https://bsky.app/profile/lea.verou.me/post/3lthyr5cafs2x&quot; class=&quot;bluesky&quot; title=&quot;BlueSky post&quot; style=&quot;--color: #1DA1F2&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa-brands fa-bluesky&quot;&gt;&lt;/i&gt; BlueSky&lt;/a&gt;,
&lt;a href=&quot;https://front-end.social/@leaverou/114819155596989731&quot; class=&quot;mastodon&quot; title=&quot;Mastodon post&quot; style=&quot;--color: rgb(99 100 255)&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa-brands fa-mastodon&quot;&gt;&lt;/i&gt; Mastodon&lt;/a&gt;,
&lt;a href=&quot;https://www.threads.com/@leaverou/post/DL275YWRxJ0&quot; class=&quot;threads&quot; title=&quot;Threads post&quot; style=&quot;--color: #000000&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa-brands fa-threads&quot;&gt;&lt;/i&gt; Threads&lt;/a&gt;,
&lt;a href=&quot;https://www.linkedin.com/posts/leaverou_influence-the-state-of-html-2025-survey-activity-7348727971072958464-mXdy&quot; class=&quot;linkedin&quot; title=&quot;LinkedIn post&quot; style=&quot;--color: #0A66C2&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa-brands fa-linkedin-in&quot;&gt;&lt;/i&gt; LinkedIn&lt;/a&gt;,  or
&lt;a href=&quot;https://x.com/LeaVerou/status/1942962080568520938&quot; class=&quot;twitter&quot; title=&quot;Twitter post&quot; style=&quot;--color: #1DA1F2&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa-brands fa-twitter&quot;&gt;&lt;/i&gt; Twitter&lt;/a&gt;.
Make sure to check the other replies first, and 👍 those with features you care about.
Looking forward to your ideas and comments!&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://devographics.com/&quot;&gt;Devographics&lt;/a&gt; is the company behind “State of …” surveys. &lt;a href=&quot;https://lea.verou.me/blog/2025/design-state-of-html/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;As an Easter egg, this widget is just a &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; element with custom CSS.
Inspect it to see how it works!
It works best in Chrome and Safari, as they fully support &lt;a href=&quot;https://caniuse.com/mdn-css_selectors_details-content&quot;&gt;&lt;code&gt;::details-content&lt;/code&gt;&lt;/a&gt;.
Chrome also supports &lt;a href=&quot;https://caniuse.com/mdn-css_types_calc-size&quot;&gt;&lt;code&gt;calc-size()&lt;/code&gt;&lt;/a&gt;, which enables a nice animation, while the interaction in Safari is more abrupt.
In terms of a11y, the summary gets spoken out as a regular &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; element, with “Show more” or “Show less” at the end of its content.
It seems ok-ish to me, but I’d love to hear from those with more expertise in this area. &lt;a href=&quot;https://lea.verou.me/blog/2025/design-state-of-html/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry><entry>
    <title>State of HTML 2025 now open!</title>
    <link href="https://lea.verou.me/blog/2025/state-of-html/"/>
    <updated>2025-07-22T00:00:00Z</updated>
    <id>https://lea.verou.me/blog/2025/state-of-html/</id>
    <content xml:lang="en" type="html">&lt;div class=&quot;nutshell&quot;&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: State of HTML 2025 survey is now open!
&lt;a href=&quot;https://survey.devographics.com/en-US/survey/state-of-html/2025/?source=leaverou&quot; class=&quot;cta&quot; target=&quot;_blank&quot; style=&quot;--icon: var(--icon-ballot-check);&quot;&gt;Take it now&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;figure class=&quot;no-padding&quot; style=&quot;background: #383336&quot;&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2025/design-state-of-html/images/image.png&quot; alt=&quot;State of HTML 2025&quot; /&gt;
&lt;figcaption&gt;
Mamma mia, here we go again!
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;About two weeks ago, I &lt;a href=&quot;https://lea.verou.me/blog/2025/design-state-of-html/&quot;&gt;announced&lt;/a&gt; that I was back leading this year’s State of HTML 2025 survey, after a one year hiatus.
We are grateful for all the suggestions that poured in, they were immensely helpful in shaping the survey.
After two weeks of hard work from a small team spanning three continents, we are finally ready to launch!&lt;/p&gt;
&lt;p&gt;I would urge &lt;strong&gt;each and every one of you that works with the web platform to fill out this survey&lt;/strong&gt;.
It’s a unique opportunity to have your voice heard in the browser vendors’ decision-making process.
Survey results are &lt;strong&gt;used by browsers to prioritize roadmaps&lt;/strong&gt; — the reason Google is funding this.
The results from State of … surveys directly feed into prioritization for next year’s &lt;a href=&quot;https://web.dev/blog/interop-2025&quot;&gt;Interop&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;Time spent thoughtfully filling them out is an investment that can come back to you tenfold
in the form of seeing features you care about implemented, browser incompatibilities being prioritized, and gaps in the platform being addressed.
In addition to browsers, several standards groups are also using the results for prioritization and decision-making.&lt;/p&gt;
&lt;p&gt;Additionally, you get to learn about new and upcoming features you may have missed,
and get a personalized, sharable score at the end to see how you compare to other respondents!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://survey.devographics.com/en-US/survey/state-of-html/2025/?source=leaverou&quot; class=&quot;cta large&quot; target=&quot;_blank&quot; style=&quot;--icon: var(--icon-ballot-check);&quot;&gt;Take State of HTML 2025 Survey&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
&lt;p&gt;While the survey will be open for about a month,
responses entered &lt;strong&gt;within the first two weeks (until end of July)&lt;/strong&gt; will have a much higher impact on the Web,
as preliminary data will be directly used to inform Interop 2026.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;acknowledgements&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/state-of-html/#acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would like to thank the following people for their help in fleshing out the survey:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://sachagreif.com/&quot;&gt;Sacha Greif&lt;/a&gt; for actually implementing the survey and tirelessly discussing my ideas&lt;/li&gt;
&lt;li&gt;My apprentice &lt;a href=&quot;https://d12n.me/&quot;&gt;Dmitry Sharabin&lt;/a&gt; for various fixes and improvements&lt;/li&gt;
&lt;li&gt;My Google contacts, &lt;a href=&quot;https://foolip.org/&quot;&gt;Philip Jägenstedt&lt;/a&gt; and &lt;a href=&quot;https://bsky.app/profile/atopal.bsky.social&quot;&gt;Kadir Topal&lt;/a&gt; for making my involvement possible&lt;/li&gt;
&lt;li&gt;And everyone who responded to my earlier &lt;a href=&quot;https://lea.verou.me/blog/2025/design-state-of-html/&quot;&gt;call for suggestions&lt;/a&gt; — these were invaluable in shaping the survey, and I wish I could include them all!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;faq&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/state-of-html/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 class=&quot;icon-before&quot; style=&quot;--icon: var(--icon-sparkles);&quot; id=&quot;what%E2%80%99s-new-this-year%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/state-of-html/#what%E2%80%99s-new-this-year%3F&quot;&gt;What’s new this year?&lt;/a&gt;&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;We spent a lot of time thinking about which features we are asking about and why.
As a result, we &lt;strong&gt;added 35 new features, and removed 18 existing ones&lt;/strong&gt; to make room.
This is probably one of the hardest parts of the process, as we had to make some tough decisions.&lt;/p&gt;
&lt;p&gt;We are also using the Web Components section to pilot a new format for pain points questions,
consisting of a multiple choice question with common pain points,
followed by the usual free form text list:&lt;/p&gt;
&lt;figure class=&quot;center&quot; style=&quot;max-width: 40em&quot;&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2025/state-of-html/images/cpps.png&quot; alt=&quot;Screenshot showing the new pain points question format&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;While this increases the number of questions,
we are hoping it will &lt;em&gt;reduce&lt;/em&gt; survey fatigue by allowing participants to skip the freeform question more frequently (or spend less time on it) if most of their pain points have already been covered by the multiple choice question.&lt;/p&gt;
&lt;p&gt;Last but not least, we introduced browser support icons for each feature, per popular request:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2025/state-of-html/images/baseline-icons.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 class=&quot;icon-before&quot; style=&quot;--icon: var(--icon-pen-to-square);&quot; id=&quot;can-i-edit-my-responses%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/state-of-html/#can-i-edit-my-responses%3F&quot;&gt;Can I edit my responses?&lt;/a&gt;&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;&lt;strong&gt;Absolutely!&lt;/strong&gt; Do not worry about filling it out perfectly in one go.
If you create an account, you can edit your responses for the whole period the survey is open, and even fill it out across multiple devices,
e.g. start on your phone, then fill out some on your desktop, etc.
Even if you’re filling it out anonymously, you can still edit responses on your device for some time,
so you can have it open in a browser tab and revisit it periodically.&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 class=&quot;icon-before&quot; style=&quot;--icon: var(--icon-js);&quot; id=&quot;why-are-there-js-questions-in-an-html-survey%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/state-of-html/#why-are-there-js-questions-in-an-html-survey%3F&quot;&gt;Why are there JS questions in an HTML survey?&lt;/a&gt;&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;This question comes up a lot every year.&lt;/p&gt;
&lt;p&gt;For the same reason there are JS APIs in the &lt;a href=&quot;https://html.spec.whatwg.org/&quot;&gt;HTML standard&lt;/a&gt;:
many JS APIs are intrinsically related to HTML.
We mainly included JS APIs that are in some way related to HTML, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APIs used to manipulate HTML dynamically (DOM, interactivity, etc.)&lt;/li&gt;
&lt;li&gt;Web Components APIs, used to create custom HTML elements&lt;/li&gt;
&lt;li&gt;PWA features, including APIs used to access underlying system capabilities (OS capabilities, device capabilities, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only two exceptions to this are two &lt;code&gt;Intl&lt;/code&gt; APIs,
which were mainly included because we wanted to get participants thinking about any localization/internationalization pain points they may have.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However, if you don’t write any JS, we absolutely still want to hear from you!&lt;/strong&gt;
In fact, I would encourage you &lt;strong&gt;even more strongly&lt;/strong&gt; to fill out the survey,
as people who don’t write JS are very underrepresented in these surveys.
&lt;strong&gt;All questions are optional&lt;/strong&gt;, so you can just skip any JS-related questions.&lt;/p&gt;
&lt;p&gt;There is also a question at the end, where you can select that you only write HTML/CSS:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2023/state-of-html-2023/images/html-js-balance.png&quot; alt=&quot;Question about HTML/CSS and JS balance&quot; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 class=&quot;icon-before&quot; style=&quot;--icon: var(--icon-flask);&quot; id=&quot;why-are-some-features-included-that-are-early-stage-proposals-with-no-browser-support%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/state-of-html/#why-are-some-features-included-that-are-early-stage-proposals-with-no-browser-support%3F&quot;&gt;Why are some features included that are early stage proposals with no browser support?&lt;/a&gt;&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;While proposals with no browser support are not good candidates for immediate prioritization by browsers,
their &lt;a href=&quot;https://lea.verou.me/blog/2025/2024/context-chips/&quot;&gt;context chips&lt;/a&gt; give browser vendors and standards groups invaluable insight into what matters to developers,
which &lt;em&gt;also&lt;/em&gt; drives prioritization decisions.&lt;/p&gt;
&lt;p&gt;However, we heard you loud and clear: when mature and early stage features are mixed together, you felt bait-and-switched.
So this year, we are including icons to summarize browser support of each feature we ask about:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lea.verou.me/blog/2025/state-of-html/images/baseline-icons.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We are hoping this will also help prevent cases where participants confuse a new feature they have never heard of, with a more established feature they are familiar with.&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 class=&quot;icon-before&quot; style=&quot;--icon: var(--icon-language);&quot; id=&quot;is-the-survey-only-available-in-english%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/state-of-html/#is-the-survey-only-available-in-english%3F&quot;&gt;Is the survey only available in English?&lt;/a&gt;&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;Absolutely not! Localization has been an integral part of these surveys since the beginning.
Fun fact: None of the people working on these surveys is a native English speaker.&lt;/p&gt;
&lt;figure class=&quot;center&quot;&gt;
&lt;a href=&quot;https://lea.verou.me/blog/2025/state-of-html/images/languages-2024.png&quot; target=&quot;_blank&quot; style=&quot;display: flex; justify-content: center;&quot;&gt;
&lt;img src=&quot;https://lea.verou.me/blog/2025/state-of-html/images/languages-2024.png&quot; alt=&quot;Screenshot showing dozens of languages and their contributors&quot; style=&quot;height: 15em&quot; /&gt;
&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;a href=&quot;https://survey.devographics.com/en-US/survey/state-of-html/2024&quot;&gt;State of HTML 2024&lt;/a&gt; had translations for 31 languages.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;However, since translations are a community effort, they are not necessarily complete, especially in the beginning.
If you are a native speaker of a language that is not yet complete, please consider &lt;a href=&quot;https://github.com/Devographics/locale-en-US#readme&quot;&gt;helping out&lt;/a&gt;!&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 class=&quot;icon-before&quot; style=&quot;--icon: var(--icon-bug);&quot; id=&quot;i-found-a-bug%2C-what-should-i-do%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://lea.verou.me/blog/2025/state-of-html/#i-found-a-bug%2C-what-should-i-do%3F&quot;&gt;I found a bug, what should I do?&lt;/a&gt;&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;Please file an issue so we can fix it!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Devographics/surveys/issues/new&quot; class=&quot;icon-after&quot; style=&quot;--icon: var(--icon-arrow-up-right-from-square);&quot;&gt;File content issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Devographics/Monorepo/issues/new&quot; class=&quot;icon-after&quot; style=&quot;--icon: var(--icon-arrow-up-right-from-square);&quot;&gt;File technical issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
</content>
  </entry>
</feed>
